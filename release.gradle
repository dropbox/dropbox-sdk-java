apply plugin: 'java'
apply plugin: 'java-library-distribution'
apply plugin: 'signing'
apply plugin: 'maven-publish'

version = "5.0.0-SNAPSHOT"
def isSnapshot = project.version.contains('SNAPSHOT')

task releaseTest() {
    dependsOn ':proguard:proguardTest'
    dependsOn test
    dependsOn integrationTest
}

signing {
    required {
        // don't sign for installing in local maven
        gradle.taskGraph.hasTask("uploadArchives") && !project.version.contains("SNAPSHOT")
    }
    sign configurations.archives
}

// Remember to upload binary with releases on GitHub. Some 3rd party developers still rely on
// manually downloading and managing their dependencies.
//distributions {
//    main {
//        baseName = project.archivesBaseName
//        contents {
//            // Add source JARs
//            from { sourcesJar.outputs.getFiles() }
//            from { 'ChangeLog.txt' }
//        }
//    }
//}

/**
 * Verify our SDK version is set correctly in our artifact before uploading. This is to protect
 * against any silly mistakes.
 */
def verifySdkVersion(deployment) {
    deployment.mainArtifact.file.withInputStream { stream ->
        def jar = new java.util.jar.JarInputStream(stream)
        def entry = jar.getNextJarEntry()
        while (entry != null) {
            if (entry.getName().equals("com/dropbox/core/sdk-version.txt")) {
                def version = jar.text.trim();
                if (!(version ==~ /\d\.\d\.\d(-SNAPSHOT)?+/)) {
                    throw new GradleException("SDK version not in semantic versioning format: " + version +
                                              ". Try running './gradlew clean' before uploading archives.");
                }
                return
            }
            entry = jar.getNextJarEntry()
        }

        throw new GradleException("Could not find sdk-version.txt in artifact: " + deployment.mainArtifact.file.absolutePath);
    }
}

//uploadArchives {
//    repositories {
//        mavenDeployer {
//            beforeDeployment { deployment ->
//                verifySdkVersion(deployment)
//                signing.signPom(deployment)
//            }
//
//            pom = project.basePom
//
//            repository(url: version.endsWith('SNAPSHOT') ? SONATYPE_SNAPSHOT_URL : SONATYPE_STAGING_URL) {
//                authentication(
//                    userName: getUsername(),
//                    password: getPassword()
//                )
//            }
//        }
//    }
//}


java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

publishing {
    publications {
        maven(MavenPublication) {
            pom {
                artifactId = 'dropbox-core-sdk'
                groupId = 'com.dropbox.core'
                name = 'Official Dropbox Java SDK'
                description = 'Official Java client library for the Dropbox API.'
                url 'https://www.dropbox.com/developers/core'

                scm {
                    connection 'scm:git:git@github.com:dropbox/dropbox-sdk-java.git'
                    developerConnection 'scm:git:git@github.com:dropbox/dropbox-sdk-java.git'
                    url 'https://github.com/dropbox/dropbox-sdk-java'
                }
                licenses {
                    license {
                        name 'MIT'
                        url 'http://opensource.org/licenses/MIT'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'dropbox-api-team'
                        name 'Dropbox API Team'
                        email 'api-support@dropbox.com'
                        organization = 'Dropbox'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def stagingRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            url isSnapshot ? snapshotRepoUrl : stagingRepoUrl
            credentials {
                username = rootProject.findProperty('ossrhUsername') ?: ''
                password = rootProject.findProperty('ossrhPassword') ?: ''
            }
        }
    }
}