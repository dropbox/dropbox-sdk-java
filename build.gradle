import org.gradle.internal.os.OperatingSystem

apply plugin: 'java-library'
apply plugin: 'com.github.blindpirate.osgi'
apply plugin: 'com.github.ben-manes.versions' // dependencyUpdates task


sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

ext {
    mavenName = 'Official Dropbox Java SDK'
    generatedSources = file("$buildDir/generated-sources")
    generatedResources = file("$buildDir/generated-resources")
    authInfoPropertyName = 'com.dropbox.test.authInfoFile'
}

buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.27.0'
        classpath files('gradle/dropbox-pem-converter-plugin')
        classpath 'gradle.plugin.com.github.blindpirate:gradle-legacy-osgi-plugin:0.0.6'
        classpath "com.vanniktech:gradle-maven-publish-plugin:0.18.0"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Important: Jackson 2.8+ will be free to use JDK7 features and no longer guarantees JDK6
    //            compatibility
    api 'com.fasterxml.jackson.core:jackson-core:2.7.9'

    // DO NOT flip this back to implementation, we should split the android code to its own module in the future
    compileOnly 'com.google.android:android:4.1.1.4'
    compileOnly 'javax.servlet:servlet-api:2.5'
    compileOnly 'com.squareup.okhttp:okhttp:2.7.5'  // support both v2 and v3 to avoid
    compileOnly 'com.squareup.okhttp3:okhttp:4.0.0' // method count bloat
    compileOnly 'com.google.appengine:appengine-api-1.0-sdk:1.9.38'

    testImplementation 'org.testng:testng:6.9.10'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation 'org.openjdk.jmh:jmh-core:1.12'
    testImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.12'
    testImplementation 'com.google.appengine:appengine-api-1.0-sdk:1.9.38'
    testImplementation 'com.google.appengine:appengine-api-labs:1.9.38'
    testImplementation 'com.google.appengine:appengine-api-stubs:1.9.38'
    testImplementation 'com.google.appengine:appengine-testing:1.9.38'
    testImplementation 'com.squareup.okhttp:okhttp:2.7.5'
    testImplementation 'com.squareup.okhttp3:okhttp:4.0.0'
    testImplementation 'com.google.guava:guava:19.0'
    testImplementation "com.google.truth:truth:1.1.2"
}

configurations {
    withoutOsgi.extendsFrom api
}

processResources { task ->
    filesMatching('**/*.crt') { fcd ->
        def inputstream = fcd.open()
        def certDatas = com.dropbox.maven.pem_converter.PemLoader.load(
                new InputStreamReader(inputstream, "UTF-8")
        )
        inputstream.close()

        def crtPath = fcd.getPath()
        def rawPath = crtPath.substring(0, crtPath.length() - 4) + ".raw"
        def rawFile = new File(task.getDestinationDir(), rawPath);
        rawFile.getParentFile().mkdirs();
        def out = new DataOutputStream(new FileOutputStream(rawFile))
        com.dropbox.maven.pem_converter.RawLoader.store(certDatas, out)
        out.close()

        fcd.exclude()
    }
}

compileJava {
    options.compilerArgs << '-Xlint:all'
    options.warnings = true
    options.deprecation = true
    options.encoding = 'utf-8'
}

test {
    useTestNG()

    // TestNG specific options
    options.parallel 'methods'
    options.threadCount 4

    // exclude integration tests
    exclude '**/IT*.class'
    exclude '**/*IT.class'
    exclude '**/*IT$*.class'

    testLogging {
        showStandardStreams = true // System.out.println
    }
}

def getAuthInfoFile() {
    if (!project.hasProperty(authInfoPropertyName)) {
        throw new GradleException('' +
                "These tests require the \"${authInfoPropertyName}\" " +
                "project property be set to point to an authorization JSON file " +
                "(e.g. ./gradlew integrationTest -P${authInfoPropertyName}=auth.json)."
        )
    }

    def authInfoFile = file(project.property(authInfoPropertyName))
    if (!authInfoFile.exists()) {
        throw new GradleException('' +
                "The test auth info file does not exist: \"${authInfoFile.absolutePath}\". " +
                "Please ensure the \"${authInfoPropertyName}\" project property is set to point to " +
                "the correct authorization JSON file."
        )
    }
    return authInfoFile
}

task integrationTest(type: Test) {
    description 'Runs integration tests against Production or Dev servers.'

    useTestNG()

    // only select integration tests (similar to maven-failsafe-plugin rules)
    include '**/IT*.class'
    include '**/*IT.class'
    include '**/*IT$*.class'

    exclude '**/*V1IT.class'
    exclude '**/*V1IT$*.class'

    testLogging {
        showStandardStreams = true // System.out.println
    }

    reports {
        html {
            destination = file("${buildDir}/reports/integration-tests")
        }
    }

    ext {
        authInfoPropertyName = 'com.dropbox.test.authInfoFile'
        httpRequestorPropertyName = 'com.dropbox.test.httpRequestor'
    }

    doFirst {
        systemProperty authInfoPropertyName, getAuthInfoFile().absolutePath
        if (project.hasProperty(httpRequestorPropertyName)) {
            systemProperty httpRequestorPropertyName, project.property(httpRequestorPropertyName)
        }
    }

    // Will ensure that integration tests are re-run every time because they are not hermetic
    outputs.upToDateWhen { false }
}

javadoc {
    title "${project.mavenName} ${project.version} API"
    failOnError true

    // JDK 8's javadoc has an on-by-default lint called "missing", which requires that everything
    // be documented. Disable this lint because we intentionally don't document some things.
    //
    // NOTE: ugly hack to set our doclint settings due to strange handling of string options by the
    // javadoc task.
    if (JavaVersion.current().isJava8Compatible()) {
        options.addBooleanOption "Xdoclint:all,-missing", true
    }
    options.addStringOption "link", "http://docs.oracle.com/javase/6/docs/api/"
}

jar {
    // OsgiManifest since we import 'osgi' plugin
    manifest {
        name project.name
        description project.description
        license 'http://opensource.org/licenses/MIT'
        instruction 'Import-Package',
                'android.*;resolution:=optional',
                'com.google.appengine.*;resolution:=optional',
                'com.squareup.okhttp;resolution:=optional',
                'okhttp3;resolution:=optional',
                'okio;resolution:=optional',
                '*'

        def noeeProp = 'osgi.bnd.noee'
        def noee = providers.gradleProperty(noeeProp).forUseAtConfigurationTime().getOrElse(
                providers.systemProperty(noeeProp).forUseAtConfigurationTime().getOrElse('false')
        )
        instruction '-noee', noee
    }
}

task jarWithoutOsgi(type: Jar, dependsOn: classes) {
    classifier 'withoutOsgi'
    from sourceSets.main.output
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
    withoutOsgi jarWithoutOsgi
}


// To avoid cross-compilation surprises, add JDK6 libs to the boot classpath. This prevents issues
// where we depend on a JDK7 interface that did not exist in JDK6.
if (project.sourceCompatibility == JavaVersion.VERSION_1_6) {
    if (System.env.JDK6_HOME == null) {
        logger.warn("Set JDK6_HOME environment to disable boot classpath warnings.")
    } else {
        def jdkHome = System.env.JDK6_HOME
        def sep = File.pathSeparator

        logger.info("Setting JVM boot classpath to use ${jdkHome}")
        project.tasks.withType(JavaCompile) {
            def jdkLibs = "${jdkHome}/jre/lib"
            def runtimeClasses = "rt.jar"
            if (OperatingSystem.current().isMacOsX()) {
                jdkLibs = "${jdkHome}/Classes"
                runtimeClasses = "classes.jar"
            }
            options.bootClasspath = "${jdkLibs}/${runtimeClasses}"
            options.bootClasspath += "${sep}${jdkLibs}/jsse.jar"
            options.bootClasspath += "${sep}${jdkLibs}/jce.jar"
        }
    }
}

// reject dependencyUpdates candidates with alpha or beta in their names:
dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

/* BEGIN PRIVATE REPO ONLY */
apply from: 'stone.gradle'

apply plugin: 'com.vanniktech.maven.publish'

/* END PRIVATE REPO ONLY */

allprojects {
    plugins.withId("com.vanniktech.maven.publish") {
        mavenPublish {
            sonatypeHost = "S01"
        }
    }
}