/*
 * Copyright (c) 2009-2014 Dropbox, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.dropbox.core.android;

import android.content.*;
import android.net.Uri;
import android.os.Bundle;
import android.os.Parcel;
import android.util.Base64;

/**
 * The OwpDbxOfficialAppConnector is an extension of DbxOfficialAppConnector that exposes additional
 * functionality to OpenWith Partners Before making use of this class, please review OpenWith
 * behavior documentation.
 * <p>
 * You won't need to use this unless you are partners who registered your app with openwith feature in our official
 * Dropbox app.
 * </p>
 */
public class OwpDbxOfficialAppConnector extends DbxOfficialAppConnector {

    //OpenWith intent definitions

    // from Dropbox actions
    public static final String ACTION_DBXC_EDIT = "com.dropbox.android.intent.action.DBXC_EDIT";
    public static final String ACTION_DBXC_VIEW = "com.dropbox.android.intent.action.DBXC_VIEW";

    // to Dropbox actions
    public static final String ACTION_SHOW_DROPBOX_PREVIEW = "com.dropbox.android.intent.action.SHOW_PREVIEW";

    //extras (used either dirction)
    public static final String EXTRA_DROPBOX_PATH = "com.dropbox.android.intent.extra.DROPBOX_PATH";
    public static final String EXTRA_DROPBOX_READ_ONLY = "com.dropbox.android.intent.extra.READ_ONLY";
    public static final String EXTRA_DROPBOX_REV = "com.dropbox.android.intent.extra.DROPBOX_REV";
    public static final String EXTRA_DROPBOX_SESSION_ID = "com.dropbox.android.intent.extra.SESSION_ID";

    /**
     * Construct DbxOfficialAppConnector
     *
     * @param uid The extra that goes in an intent when returning from Dropbox auth to
     * provide the user's Dropbox UID.
     * @throws DropboxUidNotInitializedException when <code>uid</code> is empty
     */
    public OwpDbxOfficialAppConnector(String uid) throws DropboxUidNotInitializedException {
        super(uid);
    }

    /**
     * Display the DropboxApp's preview of file located at path This function should only be called
     * if file was opened through DropboxAPI. If path refers to a directory (as defined by having a '/' at end,
     * will show Dropbox file tree.
     *
     * @param path    path of file in authorized user's Dropbox to preview
     * @param lastRev The revision of file user is seeing (as returned by
     *                DropboxAPI.getFile/DropboxAPI.putFile)
     * @return Intent that when passed into startActivity() displays Dropbox preview Returns null if
     * DropboxApp is not installed
     */
    public Intent getPreviewFileIntent(Context context, String path, String lastRev) {
        // TODO(jiuyangzhao): Assert path is valid
        Intent previewIntent = new Intent(ACTION_SHOW_DROPBOX_PREVIEW);
        addExtrasToIntent(context, previewIntent);
        previewIntent.putExtra(EXTRA_DROPBOX_PATH, path);
        previewIntent.putExtra(EXTRA_DROPBOX_REV, lastRev);

        if (getDropboxAppPackage(context, previewIntent) == null) {
            return null;
        }
        return previewIntent;
    }

    /**
     * Decodes a Google Play Campaign attribution utm_content field that was generated by Dropbox
     * OpenWith flow. This should only be called if utm_source=”dropbox_android_openwith”. See
     * https://developers.google.com/analytics/devguides/collection/android/v4/campaign for more
     * information about how to use Play Store attribution.
     *
     * @param UtmContent GooglePlay utm content that has been urldecoded
     * @return Intent OpenWith intent that, when launched, will open the file the user requested to
     * edit. Caller MUST convert intent into an explicit intent it can handle.
     * @throws DropboxParseException if cannot produce Intent from UtmContent
     */

    public static Intent generateOpenWithIntentFromUtmContent(String UtmContent)
        throws DropboxParseException {
        // Utm content is encoded a base64-encoded marshalled bundle
        // _action is extracted and becomes intent's action
        // _uri is extracted and becomes intent's data uri
        // All other items in bundle transferred to returned intent's extras

        byte[] b;
        try {
            b = Base64.decode(UtmContent, 0);
        } catch (IllegalArgumentException ex) {
            throw new DropboxParseException("UtmContent was not base64 encoded: " + ex.getMessage());
        }

        final Parcel parcel = Parcel.obtain();
        parcel.unmarshall(b, 0, b.length);
        parcel.setDataPosition(0);
        Bundle bundle = parcel.readBundle();
        parcel.recycle();

        if (bundle == null) {
            throw new DropboxParseException("Could not extract bundle from UtmContent");
        }

        String action = bundle.getString("_action");
        if (action == null) {
            throw new DropboxParseException("_action was not present in bundle");
        }
        bundle.remove("_action");

        Uri uri = bundle.getParcelable("_uri");
        if (uri == null) {
            throw new DropboxParseException("_uri was not present in bundle");
        }
        bundle.remove("_uri");

        String type = bundle.getString("_type");
        if (type == null) {
            throw new DropboxParseException("_type was not present in bundle");
        }
        bundle.remove("_type");

        Intent openWithIntent = new Intent(action);
        openWithIntent.setDataAndType(uri, type);
        openWithIntent.putExtras(bundle);

        return openWithIntent;
    }
}
