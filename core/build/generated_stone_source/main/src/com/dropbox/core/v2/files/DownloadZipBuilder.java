/* DO NOT EDIT */
/* This file was generated by Stone */

package com.dropbox.core.v2.files;

import com.dropbox.core.DbxDownloader;
import com.dropbox.core.DbxException;
import com.dropbox.core.v2.DbxDownloadStyleBuilder;

/**
 * The request builder returned by {@link
 * DbxUserFilesRequests#downloadZipBuilder}.
 *
 * <p> Use this class to set optional request parameters and complete the
 * request. </p>
 */
public class DownloadZipBuilder extends DbxDownloadStyleBuilder<DownloadZipResult> {
    private final DbxUserFilesRequests _client;
    private final String path;

    /**
     * Creates a new instance of this builder.
     *
     * @param path  The path of the folder to download. Must match pattern
     *     "{@code (/(.|[\\r\\n])*|id:.*)|(rev:[0-9a-f]{9,})|(ns:[0-9]+(/.*)?)}"
     *     and not be {@code null}.
     * @param _client  Dropbox namespace-specific client used to issue files
     *     requests.
     *
     * @return instsance of this builder
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    DownloadZipBuilder(DbxUserFilesRequests _client, String path) {
        if (_client == null) {
            throw new NullPointerException("_client");
        }
        this._client = _client;
        this.path = path;
    }

    @Override
    public DbxDownloader<DownloadZipResult> start() throws DownloadZipErrorException, DbxException {
        DownloadZipArg arg_ = new DownloadZipArg(path);
        return _client.downloadZip(arg_, getHeaders());
    }
}
