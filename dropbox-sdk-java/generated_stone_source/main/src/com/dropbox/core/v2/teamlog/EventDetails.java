/* DO NOT EDIT */
/* This file was generated from team_log_generated.stone */

package com.dropbox.core.v2.teamlog;

import com.dropbox.core.stone.StoneDeserializerLogger;
import com.dropbox.core.stone.StoneSerializers;
import com.dropbox.core.stone.UnionSerializer;

import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;

import java.io.IOException;
import java.util.Arrays;

/**
 * Additional fields depending on the event type.
 *
 * <p> This class is an open tagged union.  Tagged unions instances are always
 * associated to a specific tag.  This means only one of the {@code isAbc()}
 * methods will return {@code true}. You can use {@link #tag()} to determine the
 * tag associated with this instance. </p>
 *
 * <p> Open unions may be extended in the future with additional tags. If a new
 * tag is introduced that this SDK does not recognized, the {@link #OTHER} value
 * will be used. </p>
 */
public final class EventDetails {
    // union team_log.EventDetails (team_log_generated.stone)

    /**
     * Discriminating tag type for {@link EventDetails}.
     */
    public enum Tag {
        ADMIN_ALERTING_ALERT_STATE_CHANGED_DETAILS, // AdminAlertingAlertStateChangedDetails
        ADMIN_ALERTING_CHANGED_ALERT_CONFIG_DETAILS, // AdminAlertingChangedAlertConfigDetails
        ADMIN_ALERTING_TRIGGERED_ALERT_DETAILS, // AdminAlertingTriggeredAlertDetails
        APP_BLOCKED_BY_PERMISSIONS_DETAILS, // AppBlockedByPermissionsDetails
        APP_LINK_TEAM_DETAILS, // AppLinkTeamDetails
        APP_LINK_USER_DETAILS, // AppLinkUserDetails
        APP_UNLINK_TEAM_DETAILS, // AppUnlinkTeamDetails
        APP_UNLINK_USER_DETAILS, // AppUnlinkUserDetails
        INTEGRATION_CONNECTED_DETAILS, // IntegrationConnectedDetails
        INTEGRATION_DISCONNECTED_DETAILS, // IntegrationDisconnectedDetails
        FILE_ADD_COMMENT_DETAILS, // FileAddCommentDetails
        FILE_CHANGE_COMMENT_SUBSCRIPTION_DETAILS, // FileChangeCommentSubscriptionDetails
        FILE_DELETE_COMMENT_DETAILS, // FileDeleteCommentDetails
        FILE_EDIT_COMMENT_DETAILS, // FileEditCommentDetails
        FILE_LIKE_COMMENT_DETAILS, // FileLikeCommentDetails
        FILE_RESOLVE_COMMENT_DETAILS, // FileResolveCommentDetails
        FILE_UNLIKE_COMMENT_DETAILS, // FileUnlikeCommentDetails
        FILE_UNRESOLVE_COMMENT_DETAILS, // FileUnresolveCommentDetails
        GOVERNANCE_POLICY_ADD_FOLDERS_DETAILS, // GovernancePolicyAddFoldersDetails
        GOVERNANCE_POLICY_ADD_FOLDER_FAILED_DETAILS, // GovernancePolicyAddFolderFailedDetails
        GOVERNANCE_POLICY_CONTENT_DISPOSED_DETAILS, // GovernancePolicyContentDisposedDetails
        GOVERNANCE_POLICY_CREATE_DETAILS, // GovernancePolicyCreateDetails
        GOVERNANCE_POLICY_DELETE_DETAILS, // GovernancePolicyDeleteDetails
        GOVERNANCE_POLICY_EDIT_DETAILS_DETAILS, // GovernancePolicyEditDetailsDetails
        GOVERNANCE_POLICY_EDIT_DURATION_DETAILS, // GovernancePolicyEditDurationDetails
        GOVERNANCE_POLICY_EXPORT_CREATED_DETAILS, // GovernancePolicyExportCreatedDetails
        GOVERNANCE_POLICY_EXPORT_REMOVED_DETAILS, // GovernancePolicyExportRemovedDetails
        GOVERNANCE_POLICY_REMOVE_FOLDERS_DETAILS, // GovernancePolicyRemoveFoldersDetails
        GOVERNANCE_POLICY_REPORT_CREATED_DETAILS, // GovernancePolicyReportCreatedDetails
        GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED_DETAILS, // GovernancePolicyZipPartDownloadedDetails
        LEGAL_HOLDS_ACTIVATE_A_HOLD_DETAILS, // LegalHoldsActivateAHoldDetails
        LEGAL_HOLDS_ADD_MEMBERS_DETAILS, // LegalHoldsAddMembersDetails
        LEGAL_HOLDS_CHANGE_HOLD_DETAILS_DETAILS, // LegalHoldsChangeHoldDetailsDetails
        LEGAL_HOLDS_CHANGE_HOLD_NAME_DETAILS, // LegalHoldsChangeHoldNameDetails
        LEGAL_HOLDS_EXPORT_A_HOLD_DETAILS, // LegalHoldsExportAHoldDetails
        LEGAL_HOLDS_EXPORT_CANCELLED_DETAILS, // LegalHoldsExportCancelledDetails
        LEGAL_HOLDS_EXPORT_DOWNLOADED_DETAILS, // LegalHoldsExportDownloadedDetails
        LEGAL_HOLDS_EXPORT_REMOVED_DETAILS, // LegalHoldsExportRemovedDetails
        LEGAL_HOLDS_RELEASE_A_HOLD_DETAILS, // LegalHoldsReleaseAHoldDetails
        LEGAL_HOLDS_REMOVE_MEMBERS_DETAILS, // LegalHoldsRemoveMembersDetails
        LEGAL_HOLDS_REPORT_A_HOLD_DETAILS, // LegalHoldsReportAHoldDetails
        DEVICE_CHANGE_IP_DESKTOP_DETAILS, // DeviceChangeIpDesktopDetails
        DEVICE_CHANGE_IP_MOBILE_DETAILS, // DeviceChangeIpMobileDetails
        DEVICE_CHANGE_IP_WEB_DETAILS, // DeviceChangeIpWebDetails
        DEVICE_DELETE_ON_UNLINK_FAIL_DETAILS, // DeviceDeleteOnUnlinkFailDetails
        DEVICE_DELETE_ON_UNLINK_SUCCESS_DETAILS, // DeviceDeleteOnUnlinkSuccessDetails
        DEVICE_LINK_FAIL_DETAILS, // DeviceLinkFailDetails
        DEVICE_LINK_SUCCESS_DETAILS, // DeviceLinkSuccessDetails
        DEVICE_MANAGEMENT_DISABLED_DETAILS, // DeviceManagementDisabledDetails
        DEVICE_MANAGEMENT_ENABLED_DETAILS, // DeviceManagementEnabledDetails
        DEVICE_SYNC_BACKUP_STATUS_CHANGED_DETAILS, // DeviceSyncBackupStatusChangedDetails
        DEVICE_UNLINK_DETAILS, // DeviceUnlinkDetails
        DROPBOX_PASSWORDS_EXPORTED_DETAILS, // DropboxPasswordsExportedDetails
        DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED_DETAILS, // DropboxPasswordsNewDeviceEnrolledDetails
        EMM_REFRESH_AUTH_TOKEN_DETAILS, // EmmRefreshAuthTokenDetails
        EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED_DETAILS, // ExternalDriveBackupEligibilityStatusCheckedDetails
        EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED_DETAILS, // ExternalDriveBackupStatusChangedDetails
        ACCOUNT_CAPTURE_CHANGE_AVAILABILITY_DETAILS, // AccountCaptureChangeAvailabilityDetails
        ACCOUNT_CAPTURE_MIGRATE_ACCOUNT_DETAILS, // AccountCaptureMigrateAccountDetails
        ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT_DETAILS, // AccountCaptureNotificationEmailsSentDetails
        ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT_DETAILS, // AccountCaptureRelinquishAccountDetails
        DISABLED_DOMAIN_INVITES_DETAILS, // DisabledDomainInvitesDetails
        DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM_DETAILS, // DomainInvitesApproveRequestToJoinTeamDetails
        DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM_DETAILS, // DomainInvitesDeclineRequestToJoinTeamDetails
        DOMAIN_INVITES_EMAIL_EXISTING_USERS_DETAILS, // DomainInvitesEmailExistingUsersDetails
        DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM_DETAILS, // DomainInvitesRequestToJoinTeamDetails
        DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO_DETAILS, // DomainInvitesSetInviteNewUserPrefToNoDetails
        DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES_DETAILS, // DomainInvitesSetInviteNewUserPrefToYesDetails
        DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL_DETAILS, // DomainVerificationAddDomainFailDetails
        DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS_DETAILS, // DomainVerificationAddDomainSuccessDetails
        DOMAIN_VERIFICATION_REMOVE_DOMAIN_DETAILS, // DomainVerificationRemoveDomainDetails
        ENABLED_DOMAIN_INVITES_DETAILS, // EnabledDomainInvitesDetails
        APPLY_NAMING_CONVENTION_DETAILS, // ApplyNamingConventionDetails
        CREATE_FOLDER_DETAILS, // CreateFolderDetails
        FILE_ADD_DETAILS, // FileAddDetails
        FILE_COPY_DETAILS, // FileCopyDetails
        FILE_DELETE_DETAILS, // FileDeleteDetails
        FILE_DOWNLOAD_DETAILS, // FileDownloadDetails
        FILE_EDIT_DETAILS, // FileEditDetails
        FILE_GET_COPY_REFERENCE_DETAILS, // FileGetCopyReferenceDetails
        FILE_LOCKING_LOCK_STATUS_CHANGED_DETAILS, // FileLockingLockStatusChangedDetails
        FILE_MOVE_DETAILS, // FileMoveDetails
        FILE_PERMANENTLY_DELETE_DETAILS, // FilePermanentlyDeleteDetails
        FILE_PREVIEW_DETAILS, // FilePreviewDetails
        FILE_RENAME_DETAILS, // FileRenameDetails
        FILE_RESTORE_DETAILS, // FileRestoreDetails
        FILE_REVERT_DETAILS, // FileRevertDetails
        FILE_ROLLBACK_CHANGES_DETAILS, // FileRollbackChangesDetails
        FILE_SAVE_COPY_REFERENCE_DETAILS, // FileSaveCopyReferenceDetails
        FOLDER_OVERVIEW_DESCRIPTION_CHANGED_DETAILS, // FolderOverviewDescriptionChangedDetails
        FOLDER_OVERVIEW_ITEM_PINNED_DETAILS, // FolderOverviewItemPinnedDetails
        FOLDER_OVERVIEW_ITEM_UNPINNED_DETAILS, // FolderOverviewItemUnpinnedDetails
        OBJECT_LABEL_ADDED_DETAILS, // ObjectLabelAddedDetails
        OBJECT_LABEL_REMOVED_DETAILS, // ObjectLabelRemovedDetails
        OBJECT_LABEL_UPDATED_VALUE_DETAILS, // ObjectLabelUpdatedValueDetails
        ORGANIZE_FOLDER_WITH_TIDY_DETAILS, // OrganizeFolderWithTidyDetails
        REWIND_FOLDER_DETAILS, // RewindFolderDetails
        UNDO_NAMING_CONVENTION_DETAILS, // UndoNamingConventionDetails
        UNDO_ORGANIZE_FOLDER_WITH_TIDY_DETAILS, // UndoOrganizeFolderWithTidyDetails
        USER_TAGS_ADDED_DETAILS, // UserTagsAddedDetails
        USER_TAGS_REMOVED_DETAILS, // UserTagsRemovedDetails
        EMAIL_INGEST_RECEIVE_FILE_DETAILS, // EmailIngestReceiveFileDetails
        FILE_REQUEST_CHANGE_DETAILS, // FileRequestChangeDetails
        FILE_REQUEST_CLOSE_DETAILS, // FileRequestCloseDetails
        FILE_REQUEST_CREATE_DETAILS, // FileRequestCreateDetails
        FILE_REQUEST_DELETE_DETAILS, // FileRequestDeleteDetails
        FILE_REQUEST_RECEIVE_FILE_DETAILS, // FileRequestReceiveFileDetails
        GROUP_ADD_EXTERNAL_ID_DETAILS, // GroupAddExternalIdDetails
        GROUP_ADD_MEMBER_DETAILS, // GroupAddMemberDetails
        GROUP_CHANGE_EXTERNAL_ID_DETAILS, // GroupChangeExternalIdDetails
        GROUP_CHANGE_MANAGEMENT_TYPE_DETAILS, // GroupChangeManagementTypeDetails
        GROUP_CHANGE_MEMBER_ROLE_DETAILS, // GroupChangeMemberRoleDetails
        GROUP_CREATE_DETAILS, // GroupCreateDetails
        GROUP_DELETE_DETAILS, // GroupDeleteDetails
        GROUP_DESCRIPTION_UPDATED_DETAILS, // GroupDescriptionUpdatedDetails
        GROUP_JOIN_POLICY_UPDATED_DETAILS, // GroupJoinPolicyUpdatedDetails
        GROUP_MOVED_DETAILS, // GroupMovedDetails
        GROUP_REMOVE_EXTERNAL_ID_DETAILS, // GroupRemoveExternalIdDetails
        GROUP_REMOVE_MEMBER_DETAILS, // GroupRemoveMemberDetails
        GROUP_RENAME_DETAILS, // GroupRenameDetails
        ACCOUNT_LOCK_OR_UNLOCKED_DETAILS, // AccountLockOrUnlockedDetails
        EMM_ERROR_DETAILS, // EmmErrorDetails
        GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS_DETAILS, // GuestAdminSignedInViaTrustedTeamsDetails
        GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS_DETAILS, // GuestAdminSignedOutViaTrustedTeamsDetails
        LOGIN_FAIL_DETAILS, // LoginFailDetails
        LOGIN_SUCCESS_DETAILS, // LoginSuccessDetails
        LOGOUT_DETAILS, // LogoutDetails
        RESELLER_SUPPORT_SESSION_END_DETAILS, // ResellerSupportSessionEndDetails
        RESELLER_SUPPORT_SESSION_START_DETAILS, // ResellerSupportSessionStartDetails
        SIGN_IN_AS_SESSION_END_DETAILS, // SignInAsSessionEndDetails
        SIGN_IN_AS_SESSION_START_DETAILS, // SignInAsSessionStartDetails
        SSO_ERROR_DETAILS, // SsoErrorDetails
        CREATE_TEAM_INVITE_LINK_DETAILS, // CreateTeamInviteLinkDetails
        DELETE_TEAM_INVITE_LINK_DETAILS, // DeleteTeamInviteLinkDetails
        MEMBER_ADD_EXTERNAL_ID_DETAILS, // MemberAddExternalIdDetails
        MEMBER_ADD_NAME_DETAILS, // MemberAddNameDetails
        MEMBER_CHANGE_ADMIN_ROLE_DETAILS, // MemberChangeAdminRoleDetails
        MEMBER_CHANGE_EMAIL_DETAILS, // MemberChangeEmailDetails
        MEMBER_CHANGE_EXTERNAL_ID_DETAILS, // MemberChangeExternalIdDetails
        MEMBER_CHANGE_MEMBERSHIP_TYPE_DETAILS, // MemberChangeMembershipTypeDetails
        MEMBER_CHANGE_NAME_DETAILS, // MemberChangeNameDetails
        MEMBER_CHANGE_RESELLER_ROLE_DETAILS, // MemberChangeResellerRoleDetails
        MEMBER_CHANGE_STATUS_DETAILS, // MemberChangeStatusDetails
        MEMBER_DELETE_MANUAL_CONTACTS_DETAILS, // MemberDeleteManualContactsDetails
        MEMBER_DELETE_PROFILE_PHOTO_DETAILS, // MemberDeleteProfilePhotoDetails
        MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS_DETAILS, // MemberPermanentlyDeleteAccountContentsDetails
        MEMBER_REMOVE_EXTERNAL_ID_DETAILS, // MemberRemoveExternalIdDetails
        MEMBER_SET_PROFILE_PHOTO_DETAILS, // MemberSetProfilePhotoDetails
        MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA_DETAILS, // MemberSpaceLimitsAddCustomQuotaDetails
        MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA_DETAILS, // MemberSpaceLimitsChangeCustomQuotaDetails
        MEMBER_SPACE_LIMITS_CHANGE_STATUS_DETAILS, // MemberSpaceLimitsChangeStatusDetails
        MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA_DETAILS, // MemberSpaceLimitsRemoveCustomQuotaDetails
        MEMBER_SUGGEST_DETAILS, // MemberSuggestDetails
        MEMBER_TRANSFER_ACCOUNT_CONTENTS_DETAILS, // MemberTransferAccountContentsDetails
        PENDING_SECONDARY_EMAIL_ADDED_DETAILS, // PendingSecondaryEmailAddedDetails
        SECONDARY_EMAIL_DELETED_DETAILS, // SecondaryEmailDeletedDetails
        SECONDARY_EMAIL_VERIFIED_DETAILS, // SecondaryEmailVerifiedDetails
        SECONDARY_MAILS_POLICY_CHANGED_DETAILS, // SecondaryMailsPolicyChangedDetails
        BINDER_ADD_PAGE_DETAILS, // BinderAddPageDetails
        BINDER_ADD_SECTION_DETAILS, // BinderAddSectionDetails
        BINDER_REMOVE_PAGE_DETAILS, // BinderRemovePageDetails
        BINDER_REMOVE_SECTION_DETAILS, // BinderRemoveSectionDetails
        BINDER_RENAME_PAGE_DETAILS, // BinderRenamePageDetails
        BINDER_RENAME_SECTION_DETAILS, // BinderRenameSectionDetails
        BINDER_REORDER_PAGE_DETAILS, // BinderReorderPageDetails
        BINDER_REORDER_SECTION_DETAILS, // BinderReorderSectionDetails
        PAPER_CONTENT_ADD_MEMBER_DETAILS, // PaperContentAddMemberDetails
        PAPER_CONTENT_ADD_TO_FOLDER_DETAILS, // PaperContentAddToFolderDetails
        PAPER_CONTENT_ARCHIVE_DETAILS, // PaperContentArchiveDetails
        PAPER_CONTENT_CREATE_DETAILS, // PaperContentCreateDetails
        PAPER_CONTENT_PERMANENTLY_DELETE_DETAILS, // PaperContentPermanentlyDeleteDetails
        PAPER_CONTENT_REMOVE_FROM_FOLDER_DETAILS, // PaperContentRemoveFromFolderDetails
        PAPER_CONTENT_REMOVE_MEMBER_DETAILS, // PaperContentRemoveMemberDetails
        PAPER_CONTENT_RENAME_DETAILS, // PaperContentRenameDetails
        PAPER_CONTENT_RESTORE_DETAILS, // PaperContentRestoreDetails
        PAPER_DOC_ADD_COMMENT_DETAILS, // PaperDocAddCommentDetails
        PAPER_DOC_CHANGE_MEMBER_ROLE_DETAILS, // PaperDocChangeMemberRoleDetails
        PAPER_DOC_CHANGE_SHARING_POLICY_DETAILS, // PaperDocChangeSharingPolicyDetails
        PAPER_DOC_CHANGE_SUBSCRIPTION_DETAILS, // PaperDocChangeSubscriptionDetails
        PAPER_DOC_DELETED_DETAILS, // PaperDocDeletedDetails
        PAPER_DOC_DELETE_COMMENT_DETAILS, // PaperDocDeleteCommentDetails
        PAPER_DOC_DOWNLOAD_DETAILS, // PaperDocDownloadDetails
        PAPER_DOC_EDIT_DETAILS, // PaperDocEditDetails
        PAPER_DOC_EDIT_COMMENT_DETAILS, // PaperDocEditCommentDetails
        PAPER_DOC_FOLLOWED_DETAILS, // PaperDocFollowedDetails
        PAPER_DOC_MENTION_DETAILS, // PaperDocMentionDetails
        PAPER_DOC_OWNERSHIP_CHANGED_DETAILS, // PaperDocOwnershipChangedDetails
        PAPER_DOC_REQUEST_ACCESS_DETAILS, // PaperDocRequestAccessDetails
        PAPER_DOC_RESOLVE_COMMENT_DETAILS, // PaperDocResolveCommentDetails
        PAPER_DOC_REVERT_DETAILS, // PaperDocRevertDetails
        PAPER_DOC_SLACK_SHARE_DETAILS, // PaperDocSlackShareDetails
        PAPER_DOC_TEAM_INVITE_DETAILS, // PaperDocTeamInviteDetails
        PAPER_DOC_TRASHED_DETAILS, // PaperDocTrashedDetails
        PAPER_DOC_UNRESOLVE_COMMENT_DETAILS, // PaperDocUnresolveCommentDetails
        PAPER_DOC_UNTRASHED_DETAILS, // PaperDocUntrashedDetails
        PAPER_DOC_VIEW_DETAILS, // PaperDocViewDetails
        PAPER_EXTERNAL_VIEW_ALLOW_DETAILS, // PaperExternalViewAllowDetails
        PAPER_EXTERNAL_VIEW_DEFAULT_TEAM_DETAILS, // PaperExternalViewDefaultTeamDetails
        PAPER_EXTERNAL_VIEW_FORBID_DETAILS, // PaperExternalViewForbidDetails
        PAPER_FOLDER_CHANGE_SUBSCRIPTION_DETAILS, // PaperFolderChangeSubscriptionDetails
        PAPER_FOLDER_DELETED_DETAILS, // PaperFolderDeletedDetails
        PAPER_FOLDER_FOLLOWED_DETAILS, // PaperFolderFollowedDetails
        PAPER_FOLDER_TEAM_INVITE_DETAILS, // PaperFolderTeamInviteDetails
        PAPER_PUBLISHED_LINK_CHANGE_PERMISSION_DETAILS, // PaperPublishedLinkChangePermissionDetails
        PAPER_PUBLISHED_LINK_CREATE_DETAILS, // PaperPublishedLinkCreateDetails
        PAPER_PUBLISHED_LINK_DISABLED_DETAILS, // PaperPublishedLinkDisabledDetails
        PAPER_PUBLISHED_LINK_VIEW_DETAILS, // PaperPublishedLinkViewDetails
        PASSWORD_CHANGE_DETAILS, // PasswordChangeDetails
        PASSWORD_RESET_DETAILS, // PasswordResetDetails
        PASSWORD_RESET_ALL_DETAILS, // PasswordResetAllDetails
        CLASSIFICATION_CREATE_REPORT_DETAILS, // ClassificationCreateReportDetails
        CLASSIFICATION_CREATE_REPORT_FAIL_DETAILS, // ClassificationCreateReportFailDetails
        EMM_CREATE_EXCEPTIONS_REPORT_DETAILS, // EmmCreateExceptionsReportDetails
        EMM_CREATE_USAGE_REPORT_DETAILS, // EmmCreateUsageReportDetails
        EXPORT_MEMBERS_REPORT_DETAILS, // ExportMembersReportDetails
        EXPORT_MEMBERS_REPORT_FAIL_DETAILS, // ExportMembersReportFailDetails
        EXTERNAL_SHARING_CREATE_REPORT_DETAILS, // ExternalSharingCreateReportDetails
        EXTERNAL_SHARING_REPORT_FAILED_DETAILS, // ExternalSharingReportFailedDetails
        NO_EXPIRATION_LINK_GEN_CREATE_REPORT_DETAILS, // NoExpirationLinkGenCreateReportDetails
        NO_EXPIRATION_LINK_GEN_REPORT_FAILED_DETAILS, // NoExpirationLinkGenReportFailedDetails
        NO_PASSWORD_LINK_GEN_CREATE_REPORT_DETAILS, // NoPasswordLinkGenCreateReportDetails
        NO_PASSWORD_LINK_GEN_REPORT_FAILED_DETAILS, // NoPasswordLinkGenReportFailedDetails
        NO_PASSWORD_LINK_VIEW_CREATE_REPORT_DETAILS, // NoPasswordLinkViewCreateReportDetails
        NO_PASSWORD_LINK_VIEW_REPORT_FAILED_DETAILS, // NoPasswordLinkViewReportFailedDetails
        OUTDATED_LINK_VIEW_CREATE_REPORT_DETAILS, // OutdatedLinkViewCreateReportDetails
        OUTDATED_LINK_VIEW_REPORT_FAILED_DETAILS, // OutdatedLinkViewReportFailedDetails
        PAPER_ADMIN_EXPORT_START_DETAILS, // PaperAdminExportStartDetails
        SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT_DETAILS, // SmartSyncCreateAdminPrivilegeReportDetails
        TEAM_ACTIVITY_CREATE_REPORT_DETAILS, // TeamActivityCreateReportDetails
        TEAM_ACTIVITY_CREATE_REPORT_FAIL_DETAILS, // TeamActivityCreateReportFailDetails
        COLLECTION_SHARE_DETAILS, // CollectionShareDetails
        FILE_TRANSFERS_FILE_ADD_DETAILS, // FileTransfersFileAddDetails
        FILE_TRANSFERS_TRANSFER_DELETE_DETAILS, // FileTransfersTransferDeleteDetails
        FILE_TRANSFERS_TRANSFER_DOWNLOAD_DETAILS, // FileTransfersTransferDownloadDetails
        FILE_TRANSFERS_TRANSFER_SEND_DETAILS, // FileTransfersTransferSendDetails
        FILE_TRANSFERS_TRANSFER_VIEW_DETAILS, // FileTransfersTransferViewDetails
        NOTE_ACL_INVITE_ONLY_DETAILS, // NoteAclInviteOnlyDetails
        NOTE_ACL_LINK_DETAILS, // NoteAclLinkDetails
        NOTE_ACL_TEAM_LINK_DETAILS, // NoteAclTeamLinkDetails
        NOTE_SHARED_DETAILS, // NoteSharedDetails
        NOTE_SHARE_RECEIVE_DETAILS, // NoteShareReceiveDetails
        OPEN_NOTE_SHARED_DETAILS, // OpenNoteSharedDetails
        SF_ADD_GROUP_DETAILS, // SfAddGroupDetails
        SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS_DETAILS, // SfAllowNonMembersToViewSharedLinksDetails
        SF_EXTERNAL_INVITE_WARN_DETAILS, // SfExternalInviteWarnDetails
        SF_FB_INVITE_DETAILS, // SfFbInviteDetails
        SF_FB_INVITE_CHANGE_ROLE_DETAILS, // SfFbInviteChangeRoleDetails
        SF_FB_UNINVITE_DETAILS, // SfFbUninviteDetails
        SF_INVITE_GROUP_DETAILS, // SfInviteGroupDetails
        SF_TEAM_GRANT_ACCESS_DETAILS, // SfTeamGrantAccessDetails
        SF_TEAM_INVITE_DETAILS, // SfTeamInviteDetails
        SF_TEAM_INVITE_CHANGE_ROLE_DETAILS, // SfTeamInviteChangeRoleDetails
        SF_TEAM_JOIN_DETAILS, // SfTeamJoinDetails
        SF_TEAM_JOIN_FROM_OOB_LINK_DETAILS, // SfTeamJoinFromOobLinkDetails
        SF_TEAM_UNINVITE_DETAILS, // SfTeamUninviteDetails
        SHARED_CONTENT_ADD_INVITEES_DETAILS, // SharedContentAddInviteesDetails
        SHARED_CONTENT_ADD_LINK_EXPIRY_DETAILS, // SharedContentAddLinkExpiryDetails
        SHARED_CONTENT_ADD_LINK_PASSWORD_DETAILS, // SharedContentAddLinkPasswordDetails
        SHARED_CONTENT_ADD_MEMBER_DETAILS, // SharedContentAddMemberDetails
        SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY_DETAILS, // SharedContentChangeDownloadsPolicyDetails
        SHARED_CONTENT_CHANGE_INVITEE_ROLE_DETAILS, // SharedContentChangeInviteeRoleDetails
        SHARED_CONTENT_CHANGE_LINK_AUDIENCE_DETAILS, // SharedContentChangeLinkAudienceDetails
        SHARED_CONTENT_CHANGE_LINK_EXPIRY_DETAILS, // SharedContentChangeLinkExpiryDetails
        SHARED_CONTENT_CHANGE_LINK_PASSWORD_DETAILS, // SharedContentChangeLinkPasswordDetails
        SHARED_CONTENT_CHANGE_MEMBER_ROLE_DETAILS, // SharedContentChangeMemberRoleDetails
        SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY_DETAILS, // SharedContentChangeViewerInfoPolicyDetails
        SHARED_CONTENT_CLAIM_INVITATION_DETAILS, // SharedContentClaimInvitationDetails
        SHARED_CONTENT_COPY_DETAILS, // SharedContentCopyDetails
        SHARED_CONTENT_DOWNLOAD_DETAILS, // SharedContentDownloadDetails
        SHARED_CONTENT_RELINQUISH_MEMBERSHIP_DETAILS, // SharedContentRelinquishMembershipDetails
        SHARED_CONTENT_REMOVE_INVITEES_DETAILS, // SharedContentRemoveInviteesDetails
        SHARED_CONTENT_REMOVE_LINK_EXPIRY_DETAILS, // SharedContentRemoveLinkExpiryDetails
        SHARED_CONTENT_REMOVE_LINK_PASSWORD_DETAILS, // SharedContentRemoveLinkPasswordDetails
        SHARED_CONTENT_REMOVE_MEMBER_DETAILS, // SharedContentRemoveMemberDetails
        SHARED_CONTENT_REQUEST_ACCESS_DETAILS, // SharedContentRequestAccessDetails
        SHARED_CONTENT_RESTORE_INVITEES_DETAILS, // SharedContentRestoreInviteesDetails
        SHARED_CONTENT_RESTORE_MEMBER_DETAILS, // SharedContentRestoreMemberDetails
        SHARED_CONTENT_UNSHARE_DETAILS, // SharedContentUnshareDetails
        SHARED_CONTENT_VIEW_DETAILS, // SharedContentViewDetails
        SHARED_FOLDER_CHANGE_LINK_POLICY_DETAILS, // SharedFolderChangeLinkPolicyDetails
        SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY_DETAILS, // SharedFolderChangeMembersInheritancePolicyDetails
        SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY_DETAILS, // SharedFolderChangeMembersManagementPolicyDetails
        SHARED_FOLDER_CHANGE_MEMBERS_POLICY_DETAILS, // SharedFolderChangeMembersPolicyDetails
        SHARED_FOLDER_CREATE_DETAILS, // SharedFolderCreateDetails
        SHARED_FOLDER_DECLINE_INVITATION_DETAILS, // SharedFolderDeclineInvitationDetails
        SHARED_FOLDER_MOUNT_DETAILS, // SharedFolderMountDetails
        SHARED_FOLDER_NEST_DETAILS, // SharedFolderNestDetails
        SHARED_FOLDER_TRANSFER_OWNERSHIP_DETAILS, // SharedFolderTransferOwnershipDetails
        SHARED_FOLDER_UNMOUNT_DETAILS, // SharedFolderUnmountDetails
        SHARED_LINK_ADD_EXPIRY_DETAILS, // SharedLinkAddExpiryDetails
        SHARED_LINK_CHANGE_EXPIRY_DETAILS, // SharedLinkChangeExpiryDetails
        SHARED_LINK_CHANGE_VISIBILITY_DETAILS, // SharedLinkChangeVisibilityDetails
        SHARED_LINK_COPY_DETAILS, // SharedLinkCopyDetails
        SHARED_LINK_CREATE_DETAILS, // SharedLinkCreateDetails
        SHARED_LINK_DISABLE_DETAILS, // SharedLinkDisableDetails
        SHARED_LINK_DOWNLOAD_DETAILS, // SharedLinkDownloadDetails
        SHARED_LINK_REMOVE_EXPIRY_DETAILS, // SharedLinkRemoveExpiryDetails
        SHARED_LINK_SETTINGS_ADD_EXPIRATION_DETAILS, // SharedLinkSettingsAddExpirationDetails
        SHARED_LINK_SETTINGS_ADD_PASSWORD_DETAILS, // SharedLinkSettingsAddPasswordDetails
        SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED_DETAILS, // SharedLinkSettingsAllowDownloadDisabledDetails
        SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED_DETAILS, // SharedLinkSettingsAllowDownloadEnabledDetails
        SHARED_LINK_SETTINGS_CHANGE_AUDIENCE_DETAILS, // SharedLinkSettingsChangeAudienceDetails
        SHARED_LINK_SETTINGS_CHANGE_EXPIRATION_DETAILS, // SharedLinkSettingsChangeExpirationDetails
        SHARED_LINK_SETTINGS_CHANGE_PASSWORD_DETAILS, // SharedLinkSettingsChangePasswordDetails
        SHARED_LINK_SETTINGS_REMOVE_EXPIRATION_DETAILS, // SharedLinkSettingsRemoveExpirationDetails
        SHARED_LINK_SETTINGS_REMOVE_PASSWORD_DETAILS, // SharedLinkSettingsRemovePasswordDetails
        SHARED_LINK_SHARE_DETAILS, // SharedLinkShareDetails
        SHARED_LINK_VIEW_DETAILS, // SharedLinkViewDetails
        SHARED_NOTE_OPENED_DETAILS, // SharedNoteOpenedDetails
        SHMODEL_DISABLE_DOWNLOADS_DETAILS, // ShmodelDisableDownloadsDetails
        SHMODEL_ENABLE_DOWNLOADS_DETAILS, // ShmodelEnableDownloadsDetails
        SHMODEL_GROUP_SHARE_DETAILS, // ShmodelGroupShareDetails
        SHOWCASE_ACCESS_GRANTED_DETAILS, // ShowcaseAccessGrantedDetails
        SHOWCASE_ADD_MEMBER_DETAILS, // ShowcaseAddMemberDetails
        SHOWCASE_ARCHIVED_DETAILS, // ShowcaseArchivedDetails
        SHOWCASE_CREATED_DETAILS, // ShowcaseCreatedDetails
        SHOWCASE_DELETE_COMMENT_DETAILS, // ShowcaseDeleteCommentDetails
        SHOWCASE_EDITED_DETAILS, // ShowcaseEditedDetails
        SHOWCASE_EDIT_COMMENT_DETAILS, // ShowcaseEditCommentDetails
        SHOWCASE_FILE_ADDED_DETAILS, // ShowcaseFileAddedDetails
        SHOWCASE_FILE_DOWNLOAD_DETAILS, // ShowcaseFileDownloadDetails
        SHOWCASE_FILE_REMOVED_DETAILS, // ShowcaseFileRemovedDetails
        SHOWCASE_FILE_VIEW_DETAILS, // ShowcaseFileViewDetails
        SHOWCASE_PERMANENTLY_DELETED_DETAILS, // ShowcasePermanentlyDeletedDetails
        SHOWCASE_POST_COMMENT_DETAILS, // ShowcasePostCommentDetails
        SHOWCASE_REMOVE_MEMBER_DETAILS, // ShowcaseRemoveMemberDetails
        SHOWCASE_RENAMED_DETAILS, // ShowcaseRenamedDetails
        SHOWCASE_REQUEST_ACCESS_DETAILS, // ShowcaseRequestAccessDetails
        SHOWCASE_RESOLVE_COMMENT_DETAILS, // ShowcaseResolveCommentDetails
        SHOWCASE_RESTORED_DETAILS, // ShowcaseRestoredDetails
        SHOWCASE_TRASHED_DETAILS, // ShowcaseTrashedDetails
        SHOWCASE_TRASHED_DEPRECATED_DETAILS, // ShowcaseTrashedDeprecatedDetails
        SHOWCASE_UNRESOLVE_COMMENT_DETAILS, // ShowcaseUnresolveCommentDetails
        SHOWCASE_UNTRASHED_DETAILS, // ShowcaseUntrashedDetails
        SHOWCASE_UNTRASHED_DEPRECATED_DETAILS, // ShowcaseUntrashedDeprecatedDetails
        SHOWCASE_VIEW_DETAILS, // ShowcaseViewDetails
        SSO_ADD_CERT_DETAILS, // SsoAddCertDetails
        SSO_ADD_LOGIN_URL_DETAILS, // SsoAddLoginUrlDetails
        SSO_ADD_LOGOUT_URL_DETAILS, // SsoAddLogoutUrlDetails
        SSO_CHANGE_CERT_DETAILS, // SsoChangeCertDetails
        SSO_CHANGE_LOGIN_URL_DETAILS, // SsoChangeLoginUrlDetails
        SSO_CHANGE_LOGOUT_URL_DETAILS, // SsoChangeLogoutUrlDetails
        SSO_CHANGE_SAML_IDENTITY_MODE_DETAILS, // SsoChangeSamlIdentityModeDetails
        SSO_REMOVE_CERT_DETAILS, // SsoRemoveCertDetails
        SSO_REMOVE_LOGIN_URL_DETAILS, // SsoRemoveLoginUrlDetails
        SSO_REMOVE_LOGOUT_URL_DETAILS, // SsoRemoveLogoutUrlDetails
        TEAM_FOLDER_CHANGE_STATUS_DETAILS, // TeamFolderChangeStatusDetails
        TEAM_FOLDER_CREATE_DETAILS, // TeamFolderCreateDetails
        TEAM_FOLDER_DOWNGRADE_DETAILS, // TeamFolderDowngradeDetails
        TEAM_FOLDER_PERMANENTLY_DELETE_DETAILS, // TeamFolderPermanentlyDeleteDetails
        TEAM_FOLDER_RENAME_DETAILS, // TeamFolderRenameDetails
        TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED_DETAILS, // TeamSelectiveSyncSettingsChangedDetails
        ACCOUNT_CAPTURE_CHANGE_POLICY_DETAILS, // AccountCaptureChangePolicyDetails
        ADMIN_EMAIL_REMINDERS_CHANGED_DETAILS, // AdminEmailRemindersChangedDetails
        ALLOW_DOWNLOAD_DISABLED_DETAILS, // AllowDownloadDisabledDetails
        ALLOW_DOWNLOAD_ENABLED_DETAILS, // AllowDownloadEnabledDetails
        APP_PERMISSIONS_CHANGED_DETAILS, // AppPermissionsChangedDetails
        CAMERA_UPLOADS_POLICY_CHANGED_DETAILS, // CameraUploadsPolicyChangedDetails
        CAPTURE_TRANSCRIPT_POLICY_CHANGED_DETAILS, // CaptureTranscriptPolicyChangedDetails
        CLASSIFICATION_CHANGE_POLICY_DETAILS, // ClassificationChangePolicyDetails
        COMPUTER_BACKUP_POLICY_CHANGED_DETAILS, // ComputerBackupPolicyChangedDetails
        CONTENT_ADMINISTRATION_POLICY_CHANGED_DETAILS, // ContentAdministrationPolicyChangedDetails
        DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY_DETAILS, // DataPlacementRestrictionChangePolicyDetails
        DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY_DETAILS, // DataPlacementRestrictionSatisfyPolicyDetails
        DEVICE_APPROVALS_ADD_EXCEPTION_DETAILS, // DeviceApprovalsAddExceptionDetails
        DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY_DETAILS, // DeviceApprovalsChangeDesktopPolicyDetails
        DEVICE_APPROVALS_CHANGE_MOBILE_POLICY_DETAILS, // DeviceApprovalsChangeMobilePolicyDetails
        DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION_DETAILS, // DeviceApprovalsChangeOverageActionDetails
        DEVICE_APPROVALS_CHANGE_UNLINK_ACTION_DETAILS, // DeviceApprovalsChangeUnlinkActionDetails
        DEVICE_APPROVALS_REMOVE_EXCEPTION_DETAILS, // DeviceApprovalsRemoveExceptionDetails
        DIRECTORY_RESTRICTIONS_ADD_MEMBERS_DETAILS, // DirectoryRestrictionsAddMembersDetails
        DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS_DETAILS, // DirectoryRestrictionsRemoveMembersDetails
        DROPBOX_PASSWORDS_POLICY_CHANGED_DETAILS, // DropboxPasswordsPolicyChangedDetails
        EMAIL_INGEST_POLICY_CHANGED_DETAILS, // EmailIngestPolicyChangedDetails
        EMM_ADD_EXCEPTION_DETAILS, // EmmAddExceptionDetails
        EMM_CHANGE_POLICY_DETAILS, // EmmChangePolicyDetails
        EMM_REMOVE_EXCEPTION_DETAILS, // EmmRemoveExceptionDetails
        EXTENDED_VERSION_HISTORY_CHANGE_POLICY_DETAILS, // ExtendedVersionHistoryChangePolicyDetails
        EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED_DETAILS, // ExternalDriveBackupPolicyChangedDetails
        FILE_COMMENTS_CHANGE_POLICY_DETAILS, // FileCommentsChangePolicyDetails
        FILE_LOCKING_POLICY_CHANGED_DETAILS, // FileLockingPolicyChangedDetails
        FILE_PROVIDER_MIGRATION_POLICY_CHANGED_DETAILS, // FileProviderMigrationPolicyChangedDetails
        FILE_REQUESTS_CHANGE_POLICY_DETAILS, // FileRequestsChangePolicyDetails
        FILE_REQUESTS_EMAILS_ENABLED_DETAILS, // FileRequestsEmailsEnabledDetails
        FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY_DETAILS, // FileRequestsEmailsRestrictedToTeamOnlyDetails
        FILE_TRANSFERS_POLICY_CHANGED_DETAILS, // FileTransfersPolicyChangedDetails
        GOOGLE_SSO_CHANGE_POLICY_DETAILS, // GoogleSsoChangePolicyDetails
        GROUP_USER_MANAGEMENT_CHANGE_POLICY_DETAILS, // GroupUserManagementChangePolicyDetails
        INTEGRATION_POLICY_CHANGED_DETAILS, // IntegrationPolicyChangedDetails
        INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED_DETAILS, // InviteAcceptanceEmailPolicyChangedDetails
        MEMBER_REQUESTS_CHANGE_POLICY_DETAILS, // MemberRequestsChangePolicyDetails
        MEMBER_SEND_INVITE_POLICY_CHANGED_DETAILS, // MemberSendInvitePolicyChangedDetails
        MEMBER_SPACE_LIMITS_ADD_EXCEPTION_DETAILS, // MemberSpaceLimitsAddExceptionDetails
        MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY_DETAILS, // MemberSpaceLimitsChangeCapsTypePolicyDetails
        MEMBER_SPACE_LIMITS_CHANGE_POLICY_DETAILS, // MemberSpaceLimitsChangePolicyDetails
        MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION_DETAILS, // MemberSpaceLimitsRemoveExceptionDetails
        MEMBER_SUGGESTIONS_CHANGE_POLICY_DETAILS, // MemberSuggestionsChangePolicyDetails
        MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY_DETAILS, // MicrosoftOfficeAddinChangePolicyDetails
        NETWORK_CONTROL_CHANGE_POLICY_DETAILS, // NetworkControlChangePolicyDetails
        PAPER_CHANGE_DEPLOYMENT_POLICY_DETAILS, // PaperChangeDeploymentPolicyDetails
        PAPER_CHANGE_MEMBER_LINK_POLICY_DETAILS, // PaperChangeMemberLinkPolicyDetails
        PAPER_CHANGE_MEMBER_POLICY_DETAILS, // PaperChangeMemberPolicyDetails
        PAPER_CHANGE_POLICY_DETAILS, // PaperChangePolicyDetails
        PAPER_DEFAULT_FOLDER_POLICY_CHANGED_DETAILS, // PaperDefaultFolderPolicyChangedDetails
        PAPER_DESKTOP_POLICY_CHANGED_DETAILS, // PaperDesktopPolicyChangedDetails
        PAPER_ENABLED_USERS_GROUP_ADDITION_DETAILS, // PaperEnabledUsersGroupAdditionDetails
        PAPER_ENABLED_USERS_GROUP_REMOVAL_DETAILS, // PaperEnabledUsersGroupRemovalDetails
        PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY_DETAILS, // PasswordStrengthRequirementsChangePolicyDetails
        PERMANENT_DELETE_CHANGE_POLICY_DETAILS, // PermanentDeleteChangePolicyDetails
        RESELLER_SUPPORT_CHANGE_POLICY_DETAILS, // ResellerSupportChangePolicyDetails
        REWIND_POLICY_CHANGED_DETAILS, // RewindPolicyChangedDetails
        SEND_FOR_SIGNATURE_POLICY_CHANGED_DETAILS, // SendForSignaturePolicyChangedDetails
        SHARING_CHANGE_FOLDER_JOIN_POLICY_DETAILS, // SharingChangeFolderJoinPolicyDetails
        SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY_DETAILS, // SharingChangeLinkAllowChangeExpirationPolicyDetails
        SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY_DETAILS, // SharingChangeLinkDefaultExpirationPolicyDetails
        SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY_DETAILS, // SharingChangeLinkEnforcePasswordPolicyDetails
        SHARING_CHANGE_LINK_POLICY_DETAILS, // SharingChangeLinkPolicyDetails
        SHARING_CHANGE_MEMBER_POLICY_DETAILS, // SharingChangeMemberPolicyDetails
        SHOWCASE_CHANGE_DOWNLOAD_POLICY_DETAILS, // ShowcaseChangeDownloadPolicyDetails
        SHOWCASE_CHANGE_ENABLED_POLICY_DETAILS, // ShowcaseChangeEnabledPolicyDetails
        SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY_DETAILS, // ShowcaseChangeExternalSharingPolicyDetails
        SMARTER_SMART_SYNC_POLICY_CHANGED_DETAILS, // SmarterSmartSyncPolicyChangedDetails
        SMART_SYNC_CHANGE_POLICY_DETAILS, // SmartSyncChangePolicyDetails
        SMART_SYNC_NOT_OPT_OUT_DETAILS, // SmartSyncNotOptOutDetails
        SMART_SYNC_OPT_OUT_DETAILS, // SmartSyncOptOutDetails
        SSO_CHANGE_POLICY_DETAILS, // SsoChangePolicyDetails
        TEAM_BRANDING_POLICY_CHANGED_DETAILS, // TeamBrandingPolicyChangedDetails
        TEAM_EXTENSIONS_POLICY_CHANGED_DETAILS, // TeamExtensionsPolicyChangedDetails
        TEAM_SELECTIVE_SYNC_POLICY_CHANGED_DETAILS, // TeamSelectiveSyncPolicyChangedDetails
        TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED_DETAILS, // TeamSharingWhitelistSubjectsChangedDetails
        TFA_ADD_EXCEPTION_DETAILS, // TfaAddExceptionDetails
        TFA_CHANGE_POLICY_DETAILS, // TfaChangePolicyDetails
        TFA_REMOVE_EXCEPTION_DETAILS, // TfaRemoveExceptionDetails
        TWO_ACCOUNT_CHANGE_POLICY_DETAILS, // TwoAccountChangePolicyDetails
        VIEWER_INFO_POLICY_CHANGED_DETAILS, // ViewerInfoPolicyChangedDetails
        WATERMARKING_POLICY_CHANGED_DETAILS, // WatermarkingPolicyChangedDetails
        WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT_DETAILS, // WebSessionsChangeActiveSessionLimitDetails
        WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY_DETAILS, // WebSessionsChangeFixedLengthPolicyDetails
        WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY_DETAILS, // WebSessionsChangeIdleLengthPolicyDetails
        DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL_DETAILS, // DataResidencyMigrationRequestSuccessfulDetails
        DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL_DETAILS, // DataResidencyMigrationRequestUnsuccessfulDetails
        TEAM_MERGE_FROM_DETAILS, // TeamMergeFromDetails
        TEAM_MERGE_TO_DETAILS, // TeamMergeToDetails
        TEAM_PROFILE_ADD_BACKGROUND_DETAILS, // TeamProfileAddBackgroundDetails
        TEAM_PROFILE_ADD_LOGO_DETAILS, // TeamProfileAddLogoDetails
        TEAM_PROFILE_CHANGE_BACKGROUND_DETAILS, // TeamProfileChangeBackgroundDetails
        TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE_DETAILS, // TeamProfileChangeDefaultLanguageDetails
        TEAM_PROFILE_CHANGE_LOGO_DETAILS, // TeamProfileChangeLogoDetails
        TEAM_PROFILE_CHANGE_NAME_DETAILS, // TeamProfileChangeNameDetails
        TEAM_PROFILE_REMOVE_BACKGROUND_DETAILS, // TeamProfileRemoveBackgroundDetails
        TEAM_PROFILE_REMOVE_LOGO_DETAILS, // TeamProfileRemoveLogoDetails
        TFA_ADD_BACKUP_PHONE_DETAILS, // TfaAddBackupPhoneDetails
        TFA_ADD_SECURITY_KEY_DETAILS, // TfaAddSecurityKeyDetails
        TFA_CHANGE_BACKUP_PHONE_DETAILS, // TfaChangeBackupPhoneDetails
        TFA_CHANGE_STATUS_DETAILS, // TfaChangeStatusDetails
        TFA_REMOVE_BACKUP_PHONE_DETAILS, // TfaRemoveBackupPhoneDetails
        TFA_REMOVE_SECURITY_KEY_DETAILS, // TfaRemoveSecurityKeyDetails
        TFA_RESET_DETAILS, // TfaResetDetails
        CHANGED_ENTERPRISE_ADMIN_ROLE_DETAILS, // ChangedEnterpriseAdminRoleDetails
        CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS_DETAILS, // ChangedEnterpriseConnectedTeamStatusDetails
        ENDED_ENTERPRISE_ADMIN_SESSION_DETAILS, // EndedEnterpriseAdminSessionDetails
        ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED_DETAILS, // EndedEnterpriseAdminSessionDeprecatedDetails
        ENTERPRISE_SETTINGS_LOCKING_DETAILS, // EnterpriseSettingsLockingDetails
        GUEST_ADMIN_CHANGE_STATUS_DETAILS, // GuestAdminChangeStatusDetails
        STARTED_ENTERPRISE_ADMIN_SESSION_DETAILS, // StartedEnterpriseAdminSessionDetails
        TEAM_MERGE_REQUEST_ACCEPTED_DETAILS, // TeamMergeRequestAcceptedDetails
        TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM_DETAILS, // TeamMergeRequestAcceptedShownToPrimaryTeamDetails
        TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM_DETAILS, // TeamMergeRequestAcceptedShownToSecondaryTeamDetails
        TEAM_MERGE_REQUEST_AUTO_CANCELED_DETAILS, // TeamMergeRequestAutoCanceledDetails
        TEAM_MERGE_REQUEST_CANCELED_DETAILS, // TeamMergeRequestCanceledDetails
        TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM_DETAILS, // TeamMergeRequestCanceledShownToPrimaryTeamDetails
        TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM_DETAILS, // TeamMergeRequestCanceledShownToSecondaryTeamDetails
        TEAM_MERGE_REQUEST_EXPIRED_DETAILS, // TeamMergeRequestExpiredDetails
        TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM_DETAILS, // TeamMergeRequestExpiredShownToPrimaryTeamDetails
        TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM_DETAILS, // TeamMergeRequestExpiredShownToSecondaryTeamDetails
        TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM_DETAILS, // TeamMergeRequestRejectedShownToPrimaryTeamDetails
        TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM_DETAILS, // TeamMergeRequestRejectedShownToSecondaryTeamDetails
        TEAM_MERGE_REQUEST_REMINDER_DETAILS, // TeamMergeRequestReminderDetails
        TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM_DETAILS, // TeamMergeRequestReminderShownToPrimaryTeamDetails
        TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM_DETAILS, // TeamMergeRequestReminderShownToSecondaryTeamDetails
        TEAM_MERGE_REQUEST_REVOKED_DETAILS, // TeamMergeRequestRevokedDetails
        TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM_DETAILS, // TeamMergeRequestSentShownToPrimaryTeamDetails
        TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM_DETAILS, // TeamMergeRequestSentShownToSecondaryTeamDetails
        /**
         * Hints that this event was returned with missing details due to an
         * internal error.
         */
        MISSING_DETAILS, // MissingDetails
        /**
         * Catch-all used for unknown tag values returned by the Dropbox
         * servers.
         *
         * <p> Receiving a catch-all value typically indicates this SDK version
         * is not up to date. Consider updating your SDK version to handle the
         * new tags. </p>
         */
        OTHER; // *catch_all
    }

    /**
     * Catch-all used for unknown tag values returned by the Dropbox servers.
     *
     * <p> Receiving a catch-all value typically indicates this SDK version is
     * not up to date. Consider updating your SDK version to handle the new
     * tags. </p>
     */
    public static final EventDetails OTHER = new EventDetails().withTag(Tag.OTHER);

    private Tag _tag;
    private AdminAlertingAlertStateChangedDetails adminAlertingAlertStateChangedDetailsValue;
    private AdminAlertingChangedAlertConfigDetails adminAlertingChangedAlertConfigDetailsValue;
    private AdminAlertingTriggeredAlertDetails adminAlertingTriggeredAlertDetailsValue;
    private AppBlockedByPermissionsDetails appBlockedByPermissionsDetailsValue;
    private AppLinkTeamDetails appLinkTeamDetailsValue;
    private AppLinkUserDetails appLinkUserDetailsValue;
    private AppUnlinkTeamDetails appUnlinkTeamDetailsValue;
    private AppUnlinkUserDetails appUnlinkUserDetailsValue;
    private IntegrationConnectedDetails integrationConnectedDetailsValue;
    private IntegrationDisconnectedDetails integrationDisconnectedDetailsValue;
    private FileAddCommentDetails fileAddCommentDetailsValue;
    private FileChangeCommentSubscriptionDetails fileChangeCommentSubscriptionDetailsValue;
    private FileDeleteCommentDetails fileDeleteCommentDetailsValue;
    private FileEditCommentDetails fileEditCommentDetailsValue;
    private FileLikeCommentDetails fileLikeCommentDetailsValue;
    private FileResolveCommentDetails fileResolveCommentDetailsValue;
    private FileUnlikeCommentDetails fileUnlikeCommentDetailsValue;
    private FileUnresolveCommentDetails fileUnresolveCommentDetailsValue;
    private GovernancePolicyAddFoldersDetails governancePolicyAddFoldersDetailsValue;
    private GovernancePolicyAddFolderFailedDetails governancePolicyAddFolderFailedDetailsValue;
    private GovernancePolicyContentDisposedDetails governancePolicyContentDisposedDetailsValue;
    private GovernancePolicyCreateDetails governancePolicyCreateDetailsValue;
    private GovernancePolicyDeleteDetails governancePolicyDeleteDetailsValue;
    private GovernancePolicyEditDetailsDetails governancePolicyEditDetailsDetailsValue;
    private GovernancePolicyEditDurationDetails governancePolicyEditDurationDetailsValue;
    private GovernancePolicyExportCreatedDetails governancePolicyExportCreatedDetailsValue;
    private GovernancePolicyExportRemovedDetails governancePolicyExportRemovedDetailsValue;
    private GovernancePolicyRemoveFoldersDetails governancePolicyRemoveFoldersDetailsValue;
    private GovernancePolicyReportCreatedDetails governancePolicyReportCreatedDetailsValue;
    private GovernancePolicyZipPartDownloadedDetails governancePolicyZipPartDownloadedDetailsValue;
    private LegalHoldsActivateAHoldDetails legalHoldsActivateAHoldDetailsValue;
    private LegalHoldsAddMembersDetails legalHoldsAddMembersDetailsValue;
    private LegalHoldsChangeHoldDetailsDetails legalHoldsChangeHoldDetailsDetailsValue;
    private LegalHoldsChangeHoldNameDetails legalHoldsChangeHoldNameDetailsValue;
    private LegalHoldsExportAHoldDetails legalHoldsExportAHoldDetailsValue;
    private LegalHoldsExportCancelledDetails legalHoldsExportCancelledDetailsValue;
    private LegalHoldsExportDownloadedDetails legalHoldsExportDownloadedDetailsValue;
    private LegalHoldsExportRemovedDetails legalHoldsExportRemovedDetailsValue;
    private LegalHoldsReleaseAHoldDetails legalHoldsReleaseAHoldDetailsValue;
    private LegalHoldsRemoveMembersDetails legalHoldsRemoveMembersDetailsValue;
    private LegalHoldsReportAHoldDetails legalHoldsReportAHoldDetailsValue;
    private DeviceChangeIpDesktopDetails deviceChangeIpDesktopDetailsValue;
    private DeviceChangeIpMobileDetails deviceChangeIpMobileDetailsValue;
    private DeviceChangeIpWebDetails deviceChangeIpWebDetailsValue;
    private DeviceDeleteOnUnlinkFailDetails deviceDeleteOnUnlinkFailDetailsValue;
    private DeviceDeleteOnUnlinkSuccessDetails deviceDeleteOnUnlinkSuccessDetailsValue;
    private DeviceLinkFailDetails deviceLinkFailDetailsValue;
    private DeviceLinkSuccessDetails deviceLinkSuccessDetailsValue;
    private DeviceManagementDisabledDetails deviceManagementDisabledDetailsValue;
    private DeviceManagementEnabledDetails deviceManagementEnabledDetailsValue;
    private DeviceSyncBackupStatusChangedDetails deviceSyncBackupStatusChangedDetailsValue;
    private DeviceUnlinkDetails deviceUnlinkDetailsValue;
    private DropboxPasswordsExportedDetails dropboxPasswordsExportedDetailsValue;
    private DropboxPasswordsNewDeviceEnrolledDetails dropboxPasswordsNewDeviceEnrolledDetailsValue;
    private EmmRefreshAuthTokenDetails emmRefreshAuthTokenDetailsValue;
    private ExternalDriveBackupEligibilityStatusCheckedDetails externalDriveBackupEligibilityStatusCheckedDetailsValue;
    private ExternalDriveBackupStatusChangedDetails externalDriveBackupStatusChangedDetailsValue;
    private AccountCaptureChangeAvailabilityDetails accountCaptureChangeAvailabilityDetailsValue;
    private AccountCaptureMigrateAccountDetails accountCaptureMigrateAccountDetailsValue;
    private AccountCaptureNotificationEmailsSentDetails accountCaptureNotificationEmailsSentDetailsValue;
    private AccountCaptureRelinquishAccountDetails accountCaptureRelinquishAccountDetailsValue;
    private DisabledDomainInvitesDetails disabledDomainInvitesDetailsValue;
    private DomainInvitesApproveRequestToJoinTeamDetails domainInvitesApproveRequestToJoinTeamDetailsValue;
    private DomainInvitesDeclineRequestToJoinTeamDetails domainInvitesDeclineRequestToJoinTeamDetailsValue;
    private DomainInvitesEmailExistingUsersDetails domainInvitesEmailExistingUsersDetailsValue;
    private DomainInvitesRequestToJoinTeamDetails domainInvitesRequestToJoinTeamDetailsValue;
    private DomainInvitesSetInviteNewUserPrefToNoDetails domainInvitesSetInviteNewUserPrefToNoDetailsValue;
    private DomainInvitesSetInviteNewUserPrefToYesDetails domainInvitesSetInviteNewUserPrefToYesDetailsValue;
    private DomainVerificationAddDomainFailDetails domainVerificationAddDomainFailDetailsValue;
    private DomainVerificationAddDomainSuccessDetails domainVerificationAddDomainSuccessDetailsValue;
    private DomainVerificationRemoveDomainDetails domainVerificationRemoveDomainDetailsValue;
    private EnabledDomainInvitesDetails enabledDomainInvitesDetailsValue;
    private ApplyNamingConventionDetails applyNamingConventionDetailsValue;
    private CreateFolderDetails createFolderDetailsValue;
    private FileAddDetails fileAddDetailsValue;
    private FileCopyDetails fileCopyDetailsValue;
    private FileDeleteDetails fileDeleteDetailsValue;
    private FileDownloadDetails fileDownloadDetailsValue;
    private FileEditDetails fileEditDetailsValue;
    private FileGetCopyReferenceDetails fileGetCopyReferenceDetailsValue;
    private FileLockingLockStatusChangedDetails fileLockingLockStatusChangedDetailsValue;
    private FileMoveDetails fileMoveDetailsValue;
    private FilePermanentlyDeleteDetails filePermanentlyDeleteDetailsValue;
    private FilePreviewDetails filePreviewDetailsValue;
    private FileRenameDetails fileRenameDetailsValue;
    private FileRestoreDetails fileRestoreDetailsValue;
    private FileRevertDetails fileRevertDetailsValue;
    private FileRollbackChangesDetails fileRollbackChangesDetailsValue;
    private FileSaveCopyReferenceDetails fileSaveCopyReferenceDetailsValue;
    private FolderOverviewDescriptionChangedDetails folderOverviewDescriptionChangedDetailsValue;
    private FolderOverviewItemPinnedDetails folderOverviewItemPinnedDetailsValue;
    private FolderOverviewItemUnpinnedDetails folderOverviewItemUnpinnedDetailsValue;
    private ObjectLabelAddedDetails objectLabelAddedDetailsValue;
    private ObjectLabelRemovedDetails objectLabelRemovedDetailsValue;
    private ObjectLabelUpdatedValueDetails objectLabelUpdatedValueDetailsValue;
    private OrganizeFolderWithTidyDetails organizeFolderWithTidyDetailsValue;
    private RewindFolderDetails rewindFolderDetailsValue;
    private UndoNamingConventionDetails undoNamingConventionDetailsValue;
    private UndoOrganizeFolderWithTidyDetails undoOrganizeFolderWithTidyDetailsValue;
    private UserTagsAddedDetails userTagsAddedDetailsValue;
    private UserTagsRemovedDetails userTagsRemovedDetailsValue;
    private EmailIngestReceiveFileDetails emailIngestReceiveFileDetailsValue;
    private FileRequestChangeDetails fileRequestChangeDetailsValue;
    private FileRequestCloseDetails fileRequestCloseDetailsValue;
    private FileRequestCreateDetails fileRequestCreateDetailsValue;
    private FileRequestDeleteDetails fileRequestDeleteDetailsValue;
    private FileRequestReceiveFileDetails fileRequestReceiveFileDetailsValue;
    private GroupAddExternalIdDetails groupAddExternalIdDetailsValue;
    private GroupAddMemberDetails groupAddMemberDetailsValue;
    private GroupChangeExternalIdDetails groupChangeExternalIdDetailsValue;
    private GroupChangeManagementTypeDetails groupChangeManagementTypeDetailsValue;
    private GroupChangeMemberRoleDetails groupChangeMemberRoleDetailsValue;
    private GroupCreateDetails groupCreateDetailsValue;
    private GroupDeleteDetails groupDeleteDetailsValue;
    private GroupDescriptionUpdatedDetails groupDescriptionUpdatedDetailsValue;
    private GroupJoinPolicyUpdatedDetails groupJoinPolicyUpdatedDetailsValue;
    private GroupMovedDetails groupMovedDetailsValue;
    private GroupRemoveExternalIdDetails groupRemoveExternalIdDetailsValue;
    private GroupRemoveMemberDetails groupRemoveMemberDetailsValue;
    private GroupRenameDetails groupRenameDetailsValue;
    private AccountLockOrUnlockedDetails accountLockOrUnlockedDetailsValue;
    private EmmErrorDetails emmErrorDetailsValue;
    private GuestAdminSignedInViaTrustedTeamsDetails guestAdminSignedInViaTrustedTeamsDetailsValue;
    private GuestAdminSignedOutViaTrustedTeamsDetails guestAdminSignedOutViaTrustedTeamsDetailsValue;
    private LoginFailDetails loginFailDetailsValue;
    private LoginSuccessDetails loginSuccessDetailsValue;
    private LogoutDetails logoutDetailsValue;
    private ResellerSupportSessionEndDetails resellerSupportSessionEndDetailsValue;
    private ResellerSupportSessionStartDetails resellerSupportSessionStartDetailsValue;
    private SignInAsSessionEndDetails signInAsSessionEndDetailsValue;
    private SignInAsSessionStartDetails signInAsSessionStartDetailsValue;
    private SsoErrorDetails ssoErrorDetailsValue;
    private CreateTeamInviteLinkDetails createTeamInviteLinkDetailsValue;
    private DeleteTeamInviteLinkDetails deleteTeamInviteLinkDetailsValue;
    private MemberAddExternalIdDetails memberAddExternalIdDetailsValue;
    private MemberAddNameDetails memberAddNameDetailsValue;
    private MemberChangeAdminRoleDetails memberChangeAdminRoleDetailsValue;
    private MemberChangeEmailDetails memberChangeEmailDetailsValue;
    private MemberChangeExternalIdDetails memberChangeExternalIdDetailsValue;
    private MemberChangeMembershipTypeDetails memberChangeMembershipTypeDetailsValue;
    private MemberChangeNameDetails memberChangeNameDetailsValue;
    private MemberChangeResellerRoleDetails memberChangeResellerRoleDetailsValue;
    private MemberChangeStatusDetails memberChangeStatusDetailsValue;
    private MemberDeleteManualContactsDetails memberDeleteManualContactsDetailsValue;
    private MemberDeleteProfilePhotoDetails memberDeleteProfilePhotoDetailsValue;
    private MemberPermanentlyDeleteAccountContentsDetails memberPermanentlyDeleteAccountContentsDetailsValue;
    private MemberRemoveExternalIdDetails memberRemoveExternalIdDetailsValue;
    private MemberSetProfilePhotoDetails memberSetProfilePhotoDetailsValue;
    private MemberSpaceLimitsAddCustomQuotaDetails memberSpaceLimitsAddCustomQuotaDetailsValue;
    private MemberSpaceLimitsChangeCustomQuotaDetails memberSpaceLimitsChangeCustomQuotaDetailsValue;
    private MemberSpaceLimitsChangeStatusDetails memberSpaceLimitsChangeStatusDetailsValue;
    private MemberSpaceLimitsRemoveCustomQuotaDetails memberSpaceLimitsRemoveCustomQuotaDetailsValue;
    private MemberSuggestDetails memberSuggestDetailsValue;
    private MemberTransferAccountContentsDetails memberTransferAccountContentsDetailsValue;
    private PendingSecondaryEmailAddedDetails pendingSecondaryEmailAddedDetailsValue;
    private SecondaryEmailDeletedDetails secondaryEmailDeletedDetailsValue;
    private SecondaryEmailVerifiedDetails secondaryEmailVerifiedDetailsValue;
    private SecondaryMailsPolicyChangedDetails secondaryMailsPolicyChangedDetailsValue;
    private BinderAddPageDetails binderAddPageDetailsValue;
    private BinderAddSectionDetails binderAddSectionDetailsValue;
    private BinderRemovePageDetails binderRemovePageDetailsValue;
    private BinderRemoveSectionDetails binderRemoveSectionDetailsValue;
    private BinderRenamePageDetails binderRenamePageDetailsValue;
    private BinderRenameSectionDetails binderRenameSectionDetailsValue;
    private BinderReorderPageDetails binderReorderPageDetailsValue;
    private BinderReorderSectionDetails binderReorderSectionDetailsValue;
    private PaperContentAddMemberDetails paperContentAddMemberDetailsValue;
    private PaperContentAddToFolderDetails paperContentAddToFolderDetailsValue;
    private PaperContentArchiveDetails paperContentArchiveDetailsValue;
    private PaperContentCreateDetails paperContentCreateDetailsValue;
    private PaperContentPermanentlyDeleteDetails paperContentPermanentlyDeleteDetailsValue;
    private PaperContentRemoveFromFolderDetails paperContentRemoveFromFolderDetailsValue;
    private PaperContentRemoveMemberDetails paperContentRemoveMemberDetailsValue;
    private PaperContentRenameDetails paperContentRenameDetailsValue;
    private PaperContentRestoreDetails paperContentRestoreDetailsValue;
    private PaperDocAddCommentDetails paperDocAddCommentDetailsValue;
    private PaperDocChangeMemberRoleDetails paperDocChangeMemberRoleDetailsValue;
    private PaperDocChangeSharingPolicyDetails paperDocChangeSharingPolicyDetailsValue;
    private PaperDocChangeSubscriptionDetails paperDocChangeSubscriptionDetailsValue;
    private PaperDocDeletedDetails paperDocDeletedDetailsValue;
    private PaperDocDeleteCommentDetails paperDocDeleteCommentDetailsValue;
    private PaperDocDownloadDetails paperDocDownloadDetailsValue;
    private PaperDocEditDetails paperDocEditDetailsValue;
    private PaperDocEditCommentDetails paperDocEditCommentDetailsValue;
    private PaperDocFollowedDetails paperDocFollowedDetailsValue;
    private PaperDocMentionDetails paperDocMentionDetailsValue;
    private PaperDocOwnershipChangedDetails paperDocOwnershipChangedDetailsValue;
    private PaperDocRequestAccessDetails paperDocRequestAccessDetailsValue;
    private PaperDocResolveCommentDetails paperDocResolveCommentDetailsValue;
    private PaperDocRevertDetails paperDocRevertDetailsValue;
    private PaperDocSlackShareDetails paperDocSlackShareDetailsValue;
    private PaperDocTeamInviteDetails paperDocTeamInviteDetailsValue;
    private PaperDocTrashedDetails paperDocTrashedDetailsValue;
    private PaperDocUnresolveCommentDetails paperDocUnresolveCommentDetailsValue;
    private PaperDocUntrashedDetails paperDocUntrashedDetailsValue;
    private PaperDocViewDetails paperDocViewDetailsValue;
    private PaperExternalViewAllowDetails paperExternalViewAllowDetailsValue;
    private PaperExternalViewDefaultTeamDetails paperExternalViewDefaultTeamDetailsValue;
    private PaperExternalViewForbidDetails paperExternalViewForbidDetailsValue;
    private PaperFolderChangeSubscriptionDetails paperFolderChangeSubscriptionDetailsValue;
    private PaperFolderDeletedDetails paperFolderDeletedDetailsValue;
    private PaperFolderFollowedDetails paperFolderFollowedDetailsValue;
    private PaperFolderTeamInviteDetails paperFolderTeamInviteDetailsValue;
    private PaperPublishedLinkChangePermissionDetails paperPublishedLinkChangePermissionDetailsValue;
    private PaperPublishedLinkCreateDetails paperPublishedLinkCreateDetailsValue;
    private PaperPublishedLinkDisabledDetails paperPublishedLinkDisabledDetailsValue;
    private PaperPublishedLinkViewDetails paperPublishedLinkViewDetailsValue;
    private PasswordChangeDetails passwordChangeDetailsValue;
    private PasswordResetDetails passwordResetDetailsValue;
    private PasswordResetAllDetails passwordResetAllDetailsValue;
    private ClassificationCreateReportDetails classificationCreateReportDetailsValue;
    private ClassificationCreateReportFailDetails classificationCreateReportFailDetailsValue;
    private EmmCreateExceptionsReportDetails emmCreateExceptionsReportDetailsValue;
    private EmmCreateUsageReportDetails emmCreateUsageReportDetailsValue;
    private ExportMembersReportDetails exportMembersReportDetailsValue;
    private ExportMembersReportFailDetails exportMembersReportFailDetailsValue;
    private ExternalSharingCreateReportDetails externalSharingCreateReportDetailsValue;
    private ExternalSharingReportFailedDetails externalSharingReportFailedDetailsValue;
    private NoExpirationLinkGenCreateReportDetails noExpirationLinkGenCreateReportDetailsValue;
    private NoExpirationLinkGenReportFailedDetails noExpirationLinkGenReportFailedDetailsValue;
    private NoPasswordLinkGenCreateReportDetails noPasswordLinkGenCreateReportDetailsValue;
    private NoPasswordLinkGenReportFailedDetails noPasswordLinkGenReportFailedDetailsValue;
    private NoPasswordLinkViewCreateReportDetails noPasswordLinkViewCreateReportDetailsValue;
    private NoPasswordLinkViewReportFailedDetails noPasswordLinkViewReportFailedDetailsValue;
    private OutdatedLinkViewCreateReportDetails outdatedLinkViewCreateReportDetailsValue;
    private OutdatedLinkViewReportFailedDetails outdatedLinkViewReportFailedDetailsValue;
    private PaperAdminExportStartDetails paperAdminExportStartDetailsValue;
    private SmartSyncCreateAdminPrivilegeReportDetails smartSyncCreateAdminPrivilegeReportDetailsValue;
    private TeamActivityCreateReportDetails teamActivityCreateReportDetailsValue;
    private TeamActivityCreateReportFailDetails teamActivityCreateReportFailDetailsValue;
    private CollectionShareDetails collectionShareDetailsValue;
    private FileTransfersFileAddDetails fileTransfersFileAddDetailsValue;
    private FileTransfersTransferDeleteDetails fileTransfersTransferDeleteDetailsValue;
    private FileTransfersTransferDownloadDetails fileTransfersTransferDownloadDetailsValue;
    private FileTransfersTransferSendDetails fileTransfersTransferSendDetailsValue;
    private FileTransfersTransferViewDetails fileTransfersTransferViewDetailsValue;
    private NoteAclInviteOnlyDetails noteAclInviteOnlyDetailsValue;
    private NoteAclLinkDetails noteAclLinkDetailsValue;
    private NoteAclTeamLinkDetails noteAclTeamLinkDetailsValue;
    private NoteSharedDetails noteSharedDetailsValue;
    private NoteShareReceiveDetails noteShareReceiveDetailsValue;
    private OpenNoteSharedDetails openNoteSharedDetailsValue;
    private SfAddGroupDetails sfAddGroupDetailsValue;
    private SfAllowNonMembersToViewSharedLinksDetails sfAllowNonMembersToViewSharedLinksDetailsValue;
    private SfExternalInviteWarnDetails sfExternalInviteWarnDetailsValue;
    private SfFbInviteDetails sfFbInviteDetailsValue;
    private SfFbInviteChangeRoleDetails sfFbInviteChangeRoleDetailsValue;
    private SfFbUninviteDetails sfFbUninviteDetailsValue;
    private SfInviteGroupDetails sfInviteGroupDetailsValue;
    private SfTeamGrantAccessDetails sfTeamGrantAccessDetailsValue;
    private SfTeamInviteDetails sfTeamInviteDetailsValue;
    private SfTeamInviteChangeRoleDetails sfTeamInviteChangeRoleDetailsValue;
    private SfTeamJoinDetails sfTeamJoinDetailsValue;
    private SfTeamJoinFromOobLinkDetails sfTeamJoinFromOobLinkDetailsValue;
    private SfTeamUninviteDetails sfTeamUninviteDetailsValue;
    private SharedContentAddInviteesDetails sharedContentAddInviteesDetailsValue;
    private SharedContentAddLinkExpiryDetails sharedContentAddLinkExpiryDetailsValue;
    private SharedContentAddLinkPasswordDetails sharedContentAddLinkPasswordDetailsValue;
    private SharedContentAddMemberDetails sharedContentAddMemberDetailsValue;
    private SharedContentChangeDownloadsPolicyDetails sharedContentChangeDownloadsPolicyDetailsValue;
    private SharedContentChangeInviteeRoleDetails sharedContentChangeInviteeRoleDetailsValue;
    private SharedContentChangeLinkAudienceDetails sharedContentChangeLinkAudienceDetailsValue;
    private SharedContentChangeLinkExpiryDetails sharedContentChangeLinkExpiryDetailsValue;
    private SharedContentChangeLinkPasswordDetails sharedContentChangeLinkPasswordDetailsValue;
    private SharedContentChangeMemberRoleDetails sharedContentChangeMemberRoleDetailsValue;
    private SharedContentChangeViewerInfoPolicyDetails sharedContentChangeViewerInfoPolicyDetailsValue;
    private SharedContentClaimInvitationDetails sharedContentClaimInvitationDetailsValue;
    private SharedContentCopyDetails sharedContentCopyDetailsValue;
    private SharedContentDownloadDetails sharedContentDownloadDetailsValue;
    private SharedContentRelinquishMembershipDetails sharedContentRelinquishMembershipDetailsValue;
    private SharedContentRemoveInviteesDetails sharedContentRemoveInviteesDetailsValue;
    private SharedContentRemoveLinkExpiryDetails sharedContentRemoveLinkExpiryDetailsValue;
    private SharedContentRemoveLinkPasswordDetails sharedContentRemoveLinkPasswordDetailsValue;
    private SharedContentRemoveMemberDetails sharedContentRemoveMemberDetailsValue;
    private SharedContentRequestAccessDetails sharedContentRequestAccessDetailsValue;
    private SharedContentRestoreInviteesDetails sharedContentRestoreInviteesDetailsValue;
    private SharedContentRestoreMemberDetails sharedContentRestoreMemberDetailsValue;
    private SharedContentUnshareDetails sharedContentUnshareDetailsValue;
    private SharedContentViewDetails sharedContentViewDetailsValue;
    private SharedFolderChangeLinkPolicyDetails sharedFolderChangeLinkPolicyDetailsValue;
    private SharedFolderChangeMembersInheritancePolicyDetails sharedFolderChangeMembersInheritancePolicyDetailsValue;
    private SharedFolderChangeMembersManagementPolicyDetails sharedFolderChangeMembersManagementPolicyDetailsValue;
    private SharedFolderChangeMembersPolicyDetails sharedFolderChangeMembersPolicyDetailsValue;
    private SharedFolderCreateDetails sharedFolderCreateDetailsValue;
    private SharedFolderDeclineInvitationDetails sharedFolderDeclineInvitationDetailsValue;
    private SharedFolderMountDetails sharedFolderMountDetailsValue;
    private SharedFolderNestDetails sharedFolderNestDetailsValue;
    private SharedFolderTransferOwnershipDetails sharedFolderTransferOwnershipDetailsValue;
    private SharedFolderUnmountDetails sharedFolderUnmountDetailsValue;
    private SharedLinkAddExpiryDetails sharedLinkAddExpiryDetailsValue;
    private SharedLinkChangeExpiryDetails sharedLinkChangeExpiryDetailsValue;
    private SharedLinkChangeVisibilityDetails sharedLinkChangeVisibilityDetailsValue;
    private SharedLinkCopyDetails sharedLinkCopyDetailsValue;
    private SharedLinkCreateDetails sharedLinkCreateDetailsValue;
    private SharedLinkDisableDetails sharedLinkDisableDetailsValue;
    private SharedLinkDownloadDetails sharedLinkDownloadDetailsValue;
    private SharedLinkRemoveExpiryDetails sharedLinkRemoveExpiryDetailsValue;
    private SharedLinkSettingsAddExpirationDetails sharedLinkSettingsAddExpirationDetailsValue;
    private SharedLinkSettingsAddPasswordDetails sharedLinkSettingsAddPasswordDetailsValue;
    private SharedLinkSettingsAllowDownloadDisabledDetails sharedLinkSettingsAllowDownloadDisabledDetailsValue;
    private SharedLinkSettingsAllowDownloadEnabledDetails sharedLinkSettingsAllowDownloadEnabledDetailsValue;
    private SharedLinkSettingsChangeAudienceDetails sharedLinkSettingsChangeAudienceDetailsValue;
    private SharedLinkSettingsChangeExpirationDetails sharedLinkSettingsChangeExpirationDetailsValue;
    private SharedLinkSettingsChangePasswordDetails sharedLinkSettingsChangePasswordDetailsValue;
    private SharedLinkSettingsRemoveExpirationDetails sharedLinkSettingsRemoveExpirationDetailsValue;
    private SharedLinkSettingsRemovePasswordDetails sharedLinkSettingsRemovePasswordDetailsValue;
    private SharedLinkShareDetails sharedLinkShareDetailsValue;
    private SharedLinkViewDetails sharedLinkViewDetailsValue;
    private SharedNoteOpenedDetails sharedNoteOpenedDetailsValue;
    private ShmodelDisableDownloadsDetails shmodelDisableDownloadsDetailsValue;
    private ShmodelEnableDownloadsDetails shmodelEnableDownloadsDetailsValue;
    private ShmodelGroupShareDetails shmodelGroupShareDetailsValue;
    private ShowcaseAccessGrantedDetails showcaseAccessGrantedDetailsValue;
    private ShowcaseAddMemberDetails showcaseAddMemberDetailsValue;
    private ShowcaseArchivedDetails showcaseArchivedDetailsValue;
    private ShowcaseCreatedDetails showcaseCreatedDetailsValue;
    private ShowcaseDeleteCommentDetails showcaseDeleteCommentDetailsValue;
    private ShowcaseEditedDetails showcaseEditedDetailsValue;
    private ShowcaseEditCommentDetails showcaseEditCommentDetailsValue;
    private ShowcaseFileAddedDetails showcaseFileAddedDetailsValue;
    private ShowcaseFileDownloadDetails showcaseFileDownloadDetailsValue;
    private ShowcaseFileRemovedDetails showcaseFileRemovedDetailsValue;
    private ShowcaseFileViewDetails showcaseFileViewDetailsValue;
    private ShowcasePermanentlyDeletedDetails showcasePermanentlyDeletedDetailsValue;
    private ShowcasePostCommentDetails showcasePostCommentDetailsValue;
    private ShowcaseRemoveMemberDetails showcaseRemoveMemberDetailsValue;
    private ShowcaseRenamedDetails showcaseRenamedDetailsValue;
    private ShowcaseRequestAccessDetails showcaseRequestAccessDetailsValue;
    private ShowcaseResolveCommentDetails showcaseResolveCommentDetailsValue;
    private ShowcaseRestoredDetails showcaseRestoredDetailsValue;
    private ShowcaseTrashedDetails showcaseTrashedDetailsValue;
    private ShowcaseTrashedDeprecatedDetails showcaseTrashedDeprecatedDetailsValue;
    private ShowcaseUnresolveCommentDetails showcaseUnresolveCommentDetailsValue;
    private ShowcaseUntrashedDetails showcaseUntrashedDetailsValue;
    private ShowcaseUntrashedDeprecatedDetails showcaseUntrashedDeprecatedDetailsValue;
    private ShowcaseViewDetails showcaseViewDetailsValue;
    private SsoAddCertDetails ssoAddCertDetailsValue;
    private SsoAddLoginUrlDetails ssoAddLoginUrlDetailsValue;
    private SsoAddLogoutUrlDetails ssoAddLogoutUrlDetailsValue;
    private SsoChangeCertDetails ssoChangeCertDetailsValue;
    private SsoChangeLoginUrlDetails ssoChangeLoginUrlDetailsValue;
    private SsoChangeLogoutUrlDetails ssoChangeLogoutUrlDetailsValue;
    private SsoChangeSamlIdentityModeDetails ssoChangeSamlIdentityModeDetailsValue;
    private SsoRemoveCertDetails ssoRemoveCertDetailsValue;
    private SsoRemoveLoginUrlDetails ssoRemoveLoginUrlDetailsValue;
    private SsoRemoveLogoutUrlDetails ssoRemoveLogoutUrlDetailsValue;
    private TeamFolderChangeStatusDetails teamFolderChangeStatusDetailsValue;
    private TeamFolderCreateDetails teamFolderCreateDetailsValue;
    private TeamFolderDowngradeDetails teamFolderDowngradeDetailsValue;
    private TeamFolderPermanentlyDeleteDetails teamFolderPermanentlyDeleteDetailsValue;
    private TeamFolderRenameDetails teamFolderRenameDetailsValue;
    private TeamSelectiveSyncSettingsChangedDetails teamSelectiveSyncSettingsChangedDetailsValue;
    private AccountCaptureChangePolicyDetails accountCaptureChangePolicyDetailsValue;
    private AdminEmailRemindersChangedDetails adminEmailRemindersChangedDetailsValue;
    private AllowDownloadDisabledDetails allowDownloadDisabledDetailsValue;
    private AllowDownloadEnabledDetails allowDownloadEnabledDetailsValue;
    private AppPermissionsChangedDetails appPermissionsChangedDetailsValue;
    private CameraUploadsPolicyChangedDetails cameraUploadsPolicyChangedDetailsValue;
    private CaptureTranscriptPolicyChangedDetails captureTranscriptPolicyChangedDetailsValue;
    private ClassificationChangePolicyDetails classificationChangePolicyDetailsValue;
    private ComputerBackupPolicyChangedDetails computerBackupPolicyChangedDetailsValue;
    private ContentAdministrationPolicyChangedDetails contentAdministrationPolicyChangedDetailsValue;
    private DataPlacementRestrictionChangePolicyDetails dataPlacementRestrictionChangePolicyDetailsValue;
    private DataPlacementRestrictionSatisfyPolicyDetails dataPlacementRestrictionSatisfyPolicyDetailsValue;
    private DeviceApprovalsAddExceptionDetails deviceApprovalsAddExceptionDetailsValue;
    private DeviceApprovalsChangeDesktopPolicyDetails deviceApprovalsChangeDesktopPolicyDetailsValue;
    private DeviceApprovalsChangeMobilePolicyDetails deviceApprovalsChangeMobilePolicyDetailsValue;
    private DeviceApprovalsChangeOverageActionDetails deviceApprovalsChangeOverageActionDetailsValue;
    private DeviceApprovalsChangeUnlinkActionDetails deviceApprovalsChangeUnlinkActionDetailsValue;
    private DeviceApprovalsRemoveExceptionDetails deviceApprovalsRemoveExceptionDetailsValue;
    private DirectoryRestrictionsAddMembersDetails directoryRestrictionsAddMembersDetailsValue;
    private DirectoryRestrictionsRemoveMembersDetails directoryRestrictionsRemoveMembersDetailsValue;
    private DropboxPasswordsPolicyChangedDetails dropboxPasswordsPolicyChangedDetailsValue;
    private EmailIngestPolicyChangedDetails emailIngestPolicyChangedDetailsValue;
    private EmmAddExceptionDetails emmAddExceptionDetailsValue;
    private EmmChangePolicyDetails emmChangePolicyDetailsValue;
    private EmmRemoveExceptionDetails emmRemoveExceptionDetailsValue;
    private ExtendedVersionHistoryChangePolicyDetails extendedVersionHistoryChangePolicyDetailsValue;
    private ExternalDriveBackupPolicyChangedDetails externalDriveBackupPolicyChangedDetailsValue;
    private FileCommentsChangePolicyDetails fileCommentsChangePolicyDetailsValue;
    private FileLockingPolicyChangedDetails fileLockingPolicyChangedDetailsValue;
    private FileProviderMigrationPolicyChangedDetails fileProviderMigrationPolicyChangedDetailsValue;
    private FileRequestsChangePolicyDetails fileRequestsChangePolicyDetailsValue;
    private FileRequestsEmailsEnabledDetails fileRequestsEmailsEnabledDetailsValue;
    private FileRequestsEmailsRestrictedToTeamOnlyDetails fileRequestsEmailsRestrictedToTeamOnlyDetailsValue;
    private FileTransfersPolicyChangedDetails fileTransfersPolicyChangedDetailsValue;
    private GoogleSsoChangePolicyDetails googleSsoChangePolicyDetailsValue;
    private GroupUserManagementChangePolicyDetails groupUserManagementChangePolicyDetailsValue;
    private IntegrationPolicyChangedDetails integrationPolicyChangedDetailsValue;
    private InviteAcceptanceEmailPolicyChangedDetails inviteAcceptanceEmailPolicyChangedDetailsValue;
    private MemberRequestsChangePolicyDetails memberRequestsChangePolicyDetailsValue;
    private MemberSendInvitePolicyChangedDetails memberSendInvitePolicyChangedDetailsValue;
    private MemberSpaceLimitsAddExceptionDetails memberSpaceLimitsAddExceptionDetailsValue;
    private MemberSpaceLimitsChangeCapsTypePolicyDetails memberSpaceLimitsChangeCapsTypePolicyDetailsValue;
    private MemberSpaceLimitsChangePolicyDetails memberSpaceLimitsChangePolicyDetailsValue;
    private MemberSpaceLimitsRemoveExceptionDetails memberSpaceLimitsRemoveExceptionDetailsValue;
    private MemberSuggestionsChangePolicyDetails memberSuggestionsChangePolicyDetailsValue;
    private MicrosoftOfficeAddinChangePolicyDetails microsoftOfficeAddinChangePolicyDetailsValue;
    private NetworkControlChangePolicyDetails networkControlChangePolicyDetailsValue;
    private PaperChangeDeploymentPolicyDetails paperChangeDeploymentPolicyDetailsValue;
    private PaperChangeMemberLinkPolicyDetails paperChangeMemberLinkPolicyDetailsValue;
    private PaperChangeMemberPolicyDetails paperChangeMemberPolicyDetailsValue;
    private PaperChangePolicyDetails paperChangePolicyDetailsValue;
    private PaperDefaultFolderPolicyChangedDetails paperDefaultFolderPolicyChangedDetailsValue;
    private PaperDesktopPolicyChangedDetails paperDesktopPolicyChangedDetailsValue;
    private PaperEnabledUsersGroupAdditionDetails paperEnabledUsersGroupAdditionDetailsValue;
    private PaperEnabledUsersGroupRemovalDetails paperEnabledUsersGroupRemovalDetailsValue;
    private PasswordStrengthRequirementsChangePolicyDetails passwordStrengthRequirementsChangePolicyDetailsValue;
    private PermanentDeleteChangePolicyDetails permanentDeleteChangePolicyDetailsValue;
    private ResellerSupportChangePolicyDetails resellerSupportChangePolicyDetailsValue;
    private RewindPolicyChangedDetails rewindPolicyChangedDetailsValue;
    private SendForSignaturePolicyChangedDetails sendForSignaturePolicyChangedDetailsValue;
    private SharingChangeFolderJoinPolicyDetails sharingChangeFolderJoinPolicyDetailsValue;
    private SharingChangeLinkAllowChangeExpirationPolicyDetails sharingChangeLinkAllowChangeExpirationPolicyDetailsValue;
    private SharingChangeLinkDefaultExpirationPolicyDetails sharingChangeLinkDefaultExpirationPolicyDetailsValue;
    private SharingChangeLinkEnforcePasswordPolicyDetails sharingChangeLinkEnforcePasswordPolicyDetailsValue;
    private SharingChangeLinkPolicyDetails sharingChangeLinkPolicyDetailsValue;
    private SharingChangeMemberPolicyDetails sharingChangeMemberPolicyDetailsValue;
    private ShowcaseChangeDownloadPolicyDetails showcaseChangeDownloadPolicyDetailsValue;
    private ShowcaseChangeEnabledPolicyDetails showcaseChangeEnabledPolicyDetailsValue;
    private ShowcaseChangeExternalSharingPolicyDetails showcaseChangeExternalSharingPolicyDetailsValue;
    private SmarterSmartSyncPolicyChangedDetails smarterSmartSyncPolicyChangedDetailsValue;
    private SmartSyncChangePolicyDetails smartSyncChangePolicyDetailsValue;
    private SmartSyncNotOptOutDetails smartSyncNotOptOutDetailsValue;
    private SmartSyncOptOutDetails smartSyncOptOutDetailsValue;
    private SsoChangePolicyDetails ssoChangePolicyDetailsValue;
    private TeamBrandingPolicyChangedDetails teamBrandingPolicyChangedDetailsValue;
    private TeamExtensionsPolicyChangedDetails teamExtensionsPolicyChangedDetailsValue;
    private TeamSelectiveSyncPolicyChangedDetails teamSelectiveSyncPolicyChangedDetailsValue;
    private TeamSharingWhitelistSubjectsChangedDetails teamSharingWhitelistSubjectsChangedDetailsValue;
    private TfaAddExceptionDetails tfaAddExceptionDetailsValue;
    private TfaChangePolicyDetails tfaChangePolicyDetailsValue;
    private TfaRemoveExceptionDetails tfaRemoveExceptionDetailsValue;
    private TwoAccountChangePolicyDetails twoAccountChangePolicyDetailsValue;
    private ViewerInfoPolicyChangedDetails viewerInfoPolicyChangedDetailsValue;
    private WatermarkingPolicyChangedDetails watermarkingPolicyChangedDetailsValue;
    private WebSessionsChangeActiveSessionLimitDetails webSessionsChangeActiveSessionLimitDetailsValue;
    private WebSessionsChangeFixedLengthPolicyDetails webSessionsChangeFixedLengthPolicyDetailsValue;
    private WebSessionsChangeIdleLengthPolicyDetails webSessionsChangeIdleLengthPolicyDetailsValue;
    private DataResidencyMigrationRequestSuccessfulDetails dataResidencyMigrationRequestSuccessfulDetailsValue;
    private DataResidencyMigrationRequestUnsuccessfulDetails dataResidencyMigrationRequestUnsuccessfulDetailsValue;
    private TeamMergeFromDetails teamMergeFromDetailsValue;
    private TeamMergeToDetails teamMergeToDetailsValue;
    private TeamProfileAddBackgroundDetails teamProfileAddBackgroundDetailsValue;
    private TeamProfileAddLogoDetails teamProfileAddLogoDetailsValue;
    private TeamProfileChangeBackgroundDetails teamProfileChangeBackgroundDetailsValue;
    private TeamProfileChangeDefaultLanguageDetails teamProfileChangeDefaultLanguageDetailsValue;
    private TeamProfileChangeLogoDetails teamProfileChangeLogoDetailsValue;
    private TeamProfileChangeNameDetails teamProfileChangeNameDetailsValue;
    private TeamProfileRemoveBackgroundDetails teamProfileRemoveBackgroundDetailsValue;
    private TeamProfileRemoveLogoDetails teamProfileRemoveLogoDetailsValue;
    private TfaAddBackupPhoneDetails tfaAddBackupPhoneDetailsValue;
    private TfaAddSecurityKeyDetails tfaAddSecurityKeyDetailsValue;
    private TfaChangeBackupPhoneDetails tfaChangeBackupPhoneDetailsValue;
    private TfaChangeStatusDetails tfaChangeStatusDetailsValue;
    private TfaRemoveBackupPhoneDetails tfaRemoveBackupPhoneDetailsValue;
    private TfaRemoveSecurityKeyDetails tfaRemoveSecurityKeyDetailsValue;
    private TfaResetDetails tfaResetDetailsValue;
    private ChangedEnterpriseAdminRoleDetails changedEnterpriseAdminRoleDetailsValue;
    private ChangedEnterpriseConnectedTeamStatusDetails changedEnterpriseConnectedTeamStatusDetailsValue;
    private EndedEnterpriseAdminSessionDetails endedEnterpriseAdminSessionDetailsValue;
    private EndedEnterpriseAdminSessionDeprecatedDetails endedEnterpriseAdminSessionDeprecatedDetailsValue;
    private EnterpriseSettingsLockingDetails enterpriseSettingsLockingDetailsValue;
    private GuestAdminChangeStatusDetails guestAdminChangeStatusDetailsValue;
    private StartedEnterpriseAdminSessionDetails startedEnterpriseAdminSessionDetailsValue;
    private TeamMergeRequestAcceptedDetails teamMergeRequestAcceptedDetailsValue;
    private TeamMergeRequestAcceptedShownToPrimaryTeamDetails teamMergeRequestAcceptedShownToPrimaryTeamDetailsValue;
    private TeamMergeRequestAcceptedShownToSecondaryTeamDetails teamMergeRequestAcceptedShownToSecondaryTeamDetailsValue;
    private TeamMergeRequestAutoCanceledDetails teamMergeRequestAutoCanceledDetailsValue;
    private TeamMergeRequestCanceledDetails teamMergeRequestCanceledDetailsValue;
    private TeamMergeRequestCanceledShownToPrimaryTeamDetails teamMergeRequestCanceledShownToPrimaryTeamDetailsValue;
    private TeamMergeRequestCanceledShownToSecondaryTeamDetails teamMergeRequestCanceledShownToSecondaryTeamDetailsValue;
    private TeamMergeRequestExpiredDetails teamMergeRequestExpiredDetailsValue;
    private TeamMergeRequestExpiredShownToPrimaryTeamDetails teamMergeRequestExpiredShownToPrimaryTeamDetailsValue;
    private TeamMergeRequestExpiredShownToSecondaryTeamDetails teamMergeRequestExpiredShownToSecondaryTeamDetailsValue;
    private TeamMergeRequestRejectedShownToPrimaryTeamDetails teamMergeRequestRejectedShownToPrimaryTeamDetailsValue;
    private TeamMergeRequestRejectedShownToSecondaryTeamDetails teamMergeRequestRejectedShownToSecondaryTeamDetailsValue;
    private TeamMergeRequestReminderDetails teamMergeRequestReminderDetailsValue;
    private TeamMergeRequestReminderShownToPrimaryTeamDetails teamMergeRequestReminderShownToPrimaryTeamDetailsValue;
    private TeamMergeRequestReminderShownToSecondaryTeamDetails teamMergeRequestReminderShownToSecondaryTeamDetailsValue;
    private TeamMergeRequestRevokedDetails teamMergeRequestRevokedDetailsValue;
    private TeamMergeRequestSentShownToPrimaryTeamDetails teamMergeRequestSentShownToPrimaryTeamDetailsValue;
    private TeamMergeRequestSentShownToSecondaryTeamDetails teamMergeRequestSentShownToSecondaryTeamDetailsValue;
    private MissingDetails missingDetailsValue;

    /**
     * Private default constructor, so that object is uninitializable publicly.
     */
    private EventDetails() {
    }


    /**
     * Additional fields depending on the event type.
     *
     * @param _tag  Discriminating tag for this instance.
     */
    private EventDetails withTag(Tag _tag) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param adminAlertingAlertStateChangedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndAdminAlertingAlertStateChangedDetails(Tag _tag, AdminAlertingAlertStateChangedDetails adminAlertingAlertStateChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.adminAlertingAlertStateChangedDetailsValue = adminAlertingAlertStateChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param adminAlertingChangedAlertConfigDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndAdminAlertingChangedAlertConfigDetails(Tag _tag, AdminAlertingChangedAlertConfigDetails adminAlertingChangedAlertConfigDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.adminAlertingChangedAlertConfigDetailsValue = adminAlertingChangedAlertConfigDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param adminAlertingTriggeredAlertDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndAdminAlertingTriggeredAlertDetails(Tag _tag, AdminAlertingTriggeredAlertDetails adminAlertingTriggeredAlertDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.adminAlertingTriggeredAlertDetailsValue = adminAlertingTriggeredAlertDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param appBlockedByPermissionsDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndAppBlockedByPermissionsDetails(Tag _tag, AppBlockedByPermissionsDetails appBlockedByPermissionsDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.appBlockedByPermissionsDetailsValue = appBlockedByPermissionsDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param appLinkTeamDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndAppLinkTeamDetails(Tag _tag, AppLinkTeamDetails appLinkTeamDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.appLinkTeamDetailsValue = appLinkTeamDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param appLinkUserDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndAppLinkUserDetails(Tag _tag, AppLinkUserDetails appLinkUserDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.appLinkUserDetailsValue = appLinkUserDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param appUnlinkTeamDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndAppUnlinkTeamDetails(Tag _tag, AppUnlinkTeamDetails appUnlinkTeamDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.appUnlinkTeamDetailsValue = appUnlinkTeamDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param appUnlinkUserDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndAppUnlinkUserDetails(Tag _tag, AppUnlinkUserDetails appUnlinkUserDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.appUnlinkUserDetailsValue = appUnlinkUserDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param integrationConnectedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndIntegrationConnectedDetails(Tag _tag, IntegrationConnectedDetails integrationConnectedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.integrationConnectedDetailsValue = integrationConnectedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param integrationDisconnectedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndIntegrationDisconnectedDetails(Tag _tag, IntegrationDisconnectedDetails integrationDisconnectedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.integrationDisconnectedDetailsValue = integrationDisconnectedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileAddCommentDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileAddCommentDetails(Tag _tag, FileAddCommentDetails fileAddCommentDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileAddCommentDetailsValue = fileAddCommentDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileChangeCommentSubscriptionDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileChangeCommentSubscriptionDetails(Tag _tag, FileChangeCommentSubscriptionDetails fileChangeCommentSubscriptionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileChangeCommentSubscriptionDetailsValue = fileChangeCommentSubscriptionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileDeleteCommentDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileDeleteCommentDetails(Tag _tag, FileDeleteCommentDetails fileDeleteCommentDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileDeleteCommentDetailsValue = fileDeleteCommentDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileEditCommentDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileEditCommentDetails(Tag _tag, FileEditCommentDetails fileEditCommentDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileEditCommentDetailsValue = fileEditCommentDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileLikeCommentDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileLikeCommentDetails(Tag _tag, FileLikeCommentDetails fileLikeCommentDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileLikeCommentDetailsValue = fileLikeCommentDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileResolveCommentDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileResolveCommentDetails(Tag _tag, FileResolveCommentDetails fileResolveCommentDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileResolveCommentDetailsValue = fileResolveCommentDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileUnlikeCommentDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileUnlikeCommentDetails(Tag _tag, FileUnlikeCommentDetails fileUnlikeCommentDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileUnlikeCommentDetailsValue = fileUnlikeCommentDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileUnresolveCommentDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileUnresolveCommentDetails(Tag _tag, FileUnresolveCommentDetails fileUnresolveCommentDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileUnresolveCommentDetailsValue = fileUnresolveCommentDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param governancePolicyAddFoldersDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGovernancePolicyAddFoldersDetails(Tag _tag, GovernancePolicyAddFoldersDetails governancePolicyAddFoldersDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.governancePolicyAddFoldersDetailsValue = governancePolicyAddFoldersDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param governancePolicyAddFolderFailedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGovernancePolicyAddFolderFailedDetails(Tag _tag, GovernancePolicyAddFolderFailedDetails governancePolicyAddFolderFailedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.governancePolicyAddFolderFailedDetailsValue = governancePolicyAddFolderFailedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param governancePolicyContentDisposedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGovernancePolicyContentDisposedDetails(Tag _tag, GovernancePolicyContentDisposedDetails governancePolicyContentDisposedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.governancePolicyContentDisposedDetailsValue = governancePolicyContentDisposedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param governancePolicyCreateDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGovernancePolicyCreateDetails(Tag _tag, GovernancePolicyCreateDetails governancePolicyCreateDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.governancePolicyCreateDetailsValue = governancePolicyCreateDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param governancePolicyDeleteDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGovernancePolicyDeleteDetails(Tag _tag, GovernancePolicyDeleteDetails governancePolicyDeleteDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.governancePolicyDeleteDetailsValue = governancePolicyDeleteDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param governancePolicyEditDetailsDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGovernancePolicyEditDetailsDetails(Tag _tag, GovernancePolicyEditDetailsDetails governancePolicyEditDetailsDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.governancePolicyEditDetailsDetailsValue = governancePolicyEditDetailsDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param governancePolicyEditDurationDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGovernancePolicyEditDurationDetails(Tag _tag, GovernancePolicyEditDurationDetails governancePolicyEditDurationDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.governancePolicyEditDurationDetailsValue = governancePolicyEditDurationDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param governancePolicyExportCreatedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGovernancePolicyExportCreatedDetails(Tag _tag, GovernancePolicyExportCreatedDetails governancePolicyExportCreatedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.governancePolicyExportCreatedDetailsValue = governancePolicyExportCreatedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param governancePolicyExportRemovedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGovernancePolicyExportRemovedDetails(Tag _tag, GovernancePolicyExportRemovedDetails governancePolicyExportRemovedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.governancePolicyExportRemovedDetailsValue = governancePolicyExportRemovedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param governancePolicyRemoveFoldersDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGovernancePolicyRemoveFoldersDetails(Tag _tag, GovernancePolicyRemoveFoldersDetails governancePolicyRemoveFoldersDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.governancePolicyRemoveFoldersDetailsValue = governancePolicyRemoveFoldersDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param governancePolicyReportCreatedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGovernancePolicyReportCreatedDetails(Tag _tag, GovernancePolicyReportCreatedDetails governancePolicyReportCreatedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.governancePolicyReportCreatedDetailsValue = governancePolicyReportCreatedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param governancePolicyZipPartDownloadedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGovernancePolicyZipPartDownloadedDetails(Tag _tag, GovernancePolicyZipPartDownloadedDetails governancePolicyZipPartDownloadedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.governancePolicyZipPartDownloadedDetailsValue = governancePolicyZipPartDownloadedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param legalHoldsActivateAHoldDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndLegalHoldsActivateAHoldDetails(Tag _tag, LegalHoldsActivateAHoldDetails legalHoldsActivateAHoldDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.legalHoldsActivateAHoldDetailsValue = legalHoldsActivateAHoldDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param legalHoldsAddMembersDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndLegalHoldsAddMembersDetails(Tag _tag, LegalHoldsAddMembersDetails legalHoldsAddMembersDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.legalHoldsAddMembersDetailsValue = legalHoldsAddMembersDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param legalHoldsChangeHoldDetailsDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndLegalHoldsChangeHoldDetailsDetails(Tag _tag, LegalHoldsChangeHoldDetailsDetails legalHoldsChangeHoldDetailsDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.legalHoldsChangeHoldDetailsDetailsValue = legalHoldsChangeHoldDetailsDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param legalHoldsChangeHoldNameDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndLegalHoldsChangeHoldNameDetails(Tag _tag, LegalHoldsChangeHoldNameDetails legalHoldsChangeHoldNameDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.legalHoldsChangeHoldNameDetailsValue = legalHoldsChangeHoldNameDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param legalHoldsExportAHoldDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndLegalHoldsExportAHoldDetails(Tag _tag, LegalHoldsExportAHoldDetails legalHoldsExportAHoldDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.legalHoldsExportAHoldDetailsValue = legalHoldsExportAHoldDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param legalHoldsExportCancelledDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndLegalHoldsExportCancelledDetails(Tag _tag, LegalHoldsExportCancelledDetails legalHoldsExportCancelledDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.legalHoldsExportCancelledDetailsValue = legalHoldsExportCancelledDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param legalHoldsExportDownloadedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndLegalHoldsExportDownloadedDetails(Tag _tag, LegalHoldsExportDownloadedDetails legalHoldsExportDownloadedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.legalHoldsExportDownloadedDetailsValue = legalHoldsExportDownloadedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param legalHoldsExportRemovedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndLegalHoldsExportRemovedDetails(Tag _tag, LegalHoldsExportRemovedDetails legalHoldsExportRemovedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.legalHoldsExportRemovedDetailsValue = legalHoldsExportRemovedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param legalHoldsReleaseAHoldDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndLegalHoldsReleaseAHoldDetails(Tag _tag, LegalHoldsReleaseAHoldDetails legalHoldsReleaseAHoldDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.legalHoldsReleaseAHoldDetailsValue = legalHoldsReleaseAHoldDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param legalHoldsRemoveMembersDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndLegalHoldsRemoveMembersDetails(Tag _tag, LegalHoldsRemoveMembersDetails legalHoldsRemoveMembersDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.legalHoldsRemoveMembersDetailsValue = legalHoldsRemoveMembersDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param legalHoldsReportAHoldDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndLegalHoldsReportAHoldDetails(Tag _tag, LegalHoldsReportAHoldDetails legalHoldsReportAHoldDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.legalHoldsReportAHoldDetailsValue = legalHoldsReportAHoldDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param deviceChangeIpDesktopDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDeviceChangeIpDesktopDetails(Tag _tag, DeviceChangeIpDesktopDetails deviceChangeIpDesktopDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.deviceChangeIpDesktopDetailsValue = deviceChangeIpDesktopDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param deviceChangeIpMobileDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDeviceChangeIpMobileDetails(Tag _tag, DeviceChangeIpMobileDetails deviceChangeIpMobileDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.deviceChangeIpMobileDetailsValue = deviceChangeIpMobileDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param deviceChangeIpWebDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDeviceChangeIpWebDetails(Tag _tag, DeviceChangeIpWebDetails deviceChangeIpWebDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.deviceChangeIpWebDetailsValue = deviceChangeIpWebDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param deviceDeleteOnUnlinkFailDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDeviceDeleteOnUnlinkFailDetails(Tag _tag, DeviceDeleteOnUnlinkFailDetails deviceDeleteOnUnlinkFailDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.deviceDeleteOnUnlinkFailDetailsValue = deviceDeleteOnUnlinkFailDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param deviceDeleteOnUnlinkSuccessDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDeviceDeleteOnUnlinkSuccessDetails(Tag _tag, DeviceDeleteOnUnlinkSuccessDetails deviceDeleteOnUnlinkSuccessDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.deviceDeleteOnUnlinkSuccessDetailsValue = deviceDeleteOnUnlinkSuccessDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param deviceLinkFailDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDeviceLinkFailDetails(Tag _tag, DeviceLinkFailDetails deviceLinkFailDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.deviceLinkFailDetailsValue = deviceLinkFailDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param deviceLinkSuccessDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDeviceLinkSuccessDetails(Tag _tag, DeviceLinkSuccessDetails deviceLinkSuccessDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.deviceLinkSuccessDetailsValue = deviceLinkSuccessDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param deviceManagementDisabledDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDeviceManagementDisabledDetails(Tag _tag, DeviceManagementDisabledDetails deviceManagementDisabledDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.deviceManagementDisabledDetailsValue = deviceManagementDisabledDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param deviceManagementEnabledDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDeviceManagementEnabledDetails(Tag _tag, DeviceManagementEnabledDetails deviceManagementEnabledDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.deviceManagementEnabledDetailsValue = deviceManagementEnabledDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param deviceSyncBackupStatusChangedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDeviceSyncBackupStatusChangedDetails(Tag _tag, DeviceSyncBackupStatusChangedDetails deviceSyncBackupStatusChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.deviceSyncBackupStatusChangedDetailsValue = deviceSyncBackupStatusChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param deviceUnlinkDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDeviceUnlinkDetails(Tag _tag, DeviceUnlinkDetails deviceUnlinkDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.deviceUnlinkDetailsValue = deviceUnlinkDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param dropboxPasswordsExportedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDropboxPasswordsExportedDetails(Tag _tag, DropboxPasswordsExportedDetails dropboxPasswordsExportedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.dropboxPasswordsExportedDetailsValue = dropboxPasswordsExportedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param dropboxPasswordsNewDeviceEnrolledDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDropboxPasswordsNewDeviceEnrolledDetails(Tag _tag, DropboxPasswordsNewDeviceEnrolledDetails dropboxPasswordsNewDeviceEnrolledDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.dropboxPasswordsNewDeviceEnrolledDetailsValue = dropboxPasswordsNewDeviceEnrolledDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param emmRefreshAuthTokenDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndEmmRefreshAuthTokenDetails(Tag _tag, EmmRefreshAuthTokenDetails emmRefreshAuthTokenDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.emmRefreshAuthTokenDetailsValue = emmRefreshAuthTokenDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param externalDriveBackupEligibilityStatusCheckedDetailsValue  Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndExternalDriveBackupEligibilityStatusCheckedDetails(Tag _tag, ExternalDriveBackupEligibilityStatusCheckedDetails externalDriveBackupEligibilityStatusCheckedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.externalDriveBackupEligibilityStatusCheckedDetailsValue = externalDriveBackupEligibilityStatusCheckedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param externalDriveBackupStatusChangedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndExternalDriveBackupStatusChangedDetails(Tag _tag, ExternalDriveBackupStatusChangedDetails externalDriveBackupStatusChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.externalDriveBackupStatusChangedDetailsValue = externalDriveBackupStatusChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param accountCaptureChangeAvailabilityDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndAccountCaptureChangeAvailabilityDetails(Tag _tag, AccountCaptureChangeAvailabilityDetails accountCaptureChangeAvailabilityDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.accountCaptureChangeAvailabilityDetailsValue = accountCaptureChangeAvailabilityDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param accountCaptureMigrateAccountDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndAccountCaptureMigrateAccountDetails(Tag _tag, AccountCaptureMigrateAccountDetails accountCaptureMigrateAccountDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.accountCaptureMigrateAccountDetailsValue = accountCaptureMigrateAccountDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param accountCaptureNotificationEmailsSentDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndAccountCaptureNotificationEmailsSentDetails(Tag _tag, AccountCaptureNotificationEmailsSentDetails accountCaptureNotificationEmailsSentDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.accountCaptureNotificationEmailsSentDetailsValue = accountCaptureNotificationEmailsSentDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param accountCaptureRelinquishAccountDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndAccountCaptureRelinquishAccountDetails(Tag _tag, AccountCaptureRelinquishAccountDetails accountCaptureRelinquishAccountDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.accountCaptureRelinquishAccountDetailsValue = accountCaptureRelinquishAccountDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param disabledDomainInvitesDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDisabledDomainInvitesDetails(Tag _tag, DisabledDomainInvitesDetails disabledDomainInvitesDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.disabledDomainInvitesDetailsValue = disabledDomainInvitesDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param domainInvitesApproveRequestToJoinTeamDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDomainInvitesApproveRequestToJoinTeamDetails(Tag _tag, DomainInvitesApproveRequestToJoinTeamDetails domainInvitesApproveRequestToJoinTeamDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.domainInvitesApproveRequestToJoinTeamDetailsValue = domainInvitesApproveRequestToJoinTeamDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param domainInvitesDeclineRequestToJoinTeamDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDomainInvitesDeclineRequestToJoinTeamDetails(Tag _tag, DomainInvitesDeclineRequestToJoinTeamDetails domainInvitesDeclineRequestToJoinTeamDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.domainInvitesDeclineRequestToJoinTeamDetailsValue = domainInvitesDeclineRequestToJoinTeamDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param domainInvitesEmailExistingUsersDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDomainInvitesEmailExistingUsersDetails(Tag _tag, DomainInvitesEmailExistingUsersDetails domainInvitesEmailExistingUsersDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.domainInvitesEmailExistingUsersDetailsValue = domainInvitesEmailExistingUsersDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param domainInvitesRequestToJoinTeamDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDomainInvitesRequestToJoinTeamDetails(Tag _tag, DomainInvitesRequestToJoinTeamDetails domainInvitesRequestToJoinTeamDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.domainInvitesRequestToJoinTeamDetailsValue = domainInvitesRequestToJoinTeamDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param domainInvitesSetInviteNewUserPrefToNoDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDomainInvitesSetInviteNewUserPrefToNoDetails(Tag _tag, DomainInvitesSetInviteNewUserPrefToNoDetails domainInvitesSetInviteNewUserPrefToNoDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.domainInvitesSetInviteNewUserPrefToNoDetailsValue = domainInvitesSetInviteNewUserPrefToNoDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param domainInvitesSetInviteNewUserPrefToYesDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDomainInvitesSetInviteNewUserPrefToYesDetails(Tag _tag, DomainInvitesSetInviteNewUserPrefToYesDetails domainInvitesSetInviteNewUserPrefToYesDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.domainInvitesSetInviteNewUserPrefToYesDetailsValue = domainInvitesSetInviteNewUserPrefToYesDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param domainVerificationAddDomainFailDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDomainVerificationAddDomainFailDetails(Tag _tag, DomainVerificationAddDomainFailDetails domainVerificationAddDomainFailDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.domainVerificationAddDomainFailDetailsValue = domainVerificationAddDomainFailDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param domainVerificationAddDomainSuccessDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDomainVerificationAddDomainSuccessDetails(Tag _tag, DomainVerificationAddDomainSuccessDetails domainVerificationAddDomainSuccessDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.domainVerificationAddDomainSuccessDetailsValue = domainVerificationAddDomainSuccessDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param domainVerificationRemoveDomainDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDomainVerificationRemoveDomainDetails(Tag _tag, DomainVerificationRemoveDomainDetails domainVerificationRemoveDomainDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.domainVerificationRemoveDomainDetailsValue = domainVerificationRemoveDomainDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param enabledDomainInvitesDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndEnabledDomainInvitesDetails(Tag _tag, EnabledDomainInvitesDetails enabledDomainInvitesDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.enabledDomainInvitesDetailsValue = enabledDomainInvitesDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param applyNamingConventionDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndApplyNamingConventionDetails(Tag _tag, ApplyNamingConventionDetails applyNamingConventionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.applyNamingConventionDetailsValue = applyNamingConventionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param createFolderDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndCreateFolderDetails(Tag _tag, CreateFolderDetails createFolderDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.createFolderDetailsValue = createFolderDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileAddDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileAddDetails(Tag _tag, FileAddDetails fileAddDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileAddDetailsValue = fileAddDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileCopyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileCopyDetails(Tag _tag, FileCopyDetails fileCopyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileCopyDetailsValue = fileCopyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileDeleteDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileDeleteDetails(Tag _tag, FileDeleteDetails fileDeleteDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileDeleteDetailsValue = fileDeleteDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileDownloadDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileDownloadDetails(Tag _tag, FileDownloadDetails fileDownloadDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileDownloadDetailsValue = fileDownloadDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileEditDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileEditDetails(Tag _tag, FileEditDetails fileEditDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileEditDetailsValue = fileEditDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileGetCopyReferenceDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileGetCopyReferenceDetails(Tag _tag, FileGetCopyReferenceDetails fileGetCopyReferenceDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileGetCopyReferenceDetailsValue = fileGetCopyReferenceDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileLockingLockStatusChangedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileLockingLockStatusChangedDetails(Tag _tag, FileLockingLockStatusChangedDetails fileLockingLockStatusChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileLockingLockStatusChangedDetailsValue = fileLockingLockStatusChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileMoveDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileMoveDetails(Tag _tag, FileMoveDetails fileMoveDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileMoveDetailsValue = fileMoveDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param filePermanentlyDeleteDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFilePermanentlyDeleteDetails(Tag _tag, FilePermanentlyDeleteDetails filePermanentlyDeleteDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.filePermanentlyDeleteDetailsValue = filePermanentlyDeleteDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param filePreviewDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFilePreviewDetails(Tag _tag, FilePreviewDetails filePreviewDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.filePreviewDetailsValue = filePreviewDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileRenameDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileRenameDetails(Tag _tag, FileRenameDetails fileRenameDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileRenameDetailsValue = fileRenameDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileRestoreDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileRestoreDetails(Tag _tag, FileRestoreDetails fileRestoreDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileRestoreDetailsValue = fileRestoreDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileRevertDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileRevertDetails(Tag _tag, FileRevertDetails fileRevertDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileRevertDetailsValue = fileRevertDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileRollbackChangesDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileRollbackChangesDetails(Tag _tag, FileRollbackChangesDetails fileRollbackChangesDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileRollbackChangesDetailsValue = fileRollbackChangesDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileSaveCopyReferenceDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileSaveCopyReferenceDetails(Tag _tag, FileSaveCopyReferenceDetails fileSaveCopyReferenceDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileSaveCopyReferenceDetailsValue = fileSaveCopyReferenceDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param folderOverviewDescriptionChangedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFolderOverviewDescriptionChangedDetails(Tag _tag, FolderOverviewDescriptionChangedDetails folderOverviewDescriptionChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.folderOverviewDescriptionChangedDetailsValue = folderOverviewDescriptionChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param folderOverviewItemPinnedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFolderOverviewItemPinnedDetails(Tag _tag, FolderOverviewItemPinnedDetails folderOverviewItemPinnedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.folderOverviewItemPinnedDetailsValue = folderOverviewItemPinnedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param folderOverviewItemUnpinnedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFolderOverviewItemUnpinnedDetails(Tag _tag, FolderOverviewItemUnpinnedDetails folderOverviewItemUnpinnedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.folderOverviewItemUnpinnedDetailsValue = folderOverviewItemUnpinnedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param objectLabelAddedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndObjectLabelAddedDetails(Tag _tag, ObjectLabelAddedDetails objectLabelAddedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.objectLabelAddedDetailsValue = objectLabelAddedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param objectLabelRemovedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndObjectLabelRemovedDetails(Tag _tag, ObjectLabelRemovedDetails objectLabelRemovedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.objectLabelRemovedDetailsValue = objectLabelRemovedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param objectLabelUpdatedValueDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndObjectLabelUpdatedValueDetails(Tag _tag, ObjectLabelUpdatedValueDetails objectLabelUpdatedValueDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.objectLabelUpdatedValueDetailsValue = objectLabelUpdatedValueDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param organizeFolderWithTidyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndOrganizeFolderWithTidyDetails(Tag _tag, OrganizeFolderWithTidyDetails organizeFolderWithTidyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.organizeFolderWithTidyDetailsValue = organizeFolderWithTidyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param rewindFolderDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndRewindFolderDetails(Tag _tag, RewindFolderDetails rewindFolderDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.rewindFolderDetailsValue = rewindFolderDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param undoNamingConventionDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndUndoNamingConventionDetails(Tag _tag, UndoNamingConventionDetails undoNamingConventionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.undoNamingConventionDetailsValue = undoNamingConventionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param undoOrganizeFolderWithTidyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndUndoOrganizeFolderWithTidyDetails(Tag _tag, UndoOrganizeFolderWithTidyDetails undoOrganizeFolderWithTidyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.undoOrganizeFolderWithTidyDetailsValue = undoOrganizeFolderWithTidyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param userTagsAddedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndUserTagsAddedDetails(Tag _tag, UserTagsAddedDetails userTagsAddedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.userTagsAddedDetailsValue = userTagsAddedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param userTagsRemovedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndUserTagsRemovedDetails(Tag _tag, UserTagsRemovedDetails userTagsRemovedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.userTagsRemovedDetailsValue = userTagsRemovedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param emailIngestReceiveFileDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndEmailIngestReceiveFileDetails(Tag _tag, EmailIngestReceiveFileDetails emailIngestReceiveFileDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.emailIngestReceiveFileDetailsValue = emailIngestReceiveFileDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileRequestChangeDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileRequestChangeDetails(Tag _tag, FileRequestChangeDetails fileRequestChangeDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileRequestChangeDetailsValue = fileRequestChangeDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileRequestCloseDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileRequestCloseDetails(Tag _tag, FileRequestCloseDetails fileRequestCloseDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileRequestCloseDetailsValue = fileRequestCloseDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileRequestCreateDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileRequestCreateDetails(Tag _tag, FileRequestCreateDetails fileRequestCreateDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileRequestCreateDetailsValue = fileRequestCreateDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileRequestDeleteDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileRequestDeleteDetails(Tag _tag, FileRequestDeleteDetails fileRequestDeleteDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileRequestDeleteDetailsValue = fileRequestDeleteDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileRequestReceiveFileDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileRequestReceiveFileDetails(Tag _tag, FileRequestReceiveFileDetails fileRequestReceiveFileDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileRequestReceiveFileDetailsValue = fileRequestReceiveFileDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param groupAddExternalIdDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGroupAddExternalIdDetails(Tag _tag, GroupAddExternalIdDetails groupAddExternalIdDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.groupAddExternalIdDetailsValue = groupAddExternalIdDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param groupAddMemberDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGroupAddMemberDetails(Tag _tag, GroupAddMemberDetails groupAddMemberDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.groupAddMemberDetailsValue = groupAddMemberDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param groupChangeExternalIdDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGroupChangeExternalIdDetails(Tag _tag, GroupChangeExternalIdDetails groupChangeExternalIdDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.groupChangeExternalIdDetailsValue = groupChangeExternalIdDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param groupChangeManagementTypeDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGroupChangeManagementTypeDetails(Tag _tag, GroupChangeManagementTypeDetails groupChangeManagementTypeDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.groupChangeManagementTypeDetailsValue = groupChangeManagementTypeDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param groupChangeMemberRoleDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGroupChangeMemberRoleDetails(Tag _tag, GroupChangeMemberRoleDetails groupChangeMemberRoleDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.groupChangeMemberRoleDetailsValue = groupChangeMemberRoleDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param groupCreateDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGroupCreateDetails(Tag _tag, GroupCreateDetails groupCreateDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.groupCreateDetailsValue = groupCreateDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param groupDeleteDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGroupDeleteDetails(Tag _tag, GroupDeleteDetails groupDeleteDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.groupDeleteDetailsValue = groupDeleteDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param groupDescriptionUpdatedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGroupDescriptionUpdatedDetails(Tag _tag, GroupDescriptionUpdatedDetails groupDescriptionUpdatedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.groupDescriptionUpdatedDetailsValue = groupDescriptionUpdatedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param groupJoinPolicyUpdatedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGroupJoinPolicyUpdatedDetails(Tag _tag, GroupJoinPolicyUpdatedDetails groupJoinPolicyUpdatedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.groupJoinPolicyUpdatedDetailsValue = groupJoinPolicyUpdatedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param groupMovedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGroupMovedDetails(Tag _tag, GroupMovedDetails groupMovedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.groupMovedDetailsValue = groupMovedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param groupRemoveExternalIdDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGroupRemoveExternalIdDetails(Tag _tag, GroupRemoveExternalIdDetails groupRemoveExternalIdDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.groupRemoveExternalIdDetailsValue = groupRemoveExternalIdDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param groupRemoveMemberDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGroupRemoveMemberDetails(Tag _tag, GroupRemoveMemberDetails groupRemoveMemberDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.groupRemoveMemberDetailsValue = groupRemoveMemberDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param groupRenameDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGroupRenameDetails(Tag _tag, GroupRenameDetails groupRenameDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.groupRenameDetailsValue = groupRenameDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param accountLockOrUnlockedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndAccountLockOrUnlockedDetails(Tag _tag, AccountLockOrUnlockedDetails accountLockOrUnlockedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.accountLockOrUnlockedDetailsValue = accountLockOrUnlockedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param emmErrorDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndEmmErrorDetails(Tag _tag, EmmErrorDetails emmErrorDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.emmErrorDetailsValue = emmErrorDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param guestAdminSignedInViaTrustedTeamsDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGuestAdminSignedInViaTrustedTeamsDetails(Tag _tag, GuestAdminSignedInViaTrustedTeamsDetails guestAdminSignedInViaTrustedTeamsDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.guestAdminSignedInViaTrustedTeamsDetailsValue = guestAdminSignedInViaTrustedTeamsDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param guestAdminSignedOutViaTrustedTeamsDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGuestAdminSignedOutViaTrustedTeamsDetails(Tag _tag, GuestAdminSignedOutViaTrustedTeamsDetails guestAdminSignedOutViaTrustedTeamsDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.guestAdminSignedOutViaTrustedTeamsDetailsValue = guestAdminSignedOutViaTrustedTeamsDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param loginFailDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndLoginFailDetails(Tag _tag, LoginFailDetails loginFailDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.loginFailDetailsValue = loginFailDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param loginSuccessDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndLoginSuccessDetails(Tag _tag, LoginSuccessDetails loginSuccessDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.loginSuccessDetailsValue = loginSuccessDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param logoutDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndLogoutDetails(Tag _tag, LogoutDetails logoutDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.logoutDetailsValue = logoutDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param resellerSupportSessionEndDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndResellerSupportSessionEndDetails(Tag _tag, ResellerSupportSessionEndDetails resellerSupportSessionEndDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.resellerSupportSessionEndDetailsValue = resellerSupportSessionEndDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param resellerSupportSessionStartDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndResellerSupportSessionStartDetails(Tag _tag, ResellerSupportSessionStartDetails resellerSupportSessionStartDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.resellerSupportSessionStartDetailsValue = resellerSupportSessionStartDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param signInAsSessionEndDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSignInAsSessionEndDetails(Tag _tag, SignInAsSessionEndDetails signInAsSessionEndDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.signInAsSessionEndDetailsValue = signInAsSessionEndDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param signInAsSessionStartDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSignInAsSessionStartDetails(Tag _tag, SignInAsSessionStartDetails signInAsSessionStartDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.signInAsSessionStartDetailsValue = signInAsSessionStartDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param ssoErrorDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSsoErrorDetails(Tag _tag, SsoErrorDetails ssoErrorDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.ssoErrorDetailsValue = ssoErrorDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param createTeamInviteLinkDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndCreateTeamInviteLinkDetails(Tag _tag, CreateTeamInviteLinkDetails createTeamInviteLinkDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.createTeamInviteLinkDetailsValue = createTeamInviteLinkDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param deleteTeamInviteLinkDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDeleteTeamInviteLinkDetails(Tag _tag, DeleteTeamInviteLinkDetails deleteTeamInviteLinkDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.deleteTeamInviteLinkDetailsValue = deleteTeamInviteLinkDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberAddExternalIdDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberAddExternalIdDetails(Tag _tag, MemberAddExternalIdDetails memberAddExternalIdDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberAddExternalIdDetailsValue = memberAddExternalIdDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberAddNameDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberAddNameDetails(Tag _tag, MemberAddNameDetails memberAddNameDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberAddNameDetailsValue = memberAddNameDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberChangeAdminRoleDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberChangeAdminRoleDetails(Tag _tag, MemberChangeAdminRoleDetails memberChangeAdminRoleDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberChangeAdminRoleDetailsValue = memberChangeAdminRoleDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberChangeEmailDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberChangeEmailDetails(Tag _tag, MemberChangeEmailDetails memberChangeEmailDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberChangeEmailDetailsValue = memberChangeEmailDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberChangeExternalIdDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberChangeExternalIdDetails(Tag _tag, MemberChangeExternalIdDetails memberChangeExternalIdDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberChangeExternalIdDetailsValue = memberChangeExternalIdDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberChangeMembershipTypeDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberChangeMembershipTypeDetails(Tag _tag, MemberChangeMembershipTypeDetails memberChangeMembershipTypeDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberChangeMembershipTypeDetailsValue = memberChangeMembershipTypeDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberChangeNameDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberChangeNameDetails(Tag _tag, MemberChangeNameDetails memberChangeNameDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberChangeNameDetailsValue = memberChangeNameDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberChangeResellerRoleDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberChangeResellerRoleDetails(Tag _tag, MemberChangeResellerRoleDetails memberChangeResellerRoleDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberChangeResellerRoleDetailsValue = memberChangeResellerRoleDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberChangeStatusDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberChangeStatusDetails(Tag _tag, MemberChangeStatusDetails memberChangeStatusDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberChangeStatusDetailsValue = memberChangeStatusDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberDeleteManualContactsDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberDeleteManualContactsDetails(Tag _tag, MemberDeleteManualContactsDetails memberDeleteManualContactsDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberDeleteManualContactsDetailsValue = memberDeleteManualContactsDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberDeleteProfilePhotoDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberDeleteProfilePhotoDetails(Tag _tag, MemberDeleteProfilePhotoDetails memberDeleteProfilePhotoDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberDeleteProfilePhotoDetailsValue = memberDeleteProfilePhotoDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberPermanentlyDeleteAccountContentsDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberPermanentlyDeleteAccountContentsDetails(Tag _tag, MemberPermanentlyDeleteAccountContentsDetails memberPermanentlyDeleteAccountContentsDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberPermanentlyDeleteAccountContentsDetailsValue = memberPermanentlyDeleteAccountContentsDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberRemoveExternalIdDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberRemoveExternalIdDetails(Tag _tag, MemberRemoveExternalIdDetails memberRemoveExternalIdDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberRemoveExternalIdDetailsValue = memberRemoveExternalIdDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberSetProfilePhotoDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberSetProfilePhotoDetails(Tag _tag, MemberSetProfilePhotoDetails memberSetProfilePhotoDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberSetProfilePhotoDetailsValue = memberSetProfilePhotoDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberSpaceLimitsAddCustomQuotaDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberSpaceLimitsAddCustomQuotaDetails(Tag _tag, MemberSpaceLimitsAddCustomQuotaDetails memberSpaceLimitsAddCustomQuotaDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberSpaceLimitsAddCustomQuotaDetailsValue = memberSpaceLimitsAddCustomQuotaDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberSpaceLimitsChangeCustomQuotaDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberSpaceLimitsChangeCustomQuotaDetails(Tag _tag, MemberSpaceLimitsChangeCustomQuotaDetails memberSpaceLimitsChangeCustomQuotaDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberSpaceLimitsChangeCustomQuotaDetailsValue = memberSpaceLimitsChangeCustomQuotaDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberSpaceLimitsChangeStatusDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberSpaceLimitsChangeStatusDetails(Tag _tag, MemberSpaceLimitsChangeStatusDetails memberSpaceLimitsChangeStatusDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberSpaceLimitsChangeStatusDetailsValue = memberSpaceLimitsChangeStatusDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberSpaceLimitsRemoveCustomQuotaDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberSpaceLimitsRemoveCustomQuotaDetails(Tag _tag, MemberSpaceLimitsRemoveCustomQuotaDetails memberSpaceLimitsRemoveCustomQuotaDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberSpaceLimitsRemoveCustomQuotaDetailsValue = memberSpaceLimitsRemoveCustomQuotaDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberSuggestDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberSuggestDetails(Tag _tag, MemberSuggestDetails memberSuggestDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberSuggestDetailsValue = memberSuggestDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberTransferAccountContentsDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberTransferAccountContentsDetails(Tag _tag, MemberTransferAccountContentsDetails memberTransferAccountContentsDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberTransferAccountContentsDetailsValue = memberTransferAccountContentsDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param pendingSecondaryEmailAddedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPendingSecondaryEmailAddedDetails(Tag _tag, PendingSecondaryEmailAddedDetails pendingSecondaryEmailAddedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.pendingSecondaryEmailAddedDetailsValue = pendingSecondaryEmailAddedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param secondaryEmailDeletedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSecondaryEmailDeletedDetails(Tag _tag, SecondaryEmailDeletedDetails secondaryEmailDeletedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.secondaryEmailDeletedDetailsValue = secondaryEmailDeletedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param secondaryEmailVerifiedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSecondaryEmailVerifiedDetails(Tag _tag, SecondaryEmailVerifiedDetails secondaryEmailVerifiedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.secondaryEmailVerifiedDetailsValue = secondaryEmailVerifiedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param secondaryMailsPolicyChangedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSecondaryMailsPolicyChangedDetails(Tag _tag, SecondaryMailsPolicyChangedDetails secondaryMailsPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.secondaryMailsPolicyChangedDetailsValue = secondaryMailsPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param binderAddPageDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndBinderAddPageDetails(Tag _tag, BinderAddPageDetails binderAddPageDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.binderAddPageDetailsValue = binderAddPageDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param binderAddSectionDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndBinderAddSectionDetails(Tag _tag, BinderAddSectionDetails binderAddSectionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.binderAddSectionDetailsValue = binderAddSectionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param binderRemovePageDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndBinderRemovePageDetails(Tag _tag, BinderRemovePageDetails binderRemovePageDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.binderRemovePageDetailsValue = binderRemovePageDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param binderRemoveSectionDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndBinderRemoveSectionDetails(Tag _tag, BinderRemoveSectionDetails binderRemoveSectionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.binderRemoveSectionDetailsValue = binderRemoveSectionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param binderRenamePageDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndBinderRenamePageDetails(Tag _tag, BinderRenamePageDetails binderRenamePageDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.binderRenamePageDetailsValue = binderRenamePageDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param binderRenameSectionDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndBinderRenameSectionDetails(Tag _tag, BinderRenameSectionDetails binderRenameSectionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.binderRenameSectionDetailsValue = binderRenameSectionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param binderReorderPageDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndBinderReorderPageDetails(Tag _tag, BinderReorderPageDetails binderReorderPageDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.binderReorderPageDetailsValue = binderReorderPageDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param binderReorderSectionDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndBinderReorderSectionDetails(Tag _tag, BinderReorderSectionDetails binderReorderSectionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.binderReorderSectionDetailsValue = binderReorderSectionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperContentAddMemberDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperContentAddMemberDetails(Tag _tag, PaperContentAddMemberDetails paperContentAddMemberDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperContentAddMemberDetailsValue = paperContentAddMemberDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperContentAddToFolderDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperContentAddToFolderDetails(Tag _tag, PaperContentAddToFolderDetails paperContentAddToFolderDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperContentAddToFolderDetailsValue = paperContentAddToFolderDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperContentArchiveDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperContentArchiveDetails(Tag _tag, PaperContentArchiveDetails paperContentArchiveDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperContentArchiveDetailsValue = paperContentArchiveDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperContentCreateDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperContentCreateDetails(Tag _tag, PaperContentCreateDetails paperContentCreateDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperContentCreateDetailsValue = paperContentCreateDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperContentPermanentlyDeleteDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperContentPermanentlyDeleteDetails(Tag _tag, PaperContentPermanentlyDeleteDetails paperContentPermanentlyDeleteDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperContentPermanentlyDeleteDetailsValue = paperContentPermanentlyDeleteDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperContentRemoveFromFolderDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperContentRemoveFromFolderDetails(Tag _tag, PaperContentRemoveFromFolderDetails paperContentRemoveFromFolderDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperContentRemoveFromFolderDetailsValue = paperContentRemoveFromFolderDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperContentRemoveMemberDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperContentRemoveMemberDetails(Tag _tag, PaperContentRemoveMemberDetails paperContentRemoveMemberDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperContentRemoveMemberDetailsValue = paperContentRemoveMemberDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperContentRenameDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperContentRenameDetails(Tag _tag, PaperContentRenameDetails paperContentRenameDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperContentRenameDetailsValue = paperContentRenameDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperContentRestoreDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperContentRestoreDetails(Tag _tag, PaperContentRestoreDetails paperContentRestoreDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperContentRestoreDetailsValue = paperContentRestoreDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocAddCommentDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocAddCommentDetails(Tag _tag, PaperDocAddCommentDetails paperDocAddCommentDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocAddCommentDetailsValue = paperDocAddCommentDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocChangeMemberRoleDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocChangeMemberRoleDetails(Tag _tag, PaperDocChangeMemberRoleDetails paperDocChangeMemberRoleDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocChangeMemberRoleDetailsValue = paperDocChangeMemberRoleDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocChangeSharingPolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocChangeSharingPolicyDetails(Tag _tag, PaperDocChangeSharingPolicyDetails paperDocChangeSharingPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocChangeSharingPolicyDetailsValue = paperDocChangeSharingPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocChangeSubscriptionDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocChangeSubscriptionDetails(Tag _tag, PaperDocChangeSubscriptionDetails paperDocChangeSubscriptionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocChangeSubscriptionDetailsValue = paperDocChangeSubscriptionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocDeletedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocDeletedDetails(Tag _tag, PaperDocDeletedDetails paperDocDeletedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocDeletedDetailsValue = paperDocDeletedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocDeleteCommentDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocDeleteCommentDetails(Tag _tag, PaperDocDeleteCommentDetails paperDocDeleteCommentDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocDeleteCommentDetailsValue = paperDocDeleteCommentDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocDownloadDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocDownloadDetails(Tag _tag, PaperDocDownloadDetails paperDocDownloadDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocDownloadDetailsValue = paperDocDownloadDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocEditDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocEditDetails(Tag _tag, PaperDocEditDetails paperDocEditDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocEditDetailsValue = paperDocEditDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocEditCommentDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocEditCommentDetails(Tag _tag, PaperDocEditCommentDetails paperDocEditCommentDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocEditCommentDetailsValue = paperDocEditCommentDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocFollowedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocFollowedDetails(Tag _tag, PaperDocFollowedDetails paperDocFollowedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocFollowedDetailsValue = paperDocFollowedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocMentionDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocMentionDetails(Tag _tag, PaperDocMentionDetails paperDocMentionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocMentionDetailsValue = paperDocMentionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocOwnershipChangedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocOwnershipChangedDetails(Tag _tag, PaperDocOwnershipChangedDetails paperDocOwnershipChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocOwnershipChangedDetailsValue = paperDocOwnershipChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocRequestAccessDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocRequestAccessDetails(Tag _tag, PaperDocRequestAccessDetails paperDocRequestAccessDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocRequestAccessDetailsValue = paperDocRequestAccessDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocResolveCommentDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocResolveCommentDetails(Tag _tag, PaperDocResolveCommentDetails paperDocResolveCommentDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocResolveCommentDetailsValue = paperDocResolveCommentDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocRevertDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocRevertDetails(Tag _tag, PaperDocRevertDetails paperDocRevertDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocRevertDetailsValue = paperDocRevertDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocSlackShareDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocSlackShareDetails(Tag _tag, PaperDocSlackShareDetails paperDocSlackShareDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocSlackShareDetailsValue = paperDocSlackShareDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocTeamInviteDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocTeamInviteDetails(Tag _tag, PaperDocTeamInviteDetails paperDocTeamInviteDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocTeamInviteDetailsValue = paperDocTeamInviteDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocTrashedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocTrashedDetails(Tag _tag, PaperDocTrashedDetails paperDocTrashedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocTrashedDetailsValue = paperDocTrashedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocUnresolveCommentDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocUnresolveCommentDetails(Tag _tag, PaperDocUnresolveCommentDetails paperDocUnresolveCommentDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocUnresolveCommentDetailsValue = paperDocUnresolveCommentDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocUntrashedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocUntrashedDetails(Tag _tag, PaperDocUntrashedDetails paperDocUntrashedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocUntrashedDetailsValue = paperDocUntrashedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDocViewDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDocViewDetails(Tag _tag, PaperDocViewDetails paperDocViewDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDocViewDetailsValue = paperDocViewDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperExternalViewAllowDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperExternalViewAllowDetails(Tag _tag, PaperExternalViewAllowDetails paperExternalViewAllowDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperExternalViewAllowDetailsValue = paperExternalViewAllowDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperExternalViewDefaultTeamDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperExternalViewDefaultTeamDetails(Tag _tag, PaperExternalViewDefaultTeamDetails paperExternalViewDefaultTeamDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperExternalViewDefaultTeamDetailsValue = paperExternalViewDefaultTeamDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperExternalViewForbidDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperExternalViewForbidDetails(Tag _tag, PaperExternalViewForbidDetails paperExternalViewForbidDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperExternalViewForbidDetailsValue = paperExternalViewForbidDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperFolderChangeSubscriptionDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperFolderChangeSubscriptionDetails(Tag _tag, PaperFolderChangeSubscriptionDetails paperFolderChangeSubscriptionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperFolderChangeSubscriptionDetailsValue = paperFolderChangeSubscriptionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperFolderDeletedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperFolderDeletedDetails(Tag _tag, PaperFolderDeletedDetails paperFolderDeletedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperFolderDeletedDetailsValue = paperFolderDeletedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperFolderFollowedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperFolderFollowedDetails(Tag _tag, PaperFolderFollowedDetails paperFolderFollowedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperFolderFollowedDetailsValue = paperFolderFollowedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperFolderTeamInviteDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperFolderTeamInviteDetails(Tag _tag, PaperFolderTeamInviteDetails paperFolderTeamInviteDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperFolderTeamInviteDetailsValue = paperFolderTeamInviteDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperPublishedLinkChangePermissionDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperPublishedLinkChangePermissionDetails(Tag _tag, PaperPublishedLinkChangePermissionDetails paperPublishedLinkChangePermissionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperPublishedLinkChangePermissionDetailsValue = paperPublishedLinkChangePermissionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperPublishedLinkCreateDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperPublishedLinkCreateDetails(Tag _tag, PaperPublishedLinkCreateDetails paperPublishedLinkCreateDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperPublishedLinkCreateDetailsValue = paperPublishedLinkCreateDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperPublishedLinkDisabledDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperPublishedLinkDisabledDetails(Tag _tag, PaperPublishedLinkDisabledDetails paperPublishedLinkDisabledDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperPublishedLinkDisabledDetailsValue = paperPublishedLinkDisabledDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperPublishedLinkViewDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperPublishedLinkViewDetails(Tag _tag, PaperPublishedLinkViewDetails paperPublishedLinkViewDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperPublishedLinkViewDetailsValue = paperPublishedLinkViewDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param passwordChangeDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPasswordChangeDetails(Tag _tag, PasswordChangeDetails passwordChangeDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.passwordChangeDetailsValue = passwordChangeDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param passwordResetDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPasswordResetDetails(Tag _tag, PasswordResetDetails passwordResetDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.passwordResetDetailsValue = passwordResetDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param passwordResetAllDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPasswordResetAllDetails(Tag _tag, PasswordResetAllDetails passwordResetAllDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.passwordResetAllDetailsValue = passwordResetAllDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param classificationCreateReportDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndClassificationCreateReportDetails(Tag _tag, ClassificationCreateReportDetails classificationCreateReportDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.classificationCreateReportDetailsValue = classificationCreateReportDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param classificationCreateReportFailDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndClassificationCreateReportFailDetails(Tag _tag, ClassificationCreateReportFailDetails classificationCreateReportFailDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.classificationCreateReportFailDetailsValue = classificationCreateReportFailDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param emmCreateExceptionsReportDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndEmmCreateExceptionsReportDetails(Tag _tag, EmmCreateExceptionsReportDetails emmCreateExceptionsReportDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.emmCreateExceptionsReportDetailsValue = emmCreateExceptionsReportDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param emmCreateUsageReportDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndEmmCreateUsageReportDetails(Tag _tag, EmmCreateUsageReportDetails emmCreateUsageReportDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.emmCreateUsageReportDetailsValue = emmCreateUsageReportDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param exportMembersReportDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndExportMembersReportDetails(Tag _tag, ExportMembersReportDetails exportMembersReportDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.exportMembersReportDetailsValue = exportMembersReportDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param exportMembersReportFailDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndExportMembersReportFailDetails(Tag _tag, ExportMembersReportFailDetails exportMembersReportFailDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.exportMembersReportFailDetailsValue = exportMembersReportFailDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param externalSharingCreateReportDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndExternalSharingCreateReportDetails(Tag _tag, ExternalSharingCreateReportDetails externalSharingCreateReportDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.externalSharingCreateReportDetailsValue = externalSharingCreateReportDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param externalSharingReportFailedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndExternalSharingReportFailedDetails(Tag _tag, ExternalSharingReportFailedDetails externalSharingReportFailedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.externalSharingReportFailedDetailsValue = externalSharingReportFailedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param noExpirationLinkGenCreateReportDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndNoExpirationLinkGenCreateReportDetails(Tag _tag, NoExpirationLinkGenCreateReportDetails noExpirationLinkGenCreateReportDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.noExpirationLinkGenCreateReportDetailsValue = noExpirationLinkGenCreateReportDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param noExpirationLinkGenReportFailedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndNoExpirationLinkGenReportFailedDetails(Tag _tag, NoExpirationLinkGenReportFailedDetails noExpirationLinkGenReportFailedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.noExpirationLinkGenReportFailedDetailsValue = noExpirationLinkGenReportFailedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param noPasswordLinkGenCreateReportDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndNoPasswordLinkGenCreateReportDetails(Tag _tag, NoPasswordLinkGenCreateReportDetails noPasswordLinkGenCreateReportDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.noPasswordLinkGenCreateReportDetailsValue = noPasswordLinkGenCreateReportDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param noPasswordLinkGenReportFailedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndNoPasswordLinkGenReportFailedDetails(Tag _tag, NoPasswordLinkGenReportFailedDetails noPasswordLinkGenReportFailedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.noPasswordLinkGenReportFailedDetailsValue = noPasswordLinkGenReportFailedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param noPasswordLinkViewCreateReportDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndNoPasswordLinkViewCreateReportDetails(Tag _tag, NoPasswordLinkViewCreateReportDetails noPasswordLinkViewCreateReportDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.noPasswordLinkViewCreateReportDetailsValue = noPasswordLinkViewCreateReportDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param noPasswordLinkViewReportFailedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndNoPasswordLinkViewReportFailedDetails(Tag _tag, NoPasswordLinkViewReportFailedDetails noPasswordLinkViewReportFailedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.noPasswordLinkViewReportFailedDetailsValue = noPasswordLinkViewReportFailedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param outdatedLinkViewCreateReportDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndOutdatedLinkViewCreateReportDetails(Tag _tag, OutdatedLinkViewCreateReportDetails outdatedLinkViewCreateReportDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.outdatedLinkViewCreateReportDetailsValue = outdatedLinkViewCreateReportDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param outdatedLinkViewReportFailedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndOutdatedLinkViewReportFailedDetails(Tag _tag, OutdatedLinkViewReportFailedDetails outdatedLinkViewReportFailedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.outdatedLinkViewReportFailedDetailsValue = outdatedLinkViewReportFailedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperAdminExportStartDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperAdminExportStartDetails(Tag _tag, PaperAdminExportStartDetails paperAdminExportStartDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperAdminExportStartDetailsValue = paperAdminExportStartDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param smartSyncCreateAdminPrivilegeReportDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSmartSyncCreateAdminPrivilegeReportDetails(Tag _tag, SmartSyncCreateAdminPrivilegeReportDetails smartSyncCreateAdminPrivilegeReportDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.smartSyncCreateAdminPrivilegeReportDetailsValue = smartSyncCreateAdminPrivilegeReportDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamActivityCreateReportDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamActivityCreateReportDetails(Tag _tag, TeamActivityCreateReportDetails teamActivityCreateReportDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamActivityCreateReportDetailsValue = teamActivityCreateReportDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamActivityCreateReportFailDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamActivityCreateReportFailDetails(Tag _tag, TeamActivityCreateReportFailDetails teamActivityCreateReportFailDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamActivityCreateReportFailDetailsValue = teamActivityCreateReportFailDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param collectionShareDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndCollectionShareDetails(Tag _tag, CollectionShareDetails collectionShareDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.collectionShareDetailsValue = collectionShareDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileTransfersFileAddDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileTransfersFileAddDetails(Tag _tag, FileTransfersFileAddDetails fileTransfersFileAddDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileTransfersFileAddDetailsValue = fileTransfersFileAddDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileTransfersTransferDeleteDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileTransfersTransferDeleteDetails(Tag _tag, FileTransfersTransferDeleteDetails fileTransfersTransferDeleteDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileTransfersTransferDeleteDetailsValue = fileTransfersTransferDeleteDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileTransfersTransferDownloadDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileTransfersTransferDownloadDetails(Tag _tag, FileTransfersTransferDownloadDetails fileTransfersTransferDownloadDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileTransfersTransferDownloadDetailsValue = fileTransfersTransferDownloadDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileTransfersTransferSendDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileTransfersTransferSendDetails(Tag _tag, FileTransfersTransferSendDetails fileTransfersTransferSendDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileTransfersTransferSendDetailsValue = fileTransfersTransferSendDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileTransfersTransferViewDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileTransfersTransferViewDetails(Tag _tag, FileTransfersTransferViewDetails fileTransfersTransferViewDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileTransfersTransferViewDetailsValue = fileTransfersTransferViewDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param noteAclInviteOnlyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndNoteAclInviteOnlyDetails(Tag _tag, NoteAclInviteOnlyDetails noteAclInviteOnlyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.noteAclInviteOnlyDetailsValue = noteAclInviteOnlyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param noteAclLinkDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndNoteAclLinkDetails(Tag _tag, NoteAclLinkDetails noteAclLinkDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.noteAclLinkDetailsValue = noteAclLinkDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param noteAclTeamLinkDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndNoteAclTeamLinkDetails(Tag _tag, NoteAclTeamLinkDetails noteAclTeamLinkDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.noteAclTeamLinkDetailsValue = noteAclTeamLinkDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param noteSharedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndNoteSharedDetails(Tag _tag, NoteSharedDetails noteSharedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.noteSharedDetailsValue = noteSharedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param noteShareReceiveDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndNoteShareReceiveDetails(Tag _tag, NoteShareReceiveDetails noteShareReceiveDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.noteShareReceiveDetailsValue = noteShareReceiveDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param openNoteSharedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndOpenNoteSharedDetails(Tag _tag, OpenNoteSharedDetails openNoteSharedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.openNoteSharedDetailsValue = openNoteSharedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sfAddGroupDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSfAddGroupDetails(Tag _tag, SfAddGroupDetails sfAddGroupDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sfAddGroupDetailsValue = sfAddGroupDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sfAllowNonMembersToViewSharedLinksDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSfAllowNonMembersToViewSharedLinksDetails(Tag _tag, SfAllowNonMembersToViewSharedLinksDetails sfAllowNonMembersToViewSharedLinksDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sfAllowNonMembersToViewSharedLinksDetailsValue = sfAllowNonMembersToViewSharedLinksDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sfExternalInviteWarnDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSfExternalInviteWarnDetails(Tag _tag, SfExternalInviteWarnDetails sfExternalInviteWarnDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sfExternalInviteWarnDetailsValue = sfExternalInviteWarnDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sfFbInviteDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSfFbInviteDetails(Tag _tag, SfFbInviteDetails sfFbInviteDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sfFbInviteDetailsValue = sfFbInviteDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sfFbInviteChangeRoleDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSfFbInviteChangeRoleDetails(Tag _tag, SfFbInviteChangeRoleDetails sfFbInviteChangeRoleDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sfFbInviteChangeRoleDetailsValue = sfFbInviteChangeRoleDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sfFbUninviteDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSfFbUninviteDetails(Tag _tag, SfFbUninviteDetails sfFbUninviteDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sfFbUninviteDetailsValue = sfFbUninviteDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sfInviteGroupDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSfInviteGroupDetails(Tag _tag, SfInviteGroupDetails sfInviteGroupDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sfInviteGroupDetailsValue = sfInviteGroupDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sfTeamGrantAccessDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSfTeamGrantAccessDetails(Tag _tag, SfTeamGrantAccessDetails sfTeamGrantAccessDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sfTeamGrantAccessDetailsValue = sfTeamGrantAccessDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sfTeamInviteDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSfTeamInviteDetails(Tag _tag, SfTeamInviteDetails sfTeamInviteDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sfTeamInviteDetailsValue = sfTeamInviteDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sfTeamInviteChangeRoleDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSfTeamInviteChangeRoleDetails(Tag _tag, SfTeamInviteChangeRoleDetails sfTeamInviteChangeRoleDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sfTeamInviteChangeRoleDetailsValue = sfTeamInviteChangeRoleDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sfTeamJoinDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSfTeamJoinDetails(Tag _tag, SfTeamJoinDetails sfTeamJoinDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sfTeamJoinDetailsValue = sfTeamJoinDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sfTeamJoinFromOobLinkDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSfTeamJoinFromOobLinkDetails(Tag _tag, SfTeamJoinFromOobLinkDetails sfTeamJoinFromOobLinkDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sfTeamJoinFromOobLinkDetailsValue = sfTeamJoinFromOobLinkDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sfTeamUninviteDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSfTeamUninviteDetails(Tag _tag, SfTeamUninviteDetails sfTeamUninviteDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sfTeamUninviteDetailsValue = sfTeamUninviteDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentAddInviteesDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentAddInviteesDetails(Tag _tag, SharedContentAddInviteesDetails sharedContentAddInviteesDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentAddInviteesDetailsValue = sharedContentAddInviteesDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentAddLinkExpiryDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentAddLinkExpiryDetails(Tag _tag, SharedContentAddLinkExpiryDetails sharedContentAddLinkExpiryDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentAddLinkExpiryDetailsValue = sharedContentAddLinkExpiryDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentAddLinkPasswordDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentAddLinkPasswordDetails(Tag _tag, SharedContentAddLinkPasswordDetails sharedContentAddLinkPasswordDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentAddLinkPasswordDetailsValue = sharedContentAddLinkPasswordDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentAddMemberDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentAddMemberDetails(Tag _tag, SharedContentAddMemberDetails sharedContentAddMemberDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentAddMemberDetailsValue = sharedContentAddMemberDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentChangeDownloadsPolicyDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentChangeDownloadsPolicyDetails(Tag _tag, SharedContentChangeDownloadsPolicyDetails sharedContentChangeDownloadsPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentChangeDownloadsPolicyDetailsValue = sharedContentChangeDownloadsPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentChangeInviteeRoleDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentChangeInviteeRoleDetails(Tag _tag, SharedContentChangeInviteeRoleDetails sharedContentChangeInviteeRoleDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentChangeInviteeRoleDetailsValue = sharedContentChangeInviteeRoleDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentChangeLinkAudienceDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentChangeLinkAudienceDetails(Tag _tag, SharedContentChangeLinkAudienceDetails sharedContentChangeLinkAudienceDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentChangeLinkAudienceDetailsValue = sharedContentChangeLinkAudienceDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentChangeLinkExpiryDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentChangeLinkExpiryDetails(Tag _tag, SharedContentChangeLinkExpiryDetails sharedContentChangeLinkExpiryDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentChangeLinkExpiryDetailsValue = sharedContentChangeLinkExpiryDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentChangeLinkPasswordDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentChangeLinkPasswordDetails(Tag _tag, SharedContentChangeLinkPasswordDetails sharedContentChangeLinkPasswordDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentChangeLinkPasswordDetailsValue = sharedContentChangeLinkPasswordDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentChangeMemberRoleDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentChangeMemberRoleDetails(Tag _tag, SharedContentChangeMemberRoleDetails sharedContentChangeMemberRoleDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentChangeMemberRoleDetailsValue = sharedContentChangeMemberRoleDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentChangeViewerInfoPolicyDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentChangeViewerInfoPolicyDetails(Tag _tag, SharedContentChangeViewerInfoPolicyDetails sharedContentChangeViewerInfoPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentChangeViewerInfoPolicyDetailsValue = sharedContentChangeViewerInfoPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentClaimInvitationDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentClaimInvitationDetails(Tag _tag, SharedContentClaimInvitationDetails sharedContentClaimInvitationDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentClaimInvitationDetailsValue = sharedContentClaimInvitationDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentCopyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentCopyDetails(Tag _tag, SharedContentCopyDetails sharedContentCopyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentCopyDetailsValue = sharedContentCopyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentDownloadDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentDownloadDetails(Tag _tag, SharedContentDownloadDetails sharedContentDownloadDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentDownloadDetailsValue = sharedContentDownloadDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentRelinquishMembershipDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentRelinquishMembershipDetails(Tag _tag, SharedContentRelinquishMembershipDetails sharedContentRelinquishMembershipDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentRelinquishMembershipDetailsValue = sharedContentRelinquishMembershipDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentRemoveInviteesDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentRemoveInviteesDetails(Tag _tag, SharedContentRemoveInviteesDetails sharedContentRemoveInviteesDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentRemoveInviteesDetailsValue = sharedContentRemoveInviteesDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentRemoveLinkExpiryDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentRemoveLinkExpiryDetails(Tag _tag, SharedContentRemoveLinkExpiryDetails sharedContentRemoveLinkExpiryDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentRemoveLinkExpiryDetailsValue = sharedContentRemoveLinkExpiryDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentRemoveLinkPasswordDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentRemoveLinkPasswordDetails(Tag _tag, SharedContentRemoveLinkPasswordDetails sharedContentRemoveLinkPasswordDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentRemoveLinkPasswordDetailsValue = sharedContentRemoveLinkPasswordDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentRemoveMemberDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentRemoveMemberDetails(Tag _tag, SharedContentRemoveMemberDetails sharedContentRemoveMemberDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentRemoveMemberDetailsValue = sharedContentRemoveMemberDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentRequestAccessDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentRequestAccessDetails(Tag _tag, SharedContentRequestAccessDetails sharedContentRequestAccessDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentRequestAccessDetailsValue = sharedContentRequestAccessDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentRestoreInviteesDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentRestoreInviteesDetails(Tag _tag, SharedContentRestoreInviteesDetails sharedContentRestoreInviteesDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentRestoreInviteesDetailsValue = sharedContentRestoreInviteesDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentRestoreMemberDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentRestoreMemberDetails(Tag _tag, SharedContentRestoreMemberDetails sharedContentRestoreMemberDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentRestoreMemberDetailsValue = sharedContentRestoreMemberDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentUnshareDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentUnshareDetails(Tag _tag, SharedContentUnshareDetails sharedContentUnshareDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentUnshareDetailsValue = sharedContentUnshareDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedContentViewDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedContentViewDetails(Tag _tag, SharedContentViewDetails sharedContentViewDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedContentViewDetailsValue = sharedContentViewDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedFolderChangeLinkPolicyDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedFolderChangeLinkPolicyDetails(Tag _tag, SharedFolderChangeLinkPolicyDetails sharedFolderChangeLinkPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedFolderChangeLinkPolicyDetailsValue = sharedFolderChangeLinkPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedFolderChangeMembersInheritancePolicyDetailsValue  Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedFolderChangeMembersInheritancePolicyDetails(Tag _tag, SharedFolderChangeMembersInheritancePolicyDetails sharedFolderChangeMembersInheritancePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedFolderChangeMembersInheritancePolicyDetailsValue = sharedFolderChangeMembersInheritancePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedFolderChangeMembersManagementPolicyDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedFolderChangeMembersManagementPolicyDetails(Tag _tag, SharedFolderChangeMembersManagementPolicyDetails sharedFolderChangeMembersManagementPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedFolderChangeMembersManagementPolicyDetailsValue = sharedFolderChangeMembersManagementPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedFolderChangeMembersPolicyDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedFolderChangeMembersPolicyDetails(Tag _tag, SharedFolderChangeMembersPolicyDetails sharedFolderChangeMembersPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedFolderChangeMembersPolicyDetailsValue = sharedFolderChangeMembersPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedFolderCreateDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedFolderCreateDetails(Tag _tag, SharedFolderCreateDetails sharedFolderCreateDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedFolderCreateDetailsValue = sharedFolderCreateDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedFolderDeclineInvitationDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedFolderDeclineInvitationDetails(Tag _tag, SharedFolderDeclineInvitationDetails sharedFolderDeclineInvitationDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedFolderDeclineInvitationDetailsValue = sharedFolderDeclineInvitationDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedFolderMountDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedFolderMountDetails(Tag _tag, SharedFolderMountDetails sharedFolderMountDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedFolderMountDetailsValue = sharedFolderMountDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedFolderNestDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedFolderNestDetails(Tag _tag, SharedFolderNestDetails sharedFolderNestDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedFolderNestDetailsValue = sharedFolderNestDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedFolderTransferOwnershipDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedFolderTransferOwnershipDetails(Tag _tag, SharedFolderTransferOwnershipDetails sharedFolderTransferOwnershipDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedFolderTransferOwnershipDetailsValue = sharedFolderTransferOwnershipDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedFolderUnmountDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedFolderUnmountDetails(Tag _tag, SharedFolderUnmountDetails sharedFolderUnmountDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedFolderUnmountDetailsValue = sharedFolderUnmountDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedLinkAddExpiryDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedLinkAddExpiryDetails(Tag _tag, SharedLinkAddExpiryDetails sharedLinkAddExpiryDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedLinkAddExpiryDetailsValue = sharedLinkAddExpiryDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedLinkChangeExpiryDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedLinkChangeExpiryDetails(Tag _tag, SharedLinkChangeExpiryDetails sharedLinkChangeExpiryDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedLinkChangeExpiryDetailsValue = sharedLinkChangeExpiryDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedLinkChangeVisibilityDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedLinkChangeVisibilityDetails(Tag _tag, SharedLinkChangeVisibilityDetails sharedLinkChangeVisibilityDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedLinkChangeVisibilityDetailsValue = sharedLinkChangeVisibilityDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedLinkCopyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedLinkCopyDetails(Tag _tag, SharedLinkCopyDetails sharedLinkCopyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedLinkCopyDetailsValue = sharedLinkCopyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedLinkCreateDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedLinkCreateDetails(Tag _tag, SharedLinkCreateDetails sharedLinkCreateDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedLinkCreateDetailsValue = sharedLinkCreateDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedLinkDisableDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedLinkDisableDetails(Tag _tag, SharedLinkDisableDetails sharedLinkDisableDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedLinkDisableDetailsValue = sharedLinkDisableDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedLinkDownloadDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedLinkDownloadDetails(Tag _tag, SharedLinkDownloadDetails sharedLinkDownloadDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedLinkDownloadDetailsValue = sharedLinkDownloadDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedLinkRemoveExpiryDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedLinkRemoveExpiryDetails(Tag _tag, SharedLinkRemoveExpiryDetails sharedLinkRemoveExpiryDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedLinkRemoveExpiryDetailsValue = sharedLinkRemoveExpiryDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedLinkSettingsAddExpirationDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedLinkSettingsAddExpirationDetails(Tag _tag, SharedLinkSettingsAddExpirationDetails sharedLinkSettingsAddExpirationDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedLinkSettingsAddExpirationDetailsValue = sharedLinkSettingsAddExpirationDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedLinkSettingsAddPasswordDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedLinkSettingsAddPasswordDetails(Tag _tag, SharedLinkSettingsAddPasswordDetails sharedLinkSettingsAddPasswordDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedLinkSettingsAddPasswordDetailsValue = sharedLinkSettingsAddPasswordDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedLinkSettingsAllowDownloadDisabledDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedLinkSettingsAllowDownloadDisabledDetails(Tag _tag, SharedLinkSettingsAllowDownloadDisabledDetails sharedLinkSettingsAllowDownloadDisabledDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedLinkSettingsAllowDownloadDisabledDetailsValue = sharedLinkSettingsAllowDownloadDisabledDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedLinkSettingsAllowDownloadEnabledDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedLinkSettingsAllowDownloadEnabledDetails(Tag _tag, SharedLinkSettingsAllowDownloadEnabledDetails sharedLinkSettingsAllowDownloadEnabledDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedLinkSettingsAllowDownloadEnabledDetailsValue = sharedLinkSettingsAllowDownloadEnabledDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedLinkSettingsChangeAudienceDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedLinkSettingsChangeAudienceDetails(Tag _tag, SharedLinkSettingsChangeAudienceDetails sharedLinkSettingsChangeAudienceDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedLinkSettingsChangeAudienceDetailsValue = sharedLinkSettingsChangeAudienceDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedLinkSettingsChangeExpirationDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedLinkSettingsChangeExpirationDetails(Tag _tag, SharedLinkSettingsChangeExpirationDetails sharedLinkSettingsChangeExpirationDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedLinkSettingsChangeExpirationDetailsValue = sharedLinkSettingsChangeExpirationDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedLinkSettingsChangePasswordDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedLinkSettingsChangePasswordDetails(Tag _tag, SharedLinkSettingsChangePasswordDetails sharedLinkSettingsChangePasswordDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedLinkSettingsChangePasswordDetailsValue = sharedLinkSettingsChangePasswordDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedLinkSettingsRemoveExpirationDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedLinkSettingsRemoveExpirationDetails(Tag _tag, SharedLinkSettingsRemoveExpirationDetails sharedLinkSettingsRemoveExpirationDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedLinkSettingsRemoveExpirationDetailsValue = sharedLinkSettingsRemoveExpirationDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedLinkSettingsRemovePasswordDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedLinkSettingsRemovePasswordDetails(Tag _tag, SharedLinkSettingsRemovePasswordDetails sharedLinkSettingsRemovePasswordDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedLinkSettingsRemovePasswordDetailsValue = sharedLinkSettingsRemovePasswordDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedLinkShareDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedLinkShareDetails(Tag _tag, SharedLinkShareDetails sharedLinkShareDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedLinkShareDetailsValue = sharedLinkShareDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedLinkViewDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedLinkViewDetails(Tag _tag, SharedLinkViewDetails sharedLinkViewDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedLinkViewDetailsValue = sharedLinkViewDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharedNoteOpenedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharedNoteOpenedDetails(Tag _tag, SharedNoteOpenedDetails sharedNoteOpenedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharedNoteOpenedDetailsValue = sharedNoteOpenedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param shmodelDisableDownloadsDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShmodelDisableDownloadsDetails(Tag _tag, ShmodelDisableDownloadsDetails shmodelDisableDownloadsDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.shmodelDisableDownloadsDetailsValue = shmodelDisableDownloadsDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param shmodelEnableDownloadsDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShmodelEnableDownloadsDetails(Tag _tag, ShmodelEnableDownloadsDetails shmodelEnableDownloadsDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.shmodelEnableDownloadsDetailsValue = shmodelEnableDownloadsDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param shmodelGroupShareDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShmodelGroupShareDetails(Tag _tag, ShmodelGroupShareDetails shmodelGroupShareDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.shmodelGroupShareDetailsValue = shmodelGroupShareDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseAccessGrantedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseAccessGrantedDetails(Tag _tag, ShowcaseAccessGrantedDetails showcaseAccessGrantedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseAccessGrantedDetailsValue = showcaseAccessGrantedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseAddMemberDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseAddMemberDetails(Tag _tag, ShowcaseAddMemberDetails showcaseAddMemberDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseAddMemberDetailsValue = showcaseAddMemberDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseArchivedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseArchivedDetails(Tag _tag, ShowcaseArchivedDetails showcaseArchivedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseArchivedDetailsValue = showcaseArchivedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseCreatedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseCreatedDetails(Tag _tag, ShowcaseCreatedDetails showcaseCreatedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseCreatedDetailsValue = showcaseCreatedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseDeleteCommentDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseDeleteCommentDetails(Tag _tag, ShowcaseDeleteCommentDetails showcaseDeleteCommentDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseDeleteCommentDetailsValue = showcaseDeleteCommentDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseEditedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseEditedDetails(Tag _tag, ShowcaseEditedDetails showcaseEditedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseEditedDetailsValue = showcaseEditedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseEditCommentDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseEditCommentDetails(Tag _tag, ShowcaseEditCommentDetails showcaseEditCommentDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseEditCommentDetailsValue = showcaseEditCommentDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseFileAddedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseFileAddedDetails(Tag _tag, ShowcaseFileAddedDetails showcaseFileAddedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseFileAddedDetailsValue = showcaseFileAddedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseFileDownloadDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseFileDownloadDetails(Tag _tag, ShowcaseFileDownloadDetails showcaseFileDownloadDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseFileDownloadDetailsValue = showcaseFileDownloadDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseFileRemovedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseFileRemovedDetails(Tag _tag, ShowcaseFileRemovedDetails showcaseFileRemovedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseFileRemovedDetailsValue = showcaseFileRemovedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseFileViewDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseFileViewDetails(Tag _tag, ShowcaseFileViewDetails showcaseFileViewDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseFileViewDetailsValue = showcaseFileViewDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcasePermanentlyDeletedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcasePermanentlyDeletedDetails(Tag _tag, ShowcasePermanentlyDeletedDetails showcasePermanentlyDeletedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcasePermanentlyDeletedDetailsValue = showcasePermanentlyDeletedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcasePostCommentDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcasePostCommentDetails(Tag _tag, ShowcasePostCommentDetails showcasePostCommentDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcasePostCommentDetailsValue = showcasePostCommentDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseRemoveMemberDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseRemoveMemberDetails(Tag _tag, ShowcaseRemoveMemberDetails showcaseRemoveMemberDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseRemoveMemberDetailsValue = showcaseRemoveMemberDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseRenamedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseRenamedDetails(Tag _tag, ShowcaseRenamedDetails showcaseRenamedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseRenamedDetailsValue = showcaseRenamedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseRequestAccessDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseRequestAccessDetails(Tag _tag, ShowcaseRequestAccessDetails showcaseRequestAccessDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseRequestAccessDetailsValue = showcaseRequestAccessDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseResolveCommentDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseResolveCommentDetails(Tag _tag, ShowcaseResolveCommentDetails showcaseResolveCommentDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseResolveCommentDetailsValue = showcaseResolveCommentDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseRestoredDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseRestoredDetails(Tag _tag, ShowcaseRestoredDetails showcaseRestoredDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseRestoredDetailsValue = showcaseRestoredDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseTrashedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseTrashedDetails(Tag _tag, ShowcaseTrashedDetails showcaseTrashedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseTrashedDetailsValue = showcaseTrashedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseTrashedDeprecatedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseTrashedDeprecatedDetails(Tag _tag, ShowcaseTrashedDeprecatedDetails showcaseTrashedDeprecatedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseTrashedDeprecatedDetailsValue = showcaseTrashedDeprecatedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseUnresolveCommentDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseUnresolveCommentDetails(Tag _tag, ShowcaseUnresolveCommentDetails showcaseUnresolveCommentDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseUnresolveCommentDetailsValue = showcaseUnresolveCommentDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseUntrashedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseUntrashedDetails(Tag _tag, ShowcaseUntrashedDetails showcaseUntrashedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseUntrashedDetailsValue = showcaseUntrashedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseUntrashedDeprecatedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseUntrashedDeprecatedDetails(Tag _tag, ShowcaseUntrashedDeprecatedDetails showcaseUntrashedDeprecatedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseUntrashedDeprecatedDetailsValue = showcaseUntrashedDeprecatedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseViewDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseViewDetails(Tag _tag, ShowcaseViewDetails showcaseViewDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseViewDetailsValue = showcaseViewDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param ssoAddCertDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSsoAddCertDetails(Tag _tag, SsoAddCertDetails ssoAddCertDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.ssoAddCertDetailsValue = ssoAddCertDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param ssoAddLoginUrlDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSsoAddLoginUrlDetails(Tag _tag, SsoAddLoginUrlDetails ssoAddLoginUrlDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.ssoAddLoginUrlDetailsValue = ssoAddLoginUrlDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param ssoAddLogoutUrlDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSsoAddLogoutUrlDetails(Tag _tag, SsoAddLogoutUrlDetails ssoAddLogoutUrlDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.ssoAddLogoutUrlDetailsValue = ssoAddLogoutUrlDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param ssoChangeCertDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSsoChangeCertDetails(Tag _tag, SsoChangeCertDetails ssoChangeCertDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.ssoChangeCertDetailsValue = ssoChangeCertDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param ssoChangeLoginUrlDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSsoChangeLoginUrlDetails(Tag _tag, SsoChangeLoginUrlDetails ssoChangeLoginUrlDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.ssoChangeLoginUrlDetailsValue = ssoChangeLoginUrlDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param ssoChangeLogoutUrlDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSsoChangeLogoutUrlDetails(Tag _tag, SsoChangeLogoutUrlDetails ssoChangeLogoutUrlDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.ssoChangeLogoutUrlDetailsValue = ssoChangeLogoutUrlDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param ssoChangeSamlIdentityModeDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSsoChangeSamlIdentityModeDetails(Tag _tag, SsoChangeSamlIdentityModeDetails ssoChangeSamlIdentityModeDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.ssoChangeSamlIdentityModeDetailsValue = ssoChangeSamlIdentityModeDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param ssoRemoveCertDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSsoRemoveCertDetails(Tag _tag, SsoRemoveCertDetails ssoRemoveCertDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.ssoRemoveCertDetailsValue = ssoRemoveCertDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param ssoRemoveLoginUrlDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSsoRemoveLoginUrlDetails(Tag _tag, SsoRemoveLoginUrlDetails ssoRemoveLoginUrlDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.ssoRemoveLoginUrlDetailsValue = ssoRemoveLoginUrlDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param ssoRemoveLogoutUrlDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSsoRemoveLogoutUrlDetails(Tag _tag, SsoRemoveLogoutUrlDetails ssoRemoveLogoutUrlDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.ssoRemoveLogoutUrlDetailsValue = ssoRemoveLogoutUrlDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamFolderChangeStatusDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamFolderChangeStatusDetails(Tag _tag, TeamFolderChangeStatusDetails teamFolderChangeStatusDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamFolderChangeStatusDetailsValue = teamFolderChangeStatusDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamFolderCreateDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamFolderCreateDetails(Tag _tag, TeamFolderCreateDetails teamFolderCreateDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamFolderCreateDetailsValue = teamFolderCreateDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamFolderDowngradeDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamFolderDowngradeDetails(Tag _tag, TeamFolderDowngradeDetails teamFolderDowngradeDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamFolderDowngradeDetailsValue = teamFolderDowngradeDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamFolderPermanentlyDeleteDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamFolderPermanentlyDeleteDetails(Tag _tag, TeamFolderPermanentlyDeleteDetails teamFolderPermanentlyDeleteDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamFolderPermanentlyDeleteDetailsValue = teamFolderPermanentlyDeleteDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamFolderRenameDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamFolderRenameDetails(Tag _tag, TeamFolderRenameDetails teamFolderRenameDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamFolderRenameDetailsValue = teamFolderRenameDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamSelectiveSyncSettingsChangedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamSelectiveSyncSettingsChangedDetails(Tag _tag, TeamSelectiveSyncSettingsChangedDetails teamSelectiveSyncSettingsChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamSelectiveSyncSettingsChangedDetailsValue = teamSelectiveSyncSettingsChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param accountCaptureChangePolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndAccountCaptureChangePolicyDetails(Tag _tag, AccountCaptureChangePolicyDetails accountCaptureChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.accountCaptureChangePolicyDetailsValue = accountCaptureChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param adminEmailRemindersChangedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndAdminEmailRemindersChangedDetails(Tag _tag, AdminEmailRemindersChangedDetails adminEmailRemindersChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.adminEmailRemindersChangedDetailsValue = adminEmailRemindersChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param allowDownloadDisabledDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndAllowDownloadDisabledDetails(Tag _tag, AllowDownloadDisabledDetails allowDownloadDisabledDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.allowDownloadDisabledDetailsValue = allowDownloadDisabledDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param allowDownloadEnabledDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndAllowDownloadEnabledDetails(Tag _tag, AllowDownloadEnabledDetails allowDownloadEnabledDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.allowDownloadEnabledDetailsValue = allowDownloadEnabledDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param appPermissionsChangedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndAppPermissionsChangedDetails(Tag _tag, AppPermissionsChangedDetails appPermissionsChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.appPermissionsChangedDetailsValue = appPermissionsChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param cameraUploadsPolicyChangedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndCameraUploadsPolicyChangedDetails(Tag _tag, CameraUploadsPolicyChangedDetails cameraUploadsPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.cameraUploadsPolicyChangedDetailsValue = cameraUploadsPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param captureTranscriptPolicyChangedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndCaptureTranscriptPolicyChangedDetails(Tag _tag, CaptureTranscriptPolicyChangedDetails captureTranscriptPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.captureTranscriptPolicyChangedDetailsValue = captureTranscriptPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param classificationChangePolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndClassificationChangePolicyDetails(Tag _tag, ClassificationChangePolicyDetails classificationChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.classificationChangePolicyDetailsValue = classificationChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param computerBackupPolicyChangedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndComputerBackupPolicyChangedDetails(Tag _tag, ComputerBackupPolicyChangedDetails computerBackupPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.computerBackupPolicyChangedDetailsValue = computerBackupPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param contentAdministrationPolicyChangedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndContentAdministrationPolicyChangedDetails(Tag _tag, ContentAdministrationPolicyChangedDetails contentAdministrationPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.contentAdministrationPolicyChangedDetailsValue = contentAdministrationPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param dataPlacementRestrictionChangePolicyDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDataPlacementRestrictionChangePolicyDetails(Tag _tag, DataPlacementRestrictionChangePolicyDetails dataPlacementRestrictionChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.dataPlacementRestrictionChangePolicyDetailsValue = dataPlacementRestrictionChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param dataPlacementRestrictionSatisfyPolicyDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDataPlacementRestrictionSatisfyPolicyDetails(Tag _tag, DataPlacementRestrictionSatisfyPolicyDetails dataPlacementRestrictionSatisfyPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.dataPlacementRestrictionSatisfyPolicyDetailsValue = dataPlacementRestrictionSatisfyPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param deviceApprovalsAddExceptionDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDeviceApprovalsAddExceptionDetails(Tag _tag, DeviceApprovalsAddExceptionDetails deviceApprovalsAddExceptionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.deviceApprovalsAddExceptionDetailsValue = deviceApprovalsAddExceptionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param deviceApprovalsChangeDesktopPolicyDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDeviceApprovalsChangeDesktopPolicyDetails(Tag _tag, DeviceApprovalsChangeDesktopPolicyDetails deviceApprovalsChangeDesktopPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.deviceApprovalsChangeDesktopPolicyDetailsValue = deviceApprovalsChangeDesktopPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param deviceApprovalsChangeMobilePolicyDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDeviceApprovalsChangeMobilePolicyDetails(Tag _tag, DeviceApprovalsChangeMobilePolicyDetails deviceApprovalsChangeMobilePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.deviceApprovalsChangeMobilePolicyDetailsValue = deviceApprovalsChangeMobilePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param deviceApprovalsChangeOverageActionDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDeviceApprovalsChangeOverageActionDetails(Tag _tag, DeviceApprovalsChangeOverageActionDetails deviceApprovalsChangeOverageActionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.deviceApprovalsChangeOverageActionDetailsValue = deviceApprovalsChangeOverageActionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param deviceApprovalsChangeUnlinkActionDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDeviceApprovalsChangeUnlinkActionDetails(Tag _tag, DeviceApprovalsChangeUnlinkActionDetails deviceApprovalsChangeUnlinkActionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.deviceApprovalsChangeUnlinkActionDetailsValue = deviceApprovalsChangeUnlinkActionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param deviceApprovalsRemoveExceptionDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDeviceApprovalsRemoveExceptionDetails(Tag _tag, DeviceApprovalsRemoveExceptionDetails deviceApprovalsRemoveExceptionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.deviceApprovalsRemoveExceptionDetailsValue = deviceApprovalsRemoveExceptionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param directoryRestrictionsAddMembersDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDirectoryRestrictionsAddMembersDetails(Tag _tag, DirectoryRestrictionsAddMembersDetails directoryRestrictionsAddMembersDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.directoryRestrictionsAddMembersDetailsValue = directoryRestrictionsAddMembersDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param directoryRestrictionsRemoveMembersDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDirectoryRestrictionsRemoveMembersDetails(Tag _tag, DirectoryRestrictionsRemoveMembersDetails directoryRestrictionsRemoveMembersDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.directoryRestrictionsRemoveMembersDetailsValue = directoryRestrictionsRemoveMembersDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param dropboxPasswordsPolicyChangedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDropboxPasswordsPolicyChangedDetails(Tag _tag, DropboxPasswordsPolicyChangedDetails dropboxPasswordsPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.dropboxPasswordsPolicyChangedDetailsValue = dropboxPasswordsPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param emailIngestPolicyChangedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndEmailIngestPolicyChangedDetails(Tag _tag, EmailIngestPolicyChangedDetails emailIngestPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.emailIngestPolicyChangedDetailsValue = emailIngestPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param emmAddExceptionDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndEmmAddExceptionDetails(Tag _tag, EmmAddExceptionDetails emmAddExceptionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.emmAddExceptionDetailsValue = emmAddExceptionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param emmChangePolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndEmmChangePolicyDetails(Tag _tag, EmmChangePolicyDetails emmChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.emmChangePolicyDetailsValue = emmChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param emmRemoveExceptionDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndEmmRemoveExceptionDetails(Tag _tag, EmmRemoveExceptionDetails emmRemoveExceptionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.emmRemoveExceptionDetailsValue = emmRemoveExceptionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param extendedVersionHistoryChangePolicyDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndExtendedVersionHistoryChangePolicyDetails(Tag _tag, ExtendedVersionHistoryChangePolicyDetails extendedVersionHistoryChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.extendedVersionHistoryChangePolicyDetailsValue = extendedVersionHistoryChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param externalDriveBackupPolicyChangedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndExternalDriveBackupPolicyChangedDetails(Tag _tag, ExternalDriveBackupPolicyChangedDetails externalDriveBackupPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.externalDriveBackupPolicyChangedDetailsValue = externalDriveBackupPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileCommentsChangePolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileCommentsChangePolicyDetails(Tag _tag, FileCommentsChangePolicyDetails fileCommentsChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileCommentsChangePolicyDetailsValue = fileCommentsChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileLockingPolicyChangedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileLockingPolicyChangedDetails(Tag _tag, FileLockingPolicyChangedDetails fileLockingPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileLockingPolicyChangedDetailsValue = fileLockingPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileProviderMigrationPolicyChangedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileProviderMigrationPolicyChangedDetails(Tag _tag, FileProviderMigrationPolicyChangedDetails fileProviderMigrationPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileProviderMigrationPolicyChangedDetailsValue = fileProviderMigrationPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileRequestsChangePolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileRequestsChangePolicyDetails(Tag _tag, FileRequestsChangePolicyDetails fileRequestsChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileRequestsChangePolicyDetailsValue = fileRequestsChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileRequestsEmailsEnabledDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileRequestsEmailsEnabledDetails(Tag _tag, FileRequestsEmailsEnabledDetails fileRequestsEmailsEnabledDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileRequestsEmailsEnabledDetailsValue = fileRequestsEmailsEnabledDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileRequestsEmailsRestrictedToTeamOnlyDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileRequestsEmailsRestrictedToTeamOnlyDetails(Tag _tag, FileRequestsEmailsRestrictedToTeamOnlyDetails fileRequestsEmailsRestrictedToTeamOnlyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileRequestsEmailsRestrictedToTeamOnlyDetailsValue = fileRequestsEmailsRestrictedToTeamOnlyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param fileTransfersPolicyChangedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndFileTransfersPolicyChangedDetails(Tag _tag, FileTransfersPolicyChangedDetails fileTransfersPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.fileTransfersPolicyChangedDetailsValue = fileTransfersPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param googleSsoChangePolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGoogleSsoChangePolicyDetails(Tag _tag, GoogleSsoChangePolicyDetails googleSsoChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.googleSsoChangePolicyDetailsValue = googleSsoChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param groupUserManagementChangePolicyDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGroupUserManagementChangePolicyDetails(Tag _tag, GroupUserManagementChangePolicyDetails groupUserManagementChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.groupUserManagementChangePolicyDetailsValue = groupUserManagementChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param integrationPolicyChangedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndIntegrationPolicyChangedDetails(Tag _tag, IntegrationPolicyChangedDetails integrationPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.integrationPolicyChangedDetailsValue = integrationPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param inviteAcceptanceEmailPolicyChangedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndInviteAcceptanceEmailPolicyChangedDetails(Tag _tag, InviteAcceptanceEmailPolicyChangedDetails inviteAcceptanceEmailPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.inviteAcceptanceEmailPolicyChangedDetailsValue = inviteAcceptanceEmailPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberRequestsChangePolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberRequestsChangePolicyDetails(Tag _tag, MemberRequestsChangePolicyDetails memberRequestsChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberRequestsChangePolicyDetailsValue = memberRequestsChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberSendInvitePolicyChangedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberSendInvitePolicyChangedDetails(Tag _tag, MemberSendInvitePolicyChangedDetails memberSendInvitePolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberSendInvitePolicyChangedDetailsValue = memberSendInvitePolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberSpaceLimitsAddExceptionDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberSpaceLimitsAddExceptionDetails(Tag _tag, MemberSpaceLimitsAddExceptionDetails memberSpaceLimitsAddExceptionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberSpaceLimitsAddExceptionDetailsValue = memberSpaceLimitsAddExceptionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberSpaceLimitsChangeCapsTypePolicyDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberSpaceLimitsChangeCapsTypePolicyDetails(Tag _tag, MemberSpaceLimitsChangeCapsTypePolicyDetails memberSpaceLimitsChangeCapsTypePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberSpaceLimitsChangeCapsTypePolicyDetailsValue = memberSpaceLimitsChangeCapsTypePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberSpaceLimitsChangePolicyDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberSpaceLimitsChangePolicyDetails(Tag _tag, MemberSpaceLimitsChangePolicyDetails memberSpaceLimitsChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberSpaceLimitsChangePolicyDetailsValue = memberSpaceLimitsChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberSpaceLimitsRemoveExceptionDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberSpaceLimitsRemoveExceptionDetails(Tag _tag, MemberSpaceLimitsRemoveExceptionDetails memberSpaceLimitsRemoveExceptionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberSpaceLimitsRemoveExceptionDetailsValue = memberSpaceLimitsRemoveExceptionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param memberSuggestionsChangePolicyDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMemberSuggestionsChangePolicyDetails(Tag _tag, MemberSuggestionsChangePolicyDetails memberSuggestionsChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.memberSuggestionsChangePolicyDetailsValue = memberSuggestionsChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param microsoftOfficeAddinChangePolicyDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMicrosoftOfficeAddinChangePolicyDetails(Tag _tag, MicrosoftOfficeAddinChangePolicyDetails microsoftOfficeAddinChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.microsoftOfficeAddinChangePolicyDetailsValue = microsoftOfficeAddinChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param networkControlChangePolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndNetworkControlChangePolicyDetails(Tag _tag, NetworkControlChangePolicyDetails networkControlChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.networkControlChangePolicyDetailsValue = networkControlChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperChangeDeploymentPolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperChangeDeploymentPolicyDetails(Tag _tag, PaperChangeDeploymentPolicyDetails paperChangeDeploymentPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperChangeDeploymentPolicyDetailsValue = paperChangeDeploymentPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperChangeMemberLinkPolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperChangeMemberLinkPolicyDetails(Tag _tag, PaperChangeMemberLinkPolicyDetails paperChangeMemberLinkPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperChangeMemberLinkPolicyDetailsValue = paperChangeMemberLinkPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperChangeMemberPolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperChangeMemberPolicyDetails(Tag _tag, PaperChangeMemberPolicyDetails paperChangeMemberPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperChangeMemberPolicyDetailsValue = paperChangeMemberPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperChangePolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperChangePolicyDetails(Tag _tag, PaperChangePolicyDetails paperChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperChangePolicyDetailsValue = paperChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDefaultFolderPolicyChangedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDefaultFolderPolicyChangedDetails(Tag _tag, PaperDefaultFolderPolicyChangedDetails paperDefaultFolderPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDefaultFolderPolicyChangedDetailsValue = paperDefaultFolderPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperDesktopPolicyChangedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperDesktopPolicyChangedDetails(Tag _tag, PaperDesktopPolicyChangedDetails paperDesktopPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperDesktopPolicyChangedDetailsValue = paperDesktopPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperEnabledUsersGroupAdditionDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperEnabledUsersGroupAdditionDetails(Tag _tag, PaperEnabledUsersGroupAdditionDetails paperEnabledUsersGroupAdditionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperEnabledUsersGroupAdditionDetailsValue = paperEnabledUsersGroupAdditionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param paperEnabledUsersGroupRemovalDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPaperEnabledUsersGroupRemovalDetails(Tag _tag, PaperEnabledUsersGroupRemovalDetails paperEnabledUsersGroupRemovalDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.paperEnabledUsersGroupRemovalDetailsValue = paperEnabledUsersGroupRemovalDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param passwordStrengthRequirementsChangePolicyDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPasswordStrengthRequirementsChangePolicyDetails(Tag _tag, PasswordStrengthRequirementsChangePolicyDetails passwordStrengthRequirementsChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.passwordStrengthRequirementsChangePolicyDetailsValue = passwordStrengthRequirementsChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param permanentDeleteChangePolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndPermanentDeleteChangePolicyDetails(Tag _tag, PermanentDeleteChangePolicyDetails permanentDeleteChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.permanentDeleteChangePolicyDetailsValue = permanentDeleteChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param resellerSupportChangePolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndResellerSupportChangePolicyDetails(Tag _tag, ResellerSupportChangePolicyDetails resellerSupportChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.resellerSupportChangePolicyDetailsValue = resellerSupportChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param rewindPolicyChangedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndRewindPolicyChangedDetails(Tag _tag, RewindPolicyChangedDetails rewindPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.rewindPolicyChangedDetailsValue = rewindPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sendForSignaturePolicyChangedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSendForSignaturePolicyChangedDetails(Tag _tag, SendForSignaturePolicyChangedDetails sendForSignaturePolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sendForSignaturePolicyChangedDetailsValue = sendForSignaturePolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharingChangeFolderJoinPolicyDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharingChangeFolderJoinPolicyDetails(Tag _tag, SharingChangeFolderJoinPolicyDetails sharingChangeFolderJoinPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharingChangeFolderJoinPolicyDetailsValue = sharingChangeFolderJoinPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharingChangeLinkAllowChangeExpirationPolicyDetailsValue  Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharingChangeLinkAllowChangeExpirationPolicyDetails(Tag _tag, SharingChangeLinkAllowChangeExpirationPolicyDetails sharingChangeLinkAllowChangeExpirationPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharingChangeLinkAllowChangeExpirationPolicyDetailsValue = sharingChangeLinkAllowChangeExpirationPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharingChangeLinkDefaultExpirationPolicyDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharingChangeLinkDefaultExpirationPolicyDetails(Tag _tag, SharingChangeLinkDefaultExpirationPolicyDetails sharingChangeLinkDefaultExpirationPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharingChangeLinkDefaultExpirationPolicyDetailsValue = sharingChangeLinkDefaultExpirationPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharingChangeLinkEnforcePasswordPolicyDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharingChangeLinkEnforcePasswordPolicyDetails(Tag _tag, SharingChangeLinkEnforcePasswordPolicyDetails sharingChangeLinkEnforcePasswordPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharingChangeLinkEnforcePasswordPolicyDetailsValue = sharingChangeLinkEnforcePasswordPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharingChangeLinkPolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharingChangeLinkPolicyDetails(Tag _tag, SharingChangeLinkPolicyDetails sharingChangeLinkPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharingChangeLinkPolicyDetailsValue = sharingChangeLinkPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param sharingChangeMemberPolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSharingChangeMemberPolicyDetails(Tag _tag, SharingChangeMemberPolicyDetails sharingChangeMemberPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.sharingChangeMemberPolicyDetailsValue = sharingChangeMemberPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseChangeDownloadPolicyDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseChangeDownloadPolicyDetails(Tag _tag, ShowcaseChangeDownloadPolicyDetails showcaseChangeDownloadPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseChangeDownloadPolicyDetailsValue = showcaseChangeDownloadPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseChangeEnabledPolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseChangeEnabledPolicyDetails(Tag _tag, ShowcaseChangeEnabledPolicyDetails showcaseChangeEnabledPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseChangeEnabledPolicyDetailsValue = showcaseChangeEnabledPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param showcaseChangeExternalSharingPolicyDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndShowcaseChangeExternalSharingPolicyDetails(Tag _tag, ShowcaseChangeExternalSharingPolicyDetails showcaseChangeExternalSharingPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.showcaseChangeExternalSharingPolicyDetailsValue = showcaseChangeExternalSharingPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param smarterSmartSyncPolicyChangedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSmarterSmartSyncPolicyChangedDetails(Tag _tag, SmarterSmartSyncPolicyChangedDetails smarterSmartSyncPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.smarterSmartSyncPolicyChangedDetailsValue = smarterSmartSyncPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param smartSyncChangePolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSmartSyncChangePolicyDetails(Tag _tag, SmartSyncChangePolicyDetails smartSyncChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.smartSyncChangePolicyDetailsValue = smartSyncChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param smartSyncNotOptOutDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSmartSyncNotOptOutDetails(Tag _tag, SmartSyncNotOptOutDetails smartSyncNotOptOutDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.smartSyncNotOptOutDetailsValue = smartSyncNotOptOutDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param smartSyncOptOutDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSmartSyncOptOutDetails(Tag _tag, SmartSyncOptOutDetails smartSyncOptOutDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.smartSyncOptOutDetailsValue = smartSyncOptOutDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param ssoChangePolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndSsoChangePolicyDetails(Tag _tag, SsoChangePolicyDetails ssoChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.ssoChangePolicyDetailsValue = ssoChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamBrandingPolicyChangedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamBrandingPolicyChangedDetails(Tag _tag, TeamBrandingPolicyChangedDetails teamBrandingPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamBrandingPolicyChangedDetailsValue = teamBrandingPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamExtensionsPolicyChangedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamExtensionsPolicyChangedDetails(Tag _tag, TeamExtensionsPolicyChangedDetails teamExtensionsPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamExtensionsPolicyChangedDetailsValue = teamExtensionsPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamSelectiveSyncPolicyChangedDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamSelectiveSyncPolicyChangedDetails(Tag _tag, TeamSelectiveSyncPolicyChangedDetails teamSelectiveSyncPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamSelectiveSyncPolicyChangedDetailsValue = teamSelectiveSyncPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamSharingWhitelistSubjectsChangedDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamSharingWhitelistSubjectsChangedDetails(Tag _tag, TeamSharingWhitelistSubjectsChangedDetails teamSharingWhitelistSubjectsChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamSharingWhitelistSubjectsChangedDetailsValue = teamSharingWhitelistSubjectsChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param tfaAddExceptionDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTfaAddExceptionDetails(Tag _tag, TfaAddExceptionDetails tfaAddExceptionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.tfaAddExceptionDetailsValue = tfaAddExceptionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param tfaChangePolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTfaChangePolicyDetails(Tag _tag, TfaChangePolicyDetails tfaChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.tfaChangePolicyDetailsValue = tfaChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param tfaRemoveExceptionDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTfaRemoveExceptionDetails(Tag _tag, TfaRemoveExceptionDetails tfaRemoveExceptionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.tfaRemoveExceptionDetailsValue = tfaRemoveExceptionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param twoAccountChangePolicyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTwoAccountChangePolicyDetails(Tag _tag, TwoAccountChangePolicyDetails twoAccountChangePolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.twoAccountChangePolicyDetailsValue = twoAccountChangePolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param viewerInfoPolicyChangedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndViewerInfoPolicyChangedDetails(Tag _tag, ViewerInfoPolicyChangedDetails viewerInfoPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.viewerInfoPolicyChangedDetailsValue = viewerInfoPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param watermarkingPolicyChangedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndWatermarkingPolicyChangedDetails(Tag _tag, WatermarkingPolicyChangedDetails watermarkingPolicyChangedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.watermarkingPolicyChangedDetailsValue = watermarkingPolicyChangedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param webSessionsChangeActiveSessionLimitDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndWebSessionsChangeActiveSessionLimitDetails(Tag _tag, WebSessionsChangeActiveSessionLimitDetails webSessionsChangeActiveSessionLimitDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.webSessionsChangeActiveSessionLimitDetailsValue = webSessionsChangeActiveSessionLimitDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param webSessionsChangeFixedLengthPolicyDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndWebSessionsChangeFixedLengthPolicyDetails(Tag _tag, WebSessionsChangeFixedLengthPolicyDetails webSessionsChangeFixedLengthPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.webSessionsChangeFixedLengthPolicyDetailsValue = webSessionsChangeFixedLengthPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param webSessionsChangeIdleLengthPolicyDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndWebSessionsChangeIdleLengthPolicyDetails(Tag _tag, WebSessionsChangeIdleLengthPolicyDetails webSessionsChangeIdleLengthPolicyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.webSessionsChangeIdleLengthPolicyDetailsValue = webSessionsChangeIdleLengthPolicyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param dataResidencyMigrationRequestSuccessfulDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDataResidencyMigrationRequestSuccessfulDetails(Tag _tag, DataResidencyMigrationRequestSuccessfulDetails dataResidencyMigrationRequestSuccessfulDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.dataResidencyMigrationRequestSuccessfulDetailsValue = dataResidencyMigrationRequestSuccessfulDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param dataResidencyMigrationRequestUnsuccessfulDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndDataResidencyMigrationRequestUnsuccessfulDetails(Tag _tag, DataResidencyMigrationRequestUnsuccessfulDetails dataResidencyMigrationRequestUnsuccessfulDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.dataResidencyMigrationRequestUnsuccessfulDetailsValue = dataResidencyMigrationRequestUnsuccessfulDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamMergeFromDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamMergeFromDetails(Tag _tag, TeamMergeFromDetails teamMergeFromDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamMergeFromDetailsValue = teamMergeFromDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamMergeToDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamMergeToDetails(Tag _tag, TeamMergeToDetails teamMergeToDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamMergeToDetailsValue = teamMergeToDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamProfileAddBackgroundDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamProfileAddBackgroundDetails(Tag _tag, TeamProfileAddBackgroundDetails teamProfileAddBackgroundDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamProfileAddBackgroundDetailsValue = teamProfileAddBackgroundDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamProfileAddLogoDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamProfileAddLogoDetails(Tag _tag, TeamProfileAddLogoDetails teamProfileAddLogoDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamProfileAddLogoDetailsValue = teamProfileAddLogoDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamProfileChangeBackgroundDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamProfileChangeBackgroundDetails(Tag _tag, TeamProfileChangeBackgroundDetails teamProfileChangeBackgroundDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamProfileChangeBackgroundDetailsValue = teamProfileChangeBackgroundDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamProfileChangeDefaultLanguageDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamProfileChangeDefaultLanguageDetails(Tag _tag, TeamProfileChangeDefaultLanguageDetails teamProfileChangeDefaultLanguageDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamProfileChangeDefaultLanguageDetailsValue = teamProfileChangeDefaultLanguageDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamProfileChangeLogoDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamProfileChangeLogoDetails(Tag _tag, TeamProfileChangeLogoDetails teamProfileChangeLogoDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamProfileChangeLogoDetailsValue = teamProfileChangeLogoDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamProfileChangeNameDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamProfileChangeNameDetails(Tag _tag, TeamProfileChangeNameDetails teamProfileChangeNameDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamProfileChangeNameDetailsValue = teamProfileChangeNameDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamProfileRemoveBackgroundDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamProfileRemoveBackgroundDetails(Tag _tag, TeamProfileRemoveBackgroundDetails teamProfileRemoveBackgroundDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamProfileRemoveBackgroundDetailsValue = teamProfileRemoveBackgroundDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamProfileRemoveLogoDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamProfileRemoveLogoDetails(Tag _tag, TeamProfileRemoveLogoDetails teamProfileRemoveLogoDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamProfileRemoveLogoDetailsValue = teamProfileRemoveLogoDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param tfaAddBackupPhoneDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTfaAddBackupPhoneDetails(Tag _tag, TfaAddBackupPhoneDetails tfaAddBackupPhoneDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.tfaAddBackupPhoneDetailsValue = tfaAddBackupPhoneDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param tfaAddSecurityKeyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTfaAddSecurityKeyDetails(Tag _tag, TfaAddSecurityKeyDetails tfaAddSecurityKeyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.tfaAddSecurityKeyDetailsValue = tfaAddSecurityKeyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param tfaChangeBackupPhoneDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTfaChangeBackupPhoneDetails(Tag _tag, TfaChangeBackupPhoneDetails tfaChangeBackupPhoneDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.tfaChangeBackupPhoneDetailsValue = tfaChangeBackupPhoneDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param tfaChangeStatusDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTfaChangeStatusDetails(Tag _tag, TfaChangeStatusDetails tfaChangeStatusDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.tfaChangeStatusDetailsValue = tfaChangeStatusDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param tfaRemoveBackupPhoneDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTfaRemoveBackupPhoneDetails(Tag _tag, TfaRemoveBackupPhoneDetails tfaRemoveBackupPhoneDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.tfaRemoveBackupPhoneDetailsValue = tfaRemoveBackupPhoneDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param tfaRemoveSecurityKeyDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTfaRemoveSecurityKeyDetails(Tag _tag, TfaRemoveSecurityKeyDetails tfaRemoveSecurityKeyDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.tfaRemoveSecurityKeyDetailsValue = tfaRemoveSecurityKeyDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param tfaResetDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTfaResetDetails(Tag _tag, TfaResetDetails tfaResetDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.tfaResetDetailsValue = tfaResetDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param changedEnterpriseAdminRoleDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndChangedEnterpriseAdminRoleDetails(Tag _tag, ChangedEnterpriseAdminRoleDetails changedEnterpriseAdminRoleDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.changedEnterpriseAdminRoleDetailsValue = changedEnterpriseAdminRoleDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param changedEnterpriseConnectedTeamStatusDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndChangedEnterpriseConnectedTeamStatusDetails(Tag _tag, ChangedEnterpriseConnectedTeamStatusDetails changedEnterpriseConnectedTeamStatusDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.changedEnterpriseConnectedTeamStatusDetailsValue = changedEnterpriseConnectedTeamStatusDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param endedEnterpriseAdminSessionDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndEndedEnterpriseAdminSessionDetails(Tag _tag, EndedEnterpriseAdminSessionDetails endedEnterpriseAdminSessionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.endedEnterpriseAdminSessionDetailsValue = endedEnterpriseAdminSessionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param endedEnterpriseAdminSessionDeprecatedDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndEndedEnterpriseAdminSessionDeprecatedDetails(Tag _tag, EndedEnterpriseAdminSessionDeprecatedDetails endedEnterpriseAdminSessionDeprecatedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.endedEnterpriseAdminSessionDeprecatedDetailsValue = endedEnterpriseAdminSessionDeprecatedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param enterpriseSettingsLockingDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndEnterpriseSettingsLockingDetails(Tag _tag, EnterpriseSettingsLockingDetails enterpriseSettingsLockingDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.enterpriseSettingsLockingDetailsValue = enterpriseSettingsLockingDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param guestAdminChangeStatusDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndGuestAdminChangeStatusDetails(Tag _tag, GuestAdminChangeStatusDetails guestAdminChangeStatusDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.guestAdminChangeStatusDetailsValue = guestAdminChangeStatusDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param startedEnterpriseAdminSessionDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndStartedEnterpriseAdminSessionDetails(Tag _tag, StartedEnterpriseAdminSessionDetails startedEnterpriseAdminSessionDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.startedEnterpriseAdminSessionDetailsValue = startedEnterpriseAdminSessionDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamMergeRequestAcceptedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamMergeRequestAcceptedDetails(Tag _tag, TeamMergeRequestAcceptedDetails teamMergeRequestAcceptedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamMergeRequestAcceptedDetailsValue = teamMergeRequestAcceptedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamMergeRequestAcceptedShownToPrimaryTeamDetailsValue  Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamMergeRequestAcceptedShownToPrimaryTeamDetails(Tag _tag, TeamMergeRequestAcceptedShownToPrimaryTeamDetails teamMergeRequestAcceptedShownToPrimaryTeamDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamMergeRequestAcceptedShownToPrimaryTeamDetailsValue = teamMergeRequestAcceptedShownToPrimaryTeamDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamMergeRequestAcceptedShownToSecondaryTeamDetailsValue  Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamMergeRequestAcceptedShownToSecondaryTeamDetails(Tag _tag, TeamMergeRequestAcceptedShownToSecondaryTeamDetails teamMergeRequestAcceptedShownToSecondaryTeamDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamMergeRequestAcceptedShownToSecondaryTeamDetailsValue = teamMergeRequestAcceptedShownToSecondaryTeamDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamMergeRequestAutoCanceledDetailsValue  Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamMergeRequestAutoCanceledDetails(Tag _tag, TeamMergeRequestAutoCanceledDetails teamMergeRequestAutoCanceledDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamMergeRequestAutoCanceledDetailsValue = teamMergeRequestAutoCanceledDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamMergeRequestCanceledDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamMergeRequestCanceledDetails(Tag _tag, TeamMergeRequestCanceledDetails teamMergeRequestCanceledDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamMergeRequestCanceledDetailsValue = teamMergeRequestCanceledDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamMergeRequestCanceledShownToPrimaryTeamDetailsValue  Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamMergeRequestCanceledShownToPrimaryTeamDetails(Tag _tag, TeamMergeRequestCanceledShownToPrimaryTeamDetails teamMergeRequestCanceledShownToPrimaryTeamDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamMergeRequestCanceledShownToPrimaryTeamDetailsValue = teamMergeRequestCanceledShownToPrimaryTeamDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamMergeRequestCanceledShownToSecondaryTeamDetailsValue  Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamMergeRequestCanceledShownToSecondaryTeamDetails(Tag _tag, TeamMergeRequestCanceledShownToSecondaryTeamDetails teamMergeRequestCanceledShownToSecondaryTeamDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamMergeRequestCanceledShownToSecondaryTeamDetailsValue = teamMergeRequestCanceledShownToSecondaryTeamDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamMergeRequestExpiredDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamMergeRequestExpiredDetails(Tag _tag, TeamMergeRequestExpiredDetails teamMergeRequestExpiredDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamMergeRequestExpiredDetailsValue = teamMergeRequestExpiredDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamMergeRequestExpiredShownToPrimaryTeamDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamMergeRequestExpiredShownToPrimaryTeamDetails(Tag _tag, TeamMergeRequestExpiredShownToPrimaryTeamDetails teamMergeRequestExpiredShownToPrimaryTeamDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamMergeRequestExpiredShownToPrimaryTeamDetailsValue = teamMergeRequestExpiredShownToPrimaryTeamDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamMergeRequestExpiredShownToSecondaryTeamDetailsValue  Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamMergeRequestExpiredShownToSecondaryTeamDetails(Tag _tag, TeamMergeRequestExpiredShownToSecondaryTeamDetails teamMergeRequestExpiredShownToSecondaryTeamDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamMergeRequestExpiredShownToSecondaryTeamDetailsValue = teamMergeRequestExpiredShownToSecondaryTeamDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamMergeRequestRejectedShownToPrimaryTeamDetailsValue  Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamMergeRequestRejectedShownToPrimaryTeamDetails(Tag _tag, TeamMergeRequestRejectedShownToPrimaryTeamDetails teamMergeRequestRejectedShownToPrimaryTeamDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamMergeRequestRejectedShownToPrimaryTeamDetailsValue = teamMergeRequestRejectedShownToPrimaryTeamDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamMergeRequestRejectedShownToSecondaryTeamDetailsValue  Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamMergeRequestRejectedShownToSecondaryTeamDetails(Tag _tag, TeamMergeRequestRejectedShownToSecondaryTeamDetails teamMergeRequestRejectedShownToSecondaryTeamDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamMergeRequestRejectedShownToSecondaryTeamDetailsValue = teamMergeRequestRejectedShownToSecondaryTeamDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamMergeRequestReminderDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamMergeRequestReminderDetails(Tag _tag, TeamMergeRequestReminderDetails teamMergeRequestReminderDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamMergeRequestReminderDetailsValue = teamMergeRequestReminderDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamMergeRequestReminderShownToPrimaryTeamDetailsValue  Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamMergeRequestReminderShownToPrimaryTeamDetails(Tag _tag, TeamMergeRequestReminderShownToPrimaryTeamDetails teamMergeRequestReminderShownToPrimaryTeamDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamMergeRequestReminderShownToPrimaryTeamDetailsValue = teamMergeRequestReminderShownToPrimaryTeamDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamMergeRequestReminderShownToSecondaryTeamDetailsValue  Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamMergeRequestReminderShownToSecondaryTeamDetails(Tag _tag, TeamMergeRequestReminderShownToSecondaryTeamDetails teamMergeRequestReminderShownToSecondaryTeamDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamMergeRequestReminderShownToSecondaryTeamDetailsValue = teamMergeRequestReminderShownToSecondaryTeamDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamMergeRequestRevokedDetailsValue  Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamMergeRequestRevokedDetails(Tag _tag, TeamMergeRequestRevokedDetails teamMergeRequestRevokedDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamMergeRequestRevokedDetailsValue = teamMergeRequestRevokedDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamMergeRequestSentShownToPrimaryTeamDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamMergeRequestSentShownToPrimaryTeamDetails(Tag _tag, TeamMergeRequestSentShownToPrimaryTeamDetails teamMergeRequestSentShownToPrimaryTeamDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamMergeRequestSentShownToPrimaryTeamDetailsValue = teamMergeRequestSentShownToPrimaryTeamDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param teamMergeRequestSentShownToSecondaryTeamDetailsValue  Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndTeamMergeRequestSentShownToSecondaryTeamDetails(Tag _tag, TeamMergeRequestSentShownToSecondaryTeamDetails teamMergeRequestSentShownToSecondaryTeamDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.teamMergeRequestSentShownToSecondaryTeamDetailsValue = teamMergeRequestSentShownToSecondaryTeamDetailsValue;
        return result;
    }

    /**
     * Additional fields depending on the event type.
     *
     * @param missingDetailsValue  Hints that this event was returned with
     *     missing details due to an internal error. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventDetails withTagAndMissingDetails(Tag _tag, MissingDetails missingDetailsValue) {
        EventDetails result = new EventDetails();
        result._tag = _tag;
        result.missingDetailsValue = missingDetailsValue;
        return result;
    }

    /**
     * Returns the tag for this instance.
     *
     * <p> This class is a tagged union.  Tagged unions instances are always
     * associated to a specific tag.  This means only one of the {@code isXyz()}
     * methods will return {@code true}. Callers are recommended to use the tag
     * value in a {@code switch} statement to properly handle the different
     * values for this {@code EventDetails}. </p>
     *
     * <p> If a tag returned by the server is unrecognized by this SDK, the
     * {@link Tag#OTHER} value will be used. </p>
     *
     * @return the tag for this instance.
     */
    public Tag tag() {
        return _tag;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ADMIN_ALERTING_ALERT_STATE_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ADMIN_ALERTING_ALERT_STATE_CHANGED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isAdminAlertingAlertStateChangedDetails() {
        return this._tag == Tag.ADMIN_ALERTING_ALERT_STATE_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#ADMIN_ALERTING_ALERT_STATE_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#ADMIN_ALERTING_ALERT_STATE_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails adminAlertingAlertStateChangedDetails(AdminAlertingAlertStateChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndAdminAlertingAlertStateChangedDetails(Tag.ADMIN_ALERTING_ALERT_STATE_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#ADMIN_ALERTING_ALERT_STATE_CHANGED_DETAILS}.
     *
     * @return The {@link AdminAlertingAlertStateChangedDetails} value
     *     associated with this instance if {@link
     *     #isAdminAlertingAlertStateChangedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isAdminAlertingAlertStateChangedDetails} is {@code false}.
     */
    public AdminAlertingAlertStateChangedDetails getAdminAlertingAlertStateChangedDetailsValue() {
        if (this._tag != Tag.ADMIN_ALERTING_ALERT_STATE_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.ADMIN_ALERTING_ALERT_STATE_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return adminAlertingAlertStateChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ADMIN_ALERTING_CHANGED_ALERT_CONFIG_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ADMIN_ALERTING_CHANGED_ALERT_CONFIG_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isAdminAlertingChangedAlertConfigDetails() {
        return this._tag == Tag.ADMIN_ALERTING_CHANGED_ALERT_CONFIG_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#ADMIN_ALERTING_CHANGED_ALERT_CONFIG_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#ADMIN_ALERTING_CHANGED_ALERT_CONFIG_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails adminAlertingChangedAlertConfigDetails(AdminAlertingChangedAlertConfigDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndAdminAlertingChangedAlertConfigDetails(Tag.ADMIN_ALERTING_CHANGED_ALERT_CONFIG_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#ADMIN_ALERTING_CHANGED_ALERT_CONFIG_DETAILS}.
     *
     * @return The {@link AdminAlertingChangedAlertConfigDetails} value
     *     associated with this instance if {@link
     *     #isAdminAlertingChangedAlertConfigDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isAdminAlertingChangedAlertConfigDetails} is {@code false}.
     */
    public AdminAlertingChangedAlertConfigDetails getAdminAlertingChangedAlertConfigDetailsValue() {
        if (this._tag != Tag.ADMIN_ALERTING_CHANGED_ALERT_CONFIG_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.ADMIN_ALERTING_CHANGED_ALERT_CONFIG_DETAILS, but was Tag." + this._tag.name());
        }
        return adminAlertingChangedAlertConfigDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ADMIN_ALERTING_TRIGGERED_ALERT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ADMIN_ALERTING_TRIGGERED_ALERT_DETAILS}, {@code false} otherwise.
     */
    public boolean isAdminAlertingTriggeredAlertDetails() {
        return this._tag == Tag.ADMIN_ALERTING_TRIGGERED_ALERT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#ADMIN_ALERTING_TRIGGERED_ALERT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#ADMIN_ALERTING_TRIGGERED_ALERT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails adminAlertingTriggeredAlertDetails(AdminAlertingTriggeredAlertDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndAdminAlertingTriggeredAlertDetails(Tag.ADMIN_ALERTING_TRIGGERED_ALERT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#ADMIN_ALERTING_TRIGGERED_ALERT_DETAILS}.
     *
     * @return The {@link AdminAlertingTriggeredAlertDetails} value associated
     *     with this instance if {@link #isAdminAlertingTriggeredAlertDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isAdminAlertingTriggeredAlertDetails} is {@code false}.
     */
    public AdminAlertingTriggeredAlertDetails getAdminAlertingTriggeredAlertDetailsValue() {
        if (this._tag != Tag.ADMIN_ALERTING_TRIGGERED_ALERT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.ADMIN_ALERTING_TRIGGERED_ALERT_DETAILS, but was Tag." + this._tag.name());
        }
        return adminAlertingTriggeredAlertDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#APP_BLOCKED_BY_PERMISSIONS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#APP_BLOCKED_BY_PERMISSIONS_DETAILS}, {@code false} otherwise.
     */
    public boolean isAppBlockedByPermissionsDetails() {
        return this._tag == Tag.APP_BLOCKED_BY_PERMISSIONS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#APP_BLOCKED_BY_PERMISSIONS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#APP_BLOCKED_BY_PERMISSIONS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails appBlockedByPermissionsDetails(AppBlockedByPermissionsDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndAppBlockedByPermissionsDetails(Tag.APP_BLOCKED_BY_PERMISSIONS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#APP_BLOCKED_BY_PERMISSIONS_DETAILS}.
     *
     * @return The {@link AppBlockedByPermissionsDetails} value associated with
     *     this instance if {@link #isAppBlockedByPermissionsDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isAppBlockedByPermissionsDetails} is {@code false}.
     */
    public AppBlockedByPermissionsDetails getAppBlockedByPermissionsDetailsValue() {
        if (this._tag != Tag.APP_BLOCKED_BY_PERMISSIONS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.APP_BLOCKED_BY_PERMISSIONS_DETAILS, but was Tag." + this._tag.name());
        }
        return appBlockedByPermissionsDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#APP_LINK_TEAM_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#APP_LINK_TEAM_DETAILS}, {@code false} otherwise.
     */
    public boolean isAppLinkTeamDetails() {
        return this._tag == Tag.APP_LINK_TEAM_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#APP_LINK_TEAM_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#APP_LINK_TEAM_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails appLinkTeamDetails(AppLinkTeamDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndAppLinkTeamDetails(Tag.APP_LINK_TEAM_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#APP_LINK_TEAM_DETAILS}.
     *
     * @return The {@link AppLinkTeamDetails} value associated with this
     *     instance if {@link #isAppLinkTeamDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isAppLinkTeamDetails} is {@code
     *     false}.
     */
    public AppLinkTeamDetails getAppLinkTeamDetailsValue() {
        if (this._tag != Tag.APP_LINK_TEAM_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.APP_LINK_TEAM_DETAILS, but was Tag." + this._tag.name());
        }
        return appLinkTeamDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#APP_LINK_USER_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#APP_LINK_USER_DETAILS}, {@code false} otherwise.
     */
    public boolean isAppLinkUserDetails() {
        return this._tag == Tag.APP_LINK_USER_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#APP_LINK_USER_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#APP_LINK_USER_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails appLinkUserDetails(AppLinkUserDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndAppLinkUserDetails(Tag.APP_LINK_USER_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#APP_LINK_USER_DETAILS}.
     *
     * @return The {@link AppLinkUserDetails} value associated with this
     *     instance if {@link #isAppLinkUserDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isAppLinkUserDetails} is {@code
     *     false}.
     */
    public AppLinkUserDetails getAppLinkUserDetailsValue() {
        if (this._tag != Tag.APP_LINK_USER_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.APP_LINK_USER_DETAILS, but was Tag." + this._tag.name());
        }
        return appLinkUserDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#APP_UNLINK_TEAM_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#APP_UNLINK_TEAM_DETAILS}, {@code false} otherwise.
     */
    public boolean isAppUnlinkTeamDetails() {
        return this._tag == Tag.APP_UNLINK_TEAM_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#APP_UNLINK_TEAM_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#APP_UNLINK_TEAM_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails appUnlinkTeamDetails(AppUnlinkTeamDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndAppUnlinkTeamDetails(Tag.APP_UNLINK_TEAM_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#APP_UNLINK_TEAM_DETAILS}.
     *
     * @return The {@link AppUnlinkTeamDetails} value associated with this
     *     instance if {@link #isAppUnlinkTeamDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isAppUnlinkTeamDetails} is
     *     {@code false}.
     */
    public AppUnlinkTeamDetails getAppUnlinkTeamDetailsValue() {
        if (this._tag != Tag.APP_UNLINK_TEAM_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.APP_UNLINK_TEAM_DETAILS, but was Tag." + this._tag.name());
        }
        return appUnlinkTeamDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#APP_UNLINK_USER_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#APP_UNLINK_USER_DETAILS}, {@code false} otherwise.
     */
    public boolean isAppUnlinkUserDetails() {
        return this._tag == Tag.APP_UNLINK_USER_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#APP_UNLINK_USER_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#APP_UNLINK_USER_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails appUnlinkUserDetails(AppUnlinkUserDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndAppUnlinkUserDetails(Tag.APP_UNLINK_USER_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#APP_UNLINK_USER_DETAILS}.
     *
     * @return The {@link AppUnlinkUserDetails} value associated with this
     *     instance if {@link #isAppUnlinkUserDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isAppUnlinkUserDetails} is
     *     {@code false}.
     */
    public AppUnlinkUserDetails getAppUnlinkUserDetailsValue() {
        if (this._tag != Tag.APP_UNLINK_USER_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.APP_UNLINK_USER_DETAILS, but was Tag." + this._tag.name());
        }
        return appUnlinkUserDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#INTEGRATION_CONNECTED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#INTEGRATION_CONNECTED_DETAILS}, {@code false} otherwise.
     */
    public boolean isIntegrationConnectedDetails() {
        return this._tag == Tag.INTEGRATION_CONNECTED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#INTEGRATION_CONNECTED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#INTEGRATION_CONNECTED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails integrationConnectedDetails(IntegrationConnectedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndIntegrationConnectedDetails(Tag.INTEGRATION_CONNECTED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#INTEGRATION_CONNECTED_DETAILS}.
     *
     * @return The {@link IntegrationConnectedDetails} value associated with
     *     this instance if {@link #isIntegrationConnectedDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isIntegrationConnectedDetails}
     *     is {@code false}.
     */
    public IntegrationConnectedDetails getIntegrationConnectedDetailsValue() {
        if (this._tag != Tag.INTEGRATION_CONNECTED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.INTEGRATION_CONNECTED_DETAILS, but was Tag." + this._tag.name());
        }
        return integrationConnectedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#INTEGRATION_DISCONNECTED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#INTEGRATION_DISCONNECTED_DETAILS}, {@code false} otherwise.
     */
    public boolean isIntegrationDisconnectedDetails() {
        return this._tag == Tag.INTEGRATION_DISCONNECTED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#INTEGRATION_DISCONNECTED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#INTEGRATION_DISCONNECTED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails integrationDisconnectedDetails(IntegrationDisconnectedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndIntegrationDisconnectedDetails(Tag.INTEGRATION_DISCONNECTED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#INTEGRATION_DISCONNECTED_DETAILS}.
     *
     * @return The {@link IntegrationDisconnectedDetails} value associated with
     *     this instance if {@link #isIntegrationDisconnectedDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isIntegrationDisconnectedDetails} is {@code false}.
     */
    public IntegrationDisconnectedDetails getIntegrationDisconnectedDetailsValue() {
        if (this._tag != Tag.INTEGRATION_DISCONNECTED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.INTEGRATION_DISCONNECTED_DETAILS, but was Tag." + this._tag.name());
        }
        return integrationDisconnectedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_ADD_COMMENT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_ADD_COMMENT_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileAddCommentDetails() {
        return this._tag == Tag.FILE_ADD_COMMENT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_ADD_COMMENT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_ADD_COMMENT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileAddCommentDetails(FileAddCommentDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileAddCommentDetails(Tag.FILE_ADD_COMMENT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#FILE_ADD_COMMENT_DETAILS}.
     *
     * @return The {@link FileAddCommentDetails} value associated with this
     *     instance if {@link #isFileAddCommentDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileAddCommentDetails} is
     *     {@code false}.
     */
    public FileAddCommentDetails getFileAddCommentDetailsValue() {
        if (this._tag != Tag.FILE_ADD_COMMENT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_ADD_COMMENT_DETAILS, but was Tag." + this._tag.name());
        }
        return fileAddCommentDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_CHANGE_COMMENT_SUBSCRIPTION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_CHANGE_COMMENT_SUBSCRIPTION_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isFileChangeCommentSubscriptionDetails() {
        return this._tag == Tag.FILE_CHANGE_COMMENT_SUBSCRIPTION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_CHANGE_COMMENT_SUBSCRIPTION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_CHANGE_COMMENT_SUBSCRIPTION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileChangeCommentSubscriptionDetails(FileChangeCommentSubscriptionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileChangeCommentSubscriptionDetails(Tag.FILE_CHANGE_COMMENT_SUBSCRIPTION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FILE_CHANGE_COMMENT_SUBSCRIPTION_DETAILS}.
     *
     * @return The {@link FileChangeCommentSubscriptionDetails} value associated
     *     with this instance if {@link #isFileChangeCommentSubscriptionDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFileChangeCommentSubscriptionDetails} is {@code false}.
     */
    public FileChangeCommentSubscriptionDetails getFileChangeCommentSubscriptionDetailsValue() {
        if (this._tag != Tag.FILE_CHANGE_COMMENT_SUBSCRIPTION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_CHANGE_COMMENT_SUBSCRIPTION_DETAILS, but was Tag." + this._tag.name());
        }
        return fileChangeCommentSubscriptionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_DELETE_COMMENT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_DELETE_COMMENT_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileDeleteCommentDetails() {
        return this._tag == Tag.FILE_DELETE_COMMENT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_DELETE_COMMENT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_DELETE_COMMENT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileDeleteCommentDetails(FileDeleteCommentDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileDeleteCommentDetails(Tag.FILE_DELETE_COMMENT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#FILE_DELETE_COMMENT_DETAILS}.
     *
     * @return The {@link FileDeleteCommentDetails} value associated with this
     *     instance if {@link #isFileDeleteCommentDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileDeleteCommentDetails} is
     *     {@code false}.
     */
    public FileDeleteCommentDetails getFileDeleteCommentDetailsValue() {
        if (this._tag != Tag.FILE_DELETE_COMMENT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_DELETE_COMMENT_DETAILS, but was Tag." + this._tag.name());
        }
        return fileDeleteCommentDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_EDIT_COMMENT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_EDIT_COMMENT_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileEditCommentDetails() {
        return this._tag == Tag.FILE_EDIT_COMMENT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_EDIT_COMMENT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_EDIT_COMMENT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileEditCommentDetails(FileEditCommentDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileEditCommentDetails(Tag.FILE_EDIT_COMMENT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#FILE_EDIT_COMMENT_DETAILS}.
     *
     * @return The {@link FileEditCommentDetails} value associated with this
     *     instance if {@link #isFileEditCommentDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileEditCommentDetails} is
     *     {@code false}.
     */
    public FileEditCommentDetails getFileEditCommentDetailsValue() {
        if (this._tag != Tag.FILE_EDIT_COMMENT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_EDIT_COMMENT_DETAILS, but was Tag." + this._tag.name());
        }
        return fileEditCommentDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_LIKE_COMMENT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_LIKE_COMMENT_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileLikeCommentDetails() {
        return this._tag == Tag.FILE_LIKE_COMMENT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_LIKE_COMMENT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_LIKE_COMMENT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileLikeCommentDetails(FileLikeCommentDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileLikeCommentDetails(Tag.FILE_LIKE_COMMENT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#FILE_LIKE_COMMENT_DETAILS}.
     *
     * @return The {@link FileLikeCommentDetails} value associated with this
     *     instance if {@link #isFileLikeCommentDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileLikeCommentDetails} is
     *     {@code false}.
     */
    public FileLikeCommentDetails getFileLikeCommentDetailsValue() {
        if (this._tag != Tag.FILE_LIKE_COMMENT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_LIKE_COMMENT_DETAILS, but was Tag." + this._tag.name());
        }
        return fileLikeCommentDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_RESOLVE_COMMENT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_RESOLVE_COMMENT_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileResolveCommentDetails() {
        return this._tag == Tag.FILE_RESOLVE_COMMENT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_RESOLVE_COMMENT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_RESOLVE_COMMENT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileResolveCommentDetails(FileResolveCommentDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileResolveCommentDetails(Tag.FILE_RESOLVE_COMMENT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#FILE_RESOLVE_COMMENT_DETAILS}.
     *
     * @return The {@link FileResolveCommentDetails} value associated with this
     *     instance if {@link #isFileResolveCommentDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileResolveCommentDetails} is
     *     {@code false}.
     */
    public FileResolveCommentDetails getFileResolveCommentDetailsValue() {
        if (this._tag != Tag.FILE_RESOLVE_COMMENT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_RESOLVE_COMMENT_DETAILS, but was Tag." + this._tag.name());
        }
        return fileResolveCommentDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_UNLIKE_COMMENT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_UNLIKE_COMMENT_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileUnlikeCommentDetails() {
        return this._tag == Tag.FILE_UNLIKE_COMMENT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_UNLIKE_COMMENT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_UNLIKE_COMMENT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileUnlikeCommentDetails(FileUnlikeCommentDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileUnlikeCommentDetails(Tag.FILE_UNLIKE_COMMENT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#FILE_UNLIKE_COMMENT_DETAILS}.
     *
     * @return The {@link FileUnlikeCommentDetails} value associated with this
     *     instance if {@link #isFileUnlikeCommentDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileUnlikeCommentDetails} is
     *     {@code false}.
     */
    public FileUnlikeCommentDetails getFileUnlikeCommentDetailsValue() {
        if (this._tag != Tag.FILE_UNLIKE_COMMENT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_UNLIKE_COMMENT_DETAILS, but was Tag." + this._tag.name());
        }
        return fileUnlikeCommentDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_UNRESOLVE_COMMENT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_UNRESOLVE_COMMENT_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileUnresolveCommentDetails() {
        return this._tag == Tag.FILE_UNRESOLVE_COMMENT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_UNRESOLVE_COMMENT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_UNRESOLVE_COMMENT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileUnresolveCommentDetails(FileUnresolveCommentDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileUnresolveCommentDetails(Tag.FILE_UNRESOLVE_COMMENT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FILE_UNRESOLVE_COMMENT_DETAILS}.
     *
     * @return The {@link FileUnresolveCommentDetails} value associated with
     *     this instance if {@link #isFileUnresolveCommentDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isFileUnresolveCommentDetails}
     *     is {@code false}.
     */
    public FileUnresolveCommentDetails getFileUnresolveCommentDetailsValue() {
        if (this._tag != Tag.FILE_UNRESOLVE_COMMENT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_UNRESOLVE_COMMENT_DETAILS, but was Tag." + this._tag.name());
        }
        return fileUnresolveCommentDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_ADD_FOLDERS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_ADD_FOLDERS_DETAILS}, {@code false} otherwise.
     */
    public boolean isGovernancePolicyAddFoldersDetails() {
        return this._tag == Tag.GOVERNANCE_POLICY_ADD_FOLDERS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GOVERNANCE_POLICY_ADD_FOLDERS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_ADD_FOLDERS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails governancePolicyAddFoldersDetails(GovernancePolicyAddFoldersDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGovernancePolicyAddFoldersDetails(Tag.GOVERNANCE_POLICY_ADD_FOLDERS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_ADD_FOLDERS_DETAILS}.
     *
     * @return The {@link GovernancePolicyAddFoldersDetails} value associated
     *     with this instance if {@link #isGovernancePolicyAddFoldersDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGovernancePolicyAddFoldersDetails} is {@code false}.
     */
    public GovernancePolicyAddFoldersDetails getGovernancePolicyAddFoldersDetailsValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_ADD_FOLDERS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_ADD_FOLDERS_DETAILS, but was Tag." + this._tag.name());
        }
        return governancePolicyAddFoldersDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_ADD_FOLDER_FAILED_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_ADD_FOLDER_FAILED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isGovernancePolicyAddFolderFailedDetails() {
        return this._tag == Tag.GOVERNANCE_POLICY_ADD_FOLDER_FAILED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GOVERNANCE_POLICY_ADD_FOLDER_FAILED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_ADD_FOLDER_FAILED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails governancePolicyAddFolderFailedDetails(GovernancePolicyAddFolderFailedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGovernancePolicyAddFolderFailedDetails(Tag.GOVERNANCE_POLICY_ADD_FOLDER_FAILED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_ADD_FOLDER_FAILED_DETAILS}.
     *
     * @return The {@link GovernancePolicyAddFolderFailedDetails} value
     *     associated with this instance if {@link
     *     #isGovernancePolicyAddFolderFailedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGovernancePolicyAddFolderFailedDetails} is {@code false}.
     */
    public GovernancePolicyAddFolderFailedDetails getGovernancePolicyAddFolderFailedDetailsValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_ADD_FOLDER_FAILED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_ADD_FOLDER_FAILED_DETAILS, but was Tag." + this._tag.name());
        }
        return governancePolicyAddFolderFailedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_CONTENT_DISPOSED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_CONTENT_DISPOSED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isGovernancePolicyContentDisposedDetails() {
        return this._tag == Tag.GOVERNANCE_POLICY_CONTENT_DISPOSED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GOVERNANCE_POLICY_CONTENT_DISPOSED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_CONTENT_DISPOSED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails governancePolicyContentDisposedDetails(GovernancePolicyContentDisposedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGovernancePolicyContentDisposedDetails(Tag.GOVERNANCE_POLICY_CONTENT_DISPOSED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_CONTENT_DISPOSED_DETAILS}.
     *
     * @return The {@link GovernancePolicyContentDisposedDetails} value
     *     associated with this instance if {@link
     *     #isGovernancePolicyContentDisposedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGovernancePolicyContentDisposedDetails} is {@code false}.
     */
    public GovernancePolicyContentDisposedDetails getGovernancePolicyContentDisposedDetailsValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_CONTENT_DISPOSED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_CONTENT_DISPOSED_DETAILS, but was Tag." + this._tag.name());
        }
        return governancePolicyContentDisposedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_CREATE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_CREATE_DETAILS}, {@code false} otherwise.
     */
    public boolean isGovernancePolicyCreateDetails() {
        return this._tag == Tag.GOVERNANCE_POLICY_CREATE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GOVERNANCE_POLICY_CREATE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_CREATE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails governancePolicyCreateDetails(GovernancePolicyCreateDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGovernancePolicyCreateDetails(Tag.GOVERNANCE_POLICY_CREATE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_CREATE_DETAILS}.
     *
     * @return The {@link GovernancePolicyCreateDetails} value associated with
     *     this instance if {@link #isGovernancePolicyCreateDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGovernancePolicyCreateDetails} is {@code false}.
     */
    public GovernancePolicyCreateDetails getGovernancePolicyCreateDetailsValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_CREATE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_CREATE_DETAILS, but was Tag." + this._tag.name());
        }
        return governancePolicyCreateDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_DELETE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_DELETE_DETAILS}, {@code false} otherwise.
     */
    public boolean isGovernancePolicyDeleteDetails() {
        return this._tag == Tag.GOVERNANCE_POLICY_DELETE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GOVERNANCE_POLICY_DELETE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_DELETE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails governancePolicyDeleteDetails(GovernancePolicyDeleteDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGovernancePolicyDeleteDetails(Tag.GOVERNANCE_POLICY_DELETE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_DELETE_DETAILS}.
     *
     * @return The {@link GovernancePolicyDeleteDetails} value associated with
     *     this instance if {@link #isGovernancePolicyDeleteDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGovernancePolicyDeleteDetails} is {@code false}.
     */
    public GovernancePolicyDeleteDetails getGovernancePolicyDeleteDetailsValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_DELETE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_DELETE_DETAILS, but was Tag." + this._tag.name());
        }
        return governancePolicyDeleteDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_EDIT_DETAILS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_EDIT_DETAILS_DETAILS}, {@code false} otherwise.
     */
    public boolean isGovernancePolicyEditDetailsDetails() {
        return this._tag == Tag.GOVERNANCE_POLICY_EDIT_DETAILS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GOVERNANCE_POLICY_EDIT_DETAILS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_EDIT_DETAILS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails governancePolicyEditDetailsDetails(GovernancePolicyEditDetailsDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGovernancePolicyEditDetailsDetails(Tag.GOVERNANCE_POLICY_EDIT_DETAILS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_EDIT_DETAILS_DETAILS}.
     *
     * @return The {@link GovernancePolicyEditDetailsDetails} value associated
     *     with this instance if {@link #isGovernancePolicyEditDetailsDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGovernancePolicyEditDetailsDetails} is {@code false}.
     */
    public GovernancePolicyEditDetailsDetails getGovernancePolicyEditDetailsDetailsValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_EDIT_DETAILS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_EDIT_DETAILS_DETAILS, but was Tag." + this._tag.name());
        }
        return governancePolicyEditDetailsDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_EDIT_DURATION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_EDIT_DURATION_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isGovernancePolicyEditDurationDetails() {
        return this._tag == Tag.GOVERNANCE_POLICY_EDIT_DURATION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GOVERNANCE_POLICY_EDIT_DURATION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_EDIT_DURATION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails governancePolicyEditDurationDetails(GovernancePolicyEditDurationDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGovernancePolicyEditDurationDetails(Tag.GOVERNANCE_POLICY_EDIT_DURATION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_EDIT_DURATION_DETAILS}.
     *
     * @return The {@link GovernancePolicyEditDurationDetails} value associated
     *     with this instance if {@link #isGovernancePolicyEditDurationDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGovernancePolicyEditDurationDetails} is {@code false}.
     */
    public GovernancePolicyEditDurationDetails getGovernancePolicyEditDurationDetailsValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_EDIT_DURATION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_EDIT_DURATION_DETAILS, but was Tag." + this._tag.name());
        }
        return governancePolicyEditDurationDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_EXPORT_CREATED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_EXPORT_CREATED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isGovernancePolicyExportCreatedDetails() {
        return this._tag == Tag.GOVERNANCE_POLICY_EXPORT_CREATED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GOVERNANCE_POLICY_EXPORT_CREATED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_EXPORT_CREATED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails governancePolicyExportCreatedDetails(GovernancePolicyExportCreatedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGovernancePolicyExportCreatedDetails(Tag.GOVERNANCE_POLICY_EXPORT_CREATED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_EXPORT_CREATED_DETAILS}.
     *
     * @return The {@link GovernancePolicyExportCreatedDetails} value associated
     *     with this instance if {@link #isGovernancePolicyExportCreatedDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGovernancePolicyExportCreatedDetails} is {@code false}.
     */
    public GovernancePolicyExportCreatedDetails getGovernancePolicyExportCreatedDetailsValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_EXPORT_CREATED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_EXPORT_CREATED_DETAILS, but was Tag." + this._tag.name());
        }
        return governancePolicyExportCreatedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_EXPORT_REMOVED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_EXPORT_REMOVED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isGovernancePolicyExportRemovedDetails() {
        return this._tag == Tag.GOVERNANCE_POLICY_EXPORT_REMOVED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GOVERNANCE_POLICY_EXPORT_REMOVED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_EXPORT_REMOVED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails governancePolicyExportRemovedDetails(GovernancePolicyExportRemovedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGovernancePolicyExportRemovedDetails(Tag.GOVERNANCE_POLICY_EXPORT_REMOVED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_EXPORT_REMOVED_DETAILS}.
     *
     * @return The {@link GovernancePolicyExportRemovedDetails} value associated
     *     with this instance if {@link #isGovernancePolicyExportRemovedDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGovernancePolicyExportRemovedDetails} is {@code false}.
     */
    public GovernancePolicyExportRemovedDetails getGovernancePolicyExportRemovedDetailsValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_EXPORT_REMOVED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_EXPORT_REMOVED_DETAILS, but was Tag." + this._tag.name());
        }
        return governancePolicyExportRemovedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_REMOVE_FOLDERS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_REMOVE_FOLDERS_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isGovernancePolicyRemoveFoldersDetails() {
        return this._tag == Tag.GOVERNANCE_POLICY_REMOVE_FOLDERS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GOVERNANCE_POLICY_REMOVE_FOLDERS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_REMOVE_FOLDERS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails governancePolicyRemoveFoldersDetails(GovernancePolicyRemoveFoldersDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGovernancePolicyRemoveFoldersDetails(Tag.GOVERNANCE_POLICY_REMOVE_FOLDERS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_REMOVE_FOLDERS_DETAILS}.
     *
     * @return The {@link GovernancePolicyRemoveFoldersDetails} value associated
     *     with this instance if {@link #isGovernancePolicyRemoveFoldersDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGovernancePolicyRemoveFoldersDetails} is {@code false}.
     */
    public GovernancePolicyRemoveFoldersDetails getGovernancePolicyRemoveFoldersDetailsValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_REMOVE_FOLDERS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_REMOVE_FOLDERS_DETAILS, but was Tag." + this._tag.name());
        }
        return governancePolicyRemoveFoldersDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_REPORT_CREATED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_REPORT_CREATED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isGovernancePolicyReportCreatedDetails() {
        return this._tag == Tag.GOVERNANCE_POLICY_REPORT_CREATED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GOVERNANCE_POLICY_REPORT_CREATED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_REPORT_CREATED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails governancePolicyReportCreatedDetails(GovernancePolicyReportCreatedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGovernancePolicyReportCreatedDetails(Tag.GOVERNANCE_POLICY_REPORT_CREATED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_REPORT_CREATED_DETAILS}.
     *
     * @return The {@link GovernancePolicyReportCreatedDetails} value associated
     *     with this instance if {@link #isGovernancePolicyReportCreatedDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGovernancePolicyReportCreatedDetails} is {@code false}.
     */
    public GovernancePolicyReportCreatedDetails getGovernancePolicyReportCreatedDetailsValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_REPORT_CREATED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_REPORT_CREATED_DETAILS, but was Tag." + this._tag.name());
        }
        return governancePolicyReportCreatedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isGovernancePolicyZipPartDownloadedDetails() {
        return this._tag == Tag.GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails governancePolicyZipPartDownloadedDetails(GovernancePolicyZipPartDownloadedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGovernancePolicyZipPartDownloadedDetails(Tag.GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED_DETAILS}.
     *
     * @return The {@link GovernancePolicyZipPartDownloadedDetails} value
     *     associated with this instance if {@link
     *     #isGovernancePolicyZipPartDownloadedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGovernancePolicyZipPartDownloadedDetails} is {@code false}.
     */
    public GovernancePolicyZipPartDownloadedDetails getGovernancePolicyZipPartDownloadedDetailsValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED_DETAILS, but was Tag." + this._tag.name());
        }
        return governancePolicyZipPartDownloadedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_ACTIVATE_A_HOLD_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_ACTIVATE_A_HOLD_DETAILS}, {@code false} otherwise.
     */
    public boolean isLegalHoldsActivateAHoldDetails() {
        return this._tag == Tag.LEGAL_HOLDS_ACTIVATE_A_HOLD_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#LEGAL_HOLDS_ACTIVATE_A_HOLD_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_ACTIVATE_A_HOLD_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails legalHoldsActivateAHoldDetails(LegalHoldsActivateAHoldDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndLegalHoldsActivateAHoldDetails(Tag.LEGAL_HOLDS_ACTIVATE_A_HOLD_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_ACTIVATE_A_HOLD_DETAILS}.
     *
     * @return The {@link LegalHoldsActivateAHoldDetails} value associated with
     *     this instance if {@link #isLegalHoldsActivateAHoldDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isLegalHoldsActivateAHoldDetails} is {@code false}.
     */
    public LegalHoldsActivateAHoldDetails getLegalHoldsActivateAHoldDetailsValue() {
        if (this._tag != Tag.LEGAL_HOLDS_ACTIVATE_A_HOLD_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_ACTIVATE_A_HOLD_DETAILS, but was Tag." + this._tag.name());
        }
        return legalHoldsActivateAHoldDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_ADD_MEMBERS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_ADD_MEMBERS_DETAILS}, {@code false} otherwise.
     */
    public boolean isLegalHoldsAddMembersDetails() {
        return this._tag == Tag.LEGAL_HOLDS_ADD_MEMBERS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#LEGAL_HOLDS_ADD_MEMBERS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_ADD_MEMBERS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails legalHoldsAddMembersDetails(LegalHoldsAddMembersDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndLegalHoldsAddMembersDetails(Tag.LEGAL_HOLDS_ADD_MEMBERS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_ADD_MEMBERS_DETAILS}.
     *
     * @return The {@link LegalHoldsAddMembersDetails} value associated with
     *     this instance if {@link #isLegalHoldsAddMembersDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isLegalHoldsAddMembersDetails}
     *     is {@code false}.
     */
    public LegalHoldsAddMembersDetails getLegalHoldsAddMembersDetailsValue() {
        if (this._tag != Tag.LEGAL_HOLDS_ADD_MEMBERS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_ADD_MEMBERS_DETAILS, but was Tag." + this._tag.name());
        }
        return legalHoldsAddMembersDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_CHANGE_HOLD_DETAILS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_CHANGE_HOLD_DETAILS_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isLegalHoldsChangeHoldDetailsDetails() {
        return this._tag == Tag.LEGAL_HOLDS_CHANGE_HOLD_DETAILS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#LEGAL_HOLDS_CHANGE_HOLD_DETAILS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_CHANGE_HOLD_DETAILS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails legalHoldsChangeHoldDetailsDetails(LegalHoldsChangeHoldDetailsDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndLegalHoldsChangeHoldDetailsDetails(Tag.LEGAL_HOLDS_CHANGE_HOLD_DETAILS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_CHANGE_HOLD_DETAILS_DETAILS}.
     *
     * @return The {@link LegalHoldsChangeHoldDetailsDetails} value associated
     *     with this instance if {@link #isLegalHoldsChangeHoldDetailsDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isLegalHoldsChangeHoldDetailsDetails} is {@code false}.
     */
    public LegalHoldsChangeHoldDetailsDetails getLegalHoldsChangeHoldDetailsDetailsValue() {
        if (this._tag != Tag.LEGAL_HOLDS_CHANGE_HOLD_DETAILS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_CHANGE_HOLD_DETAILS_DETAILS, but was Tag." + this._tag.name());
        }
        return legalHoldsChangeHoldDetailsDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_CHANGE_HOLD_NAME_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_CHANGE_HOLD_NAME_DETAILS}, {@code false} otherwise.
     */
    public boolean isLegalHoldsChangeHoldNameDetails() {
        return this._tag == Tag.LEGAL_HOLDS_CHANGE_HOLD_NAME_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#LEGAL_HOLDS_CHANGE_HOLD_NAME_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_CHANGE_HOLD_NAME_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails legalHoldsChangeHoldNameDetails(LegalHoldsChangeHoldNameDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndLegalHoldsChangeHoldNameDetails(Tag.LEGAL_HOLDS_CHANGE_HOLD_NAME_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_CHANGE_HOLD_NAME_DETAILS}.
     *
     * @return The {@link LegalHoldsChangeHoldNameDetails} value associated with
     *     this instance if {@link #isLegalHoldsChangeHoldNameDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isLegalHoldsChangeHoldNameDetails} is {@code false}.
     */
    public LegalHoldsChangeHoldNameDetails getLegalHoldsChangeHoldNameDetailsValue() {
        if (this._tag != Tag.LEGAL_HOLDS_CHANGE_HOLD_NAME_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_CHANGE_HOLD_NAME_DETAILS, but was Tag." + this._tag.name());
        }
        return legalHoldsChangeHoldNameDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_EXPORT_A_HOLD_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_EXPORT_A_HOLD_DETAILS}, {@code false} otherwise.
     */
    public boolean isLegalHoldsExportAHoldDetails() {
        return this._tag == Tag.LEGAL_HOLDS_EXPORT_A_HOLD_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#LEGAL_HOLDS_EXPORT_A_HOLD_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_EXPORT_A_HOLD_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails legalHoldsExportAHoldDetails(LegalHoldsExportAHoldDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndLegalHoldsExportAHoldDetails(Tag.LEGAL_HOLDS_EXPORT_A_HOLD_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_EXPORT_A_HOLD_DETAILS}.
     *
     * @return The {@link LegalHoldsExportAHoldDetails} value associated with
     *     this instance if {@link #isLegalHoldsExportAHoldDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isLegalHoldsExportAHoldDetails}
     *     is {@code false}.
     */
    public LegalHoldsExportAHoldDetails getLegalHoldsExportAHoldDetailsValue() {
        if (this._tag != Tag.LEGAL_HOLDS_EXPORT_A_HOLD_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_EXPORT_A_HOLD_DETAILS, but was Tag." + this._tag.name());
        }
        return legalHoldsExportAHoldDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_EXPORT_CANCELLED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_EXPORT_CANCELLED_DETAILS}, {@code false} otherwise.
     */
    public boolean isLegalHoldsExportCancelledDetails() {
        return this._tag == Tag.LEGAL_HOLDS_EXPORT_CANCELLED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#LEGAL_HOLDS_EXPORT_CANCELLED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_EXPORT_CANCELLED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails legalHoldsExportCancelledDetails(LegalHoldsExportCancelledDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndLegalHoldsExportCancelledDetails(Tag.LEGAL_HOLDS_EXPORT_CANCELLED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_EXPORT_CANCELLED_DETAILS}.
     *
     * @return The {@link LegalHoldsExportCancelledDetails} value associated
     *     with this instance if {@link #isLegalHoldsExportCancelledDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isLegalHoldsExportCancelledDetails} is {@code false}.
     */
    public LegalHoldsExportCancelledDetails getLegalHoldsExportCancelledDetailsValue() {
        if (this._tag != Tag.LEGAL_HOLDS_EXPORT_CANCELLED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_EXPORT_CANCELLED_DETAILS, but was Tag." + this._tag.name());
        }
        return legalHoldsExportCancelledDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_EXPORT_DOWNLOADED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_EXPORT_DOWNLOADED_DETAILS}, {@code false} otherwise.
     */
    public boolean isLegalHoldsExportDownloadedDetails() {
        return this._tag == Tag.LEGAL_HOLDS_EXPORT_DOWNLOADED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#LEGAL_HOLDS_EXPORT_DOWNLOADED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_EXPORT_DOWNLOADED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails legalHoldsExportDownloadedDetails(LegalHoldsExportDownloadedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndLegalHoldsExportDownloadedDetails(Tag.LEGAL_HOLDS_EXPORT_DOWNLOADED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_EXPORT_DOWNLOADED_DETAILS}.
     *
     * @return The {@link LegalHoldsExportDownloadedDetails} value associated
     *     with this instance if {@link #isLegalHoldsExportDownloadedDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isLegalHoldsExportDownloadedDetails} is {@code false}.
     */
    public LegalHoldsExportDownloadedDetails getLegalHoldsExportDownloadedDetailsValue() {
        if (this._tag != Tag.LEGAL_HOLDS_EXPORT_DOWNLOADED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_EXPORT_DOWNLOADED_DETAILS, but was Tag." + this._tag.name());
        }
        return legalHoldsExportDownloadedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_EXPORT_REMOVED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_EXPORT_REMOVED_DETAILS}, {@code false} otherwise.
     */
    public boolean isLegalHoldsExportRemovedDetails() {
        return this._tag == Tag.LEGAL_HOLDS_EXPORT_REMOVED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#LEGAL_HOLDS_EXPORT_REMOVED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_EXPORT_REMOVED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails legalHoldsExportRemovedDetails(LegalHoldsExportRemovedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndLegalHoldsExportRemovedDetails(Tag.LEGAL_HOLDS_EXPORT_REMOVED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_EXPORT_REMOVED_DETAILS}.
     *
     * @return The {@link LegalHoldsExportRemovedDetails} value associated with
     *     this instance if {@link #isLegalHoldsExportRemovedDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isLegalHoldsExportRemovedDetails} is {@code false}.
     */
    public LegalHoldsExportRemovedDetails getLegalHoldsExportRemovedDetailsValue() {
        if (this._tag != Tag.LEGAL_HOLDS_EXPORT_REMOVED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_EXPORT_REMOVED_DETAILS, but was Tag." + this._tag.name());
        }
        return legalHoldsExportRemovedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_RELEASE_A_HOLD_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_RELEASE_A_HOLD_DETAILS}, {@code false} otherwise.
     */
    public boolean isLegalHoldsReleaseAHoldDetails() {
        return this._tag == Tag.LEGAL_HOLDS_RELEASE_A_HOLD_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#LEGAL_HOLDS_RELEASE_A_HOLD_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_RELEASE_A_HOLD_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails legalHoldsReleaseAHoldDetails(LegalHoldsReleaseAHoldDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndLegalHoldsReleaseAHoldDetails(Tag.LEGAL_HOLDS_RELEASE_A_HOLD_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_RELEASE_A_HOLD_DETAILS}.
     *
     * @return The {@link LegalHoldsReleaseAHoldDetails} value associated with
     *     this instance if {@link #isLegalHoldsReleaseAHoldDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isLegalHoldsReleaseAHoldDetails} is {@code false}.
     */
    public LegalHoldsReleaseAHoldDetails getLegalHoldsReleaseAHoldDetailsValue() {
        if (this._tag != Tag.LEGAL_HOLDS_RELEASE_A_HOLD_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_RELEASE_A_HOLD_DETAILS, but was Tag." + this._tag.name());
        }
        return legalHoldsReleaseAHoldDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_REMOVE_MEMBERS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_REMOVE_MEMBERS_DETAILS}, {@code false} otherwise.
     */
    public boolean isLegalHoldsRemoveMembersDetails() {
        return this._tag == Tag.LEGAL_HOLDS_REMOVE_MEMBERS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#LEGAL_HOLDS_REMOVE_MEMBERS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_REMOVE_MEMBERS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails legalHoldsRemoveMembersDetails(LegalHoldsRemoveMembersDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndLegalHoldsRemoveMembersDetails(Tag.LEGAL_HOLDS_REMOVE_MEMBERS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_REMOVE_MEMBERS_DETAILS}.
     *
     * @return The {@link LegalHoldsRemoveMembersDetails} value associated with
     *     this instance if {@link #isLegalHoldsRemoveMembersDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isLegalHoldsRemoveMembersDetails} is {@code false}.
     */
    public LegalHoldsRemoveMembersDetails getLegalHoldsRemoveMembersDetailsValue() {
        if (this._tag != Tag.LEGAL_HOLDS_REMOVE_MEMBERS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_REMOVE_MEMBERS_DETAILS, but was Tag." + this._tag.name());
        }
        return legalHoldsRemoveMembersDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_REPORT_A_HOLD_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_REPORT_A_HOLD_DETAILS}, {@code false} otherwise.
     */
    public boolean isLegalHoldsReportAHoldDetails() {
        return this._tag == Tag.LEGAL_HOLDS_REPORT_A_HOLD_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#LEGAL_HOLDS_REPORT_A_HOLD_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_REPORT_A_HOLD_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails legalHoldsReportAHoldDetails(LegalHoldsReportAHoldDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndLegalHoldsReportAHoldDetails(Tag.LEGAL_HOLDS_REPORT_A_HOLD_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_REPORT_A_HOLD_DETAILS}.
     *
     * @return The {@link LegalHoldsReportAHoldDetails} value associated with
     *     this instance if {@link #isLegalHoldsReportAHoldDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isLegalHoldsReportAHoldDetails}
     *     is {@code false}.
     */
    public LegalHoldsReportAHoldDetails getLegalHoldsReportAHoldDetailsValue() {
        if (this._tag != Tag.LEGAL_HOLDS_REPORT_A_HOLD_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_REPORT_A_HOLD_DETAILS, but was Tag." + this._tag.name());
        }
        return legalHoldsReportAHoldDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_CHANGE_IP_DESKTOP_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_CHANGE_IP_DESKTOP_DETAILS}, {@code false} otherwise.
     */
    public boolean isDeviceChangeIpDesktopDetails() {
        return this._tag == Tag.DEVICE_CHANGE_IP_DESKTOP_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DEVICE_CHANGE_IP_DESKTOP_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DEVICE_CHANGE_IP_DESKTOP_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails deviceChangeIpDesktopDetails(DeviceChangeIpDesktopDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDeviceChangeIpDesktopDetails(Tag.DEVICE_CHANGE_IP_DESKTOP_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DEVICE_CHANGE_IP_DESKTOP_DETAILS}.
     *
     * @return The {@link DeviceChangeIpDesktopDetails} value associated with
     *     this instance if {@link #isDeviceChangeIpDesktopDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isDeviceChangeIpDesktopDetails}
     *     is {@code false}.
     */
    public DeviceChangeIpDesktopDetails getDeviceChangeIpDesktopDetailsValue() {
        if (this._tag != Tag.DEVICE_CHANGE_IP_DESKTOP_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_CHANGE_IP_DESKTOP_DETAILS, but was Tag." + this._tag.name());
        }
        return deviceChangeIpDesktopDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_CHANGE_IP_MOBILE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_CHANGE_IP_MOBILE_DETAILS}, {@code false} otherwise.
     */
    public boolean isDeviceChangeIpMobileDetails() {
        return this._tag == Tag.DEVICE_CHANGE_IP_MOBILE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DEVICE_CHANGE_IP_MOBILE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DEVICE_CHANGE_IP_MOBILE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails deviceChangeIpMobileDetails(DeviceChangeIpMobileDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDeviceChangeIpMobileDetails(Tag.DEVICE_CHANGE_IP_MOBILE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DEVICE_CHANGE_IP_MOBILE_DETAILS}.
     *
     * @return The {@link DeviceChangeIpMobileDetails} value associated with
     *     this instance if {@link #isDeviceChangeIpMobileDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isDeviceChangeIpMobileDetails}
     *     is {@code false}.
     */
    public DeviceChangeIpMobileDetails getDeviceChangeIpMobileDetailsValue() {
        if (this._tag != Tag.DEVICE_CHANGE_IP_MOBILE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_CHANGE_IP_MOBILE_DETAILS, but was Tag." + this._tag.name());
        }
        return deviceChangeIpMobileDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_CHANGE_IP_WEB_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_CHANGE_IP_WEB_DETAILS}, {@code false} otherwise.
     */
    public boolean isDeviceChangeIpWebDetails() {
        return this._tag == Tag.DEVICE_CHANGE_IP_WEB_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DEVICE_CHANGE_IP_WEB_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DEVICE_CHANGE_IP_WEB_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails deviceChangeIpWebDetails(DeviceChangeIpWebDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDeviceChangeIpWebDetails(Tag.DEVICE_CHANGE_IP_WEB_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#DEVICE_CHANGE_IP_WEB_DETAILS}.
     *
     * @return The {@link DeviceChangeIpWebDetails} value associated with this
     *     instance if {@link #isDeviceChangeIpWebDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isDeviceChangeIpWebDetails} is
     *     {@code false}.
     */
    public DeviceChangeIpWebDetails getDeviceChangeIpWebDetailsValue() {
        if (this._tag != Tag.DEVICE_CHANGE_IP_WEB_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_CHANGE_IP_WEB_DETAILS, but was Tag." + this._tag.name());
        }
        return deviceChangeIpWebDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_DELETE_ON_UNLINK_FAIL_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_DELETE_ON_UNLINK_FAIL_DETAILS}, {@code false} otherwise.
     */
    public boolean isDeviceDeleteOnUnlinkFailDetails() {
        return this._tag == Tag.DEVICE_DELETE_ON_UNLINK_FAIL_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DEVICE_DELETE_ON_UNLINK_FAIL_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DEVICE_DELETE_ON_UNLINK_FAIL_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails deviceDeleteOnUnlinkFailDetails(DeviceDeleteOnUnlinkFailDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDeviceDeleteOnUnlinkFailDetails(Tag.DEVICE_DELETE_ON_UNLINK_FAIL_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DEVICE_DELETE_ON_UNLINK_FAIL_DETAILS}.
     *
     * @return The {@link DeviceDeleteOnUnlinkFailDetails} value associated with
     *     this instance if {@link #isDeviceDeleteOnUnlinkFailDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDeviceDeleteOnUnlinkFailDetails} is {@code false}.
     */
    public DeviceDeleteOnUnlinkFailDetails getDeviceDeleteOnUnlinkFailDetailsValue() {
        if (this._tag != Tag.DEVICE_DELETE_ON_UNLINK_FAIL_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_DELETE_ON_UNLINK_FAIL_DETAILS, but was Tag." + this._tag.name());
        }
        return deviceDeleteOnUnlinkFailDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_DELETE_ON_UNLINK_SUCCESS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_DELETE_ON_UNLINK_SUCCESS_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isDeviceDeleteOnUnlinkSuccessDetails() {
        return this._tag == Tag.DEVICE_DELETE_ON_UNLINK_SUCCESS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DEVICE_DELETE_ON_UNLINK_SUCCESS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DEVICE_DELETE_ON_UNLINK_SUCCESS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails deviceDeleteOnUnlinkSuccessDetails(DeviceDeleteOnUnlinkSuccessDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDeviceDeleteOnUnlinkSuccessDetails(Tag.DEVICE_DELETE_ON_UNLINK_SUCCESS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DEVICE_DELETE_ON_UNLINK_SUCCESS_DETAILS}.
     *
     * @return The {@link DeviceDeleteOnUnlinkSuccessDetails} value associated
     *     with this instance if {@link #isDeviceDeleteOnUnlinkSuccessDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDeviceDeleteOnUnlinkSuccessDetails} is {@code false}.
     */
    public DeviceDeleteOnUnlinkSuccessDetails getDeviceDeleteOnUnlinkSuccessDetailsValue() {
        if (this._tag != Tag.DEVICE_DELETE_ON_UNLINK_SUCCESS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_DELETE_ON_UNLINK_SUCCESS_DETAILS, but was Tag." + this._tag.name());
        }
        return deviceDeleteOnUnlinkSuccessDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_LINK_FAIL_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_LINK_FAIL_DETAILS}, {@code false} otherwise.
     */
    public boolean isDeviceLinkFailDetails() {
        return this._tag == Tag.DEVICE_LINK_FAIL_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DEVICE_LINK_FAIL_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DEVICE_LINK_FAIL_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails deviceLinkFailDetails(DeviceLinkFailDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDeviceLinkFailDetails(Tag.DEVICE_LINK_FAIL_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#DEVICE_LINK_FAIL_DETAILS}.
     *
     * @return The {@link DeviceLinkFailDetails} value associated with this
     *     instance if {@link #isDeviceLinkFailDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isDeviceLinkFailDetails} is
     *     {@code false}.
     */
    public DeviceLinkFailDetails getDeviceLinkFailDetailsValue() {
        if (this._tag != Tag.DEVICE_LINK_FAIL_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_LINK_FAIL_DETAILS, but was Tag." + this._tag.name());
        }
        return deviceLinkFailDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_LINK_SUCCESS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_LINK_SUCCESS_DETAILS}, {@code false} otherwise.
     */
    public boolean isDeviceLinkSuccessDetails() {
        return this._tag == Tag.DEVICE_LINK_SUCCESS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DEVICE_LINK_SUCCESS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DEVICE_LINK_SUCCESS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails deviceLinkSuccessDetails(DeviceLinkSuccessDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDeviceLinkSuccessDetails(Tag.DEVICE_LINK_SUCCESS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#DEVICE_LINK_SUCCESS_DETAILS}.
     *
     * @return The {@link DeviceLinkSuccessDetails} value associated with this
     *     instance if {@link #isDeviceLinkSuccessDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isDeviceLinkSuccessDetails} is
     *     {@code false}.
     */
    public DeviceLinkSuccessDetails getDeviceLinkSuccessDetailsValue() {
        if (this._tag != Tag.DEVICE_LINK_SUCCESS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_LINK_SUCCESS_DETAILS, but was Tag." + this._tag.name());
        }
        return deviceLinkSuccessDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_MANAGEMENT_DISABLED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_MANAGEMENT_DISABLED_DETAILS}, {@code false} otherwise.
     */
    public boolean isDeviceManagementDisabledDetails() {
        return this._tag == Tag.DEVICE_MANAGEMENT_DISABLED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DEVICE_MANAGEMENT_DISABLED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DEVICE_MANAGEMENT_DISABLED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails deviceManagementDisabledDetails(DeviceManagementDisabledDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDeviceManagementDisabledDetails(Tag.DEVICE_MANAGEMENT_DISABLED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DEVICE_MANAGEMENT_DISABLED_DETAILS}.
     *
     * @return The {@link DeviceManagementDisabledDetails} value associated with
     *     this instance if {@link #isDeviceManagementDisabledDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDeviceManagementDisabledDetails} is {@code false}.
     */
    public DeviceManagementDisabledDetails getDeviceManagementDisabledDetailsValue() {
        if (this._tag != Tag.DEVICE_MANAGEMENT_DISABLED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_MANAGEMENT_DISABLED_DETAILS, but was Tag." + this._tag.name());
        }
        return deviceManagementDisabledDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_MANAGEMENT_ENABLED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_MANAGEMENT_ENABLED_DETAILS}, {@code false} otherwise.
     */
    public boolean isDeviceManagementEnabledDetails() {
        return this._tag == Tag.DEVICE_MANAGEMENT_ENABLED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DEVICE_MANAGEMENT_ENABLED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DEVICE_MANAGEMENT_ENABLED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails deviceManagementEnabledDetails(DeviceManagementEnabledDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDeviceManagementEnabledDetails(Tag.DEVICE_MANAGEMENT_ENABLED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DEVICE_MANAGEMENT_ENABLED_DETAILS}.
     *
     * @return The {@link DeviceManagementEnabledDetails} value associated with
     *     this instance if {@link #isDeviceManagementEnabledDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDeviceManagementEnabledDetails} is {@code false}.
     */
    public DeviceManagementEnabledDetails getDeviceManagementEnabledDetailsValue() {
        if (this._tag != Tag.DEVICE_MANAGEMENT_ENABLED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_MANAGEMENT_ENABLED_DETAILS, but was Tag." + this._tag.name());
        }
        return deviceManagementEnabledDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_SYNC_BACKUP_STATUS_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_SYNC_BACKUP_STATUS_CHANGED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isDeviceSyncBackupStatusChangedDetails() {
        return this._tag == Tag.DEVICE_SYNC_BACKUP_STATUS_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DEVICE_SYNC_BACKUP_STATUS_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DEVICE_SYNC_BACKUP_STATUS_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails deviceSyncBackupStatusChangedDetails(DeviceSyncBackupStatusChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDeviceSyncBackupStatusChangedDetails(Tag.DEVICE_SYNC_BACKUP_STATUS_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DEVICE_SYNC_BACKUP_STATUS_CHANGED_DETAILS}.
     *
     * @return The {@link DeviceSyncBackupStatusChangedDetails} value associated
     *     with this instance if {@link #isDeviceSyncBackupStatusChangedDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDeviceSyncBackupStatusChangedDetails} is {@code false}.
     */
    public DeviceSyncBackupStatusChangedDetails getDeviceSyncBackupStatusChangedDetailsValue() {
        if (this._tag != Tag.DEVICE_SYNC_BACKUP_STATUS_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_SYNC_BACKUP_STATUS_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return deviceSyncBackupStatusChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_UNLINK_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_UNLINK_DETAILS}, {@code false} otherwise.
     */
    public boolean isDeviceUnlinkDetails() {
        return this._tag == Tag.DEVICE_UNLINK_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DEVICE_UNLINK_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DEVICE_UNLINK_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails deviceUnlinkDetails(DeviceUnlinkDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDeviceUnlinkDetails(Tag.DEVICE_UNLINK_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#DEVICE_UNLINK_DETAILS}.
     *
     * @return The {@link DeviceUnlinkDetails} value associated with this
     *     instance if {@link #isDeviceUnlinkDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isDeviceUnlinkDetails} is
     *     {@code false}.
     */
    public DeviceUnlinkDetails getDeviceUnlinkDetailsValue() {
        if (this._tag != Tag.DEVICE_UNLINK_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_UNLINK_DETAILS, but was Tag." + this._tag.name());
        }
        return deviceUnlinkDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DROPBOX_PASSWORDS_EXPORTED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DROPBOX_PASSWORDS_EXPORTED_DETAILS}, {@code false} otherwise.
     */
    public boolean isDropboxPasswordsExportedDetails() {
        return this._tag == Tag.DROPBOX_PASSWORDS_EXPORTED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DROPBOX_PASSWORDS_EXPORTED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DROPBOX_PASSWORDS_EXPORTED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails dropboxPasswordsExportedDetails(DropboxPasswordsExportedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDropboxPasswordsExportedDetails(Tag.DROPBOX_PASSWORDS_EXPORTED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DROPBOX_PASSWORDS_EXPORTED_DETAILS}.
     *
     * @return The {@link DropboxPasswordsExportedDetails} value associated with
     *     this instance if {@link #isDropboxPasswordsExportedDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDropboxPasswordsExportedDetails} is {@code false}.
     */
    public DropboxPasswordsExportedDetails getDropboxPasswordsExportedDetailsValue() {
        if (this._tag != Tag.DROPBOX_PASSWORDS_EXPORTED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DROPBOX_PASSWORDS_EXPORTED_DETAILS, but was Tag." + this._tag.name());
        }
        return dropboxPasswordsExportedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isDropboxPasswordsNewDeviceEnrolledDetails() {
        return this._tag == Tag.DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails dropboxPasswordsNewDeviceEnrolledDetails(DropboxPasswordsNewDeviceEnrolledDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDropboxPasswordsNewDeviceEnrolledDetails(Tag.DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED_DETAILS}.
     *
     * @return The {@link DropboxPasswordsNewDeviceEnrolledDetails} value
     *     associated with this instance if {@link
     *     #isDropboxPasswordsNewDeviceEnrolledDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDropboxPasswordsNewDeviceEnrolledDetails} is {@code false}.
     */
    public DropboxPasswordsNewDeviceEnrolledDetails getDropboxPasswordsNewDeviceEnrolledDetailsValue() {
        if (this._tag != Tag.DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED_DETAILS, but was Tag." + this._tag.name());
        }
        return dropboxPasswordsNewDeviceEnrolledDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EMM_REFRESH_AUTH_TOKEN_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EMM_REFRESH_AUTH_TOKEN_DETAILS}, {@code false} otherwise.
     */
    public boolean isEmmRefreshAuthTokenDetails() {
        return this._tag == Tag.EMM_REFRESH_AUTH_TOKEN_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#EMM_REFRESH_AUTH_TOKEN_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#EMM_REFRESH_AUTH_TOKEN_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails emmRefreshAuthTokenDetails(EmmRefreshAuthTokenDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndEmmRefreshAuthTokenDetails(Tag.EMM_REFRESH_AUTH_TOKEN_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#EMM_REFRESH_AUTH_TOKEN_DETAILS}.
     *
     * @return The {@link EmmRefreshAuthTokenDetails} value associated with this
     *     instance if {@link #isEmmRefreshAuthTokenDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isEmmRefreshAuthTokenDetails}
     *     is {@code false}.
     */
    public EmmRefreshAuthTokenDetails getEmmRefreshAuthTokenDetailsValue() {
        if (this._tag != Tag.EMM_REFRESH_AUTH_TOKEN_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.EMM_REFRESH_AUTH_TOKEN_DETAILS, but was Tag." + this._tag.name());
        }
        return emmRefreshAuthTokenDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED_DETAILS}, {@code
     * false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED_DETAILS}, {@code
     *     false} otherwise.
     */
    public boolean isExternalDriveBackupEligibilityStatusCheckedDetails() {
        return this._tag == Tag.EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails externalDriveBackupEligibilityStatusCheckedDetails(ExternalDriveBackupEligibilityStatusCheckedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndExternalDriveBackupEligibilityStatusCheckedDetails(Tag.EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED_DETAILS}.
     *
     * @return The {@link ExternalDriveBackupEligibilityStatusCheckedDetails}
     *     value associated with this instance if {@link
     *     #isExternalDriveBackupEligibilityStatusCheckedDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isExternalDriveBackupEligibilityStatusCheckedDetails} is {@code
     *     false}.
     */
    public ExternalDriveBackupEligibilityStatusCheckedDetails getExternalDriveBackupEligibilityStatusCheckedDetailsValue() {
        if (this._tag != Tag.EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED_DETAILS, but was Tag." + this._tag.name());
        }
        return externalDriveBackupEligibilityStatusCheckedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isExternalDriveBackupStatusChangedDetails() {
        return this._tag == Tag.EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails externalDriveBackupStatusChangedDetails(ExternalDriveBackupStatusChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndExternalDriveBackupStatusChangedDetails(Tag.EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED_DETAILS}.
     *
     * @return The {@link ExternalDriveBackupStatusChangedDetails} value
     *     associated with this instance if {@link
     *     #isExternalDriveBackupStatusChangedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isExternalDriveBackupStatusChangedDetails} is {@code false}.
     */
    public ExternalDriveBackupStatusChangedDetails getExternalDriveBackupStatusChangedDetailsValue() {
        if (this._tag != Tag.EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return externalDriveBackupStatusChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ACCOUNT_CAPTURE_CHANGE_AVAILABILITY_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ACCOUNT_CAPTURE_CHANGE_AVAILABILITY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isAccountCaptureChangeAvailabilityDetails() {
        return this._tag == Tag.ACCOUNT_CAPTURE_CHANGE_AVAILABILITY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#ACCOUNT_CAPTURE_CHANGE_AVAILABILITY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#ACCOUNT_CAPTURE_CHANGE_AVAILABILITY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails accountCaptureChangeAvailabilityDetails(AccountCaptureChangeAvailabilityDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndAccountCaptureChangeAvailabilityDetails(Tag.ACCOUNT_CAPTURE_CHANGE_AVAILABILITY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#ACCOUNT_CAPTURE_CHANGE_AVAILABILITY_DETAILS}.
     *
     * @return The {@link AccountCaptureChangeAvailabilityDetails} value
     *     associated with this instance if {@link
     *     #isAccountCaptureChangeAvailabilityDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isAccountCaptureChangeAvailabilityDetails} is {@code false}.
     */
    public AccountCaptureChangeAvailabilityDetails getAccountCaptureChangeAvailabilityDetailsValue() {
        if (this._tag != Tag.ACCOUNT_CAPTURE_CHANGE_AVAILABILITY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.ACCOUNT_CAPTURE_CHANGE_AVAILABILITY_DETAILS, but was Tag." + this._tag.name());
        }
        return accountCaptureChangeAvailabilityDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ACCOUNT_CAPTURE_MIGRATE_ACCOUNT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ACCOUNT_CAPTURE_MIGRATE_ACCOUNT_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isAccountCaptureMigrateAccountDetails() {
        return this._tag == Tag.ACCOUNT_CAPTURE_MIGRATE_ACCOUNT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#ACCOUNT_CAPTURE_MIGRATE_ACCOUNT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#ACCOUNT_CAPTURE_MIGRATE_ACCOUNT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails accountCaptureMigrateAccountDetails(AccountCaptureMigrateAccountDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndAccountCaptureMigrateAccountDetails(Tag.ACCOUNT_CAPTURE_MIGRATE_ACCOUNT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#ACCOUNT_CAPTURE_MIGRATE_ACCOUNT_DETAILS}.
     *
     * @return The {@link AccountCaptureMigrateAccountDetails} value associated
     *     with this instance if {@link #isAccountCaptureMigrateAccountDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isAccountCaptureMigrateAccountDetails} is {@code false}.
     */
    public AccountCaptureMigrateAccountDetails getAccountCaptureMigrateAccountDetailsValue() {
        if (this._tag != Tag.ACCOUNT_CAPTURE_MIGRATE_ACCOUNT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.ACCOUNT_CAPTURE_MIGRATE_ACCOUNT_DETAILS, but was Tag." + this._tag.name());
        }
        return accountCaptureMigrateAccountDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isAccountCaptureNotificationEmailsSentDetails() {
        return this._tag == Tag.ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails accountCaptureNotificationEmailsSentDetails(AccountCaptureNotificationEmailsSentDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndAccountCaptureNotificationEmailsSentDetails(Tag.ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT_DETAILS}.
     *
     * @return The {@link AccountCaptureNotificationEmailsSentDetails} value
     *     associated with this instance if {@link
     *     #isAccountCaptureNotificationEmailsSentDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isAccountCaptureNotificationEmailsSentDetails} is {@code false}.
     */
    public AccountCaptureNotificationEmailsSentDetails getAccountCaptureNotificationEmailsSentDetailsValue() {
        if (this._tag != Tag.ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT_DETAILS, but was Tag." + this._tag.name());
        }
        return accountCaptureNotificationEmailsSentDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isAccountCaptureRelinquishAccountDetails() {
        return this._tag == Tag.ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails accountCaptureRelinquishAccountDetails(AccountCaptureRelinquishAccountDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndAccountCaptureRelinquishAccountDetails(Tag.ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT_DETAILS}.
     *
     * @return The {@link AccountCaptureRelinquishAccountDetails} value
     *     associated with this instance if {@link
     *     #isAccountCaptureRelinquishAccountDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isAccountCaptureRelinquishAccountDetails} is {@code false}.
     */
    public AccountCaptureRelinquishAccountDetails getAccountCaptureRelinquishAccountDetailsValue() {
        if (this._tag != Tag.ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT_DETAILS, but was Tag." + this._tag.name());
        }
        return accountCaptureRelinquishAccountDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DISABLED_DOMAIN_INVITES_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DISABLED_DOMAIN_INVITES_DETAILS}, {@code false} otherwise.
     */
    public boolean isDisabledDomainInvitesDetails() {
        return this._tag == Tag.DISABLED_DOMAIN_INVITES_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DISABLED_DOMAIN_INVITES_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DISABLED_DOMAIN_INVITES_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails disabledDomainInvitesDetails(DisabledDomainInvitesDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDisabledDomainInvitesDetails(Tag.DISABLED_DOMAIN_INVITES_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DISABLED_DOMAIN_INVITES_DETAILS}.
     *
     * @return The {@link DisabledDomainInvitesDetails} value associated with
     *     this instance if {@link #isDisabledDomainInvitesDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isDisabledDomainInvitesDetails}
     *     is {@code false}.
     */
    public DisabledDomainInvitesDetails getDisabledDomainInvitesDetailsValue() {
        if (this._tag != Tag.DISABLED_DOMAIN_INVITES_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DISABLED_DOMAIN_INVITES_DETAILS, but was Tag." + this._tag.name());
        }
        return disabledDomainInvitesDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM_DETAILS}, {@code
     *     false} otherwise.
     */
    public boolean isDomainInvitesApproveRequestToJoinTeamDetails() {
        return this._tag == Tag.DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails domainInvitesApproveRequestToJoinTeamDetails(DomainInvitesApproveRequestToJoinTeamDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDomainInvitesApproveRequestToJoinTeamDetails(Tag.DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM_DETAILS}.
     *
     * @return The {@link DomainInvitesApproveRequestToJoinTeamDetails} value
     *     associated with this instance if {@link
     *     #isDomainInvitesApproveRequestToJoinTeamDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDomainInvitesApproveRequestToJoinTeamDetails} is {@code false}.
     */
    public DomainInvitesApproveRequestToJoinTeamDetails getDomainInvitesApproveRequestToJoinTeamDetailsValue() {
        if (this._tag != Tag.DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM_DETAILS, but was Tag." + this._tag.name());
        }
        return domainInvitesApproveRequestToJoinTeamDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM_DETAILS}, {@code
     *     false} otherwise.
     */
    public boolean isDomainInvitesDeclineRequestToJoinTeamDetails() {
        return this._tag == Tag.DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails domainInvitesDeclineRequestToJoinTeamDetails(DomainInvitesDeclineRequestToJoinTeamDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDomainInvitesDeclineRequestToJoinTeamDetails(Tag.DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM_DETAILS}.
     *
     * @return The {@link DomainInvitesDeclineRequestToJoinTeamDetails} value
     *     associated with this instance if {@link
     *     #isDomainInvitesDeclineRequestToJoinTeamDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDomainInvitesDeclineRequestToJoinTeamDetails} is {@code false}.
     */
    public DomainInvitesDeclineRequestToJoinTeamDetails getDomainInvitesDeclineRequestToJoinTeamDetailsValue() {
        if (this._tag != Tag.DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM_DETAILS, but was Tag." + this._tag.name());
        }
        return domainInvitesDeclineRequestToJoinTeamDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DOMAIN_INVITES_EMAIL_EXISTING_USERS_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DOMAIN_INVITES_EMAIL_EXISTING_USERS_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isDomainInvitesEmailExistingUsersDetails() {
        return this._tag == Tag.DOMAIN_INVITES_EMAIL_EXISTING_USERS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DOMAIN_INVITES_EMAIL_EXISTING_USERS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DOMAIN_INVITES_EMAIL_EXISTING_USERS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails domainInvitesEmailExistingUsersDetails(DomainInvitesEmailExistingUsersDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDomainInvitesEmailExistingUsersDetails(Tag.DOMAIN_INVITES_EMAIL_EXISTING_USERS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DOMAIN_INVITES_EMAIL_EXISTING_USERS_DETAILS}.
     *
     * @return The {@link DomainInvitesEmailExistingUsersDetails} value
     *     associated with this instance if {@link
     *     #isDomainInvitesEmailExistingUsersDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDomainInvitesEmailExistingUsersDetails} is {@code false}.
     */
    public DomainInvitesEmailExistingUsersDetails getDomainInvitesEmailExistingUsersDetailsValue() {
        if (this._tag != Tag.DOMAIN_INVITES_EMAIL_EXISTING_USERS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DOMAIN_INVITES_EMAIL_EXISTING_USERS_DETAILS, but was Tag." + this._tag.name());
        }
        return domainInvitesEmailExistingUsersDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isDomainInvitesRequestToJoinTeamDetails() {
        return this._tag == Tag.DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails domainInvitesRequestToJoinTeamDetails(DomainInvitesRequestToJoinTeamDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDomainInvitesRequestToJoinTeamDetails(Tag.DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM_DETAILS}.
     *
     * @return The {@link DomainInvitesRequestToJoinTeamDetails} value
     *     associated with this instance if {@link
     *     #isDomainInvitesRequestToJoinTeamDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDomainInvitesRequestToJoinTeamDetails} is {@code false}.
     */
    public DomainInvitesRequestToJoinTeamDetails getDomainInvitesRequestToJoinTeamDetailsValue() {
        if (this._tag != Tag.DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM_DETAILS, but was Tag." + this._tag.name());
        }
        return domainInvitesRequestToJoinTeamDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO_DETAILS}, {@code
     *     false} otherwise.
     */
    public boolean isDomainInvitesSetInviteNewUserPrefToNoDetails() {
        return this._tag == Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails domainInvitesSetInviteNewUserPrefToNoDetails(DomainInvitesSetInviteNewUserPrefToNoDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDomainInvitesSetInviteNewUserPrefToNoDetails(Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO_DETAILS}.
     *
     * @return The {@link DomainInvitesSetInviteNewUserPrefToNoDetails} value
     *     associated with this instance if {@link
     *     #isDomainInvitesSetInviteNewUserPrefToNoDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDomainInvitesSetInviteNewUserPrefToNoDetails} is {@code false}.
     */
    public DomainInvitesSetInviteNewUserPrefToNoDetails getDomainInvitesSetInviteNewUserPrefToNoDetailsValue() {
        if (this._tag != Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO_DETAILS, but was Tag." + this._tag.name());
        }
        return domainInvitesSetInviteNewUserPrefToNoDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES_DETAILS}, {@code
     * false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES_DETAILS}, {@code
     *     false} otherwise.
     */
    public boolean isDomainInvitesSetInviteNewUserPrefToYesDetails() {
        return this._tag == Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails domainInvitesSetInviteNewUserPrefToYesDetails(DomainInvitesSetInviteNewUserPrefToYesDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDomainInvitesSetInviteNewUserPrefToYesDetails(Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES_DETAILS}.
     *
     * @return The {@link DomainInvitesSetInviteNewUserPrefToYesDetails} value
     *     associated with this instance if {@link
     *     #isDomainInvitesSetInviteNewUserPrefToYesDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDomainInvitesSetInviteNewUserPrefToYesDetails} is {@code false}.
     */
    public DomainInvitesSetInviteNewUserPrefToYesDetails getDomainInvitesSetInviteNewUserPrefToYesDetailsValue() {
        if (this._tag != Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES_DETAILS, but was Tag." + this._tag.name());
        }
        return domainInvitesSetInviteNewUserPrefToYesDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isDomainVerificationAddDomainFailDetails() {
        return this._tag == Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails domainVerificationAddDomainFailDetails(DomainVerificationAddDomainFailDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDomainVerificationAddDomainFailDetails(Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL_DETAILS}.
     *
     * @return The {@link DomainVerificationAddDomainFailDetails} value
     *     associated with this instance if {@link
     *     #isDomainVerificationAddDomainFailDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDomainVerificationAddDomainFailDetails} is {@code false}.
     */
    public DomainVerificationAddDomainFailDetails getDomainVerificationAddDomainFailDetailsValue() {
        if (this._tag != Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL_DETAILS, but was Tag." + this._tag.name());
        }
        return domainVerificationAddDomainFailDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isDomainVerificationAddDomainSuccessDetails() {
        return this._tag == Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails domainVerificationAddDomainSuccessDetails(DomainVerificationAddDomainSuccessDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDomainVerificationAddDomainSuccessDetails(Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS_DETAILS}.
     *
     * @return The {@link DomainVerificationAddDomainSuccessDetails} value
     *     associated with this instance if {@link
     *     #isDomainVerificationAddDomainSuccessDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDomainVerificationAddDomainSuccessDetails} is {@code false}.
     */
    public DomainVerificationAddDomainSuccessDetails getDomainVerificationAddDomainSuccessDetailsValue() {
        if (this._tag != Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS_DETAILS, but was Tag." + this._tag.name());
        }
        return domainVerificationAddDomainSuccessDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DOMAIN_VERIFICATION_REMOVE_DOMAIN_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DOMAIN_VERIFICATION_REMOVE_DOMAIN_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isDomainVerificationRemoveDomainDetails() {
        return this._tag == Tag.DOMAIN_VERIFICATION_REMOVE_DOMAIN_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DOMAIN_VERIFICATION_REMOVE_DOMAIN_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DOMAIN_VERIFICATION_REMOVE_DOMAIN_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails domainVerificationRemoveDomainDetails(DomainVerificationRemoveDomainDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDomainVerificationRemoveDomainDetails(Tag.DOMAIN_VERIFICATION_REMOVE_DOMAIN_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DOMAIN_VERIFICATION_REMOVE_DOMAIN_DETAILS}.
     *
     * @return The {@link DomainVerificationRemoveDomainDetails} value
     *     associated with this instance if {@link
     *     #isDomainVerificationRemoveDomainDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDomainVerificationRemoveDomainDetails} is {@code false}.
     */
    public DomainVerificationRemoveDomainDetails getDomainVerificationRemoveDomainDetailsValue() {
        if (this._tag != Tag.DOMAIN_VERIFICATION_REMOVE_DOMAIN_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DOMAIN_VERIFICATION_REMOVE_DOMAIN_DETAILS, but was Tag." + this._tag.name());
        }
        return domainVerificationRemoveDomainDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ENABLED_DOMAIN_INVITES_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ENABLED_DOMAIN_INVITES_DETAILS}, {@code false} otherwise.
     */
    public boolean isEnabledDomainInvitesDetails() {
        return this._tag == Tag.ENABLED_DOMAIN_INVITES_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#ENABLED_DOMAIN_INVITES_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#ENABLED_DOMAIN_INVITES_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails enabledDomainInvitesDetails(EnabledDomainInvitesDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndEnabledDomainInvitesDetails(Tag.ENABLED_DOMAIN_INVITES_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#ENABLED_DOMAIN_INVITES_DETAILS}.
     *
     * @return The {@link EnabledDomainInvitesDetails} value associated with
     *     this instance if {@link #isEnabledDomainInvitesDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isEnabledDomainInvitesDetails}
     *     is {@code false}.
     */
    public EnabledDomainInvitesDetails getEnabledDomainInvitesDetailsValue() {
        if (this._tag != Tag.ENABLED_DOMAIN_INVITES_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.ENABLED_DOMAIN_INVITES_DETAILS, but was Tag." + this._tag.name());
        }
        return enabledDomainInvitesDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#APPLY_NAMING_CONVENTION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#APPLY_NAMING_CONVENTION_DETAILS}, {@code false} otherwise.
     */
    public boolean isApplyNamingConventionDetails() {
        return this._tag == Tag.APPLY_NAMING_CONVENTION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#APPLY_NAMING_CONVENTION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#APPLY_NAMING_CONVENTION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails applyNamingConventionDetails(ApplyNamingConventionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndApplyNamingConventionDetails(Tag.APPLY_NAMING_CONVENTION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#APPLY_NAMING_CONVENTION_DETAILS}.
     *
     * @return The {@link ApplyNamingConventionDetails} value associated with
     *     this instance if {@link #isApplyNamingConventionDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isApplyNamingConventionDetails}
     *     is {@code false}.
     */
    public ApplyNamingConventionDetails getApplyNamingConventionDetailsValue() {
        if (this._tag != Tag.APPLY_NAMING_CONVENTION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.APPLY_NAMING_CONVENTION_DETAILS, but was Tag." + this._tag.name());
        }
        return applyNamingConventionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#CREATE_FOLDER_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#CREATE_FOLDER_DETAILS}, {@code false} otherwise.
     */
    public boolean isCreateFolderDetails() {
        return this._tag == Tag.CREATE_FOLDER_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#CREATE_FOLDER_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#CREATE_FOLDER_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails createFolderDetails(CreateFolderDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndCreateFolderDetails(Tag.CREATE_FOLDER_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#CREATE_FOLDER_DETAILS}.
     *
     * @return The {@link CreateFolderDetails} value associated with this
     *     instance if {@link #isCreateFolderDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isCreateFolderDetails} is
     *     {@code false}.
     */
    public CreateFolderDetails getCreateFolderDetailsValue() {
        if (this._tag != Tag.CREATE_FOLDER_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.CREATE_FOLDER_DETAILS, but was Tag." + this._tag.name());
        }
        return createFolderDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_ADD_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_ADD_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileAddDetails() {
        return this._tag == Tag.FILE_ADD_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_ADD_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_ADD_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileAddDetails(FileAddDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileAddDetails(Tag.FILE_ADD_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#FILE_ADD_DETAILS}.
     *
     * @return The {@link FileAddDetails} value associated with this instance if
     *     {@link #isFileAddDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileAddDetails} is {@code
     *     false}.
     */
    public FileAddDetails getFileAddDetailsValue() {
        if (this._tag != Tag.FILE_ADD_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_ADD_DETAILS, but was Tag." + this._tag.name());
        }
        return fileAddDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_COPY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_COPY_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileCopyDetails() {
        return this._tag == Tag.FILE_COPY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_COPY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_COPY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileCopyDetails(FileCopyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileCopyDetails(Tag.FILE_COPY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#FILE_COPY_DETAILS}.
     *
     * @return The {@link FileCopyDetails} value associated with this instance
     *     if {@link #isFileCopyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileCopyDetails} is {@code
     *     false}.
     */
    public FileCopyDetails getFileCopyDetailsValue() {
        if (this._tag != Tag.FILE_COPY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_COPY_DETAILS, but was Tag." + this._tag.name());
        }
        return fileCopyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_DELETE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_DELETE_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileDeleteDetails() {
        return this._tag == Tag.FILE_DELETE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_DELETE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_DELETE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileDeleteDetails(FileDeleteDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileDeleteDetails(Tag.FILE_DELETE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#FILE_DELETE_DETAILS}.
     *
     * @return The {@link FileDeleteDetails} value associated with this instance
     *     if {@link #isFileDeleteDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileDeleteDetails} is {@code
     *     false}.
     */
    public FileDeleteDetails getFileDeleteDetailsValue() {
        if (this._tag != Tag.FILE_DELETE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_DELETE_DETAILS, but was Tag." + this._tag.name());
        }
        return fileDeleteDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_DOWNLOAD_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_DOWNLOAD_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileDownloadDetails() {
        return this._tag == Tag.FILE_DOWNLOAD_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_DOWNLOAD_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_DOWNLOAD_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileDownloadDetails(FileDownloadDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileDownloadDetails(Tag.FILE_DOWNLOAD_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#FILE_DOWNLOAD_DETAILS}.
     *
     * @return The {@link FileDownloadDetails} value associated with this
     *     instance if {@link #isFileDownloadDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileDownloadDetails} is
     *     {@code false}.
     */
    public FileDownloadDetails getFileDownloadDetailsValue() {
        if (this._tag != Tag.FILE_DOWNLOAD_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_DOWNLOAD_DETAILS, but was Tag." + this._tag.name());
        }
        return fileDownloadDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_EDIT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_EDIT_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileEditDetails() {
        return this._tag == Tag.FILE_EDIT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_EDIT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_EDIT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileEditDetails(FileEditDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileEditDetails(Tag.FILE_EDIT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#FILE_EDIT_DETAILS}.
     *
     * @return The {@link FileEditDetails} value associated with this instance
     *     if {@link #isFileEditDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileEditDetails} is {@code
     *     false}.
     */
    public FileEditDetails getFileEditDetailsValue() {
        if (this._tag != Tag.FILE_EDIT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_EDIT_DETAILS, but was Tag." + this._tag.name());
        }
        return fileEditDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_GET_COPY_REFERENCE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_GET_COPY_REFERENCE_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileGetCopyReferenceDetails() {
        return this._tag == Tag.FILE_GET_COPY_REFERENCE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_GET_COPY_REFERENCE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_GET_COPY_REFERENCE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileGetCopyReferenceDetails(FileGetCopyReferenceDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileGetCopyReferenceDetails(Tag.FILE_GET_COPY_REFERENCE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FILE_GET_COPY_REFERENCE_DETAILS}.
     *
     * @return The {@link FileGetCopyReferenceDetails} value associated with
     *     this instance if {@link #isFileGetCopyReferenceDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isFileGetCopyReferenceDetails}
     *     is {@code false}.
     */
    public FileGetCopyReferenceDetails getFileGetCopyReferenceDetailsValue() {
        if (this._tag != Tag.FILE_GET_COPY_REFERENCE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_GET_COPY_REFERENCE_DETAILS, but was Tag." + this._tag.name());
        }
        return fileGetCopyReferenceDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_LOCKING_LOCK_STATUS_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_LOCKING_LOCK_STATUS_CHANGED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isFileLockingLockStatusChangedDetails() {
        return this._tag == Tag.FILE_LOCKING_LOCK_STATUS_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_LOCKING_LOCK_STATUS_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_LOCKING_LOCK_STATUS_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileLockingLockStatusChangedDetails(FileLockingLockStatusChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileLockingLockStatusChangedDetails(Tag.FILE_LOCKING_LOCK_STATUS_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FILE_LOCKING_LOCK_STATUS_CHANGED_DETAILS}.
     *
     * @return The {@link FileLockingLockStatusChangedDetails} value associated
     *     with this instance if {@link #isFileLockingLockStatusChangedDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFileLockingLockStatusChangedDetails} is {@code false}.
     */
    public FileLockingLockStatusChangedDetails getFileLockingLockStatusChangedDetailsValue() {
        if (this._tag != Tag.FILE_LOCKING_LOCK_STATUS_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_LOCKING_LOCK_STATUS_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return fileLockingLockStatusChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_MOVE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_MOVE_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileMoveDetails() {
        return this._tag == Tag.FILE_MOVE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_MOVE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_MOVE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileMoveDetails(FileMoveDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileMoveDetails(Tag.FILE_MOVE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#FILE_MOVE_DETAILS}.
     *
     * @return The {@link FileMoveDetails} value associated with this instance
     *     if {@link #isFileMoveDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileMoveDetails} is {@code
     *     false}.
     */
    public FileMoveDetails getFileMoveDetailsValue() {
        if (this._tag != Tag.FILE_MOVE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_MOVE_DETAILS, but was Tag." + this._tag.name());
        }
        return fileMoveDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_PERMANENTLY_DELETE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_PERMANENTLY_DELETE_DETAILS}, {@code false} otherwise.
     */
    public boolean isFilePermanentlyDeleteDetails() {
        return this._tag == Tag.FILE_PERMANENTLY_DELETE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_PERMANENTLY_DELETE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_PERMANENTLY_DELETE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails filePermanentlyDeleteDetails(FilePermanentlyDeleteDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFilePermanentlyDeleteDetails(Tag.FILE_PERMANENTLY_DELETE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FILE_PERMANENTLY_DELETE_DETAILS}.
     *
     * @return The {@link FilePermanentlyDeleteDetails} value associated with
     *     this instance if {@link #isFilePermanentlyDeleteDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isFilePermanentlyDeleteDetails}
     *     is {@code false}.
     */
    public FilePermanentlyDeleteDetails getFilePermanentlyDeleteDetailsValue() {
        if (this._tag != Tag.FILE_PERMANENTLY_DELETE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_PERMANENTLY_DELETE_DETAILS, but was Tag." + this._tag.name());
        }
        return filePermanentlyDeleteDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_PREVIEW_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_PREVIEW_DETAILS}, {@code false} otherwise.
     */
    public boolean isFilePreviewDetails() {
        return this._tag == Tag.FILE_PREVIEW_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_PREVIEW_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_PREVIEW_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails filePreviewDetails(FilePreviewDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFilePreviewDetails(Tag.FILE_PREVIEW_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#FILE_PREVIEW_DETAILS}.
     *
     * @return The {@link FilePreviewDetails} value associated with this
     *     instance if {@link #isFilePreviewDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFilePreviewDetails} is {@code
     *     false}.
     */
    public FilePreviewDetails getFilePreviewDetailsValue() {
        if (this._tag != Tag.FILE_PREVIEW_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_PREVIEW_DETAILS, but was Tag." + this._tag.name());
        }
        return filePreviewDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_RENAME_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_RENAME_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileRenameDetails() {
        return this._tag == Tag.FILE_RENAME_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_RENAME_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_RENAME_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileRenameDetails(FileRenameDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileRenameDetails(Tag.FILE_RENAME_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#FILE_RENAME_DETAILS}.
     *
     * @return The {@link FileRenameDetails} value associated with this instance
     *     if {@link #isFileRenameDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileRenameDetails} is {@code
     *     false}.
     */
    public FileRenameDetails getFileRenameDetailsValue() {
        if (this._tag != Tag.FILE_RENAME_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_RENAME_DETAILS, but was Tag." + this._tag.name());
        }
        return fileRenameDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_RESTORE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_RESTORE_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileRestoreDetails() {
        return this._tag == Tag.FILE_RESTORE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_RESTORE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_RESTORE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileRestoreDetails(FileRestoreDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileRestoreDetails(Tag.FILE_RESTORE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#FILE_RESTORE_DETAILS}.
     *
     * @return The {@link FileRestoreDetails} value associated with this
     *     instance if {@link #isFileRestoreDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileRestoreDetails} is {@code
     *     false}.
     */
    public FileRestoreDetails getFileRestoreDetailsValue() {
        if (this._tag != Tag.FILE_RESTORE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_RESTORE_DETAILS, but was Tag." + this._tag.name());
        }
        return fileRestoreDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_REVERT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_REVERT_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileRevertDetails() {
        return this._tag == Tag.FILE_REVERT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_REVERT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_REVERT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileRevertDetails(FileRevertDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileRevertDetails(Tag.FILE_REVERT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#FILE_REVERT_DETAILS}.
     *
     * @return The {@link FileRevertDetails} value associated with this instance
     *     if {@link #isFileRevertDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileRevertDetails} is {@code
     *     false}.
     */
    public FileRevertDetails getFileRevertDetailsValue() {
        if (this._tag != Tag.FILE_REVERT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_REVERT_DETAILS, but was Tag." + this._tag.name());
        }
        return fileRevertDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_ROLLBACK_CHANGES_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_ROLLBACK_CHANGES_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileRollbackChangesDetails() {
        return this._tag == Tag.FILE_ROLLBACK_CHANGES_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_ROLLBACK_CHANGES_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_ROLLBACK_CHANGES_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileRollbackChangesDetails(FileRollbackChangesDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileRollbackChangesDetails(Tag.FILE_ROLLBACK_CHANGES_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FILE_ROLLBACK_CHANGES_DETAILS}.
     *
     * @return The {@link FileRollbackChangesDetails} value associated with this
     *     instance if {@link #isFileRollbackChangesDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileRollbackChangesDetails}
     *     is {@code false}.
     */
    public FileRollbackChangesDetails getFileRollbackChangesDetailsValue() {
        if (this._tag != Tag.FILE_ROLLBACK_CHANGES_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_ROLLBACK_CHANGES_DETAILS, but was Tag." + this._tag.name());
        }
        return fileRollbackChangesDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_SAVE_COPY_REFERENCE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_SAVE_COPY_REFERENCE_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileSaveCopyReferenceDetails() {
        return this._tag == Tag.FILE_SAVE_COPY_REFERENCE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_SAVE_COPY_REFERENCE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_SAVE_COPY_REFERENCE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileSaveCopyReferenceDetails(FileSaveCopyReferenceDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileSaveCopyReferenceDetails(Tag.FILE_SAVE_COPY_REFERENCE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FILE_SAVE_COPY_REFERENCE_DETAILS}.
     *
     * @return The {@link FileSaveCopyReferenceDetails} value associated with
     *     this instance if {@link #isFileSaveCopyReferenceDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isFileSaveCopyReferenceDetails}
     *     is {@code false}.
     */
    public FileSaveCopyReferenceDetails getFileSaveCopyReferenceDetailsValue() {
        if (this._tag != Tag.FILE_SAVE_COPY_REFERENCE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_SAVE_COPY_REFERENCE_DETAILS, but was Tag." + this._tag.name());
        }
        return fileSaveCopyReferenceDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FOLDER_OVERVIEW_DESCRIPTION_CHANGED_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FOLDER_OVERVIEW_DESCRIPTION_CHANGED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isFolderOverviewDescriptionChangedDetails() {
        return this._tag == Tag.FOLDER_OVERVIEW_DESCRIPTION_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FOLDER_OVERVIEW_DESCRIPTION_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FOLDER_OVERVIEW_DESCRIPTION_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails folderOverviewDescriptionChangedDetails(FolderOverviewDescriptionChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFolderOverviewDescriptionChangedDetails(Tag.FOLDER_OVERVIEW_DESCRIPTION_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FOLDER_OVERVIEW_DESCRIPTION_CHANGED_DETAILS}.
     *
     * @return The {@link FolderOverviewDescriptionChangedDetails} value
     *     associated with this instance if {@link
     *     #isFolderOverviewDescriptionChangedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFolderOverviewDescriptionChangedDetails} is {@code false}.
     */
    public FolderOverviewDescriptionChangedDetails getFolderOverviewDescriptionChangedDetailsValue() {
        if (this._tag != Tag.FOLDER_OVERVIEW_DESCRIPTION_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FOLDER_OVERVIEW_DESCRIPTION_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return folderOverviewDescriptionChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FOLDER_OVERVIEW_ITEM_PINNED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FOLDER_OVERVIEW_ITEM_PINNED_DETAILS}, {@code false} otherwise.
     */
    public boolean isFolderOverviewItemPinnedDetails() {
        return this._tag == Tag.FOLDER_OVERVIEW_ITEM_PINNED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FOLDER_OVERVIEW_ITEM_PINNED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FOLDER_OVERVIEW_ITEM_PINNED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails folderOverviewItemPinnedDetails(FolderOverviewItemPinnedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFolderOverviewItemPinnedDetails(Tag.FOLDER_OVERVIEW_ITEM_PINNED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FOLDER_OVERVIEW_ITEM_PINNED_DETAILS}.
     *
     * @return The {@link FolderOverviewItemPinnedDetails} value associated with
     *     this instance if {@link #isFolderOverviewItemPinnedDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFolderOverviewItemPinnedDetails} is {@code false}.
     */
    public FolderOverviewItemPinnedDetails getFolderOverviewItemPinnedDetailsValue() {
        if (this._tag != Tag.FOLDER_OVERVIEW_ITEM_PINNED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FOLDER_OVERVIEW_ITEM_PINNED_DETAILS, but was Tag." + this._tag.name());
        }
        return folderOverviewItemPinnedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FOLDER_OVERVIEW_ITEM_UNPINNED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FOLDER_OVERVIEW_ITEM_UNPINNED_DETAILS}, {@code false} otherwise.
     */
    public boolean isFolderOverviewItemUnpinnedDetails() {
        return this._tag == Tag.FOLDER_OVERVIEW_ITEM_UNPINNED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FOLDER_OVERVIEW_ITEM_UNPINNED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FOLDER_OVERVIEW_ITEM_UNPINNED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails folderOverviewItemUnpinnedDetails(FolderOverviewItemUnpinnedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFolderOverviewItemUnpinnedDetails(Tag.FOLDER_OVERVIEW_ITEM_UNPINNED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FOLDER_OVERVIEW_ITEM_UNPINNED_DETAILS}.
     *
     * @return The {@link FolderOverviewItemUnpinnedDetails} value associated
     *     with this instance if {@link #isFolderOverviewItemUnpinnedDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFolderOverviewItemUnpinnedDetails} is {@code false}.
     */
    public FolderOverviewItemUnpinnedDetails getFolderOverviewItemUnpinnedDetailsValue() {
        if (this._tag != Tag.FOLDER_OVERVIEW_ITEM_UNPINNED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FOLDER_OVERVIEW_ITEM_UNPINNED_DETAILS, but was Tag." + this._tag.name());
        }
        return folderOverviewItemUnpinnedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#OBJECT_LABEL_ADDED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#OBJECT_LABEL_ADDED_DETAILS}, {@code false} otherwise.
     */
    public boolean isObjectLabelAddedDetails() {
        return this._tag == Tag.OBJECT_LABEL_ADDED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#OBJECT_LABEL_ADDED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#OBJECT_LABEL_ADDED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails objectLabelAddedDetails(ObjectLabelAddedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndObjectLabelAddedDetails(Tag.OBJECT_LABEL_ADDED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#OBJECT_LABEL_ADDED_DETAILS}.
     *
     * @return The {@link ObjectLabelAddedDetails} value associated with this
     *     instance if {@link #isObjectLabelAddedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isObjectLabelAddedDetails} is
     *     {@code false}.
     */
    public ObjectLabelAddedDetails getObjectLabelAddedDetailsValue() {
        if (this._tag != Tag.OBJECT_LABEL_ADDED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.OBJECT_LABEL_ADDED_DETAILS, but was Tag." + this._tag.name());
        }
        return objectLabelAddedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#OBJECT_LABEL_REMOVED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#OBJECT_LABEL_REMOVED_DETAILS}, {@code false} otherwise.
     */
    public boolean isObjectLabelRemovedDetails() {
        return this._tag == Tag.OBJECT_LABEL_REMOVED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#OBJECT_LABEL_REMOVED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#OBJECT_LABEL_REMOVED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails objectLabelRemovedDetails(ObjectLabelRemovedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndObjectLabelRemovedDetails(Tag.OBJECT_LABEL_REMOVED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#OBJECT_LABEL_REMOVED_DETAILS}.
     *
     * @return The {@link ObjectLabelRemovedDetails} value associated with this
     *     instance if {@link #isObjectLabelRemovedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isObjectLabelRemovedDetails} is
     *     {@code false}.
     */
    public ObjectLabelRemovedDetails getObjectLabelRemovedDetailsValue() {
        if (this._tag != Tag.OBJECT_LABEL_REMOVED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.OBJECT_LABEL_REMOVED_DETAILS, but was Tag." + this._tag.name());
        }
        return objectLabelRemovedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#OBJECT_LABEL_UPDATED_VALUE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#OBJECT_LABEL_UPDATED_VALUE_DETAILS}, {@code false} otherwise.
     */
    public boolean isObjectLabelUpdatedValueDetails() {
        return this._tag == Tag.OBJECT_LABEL_UPDATED_VALUE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#OBJECT_LABEL_UPDATED_VALUE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#OBJECT_LABEL_UPDATED_VALUE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails objectLabelUpdatedValueDetails(ObjectLabelUpdatedValueDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndObjectLabelUpdatedValueDetails(Tag.OBJECT_LABEL_UPDATED_VALUE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#OBJECT_LABEL_UPDATED_VALUE_DETAILS}.
     *
     * @return The {@link ObjectLabelUpdatedValueDetails} value associated with
     *     this instance if {@link #isObjectLabelUpdatedValueDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isObjectLabelUpdatedValueDetails} is {@code false}.
     */
    public ObjectLabelUpdatedValueDetails getObjectLabelUpdatedValueDetailsValue() {
        if (this._tag != Tag.OBJECT_LABEL_UPDATED_VALUE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.OBJECT_LABEL_UPDATED_VALUE_DETAILS, but was Tag." + this._tag.name());
        }
        return objectLabelUpdatedValueDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ORGANIZE_FOLDER_WITH_TIDY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ORGANIZE_FOLDER_WITH_TIDY_DETAILS}, {@code false} otherwise.
     */
    public boolean isOrganizeFolderWithTidyDetails() {
        return this._tag == Tag.ORGANIZE_FOLDER_WITH_TIDY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#ORGANIZE_FOLDER_WITH_TIDY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#ORGANIZE_FOLDER_WITH_TIDY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails organizeFolderWithTidyDetails(OrganizeFolderWithTidyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndOrganizeFolderWithTidyDetails(Tag.ORGANIZE_FOLDER_WITH_TIDY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#ORGANIZE_FOLDER_WITH_TIDY_DETAILS}.
     *
     * @return The {@link OrganizeFolderWithTidyDetails} value associated with
     *     this instance if {@link #isOrganizeFolderWithTidyDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isOrganizeFolderWithTidyDetails} is {@code false}.
     */
    public OrganizeFolderWithTidyDetails getOrganizeFolderWithTidyDetailsValue() {
        if (this._tag != Tag.ORGANIZE_FOLDER_WITH_TIDY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.ORGANIZE_FOLDER_WITH_TIDY_DETAILS, but was Tag." + this._tag.name());
        }
        return organizeFolderWithTidyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#REWIND_FOLDER_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#REWIND_FOLDER_DETAILS}, {@code false} otherwise.
     */
    public boolean isRewindFolderDetails() {
        return this._tag == Tag.REWIND_FOLDER_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#REWIND_FOLDER_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#REWIND_FOLDER_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails rewindFolderDetails(RewindFolderDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndRewindFolderDetails(Tag.REWIND_FOLDER_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#REWIND_FOLDER_DETAILS}.
     *
     * @return The {@link RewindFolderDetails} value associated with this
     *     instance if {@link #isRewindFolderDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isRewindFolderDetails} is
     *     {@code false}.
     */
    public RewindFolderDetails getRewindFolderDetailsValue() {
        if (this._tag != Tag.REWIND_FOLDER_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.REWIND_FOLDER_DETAILS, but was Tag." + this._tag.name());
        }
        return rewindFolderDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#UNDO_NAMING_CONVENTION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#UNDO_NAMING_CONVENTION_DETAILS}, {@code false} otherwise.
     */
    public boolean isUndoNamingConventionDetails() {
        return this._tag == Tag.UNDO_NAMING_CONVENTION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#UNDO_NAMING_CONVENTION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#UNDO_NAMING_CONVENTION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails undoNamingConventionDetails(UndoNamingConventionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndUndoNamingConventionDetails(Tag.UNDO_NAMING_CONVENTION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#UNDO_NAMING_CONVENTION_DETAILS}.
     *
     * @return The {@link UndoNamingConventionDetails} value associated with
     *     this instance if {@link #isUndoNamingConventionDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isUndoNamingConventionDetails}
     *     is {@code false}.
     */
    public UndoNamingConventionDetails getUndoNamingConventionDetailsValue() {
        if (this._tag != Tag.UNDO_NAMING_CONVENTION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.UNDO_NAMING_CONVENTION_DETAILS, but was Tag." + this._tag.name());
        }
        return undoNamingConventionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#UNDO_ORGANIZE_FOLDER_WITH_TIDY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#UNDO_ORGANIZE_FOLDER_WITH_TIDY_DETAILS}, {@code false} otherwise.
     */
    public boolean isUndoOrganizeFolderWithTidyDetails() {
        return this._tag == Tag.UNDO_ORGANIZE_FOLDER_WITH_TIDY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#UNDO_ORGANIZE_FOLDER_WITH_TIDY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#UNDO_ORGANIZE_FOLDER_WITH_TIDY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails undoOrganizeFolderWithTidyDetails(UndoOrganizeFolderWithTidyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndUndoOrganizeFolderWithTidyDetails(Tag.UNDO_ORGANIZE_FOLDER_WITH_TIDY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#UNDO_ORGANIZE_FOLDER_WITH_TIDY_DETAILS}.
     *
     * @return The {@link UndoOrganizeFolderWithTidyDetails} value associated
     *     with this instance if {@link #isUndoOrganizeFolderWithTidyDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isUndoOrganizeFolderWithTidyDetails} is {@code false}.
     */
    public UndoOrganizeFolderWithTidyDetails getUndoOrganizeFolderWithTidyDetailsValue() {
        if (this._tag != Tag.UNDO_ORGANIZE_FOLDER_WITH_TIDY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.UNDO_ORGANIZE_FOLDER_WITH_TIDY_DETAILS, but was Tag." + this._tag.name());
        }
        return undoOrganizeFolderWithTidyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#USER_TAGS_ADDED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#USER_TAGS_ADDED_DETAILS}, {@code false} otherwise.
     */
    public boolean isUserTagsAddedDetails() {
        return this._tag == Tag.USER_TAGS_ADDED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#USER_TAGS_ADDED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#USER_TAGS_ADDED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails userTagsAddedDetails(UserTagsAddedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndUserTagsAddedDetails(Tag.USER_TAGS_ADDED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#USER_TAGS_ADDED_DETAILS}.
     *
     * @return The {@link UserTagsAddedDetails} value associated with this
     *     instance if {@link #isUserTagsAddedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isUserTagsAddedDetails} is
     *     {@code false}.
     */
    public UserTagsAddedDetails getUserTagsAddedDetailsValue() {
        if (this._tag != Tag.USER_TAGS_ADDED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.USER_TAGS_ADDED_DETAILS, but was Tag." + this._tag.name());
        }
        return userTagsAddedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#USER_TAGS_REMOVED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#USER_TAGS_REMOVED_DETAILS}, {@code false} otherwise.
     */
    public boolean isUserTagsRemovedDetails() {
        return this._tag == Tag.USER_TAGS_REMOVED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#USER_TAGS_REMOVED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#USER_TAGS_REMOVED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails userTagsRemovedDetails(UserTagsRemovedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndUserTagsRemovedDetails(Tag.USER_TAGS_REMOVED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#USER_TAGS_REMOVED_DETAILS}.
     *
     * @return The {@link UserTagsRemovedDetails} value associated with this
     *     instance if {@link #isUserTagsRemovedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isUserTagsRemovedDetails} is
     *     {@code false}.
     */
    public UserTagsRemovedDetails getUserTagsRemovedDetailsValue() {
        if (this._tag != Tag.USER_TAGS_REMOVED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.USER_TAGS_REMOVED_DETAILS, but was Tag." + this._tag.name());
        }
        return userTagsRemovedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EMAIL_INGEST_RECEIVE_FILE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EMAIL_INGEST_RECEIVE_FILE_DETAILS}, {@code false} otherwise.
     */
    public boolean isEmailIngestReceiveFileDetails() {
        return this._tag == Tag.EMAIL_INGEST_RECEIVE_FILE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#EMAIL_INGEST_RECEIVE_FILE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#EMAIL_INGEST_RECEIVE_FILE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails emailIngestReceiveFileDetails(EmailIngestReceiveFileDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndEmailIngestReceiveFileDetails(Tag.EMAIL_INGEST_RECEIVE_FILE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#EMAIL_INGEST_RECEIVE_FILE_DETAILS}.
     *
     * @return The {@link EmailIngestReceiveFileDetails} value associated with
     *     this instance if {@link #isEmailIngestReceiveFileDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isEmailIngestReceiveFileDetails} is {@code false}.
     */
    public EmailIngestReceiveFileDetails getEmailIngestReceiveFileDetailsValue() {
        if (this._tag != Tag.EMAIL_INGEST_RECEIVE_FILE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.EMAIL_INGEST_RECEIVE_FILE_DETAILS, but was Tag." + this._tag.name());
        }
        return emailIngestReceiveFileDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_REQUEST_CHANGE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_REQUEST_CHANGE_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileRequestChangeDetails() {
        return this._tag == Tag.FILE_REQUEST_CHANGE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_REQUEST_CHANGE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_REQUEST_CHANGE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileRequestChangeDetails(FileRequestChangeDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileRequestChangeDetails(Tag.FILE_REQUEST_CHANGE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#FILE_REQUEST_CHANGE_DETAILS}.
     *
     * @return The {@link FileRequestChangeDetails} value associated with this
     *     instance if {@link #isFileRequestChangeDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileRequestChangeDetails} is
     *     {@code false}.
     */
    public FileRequestChangeDetails getFileRequestChangeDetailsValue() {
        if (this._tag != Tag.FILE_REQUEST_CHANGE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_REQUEST_CHANGE_DETAILS, but was Tag." + this._tag.name());
        }
        return fileRequestChangeDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_REQUEST_CLOSE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_REQUEST_CLOSE_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileRequestCloseDetails() {
        return this._tag == Tag.FILE_REQUEST_CLOSE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_REQUEST_CLOSE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_REQUEST_CLOSE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileRequestCloseDetails(FileRequestCloseDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileRequestCloseDetails(Tag.FILE_REQUEST_CLOSE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#FILE_REQUEST_CLOSE_DETAILS}.
     *
     * @return The {@link FileRequestCloseDetails} value associated with this
     *     instance if {@link #isFileRequestCloseDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileRequestCloseDetails} is
     *     {@code false}.
     */
    public FileRequestCloseDetails getFileRequestCloseDetailsValue() {
        if (this._tag != Tag.FILE_REQUEST_CLOSE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_REQUEST_CLOSE_DETAILS, but was Tag." + this._tag.name());
        }
        return fileRequestCloseDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_REQUEST_CREATE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_REQUEST_CREATE_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileRequestCreateDetails() {
        return this._tag == Tag.FILE_REQUEST_CREATE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_REQUEST_CREATE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_REQUEST_CREATE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileRequestCreateDetails(FileRequestCreateDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileRequestCreateDetails(Tag.FILE_REQUEST_CREATE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#FILE_REQUEST_CREATE_DETAILS}.
     *
     * @return The {@link FileRequestCreateDetails} value associated with this
     *     instance if {@link #isFileRequestCreateDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileRequestCreateDetails} is
     *     {@code false}.
     */
    public FileRequestCreateDetails getFileRequestCreateDetailsValue() {
        if (this._tag != Tag.FILE_REQUEST_CREATE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_REQUEST_CREATE_DETAILS, but was Tag." + this._tag.name());
        }
        return fileRequestCreateDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_REQUEST_DELETE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_REQUEST_DELETE_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileRequestDeleteDetails() {
        return this._tag == Tag.FILE_REQUEST_DELETE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_REQUEST_DELETE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_REQUEST_DELETE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileRequestDeleteDetails(FileRequestDeleteDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileRequestDeleteDetails(Tag.FILE_REQUEST_DELETE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#FILE_REQUEST_DELETE_DETAILS}.
     *
     * @return The {@link FileRequestDeleteDetails} value associated with this
     *     instance if {@link #isFileRequestDeleteDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileRequestDeleteDetails} is
     *     {@code false}.
     */
    public FileRequestDeleteDetails getFileRequestDeleteDetailsValue() {
        if (this._tag != Tag.FILE_REQUEST_DELETE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_REQUEST_DELETE_DETAILS, but was Tag." + this._tag.name());
        }
        return fileRequestDeleteDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_REQUEST_RECEIVE_FILE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_REQUEST_RECEIVE_FILE_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileRequestReceiveFileDetails() {
        return this._tag == Tag.FILE_REQUEST_RECEIVE_FILE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_REQUEST_RECEIVE_FILE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_REQUEST_RECEIVE_FILE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileRequestReceiveFileDetails(FileRequestReceiveFileDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileRequestReceiveFileDetails(Tag.FILE_REQUEST_RECEIVE_FILE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FILE_REQUEST_RECEIVE_FILE_DETAILS}.
     *
     * @return The {@link FileRequestReceiveFileDetails} value associated with
     *     this instance if {@link #isFileRequestReceiveFileDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFileRequestReceiveFileDetails} is {@code false}.
     */
    public FileRequestReceiveFileDetails getFileRequestReceiveFileDetailsValue() {
        if (this._tag != Tag.FILE_REQUEST_RECEIVE_FILE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_REQUEST_RECEIVE_FILE_DETAILS, but was Tag." + this._tag.name());
        }
        return fileRequestReceiveFileDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_ADD_EXTERNAL_ID_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_ADD_EXTERNAL_ID_DETAILS}, {@code false} otherwise.
     */
    public boolean isGroupAddExternalIdDetails() {
        return this._tag == Tag.GROUP_ADD_EXTERNAL_ID_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GROUP_ADD_EXTERNAL_ID_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GROUP_ADD_EXTERNAL_ID_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails groupAddExternalIdDetails(GroupAddExternalIdDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGroupAddExternalIdDetails(Tag.GROUP_ADD_EXTERNAL_ID_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GROUP_ADD_EXTERNAL_ID_DETAILS}.
     *
     * @return The {@link GroupAddExternalIdDetails} value associated with this
     *     instance if {@link #isGroupAddExternalIdDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGroupAddExternalIdDetails} is
     *     {@code false}.
     */
    public GroupAddExternalIdDetails getGroupAddExternalIdDetailsValue() {
        if (this._tag != Tag.GROUP_ADD_EXTERNAL_ID_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_ADD_EXTERNAL_ID_DETAILS, but was Tag." + this._tag.name());
        }
        return groupAddExternalIdDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_ADD_MEMBER_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_ADD_MEMBER_DETAILS}, {@code false} otherwise.
     */
    public boolean isGroupAddMemberDetails() {
        return this._tag == Tag.GROUP_ADD_MEMBER_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GROUP_ADD_MEMBER_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GROUP_ADD_MEMBER_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails groupAddMemberDetails(GroupAddMemberDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGroupAddMemberDetails(Tag.GROUP_ADD_MEMBER_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#GROUP_ADD_MEMBER_DETAILS}.
     *
     * @return The {@link GroupAddMemberDetails} value associated with this
     *     instance if {@link #isGroupAddMemberDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGroupAddMemberDetails} is
     *     {@code false}.
     */
    public GroupAddMemberDetails getGroupAddMemberDetailsValue() {
        if (this._tag != Tag.GROUP_ADD_MEMBER_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_ADD_MEMBER_DETAILS, but was Tag." + this._tag.name());
        }
        return groupAddMemberDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_CHANGE_EXTERNAL_ID_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_CHANGE_EXTERNAL_ID_DETAILS}, {@code false} otherwise.
     */
    public boolean isGroupChangeExternalIdDetails() {
        return this._tag == Tag.GROUP_CHANGE_EXTERNAL_ID_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GROUP_CHANGE_EXTERNAL_ID_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GROUP_CHANGE_EXTERNAL_ID_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails groupChangeExternalIdDetails(GroupChangeExternalIdDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGroupChangeExternalIdDetails(Tag.GROUP_CHANGE_EXTERNAL_ID_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GROUP_CHANGE_EXTERNAL_ID_DETAILS}.
     *
     * @return The {@link GroupChangeExternalIdDetails} value associated with
     *     this instance if {@link #isGroupChangeExternalIdDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isGroupChangeExternalIdDetails}
     *     is {@code false}.
     */
    public GroupChangeExternalIdDetails getGroupChangeExternalIdDetailsValue() {
        if (this._tag != Tag.GROUP_CHANGE_EXTERNAL_ID_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_CHANGE_EXTERNAL_ID_DETAILS, but was Tag." + this._tag.name());
        }
        return groupChangeExternalIdDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_CHANGE_MANAGEMENT_TYPE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_CHANGE_MANAGEMENT_TYPE_DETAILS}, {@code false} otherwise.
     */
    public boolean isGroupChangeManagementTypeDetails() {
        return this._tag == Tag.GROUP_CHANGE_MANAGEMENT_TYPE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GROUP_CHANGE_MANAGEMENT_TYPE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GROUP_CHANGE_MANAGEMENT_TYPE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails groupChangeManagementTypeDetails(GroupChangeManagementTypeDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGroupChangeManagementTypeDetails(Tag.GROUP_CHANGE_MANAGEMENT_TYPE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GROUP_CHANGE_MANAGEMENT_TYPE_DETAILS}.
     *
     * @return The {@link GroupChangeManagementTypeDetails} value associated
     *     with this instance if {@link #isGroupChangeManagementTypeDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGroupChangeManagementTypeDetails} is {@code false}.
     */
    public GroupChangeManagementTypeDetails getGroupChangeManagementTypeDetailsValue() {
        if (this._tag != Tag.GROUP_CHANGE_MANAGEMENT_TYPE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_CHANGE_MANAGEMENT_TYPE_DETAILS, but was Tag." + this._tag.name());
        }
        return groupChangeManagementTypeDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_CHANGE_MEMBER_ROLE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_CHANGE_MEMBER_ROLE_DETAILS}, {@code false} otherwise.
     */
    public boolean isGroupChangeMemberRoleDetails() {
        return this._tag == Tag.GROUP_CHANGE_MEMBER_ROLE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GROUP_CHANGE_MEMBER_ROLE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GROUP_CHANGE_MEMBER_ROLE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails groupChangeMemberRoleDetails(GroupChangeMemberRoleDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGroupChangeMemberRoleDetails(Tag.GROUP_CHANGE_MEMBER_ROLE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GROUP_CHANGE_MEMBER_ROLE_DETAILS}.
     *
     * @return The {@link GroupChangeMemberRoleDetails} value associated with
     *     this instance if {@link #isGroupChangeMemberRoleDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isGroupChangeMemberRoleDetails}
     *     is {@code false}.
     */
    public GroupChangeMemberRoleDetails getGroupChangeMemberRoleDetailsValue() {
        if (this._tag != Tag.GROUP_CHANGE_MEMBER_ROLE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_CHANGE_MEMBER_ROLE_DETAILS, but was Tag." + this._tag.name());
        }
        return groupChangeMemberRoleDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_CREATE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_CREATE_DETAILS}, {@code false} otherwise.
     */
    public boolean isGroupCreateDetails() {
        return this._tag == Tag.GROUP_CREATE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GROUP_CREATE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GROUP_CREATE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails groupCreateDetails(GroupCreateDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGroupCreateDetails(Tag.GROUP_CREATE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#GROUP_CREATE_DETAILS}.
     *
     * @return The {@link GroupCreateDetails} value associated with this
     *     instance if {@link #isGroupCreateDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGroupCreateDetails} is {@code
     *     false}.
     */
    public GroupCreateDetails getGroupCreateDetailsValue() {
        if (this._tag != Tag.GROUP_CREATE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_CREATE_DETAILS, but was Tag." + this._tag.name());
        }
        return groupCreateDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_DELETE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_DELETE_DETAILS}, {@code false} otherwise.
     */
    public boolean isGroupDeleteDetails() {
        return this._tag == Tag.GROUP_DELETE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GROUP_DELETE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GROUP_DELETE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails groupDeleteDetails(GroupDeleteDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGroupDeleteDetails(Tag.GROUP_DELETE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#GROUP_DELETE_DETAILS}.
     *
     * @return The {@link GroupDeleteDetails} value associated with this
     *     instance if {@link #isGroupDeleteDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGroupDeleteDetails} is {@code
     *     false}.
     */
    public GroupDeleteDetails getGroupDeleteDetailsValue() {
        if (this._tag != Tag.GROUP_DELETE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_DELETE_DETAILS, but was Tag." + this._tag.name());
        }
        return groupDeleteDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_DESCRIPTION_UPDATED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_DESCRIPTION_UPDATED_DETAILS}, {@code false} otherwise.
     */
    public boolean isGroupDescriptionUpdatedDetails() {
        return this._tag == Tag.GROUP_DESCRIPTION_UPDATED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GROUP_DESCRIPTION_UPDATED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GROUP_DESCRIPTION_UPDATED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails groupDescriptionUpdatedDetails(GroupDescriptionUpdatedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGroupDescriptionUpdatedDetails(Tag.GROUP_DESCRIPTION_UPDATED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GROUP_DESCRIPTION_UPDATED_DETAILS}.
     *
     * @return The {@link GroupDescriptionUpdatedDetails} value associated with
     *     this instance if {@link #isGroupDescriptionUpdatedDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGroupDescriptionUpdatedDetails} is {@code false}.
     */
    public GroupDescriptionUpdatedDetails getGroupDescriptionUpdatedDetailsValue() {
        if (this._tag != Tag.GROUP_DESCRIPTION_UPDATED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_DESCRIPTION_UPDATED_DETAILS, but was Tag." + this._tag.name());
        }
        return groupDescriptionUpdatedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_JOIN_POLICY_UPDATED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_JOIN_POLICY_UPDATED_DETAILS}, {@code false} otherwise.
     */
    public boolean isGroupJoinPolicyUpdatedDetails() {
        return this._tag == Tag.GROUP_JOIN_POLICY_UPDATED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GROUP_JOIN_POLICY_UPDATED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GROUP_JOIN_POLICY_UPDATED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails groupJoinPolicyUpdatedDetails(GroupJoinPolicyUpdatedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGroupJoinPolicyUpdatedDetails(Tag.GROUP_JOIN_POLICY_UPDATED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GROUP_JOIN_POLICY_UPDATED_DETAILS}.
     *
     * @return The {@link GroupJoinPolicyUpdatedDetails} value associated with
     *     this instance if {@link #isGroupJoinPolicyUpdatedDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGroupJoinPolicyUpdatedDetails} is {@code false}.
     */
    public GroupJoinPolicyUpdatedDetails getGroupJoinPolicyUpdatedDetailsValue() {
        if (this._tag != Tag.GROUP_JOIN_POLICY_UPDATED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_JOIN_POLICY_UPDATED_DETAILS, but was Tag." + this._tag.name());
        }
        return groupJoinPolicyUpdatedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_MOVED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_MOVED_DETAILS}, {@code false} otherwise.
     */
    public boolean isGroupMovedDetails() {
        return this._tag == Tag.GROUP_MOVED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GROUP_MOVED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GROUP_MOVED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails groupMovedDetails(GroupMovedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGroupMovedDetails(Tag.GROUP_MOVED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#GROUP_MOVED_DETAILS}.
     *
     * @return The {@link GroupMovedDetails} value associated with this instance
     *     if {@link #isGroupMovedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGroupMovedDetails} is {@code
     *     false}.
     */
    public GroupMovedDetails getGroupMovedDetailsValue() {
        if (this._tag != Tag.GROUP_MOVED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_MOVED_DETAILS, but was Tag." + this._tag.name());
        }
        return groupMovedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_REMOVE_EXTERNAL_ID_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_REMOVE_EXTERNAL_ID_DETAILS}, {@code false} otherwise.
     */
    public boolean isGroupRemoveExternalIdDetails() {
        return this._tag == Tag.GROUP_REMOVE_EXTERNAL_ID_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GROUP_REMOVE_EXTERNAL_ID_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GROUP_REMOVE_EXTERNAL_ID_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails groupRemoveExternalIdDetails(GroupRemoveExternalIdDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGroupRemoveExternalIdDetails(Tag.GROUP_REMOVE_EXTERNAL_ID_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GROUP_REMOVE_EXTERNAL_ID_DETAILS}.
     *
     * @return The {@link GroupRemoveExternalIdDetails} value associated with
     *     this instance if {@link #isGroupRemoveExternalIdDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isGroupRemoveExternalIdDetails}
     *     is {@code false}.
     */
    public GroupRemoveExternalIdDetails getGroupRemoveExternalIdDetailsValue() {
        if (this._tag != Tag.GROUP_REMOVE_EXTERNAL_ID_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_REMOVE_EXTERNAL_ID_DETAILS, but was Tag." + this._tag.name());
        }
        return groupRemoveExternalIdDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_REMOVE_MEMBER_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_REMOVE_MEMBER_DETAILS}, {@code false} otherwise.
     */
    public boolean isGroupRemoveMemberDetails() {
        return this._tag == Tag.GROUP_REMOVE_MEMBER_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GROUP_REMOVE_MEMBER_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GROUP_REMOVE_MEMBER_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails groupRemoveMemberDetails(GroupRemoveMemberDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGroupRemoveMemberDetails(Tag.GROUP_REMOVE_MEMBER_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#GROUP_REMOVE_MEMBER_DETAILS}.
     *
     * @return The {@link GroupRemoveMemberDetails} value associated with this
     *     instance if {@link #isGroupRemoveMemberDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGroupRemoveMemberDetails} is
     *     {@code false}.
     */
    public GroupRemoveMemberDetails getGroupRemoveMemberDetailsValue() {
        if (this._tag != Tag.GROUP_REMOVE_MEMBER_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_REMOVE_MEMBER_DETAILS, but was Tag." + this._tag.name());
        }
        return groupRemoveMemberDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_RENAME_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_RENAME_DETAILS}, {@code false} otherwise.
     */
    public boolean isGroupRenameDetails() {
        return this._tag == Tag.GROUP_RENAME_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GROUP_RENAME_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GROUP_RENAME_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails groupRenameDetails(GroupRenameDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGroupRenameDetails(Tag.GROUP_RENAME_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#GROUP_RENAME_DETAILS}.
     *
     * @return The {@link GroupRenameDetails} value associated with this
     *     instance if {@link #isGroupRenameDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGroupRenameDetails} is {@code
     *     false}.
     */
    public GroupRenameDetails getGroupRenameDetailsValue() {
        if (this._tag != Tag.GROUP_RENAME_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_RENAME_DETAILS, but was Tag." + this._tag.name());
        }
        return groupRenameDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ACCOUNT_LOCK_OR_UNLOCKED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ACCOUNT_LOCK_OR_UNLOCKED_DETAILS}, {@code false} otherwise.
     */
    public boolean isAccountLockOrUnlockedDetails() {
        return this._tag == Tag.ACCOUNT_LOCK_OR_UNLOCKED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#ACCOUNT_LOCK_OR_UNLOCKED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#ACCOUNT_LOCK_OR_UNLOCKED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails accountLockOrUnlockedDetails(AccountLockOrUnlockedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndAccountLockOrUnlockedDetails(Tag.ACCOUNT_LOCK_OR_UNLOCKED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#ACCOUNT_LOCK_OR_UNLOCKED_DETAILS}.
     *
     * @return The {@link AccountLockOrUnlockedDetails} value associated with
     *     this instance if {@link #isAccountLockOrUnlockedDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isAccountLockOrUnlockedDetails}
     *     is {@code false}.
     */
    public AccountLockOrUnlockedDetails getAccountLockOrUnlockedDetailsValue() {
        if (this._tag != Tag.ACCOUNT_LOCK_OR_UNLOCKED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.ACCOUNT_LOCK_OR_UNLOCKED_DETAILS, but was Tag." + this._tag.name());
        }
        return accountLockOrUnlockedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EMM_ERROR_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EMM_ERROR_DETAILS}, {@code false} otherwise.
     */
    public boolean isEmmErrorDetails() {
        return this._tag == Tag.EMM_ERROR_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#EMM_ERROR_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#EMM_ERROR_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails emmErrorDetails(EmmErrorDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndEmmErrorDetails(Tag.EMM_ERROR_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#EMM_ERROR_DETAILS}.
     *
     * @return The {@link EmmErrorDetails} value associated with this instance
     *     if {@link #isEmmErrorDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isEmmErrorDetails} is {@code
     *     false}.
     */
    public EmmErrorDetails getEmmErrorDetailsValue() {
        if (this._tag != Tag.EMM_ERROR_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.EMM_ERROR_DETAILS, but was Tag." + this._tag.name());
        }
        return emmErrorDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isGuestAdminSignedInViaTrustedTeamsDetails() {
        return this._tag == Tag.GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails guestAdminSignedInViaTrustedTeamsDetails(GuestAdminSignedInViaTrustedTeamsDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGuestAdminSignedInViaTrustedTeamsDetails(Tag.GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS_DETAILS}.
     *
     * @return The {@link GuestAdminSignedInViaTrustedTeamsDetails} value
     *     associated with this instance if {@link
     *     #isGuestAdminSignedInViaTrustedTeamsDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGuestAdminSignedInViaTrustedTeamsDetails} is {@code false}.
     */
    public GuestAdminSignedInViaTrustedTeamsDetails getGuestAdminSignedInViaTrustedTeamsDetailsValue() {
        if (this._tag != Tag.GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS_DETAILS, but was Tag." + this._tag.name());
        }
        return guestAdminSignedInViaTrustedTeamsDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isGuestAdminSignedOutViaTrustedTeamsDetails() {
        return this._tag == Tag.GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails guestAdminSignedOutViaTrustedTeamsDetails(GuestAdminSignedOutViaTrustedTeamsDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGuestAdminSignedOutViaTrustedTeamsDetails(Tag.GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS_DETAILS}.
     *
     * @return The {@link GuestAdminSignedOutViaTrustedTeamsDetails} value
     *     associated with this instance if {@link
     *     #isGuestAdminSignedOutViaTrustedTeamsDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGuestAdminSignedOutViaTrustedTeamsDetails} is {@code false}.
     */
    public GuestAdminSignedOutViaTrustedTeamsDetails getGuestAdminSignedOutViaTrustedTeamsDetailsValue() {
        if (this._tag != Tag.GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS_DETAILS, but was Tag." + this._tag.name());
        }
        return guestAdminSignedOutViaTrustedTeamsDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LOGIN_FAIL_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LOGIN_FAIL_DETAILS}, {@code false} otherwise.
     */
    public boolean isLoginFailDetails() {
        return this._tag == Tag.LOGIN_FAIL_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#LOGIN_FAIL_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#LOGIN_FAIL_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails loginFailDetails(LoginFailDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndLoginFailDetails(Tag.LOGIN_FAIL_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#LOGIN_FAIL_DETAILS}.
     *
     * @return The {@link LoginFailDetails} value associated with this instance
     *     if {@link #isLoginFailDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isLoginFailDetails} is {@code
     *     false}.
     */
    public LoginFailDetails getLoginFailDetailsValue() {
        if (this._tag != Tag.LOGIN_FAIL_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.LOGIN_FAIL_DETAILS, but was Tag." + this._tag.name());
        }
        return loginFailDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LOGIN_SUCCESS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LOGIN_SUCCESS_DETAILS}, {@code false} otherwise.
     */
    public boolean isLoginSuccessDetails() {
        return this._tag == Tag.LOGIN_SUCCESS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#LOGIN_SUCCESS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#LOGIN_SUCCESS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails loginSuccessDetails(LoginSuccessDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndLoginSuccessDetails(Tag.LOGIN_SUCCESS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#LOGIN_SUCCESS_DETAILS}.
     *
     * @return The {@link LoginSuccessDetails} value associated with this
     *     instance if {@link #isLoginSuccessDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isLoginSuccessDetails} is
     *     {@code false}.
     */
    public LoginSuccessDetails getLoginSuccessDetailsValue() {
        if (this._tag != Tag.LOGIN_SUCCESS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.LOGIN_SUCCESS_DETAILS, but was Tag." + this._tag.name());
        }
        return loginSuccessDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LOGOUT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LOGOUT_DETAILS}, {@code false} otherwise.
     */
    public boolean isLogoutDetails() {
        return this._tag == Tag.LOGOUT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#LOGOUT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#LOGOUT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails logoutDetails(LogoutDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndLogoutDetails(Tag.LOGOUT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#LOGOUT_DETAILS}.
     *
     * @return The {@link LogoutDetails} value associated with this instance if
     *     {@link #isLogoutDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isLogoutDetails} is {@code
     *     false}.
     */
    public LogoutDetails getLogoutDetailsValue() {
        if (this._tag != Tag.LOGOUT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.LOGOUT_DETAILS, but was Tag." + this._tag.name());
        }
        return logoutDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#RESELLER_SUPPORT_SESSION_END_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#RESELLER_SUPPORT_SESSION_END_DETAILS}, {@code false} otherwise.
     */
    public boolean isResellerSupportSessionEndDetails() {
        return this._tag == Tag.RESELLER_SUPPORT_SESSION_END_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#RESELLER_SUPPORT_SESSION_END_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#RESELLER_SUPPORT_SESSION_END_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails resellerSupportSessionEndDetails(ResellerSupportSessionEndDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndResellerSupportSessionEndDetails(Tag.RESELLER_SUPPORT_SESSION_END_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#RESELLER_SUPPORT_SESSION_END_DETAILS}.
     *
     * @return The {@link ResellerSupportSessionEndDetails} value associated
     *     with this instance if {@link #isResellerSupportSessionEndDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isResellerSupportSessionEndDetails} is {@code false}.
     */
    public ResellerSupportSessionEndDetails getResellerSupportSessionEndDetailsValue() {
        if (this._tag != Tag.RESELLER_SUPPORT_SESSION_END_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.RESELLER_SUPPORT_SESSION_END_DETAILS, but was Tag." + this._tag.name());
        }
        return resellerSupportSessionEndDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#RESELLER_SUPPORT_SESSION_START_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#RESELLER_SUPPORT_SESSION_START_DETAILS}, {@code false} otherwise.
     */
    public boolean isResellerSupportSessionStartDetails() {
        return this._tag == Tag.RESELLER_SUPPORT_SESSION_START_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#RESELLER_SUPPORT_SESSION_START_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#RESELLER_SUPPORT_SESSION_START_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails resellerSupportSessionStartDetails(ResellerSupportSessionStartDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndResellerSupportSessionStartDetails(Tag.RESELLER_SUPPORT_SESSION_START_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#RESELLER_SUPPORT_SESSION_START_DETAILS}.
     *
     * @return The {@link ResellerSupportSessionStartDetails} value associated
     *     with this instance if {@link #isResellerSupportSessionStartDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isResellerSupportSessionStartDetails} is {@code false}.
     */
    public ResellerSupportSessionStartDetails getResellerSupportSessionStartDetailsValue() {
        if (this._tag != Tag.RESELLER_SUPPORT_SESSION_START_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.RESELLER_SUPPORT_SESSION_START_DETAILS, but was Tag." + this._tag.name());
        }
        return resellerSupportSessionStartDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SIGN_IN_AS_SESSION_END_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SIGN_IN_AS_SESSION_END_DETAILS}, {@code false} otherwise.
     */
    public boolean isSignInAsSessionEndDetails() {
        return this._tag == Tag.SIGN_IN_AS_SESSION_END_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SIGN_IN_AS_SESSION_END_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SIGN_IN_AS_SESSION_END_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails signInAsSessionEndDetails(SignInAsSessionEndDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSignInAsSessionEndDetails(Tag.SIGN_IN_AS_SESSION_END_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SIGN_IN_AS_SESSION_END_DETAILS}.
     *
     * @return The {@link SignInAsSessionEndDetails} value associated with this
     *     instance if {@link #isSignInAsSessionEndDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSignInAsSessionEndDetails} is
     *     {@code false}.
     */
    public SignInAsSessionEndDetails getSignInAsSessionEndDetailsValue() {
        if (this._tag != Tag.SIGN_IN_AS_SESSION_END_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SIGN_IN_AS_SESSION_END_DETAILS, but was Tag." + this._tag.name());
        }
        return signInAsSessionEndDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SIGN_IN_AS_SESSION_START_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SIGN_IN_AS_SESSION_START_DETAILS}, {@code false} otherwise.
     */
    public boolean isSignInAsSessionStartDetails() {
        return this._tag == Tag.SIGN_IN_AS_SESSION_START_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SIGN_IN_AS_SESSION_START_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SIGN_IN_AS_SESSION_START_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails signInAsSessionStartDetails(SignInAsSessionStartDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSignInAsSessionStartDetails(Tag.SIGN_IN_AS_SESSION_START_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SIGN_IN_AS_SESSION_START_DETAILS}.
     *
     * @return The {@link SignInAsSessionStartDetails} value associated with
     *     this instance if {@link #isSignInAsSessionStartDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isSignInAsSessionStartDetails}
     *     is {@code false}.
     */
    public SignInAsSessionStartDetails getSignInAsSessionStartDetailsValue() {
        if (this._tag != Tag.SIGN_IN_AS_SESSION_START_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SIGN_IN_AS_SESSION_START_DETAILS, but was Tag." + this._tag.name());
        }
        return signInAsSessionStartDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_ERROR_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_ERROR_DETAILS}, {@code false} otherwise.
     */
    public boolean isSsoErrorDetails() {
        return this._tag == Tag.SSO_ERROR_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SSO_ERROR_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SSO_ERROR_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails ssoErrorDetails(SsoErrorDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSsoErrorDetails(Tag.SSO_ERROR_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SSO_ERROR_DETAILS}.
     *
     * @return The {@link SsoErrorDetails} value associated with this instance
     *     if {@link #isSsoErrorDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoErrorDetails} is {@code
     *     false}.
     */
    public SsoErrorDetails getSsoErrorDetailsValue() {
        if (this._tag != Tag.SSO_ERROR_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_ERROR_DETAILS, but was Tag." + this._tag.name());
        }
        return ssoErrorDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#CREATE_TEAM_INVITE_LINK_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#CREATE_TEAM_INVITE_LINK_DETAILS}, {@code false} otherwise.
     */
    public boolean isCreateTeamInviteLinkDetails() {
        return this._tag == Tag.CREATE_TEAM_INVITE_LINK_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#CREATE_TEAM_INVITE_LINK_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#CREATE_TEAM_INVITE_LINK_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails createTeamInviteLinkDetails(CreateTeamInviteLinkDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndCreateTeamInviteLinkDetails(Tag.CREATE_TEAM_INVITE_LINK_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#CREATE_TEAM_INVITE_LINK_DETAILS}.
     *
     * @return The {@link CreateTeamInviteLinkDetails} value associated with
     *     this instance if {@link #isCreateTeamInviteLinkDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isCreateTeamInviteLinkDetails}
     *     is {@code false}.
     */
    public CreateTeamInviteLinkDetails getCreateTeamInviteLinkDetailsValue() {
        if (this._tag != Tag.CREATE_TEAM_INVITE_LINK_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.CREATE_TEAM_INVITE_LINK_DETAILS, but was Tag." + this._tag.name());
        }
        return createTeamInviteLinkDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DELETE_TEAM_INVITE_LINK_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DELETE_TEAM_INVITE_LINK_DETAILS}, {@code false} otherwise.
     */
    public boolean isDeleteTeamInviteLinkDetails() {
        return this._tag == Tag.DELETE_TEAM_INVITE_LINK_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DELETE_TEAM_INVITE_LINK_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DELETE_TEAM_INVITE_LINK_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails deleteTeamInviteLinkDetails(DeleteTeamInviteLinkDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDeleteTeamInviteLinkDetails(Tag.DELETE_TEAM_INVITE_LINK_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DELETE_TEAM_INVITE_LINK_DETAILS}.
     *
     * @return The {@link DeleteTeamInviteLinkDetails} value associated with
     *     this instance if {@link #isDeleteTeamInviteLinkDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isDeleteTeamInviteLinkDetails}
     *     is {@code false}.
     */
    public DeleteTeamInviteLinkDetails getDeleteTeamInviteLinkDetailsValue() {
        if (this._tag != Tag.DELETE_TEAM_INVITE_LINK_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DELETE_TEAM_INVITE_LINK_DETAILS, but was Tag." + this._tag.name());
        }
        return deleteTeamInviteLinkDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_ADD_EXTERNAL_ID_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_ADD_EXTERNAL_ID_DETAILS}, {@code false} otherwise.
     */
    public boolean isMemberAddExternalIdDetails() {
        return this._tag == Tag.MEMBER_ADD_EXTERNAL_ID_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_ADD_EXTERNAL_ID_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_ADD_EXTERNAL_ID_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberAddExternalIdDetails(MemberAddExternalIdDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberAddExternalIdDetails(Tag.MEMBER_ADD_EXTERNAL_ID_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_ADD_EXTERNAL_ID_DETAILS}.
     *
     * @return The {@link MemberAddExternalIdDetails} value associated with this
     *     instance if {@link #isMemberAddExternalIdDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isMemberAddExternalIdDetails}
     *     is {@code false}.
     */
    public MemberAddExternalIdDetails getMemberAddExternalIdDetailsValue() {
        if (this._tag != Tag.MEMBER_ADD_EXTERNAL_ID_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_ADD_EXTERNAL_ID_DETAILS, but was Tag." + this._tag.name());
        }
        return memberAddExternalIdDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_ADD_NAME_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_ADD_NAME_DETAILS}, {@code false} otherwise.
     */
    public boolean isMemberAddNameDetails() {
        return this._tag == Tag.MEMBER_ADD_NAME_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_ADD_NAME_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_ADD_NAME_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberAddNameDetails(MemberAddNameDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberAddNameDetails(Tag.MEMBER_ADD_NAME_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#MEMBER_ADD_NAME_DETAILS}.
     *
     * @return The {@link MemberAddNameDetails} value associated with this
     *     instance if {@link #isMemberAddNameDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isMemberAddNameDetails} is
     *     {@code false}.
     */
    public MemberAddNameDetails getMemberAddNameDetailsValue() {
        if (this._tag != Tag.MEMBER_ADD_NAME_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_ADD_NAME_DETAILS, but was Tag." + this._tag.name());
        }
        return memberAddNameDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_CHANGE_ADMIN_ROLE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_CHANGE_ADMIN_ROLE_DETAILS}, {@code false} otherwise.
     */
    public boolean isMemberChangeAdminRoleDetails() {
        return this._tag == Tag.MEMBER_CHANGE_ADMIN_ROLE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_CHANGE_ADMIN_ROLE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_CHANGE_ADMIN_ROLE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberChangeAdminRoleDetails(MemberChangeAdminRoleDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberChangeAdminRoleDetails(Tag.MEMBER_CHANGE_ADMIN_ROLE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_CHANGE_ADMIN_ROLE_DETAILS}.
     *
     * @return The {@link MemberChangeAdminRoleDetails} value associated with
     *     this instance if {@link #isMemberChangeAdminRoleDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isMemberChangeAdminRoleDetails}
     *     is {@code false}.
     */
    public MemberChangeAdminRoleDetails getMemberChangeAdminRoleDetailsValue() {
        if (this._tag != Tag.MEMBER_CHANGE_ADMIN_ROLE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_CHANGE_ADMIN_ROLE_DETAILS, but was Tag." + this._tag.name());
        }
        return memberChangeAdminRoleDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_CHANGE_EMAIL_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_CHANGE_EMAIL_DETAILS}, {@code false} otherwise.
     */
    public boolean isMemberChangeEmailDetails() {
        return this._tag == Tag.MEMBER_CHANGE_EMAIL_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_CHANGE_EMAIL_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_CHANGE_EMAIL_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberChangeEmailDetails(MemberChangeEmailDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberChangeEmailDetails(Tag.MEMBER_CHANGE_EMAIL_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#MEMBER_CHANGE_EMAIL_DETAILS}.
     *
     * @return The {@link MemberChangeEmailDetails} value associated with this
     *     instance if {@link #isMemberChangeEmailDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isMemberChangeEmailDetails} is
     *     {@code false}.
     */
    public MemberChangeEmailDetails getMemberChangeEmailDetailsValue() {
        if (this._tag != Tag.MEMBER_CHANGE_EMAIL_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_CHANGE_EMAIL_DETAILS, but was Tag." + this._tag.name());
        }
        return memberChangeEmailDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_CHANGE_EXTERNAL_ID_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_CHANGE_EXTERNAL_ID_DETAILS}, {@code false} otherwise.
     */
    public boolean isMemberChangeExternalIdDetails() {
        return this._tag == Tag.MEMBER_CHANGE_EXTERNAL_ID_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_CHANGE_EXTERNAL_ID_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_CHANGE_EXTERNAL_ID_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberChangeExternalIdDetails(MemberChangeExternalIdDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberChangeExternalIdDetails(Tag.MEMBER_CHANGE_EXTERNAL_ID_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_CHANGE_EXTERNAL_ID_DETAILS}.
     *
     * @return The {@link MemberChangeExternalIdDetails} value associated with
     *     this instance if {@link #isMemberChangeExternalIdDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberChangeExternalIdDetails} is {@code false}.
     */
    public MemberChangeExternalIdDetails getMemberChangeExternalIdDetailsValue() {
        if (this._tag != Tag.MEMBER_CHANGE_EXTERNAL_ID_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_CHANGE_EXTERNAL_ID_DETAILS, but was Tag." + this._tag.name());
        }
        return memberChangeExternalIdDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_CHANGE_MEMBERSHIP_TYPE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_CHANGE_MEMBERSHIP_TYPE_DETAILS}, {@code false} otherwise.
     */
    public boolean isMemberChangeMembershipTypeDetails() {
        return this._tag == Tag.MEMBER_CHANGE_MEMBERSHIP_TYPE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_CHANGE_MEMBERSHIP_TYPE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_CHANGE_MEMBERSHIP_TYPE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberChangeMembershipTypeDetails(MemberChangeMembershipTypeDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberChangeMembershipTypeDetails(Tag.MEMBER_CHANGE_MEMBERSHIP_TYPE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_CHANGE_MEMBERSHIP_TYPE_DETAILS}.
     *
     * @return The {@link MemberChangeMembershipTypeDetails} value associated
     *     with this instance if {@link #isMemberChangeMembershipTypeDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberChangeMembershipTypeDetails} is {@code false}.
     */
    public MemberChangeMembershipTypeDetails getMemberChangeMembershipTypeDetailsValue() {
        if (this._tag != Tag.MEMBER_CHANGE_MEMBERSHIP_TYPE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_CHANGE_MEMBERSHIP_TYPE_DETAILS, but was Tag." + this._tag.name());
        }
        return memberChangeMembershipTypeDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_CHANGE_NAME_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_CHANGE_NAME_DETAILS}, {@code false} otherwise.
     */
    public boolean isMemberChangeNameDetails() {
        return this._tag == Tag.MEMBER_CHANGE_NAME_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_CHANGE_NAME_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_CHANGE_NAME_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberChangeNameDetails(MemberChangeNameDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberChangeNameDetails(Tag.MEMBER_CHANGE_NAME_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#MEMBER_CHANGE_NAME_DETAILS}.
     *
     * @return The {@link MemberChangeNameDetails} value associated with this
     *     instance if {@link #isMemberChangeNameDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isMemberChangeNameDetails} is
     *     {@code false}.
     */
    public MemberChangeNameDetails getMemberChangeNameDetailsValue() {
        if (this._tag != Tag.MEMBER_CHANGE_NAME_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_CHANGE_NAME_DETAILS, but was Tag." + this._tag.name());
        }
        return memberChangeNameDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_CHANGE_RESELLER_ROLE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_CHANGE_RESELLER_ROLE_DETAILS}, {@code false} otherwise.
     */
    public boolean isMemberChangeResellerRoleDetails() {
        return this._tag == Tag.MEMBER_CHANGE_RESELLER_ROLE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_CHANGE_RESELLER_ROLE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_CHANGE_RESELLER_ROLE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberChangeResellerRoleDetails(MemberChangeResellerRoleDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberChangeResellerRoleDetails(Tag.MEMBER_CHANGE_RESELLER_ROLE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_CHANGE_RESELLER_ROLE_DETAILS}.
     *
     * @return The {@link MemberChangeResellerRoleDetails} value associated with
     *     this instance if {@link #isMemberChangeResellerRoleDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberChangeResellerRoleDetails} is {@code false}.
     */
    public MemberChangeResellerRoleDetails getMemberChangeResellerRoleDetailsValue() {
        if (this._tag != Tag.MEMBER_CHANGE_RESELLER_ROLE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_CHANGE_RESELLER_ROLE_DETAILS, but was Tag." + this._tag.name());
        }
        return memberChangeResellerRoleDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_CHANGE_STATUS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_CHANGE_STATUS_DETAILS}, {@code false} otherwise.
     */
    public boolean isMemberChangeStatusDetails() {
        return this._tag == Tag.MEMBER_CHANGE_STATUS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_CHANGE_STATUS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_CHANGE_STATUS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberChangeStatusDetails(MemberChangeStatusDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberChangeStatusDetails(Tag.MEMBER_CHANGE_STATUS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#MEMBER_CHANGE_STATUS_DETAILS}.
     *
     * @return The {@link MemberChangeStatusDetails} value associated with this
     *     instance if {@link #isMemberChangeStatusDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isMemberChangeStatusDetails} is
     *     {@code false}.
     */
    public MemberChangeStatusDetails getMemberChangeStatusDetailsValue() {
        if (this._tag != Tag.MEMBER_CHANGE_STATUS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_CHANGE_STATUS_DETAILS, but was Tag." + this._tag.name());
        }
        return memberChangeStatusDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_DELETE_MANUAL_CONTACTS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_DELETE_MANUAL_CONTACTS_DETAILS}, {@code false} otherwise.
     */
    public boolean isMemberDeleteManualContactsDetails() {
        return this._tag == Tag.MEMBER_DELETE_MANUAL_CONTACTS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_DELETE_MANUAL_CONTACTS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_DELETE_MANUAL_CONTACTS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberDeleteManualContactsDetails(MemberDeleteManualContactsDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberDeleteManualContactsDetails(Tag.MEMBER_DELETE_MANUAL_CONTACTS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_DELETE_MANUAL_CONTACTS_DETAILS}.
     *
     * @return The {@link MemberDeleteManualContactsDetails} value associated
     *     with this instance if {@link #isMemberDeleteManualContactsDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberDeleteManualContactsDetails} is {@code false}.
     */
    public MemberDeleteManualContactsDetails getMemberDeleteManualContactsDetailsValue() {
        if (this._tag != Tag.MEMBER_DELETE_MANUAL_CONTACTS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_DELETE_MANUAL_CONTACTS_DETAILS, but was Tag." + this._tag.name());
        }
        return memberDeleteManualContactsDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_DELETE_PROFILE_PHOTO_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_DELETE_PROFILE_PHOTO_DETAILS}, {@code false} otherwise.
     */
    public boolean isMemberDeleteProfilePhotoDetails() {
        return this._tag == Tag.MEMBER_DELETE_PROFILE_PHOTO_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_DELETE_PROFILE_PHOTO_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_DELETE_PROFILE_PHOTO_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberDeleteProfilePhotoDetails(MemberDeleteProfilePhotoDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberDeleteProfilePhotoDetails(Tag.MEMBER_DELETE_PROFILE_PHOTO_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_DELETE_PROFILE_PHOTO_DETAILS}.
     *
     * @return The {@link MemberDeleteProfilePhotoDetails} value associated with
     *     this instance if {@link #isMemberDeleteProfilePhotoDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberDeleteProfilePhotoDetails} is {@code false}.
     */
    public MemberDeleteProfilePhotoDetails getMemberDeleteProfilePhotoDetailsValue() {
        if (this._tag != Tag.MEMBER_DELETE_PROFILE_PHOTO_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_DELETE_PROFILE_PHOTO_DETAILS, but was Tag." + this._tag.name());
        }
        return memberDeleteProfilePhotoDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS_DETAILS}, {@code
     *     false} otherwise.
     */
    public boolean isMemberPermanentlyDeleteAccountContentsDetails() {
        return this._tag == Tag.MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberPermanentlyDeleteAccountContentsDetails(MemberPermanentlyDeleteAccountContentsDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberPermanentlyDeleteAccountContentsDetails(Tag.MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS_DETAILS}.
     *
     * @return The {@link MemberPermanentlyDeleteAccountContentsDetails} value
     *     associated with this instance if {@link
     *     #isMemberPermanentlyDeleteAccountContentsDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberPermanentlyDeleteAccountContentsDetails} is {@code false}.
     */
    public MemberPermanentlyDeleteAccountContentsDetails getMemberPermanentlyDeleteAccountContentsDetailsValue() {
        if (this._tag != Tag.MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS_DETAILS, but was Tag." + this._tag.name());
        }
        return memberPermanentlyDeleteAccountContentsDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_REMOVE_EXTERNAL_ID_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_REMOVE_EXTERNAL_ID_DETAILS}, {@code false} otherwise.
     */
    public boolean isMemberRemoveExternalIdDetails() {
        return this._tag == Tag.MEMBER_REMOVE_EXTERNAL_ID_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_REMOVE_EXTERNAL_ID_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_REMOVE_EXTERNAL_ID_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberRemoveExternalIdDetails(MemberRemoveExternalIdDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberRemoveExternalIdDetails(Tag.MEMBER_REMOVE_EXTERNAL_ID_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_REMOVE_EXTERNAL_ID_DETAILS}.
     *
     * @return The {@link MemberRemoveExternalIdDetails} value associated with
     *     this instance if {@link #isMemberRemoveExternalIdDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberRemoveExternalIdDetails} is {@code false}.
     */
    public MemberRemoveExternalIdDetails getMemberRemoveExternalIdDetailsValue() {
        if (this._tag != Tag.MEMBER_REMOVE_EXTERNAL_ID_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_REMOVE_EXTERNAL_ID_DETAILS, but was Tag." + this._tag.name());
        }
        return memberRemoveExternalIdDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SET_PROFILE_PHOTO_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SET_PROFILE_PHOTO_DETAILS}, {@code false} otherwise.
     */
    public boolean isMemberSetProfilePhotoDetails() {
        return this._tag == Tag.MEMBER_SET_PROFILE_PHOTO_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_SET_PROFILE_PHOTO_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_SET_PROFILE_PHOTO_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberSetProfilePhotoDetails(MemberSetProfilePhotoDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberSetProfilePhotoDetails(Tag.MEMBER_SET_PROFILE_PHOTO_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_SET_PROFILE_PHOTO_DETAILS}.
     *
     * @return The {@link MemberSetProfilePhotoDetails} value associated with
     *     this instance if {@link #isMemberSetProfilePhotoDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isMemberSetProfilePhotoDetails}
     *     is {@code false}.
     */
    public MemberSetProfilePhotoDetails getMemberSetProfilePhotoDetailsValue() {
        if (this._tag != Tag.MEMBER_SET_PROFILE_PHOTO_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SET_PROFILE_PHOTO_DETAILS, but was Tag." + this._tag.name());
        }
        return memberSetProfilePhotoDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isMemberSpaceLimitsAddCustomQuotaDetails() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberSpaceLimitsAddCustomQuotaDetails(MemberSpaceLimitsAddCustomQuotaDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberSpaceLimitsAddCustomQuotaDetails(Tag.MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA_DETAILS}.
     *
     * @return The {@link MemberSpaceLimitsAddCustomQuotaDetails} value
     *     associated with this instance if {@link
     *     #isMemberSpaceLimitsAddCustomQuotaDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberSpaceLimitsAddCustomQuotaDetails} is {@code false}.
     */
    public MemberSpaceLimitsAddCustomQuotaDetails getMemberSpaceLimitsAddCustomQuotaDetailsValue() {
        if (this._tag != Tag.MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA_DETAILS, but was Tag." + this._tag.name());
        }
        return memberSpaceLimitsAddCustomQuotaDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isMemberSpaceLimitsChangeCustomQuotaDetails() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberSpaceLimitsChangeCustomQuotaDetails(MemberSpaceLimitsChangeCustomQuotaDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberSpaceLimitsChangeCustomQuotaDetails(Tag.MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA_DETAILS}.
     *
     * @return The {@link MemberSpaceLimitsChangeCustomQuotaDetails} value
     *     associated with this instance if {@link
     *     #isMemberSpaceLimitsChangeCustomQuotaDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberSpaceLimitsChangeCustomQuotaDetails} is {@code false}.
     */
    public MemberSpaceLimitsChangeCustomQuotaDetails getMemberSpaceLimitsChangeCustomQuotaDetailsValue() {
        if (this._tag != Tag.MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA_DETAILS, but was Tag." + this._tag.name());
        }
        return memberSpaceLimitsChangeCustomQuotaDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SPACE_LIMITS_CHANGE_STATUS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SPACE_LIMITS_CHANGE_STATUS_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isMemberSpaceLimitsChangeStatusDetails() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_CHANGE_STATUS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_SPACE_LIMITS_CHANGE_STATUS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_SPACE_LIMITS_CHANGE_STATUS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberSpaceLimitsChangeStatusDetails(MemberSpaceLimitsChangeStatusDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberSpaceLimitsChangeStatusDetails(Tag.MEMBER_SPACE_LIMITS_CHANGE_STATUS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_SPACE_LIMITS_CHANGE_STATUS_DETAILS}.
     *
     * @return The {@link MemberSpaceLimitsChangeStatusDetails} value associated
     *     with this instance if {@link #isMemberSpaceLimitsChangeStatusDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberSpaceLimitsChangeStatusDetails} is {@code false}.
     */
    public MemberSpaceLimitsChangeStatusDetails getMemberSpaceLimitsChangeStatusDetailsValue() {
        if (this._tag != Tag.MEMBER_SPACE_LIMITS_CHANGE_STATUS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_CHANGE_STATUS_DETAILS, but was Tag." + this._tag.name());
        }
        return memberSpaceLimitsChangeStatusDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isMemberSpaceLimitsRemoveCustomQuotaDetails() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberSpaceLimitsRemoveCustomQuotaDetails(MemberSpaceLimitsRemoveCustomQuotaDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberSpaceLimitsRemoveCustomQuotaDetails(Tag.MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA_DETAILS}.
     *
     * @return The {@link MemberSpaceLimitsRemoveCustomQuotaDetails} value
     *     associated with this instance if {@link
     *     #isMemberSpaceLimitsRemoveCustomQuotaDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberSpaceLimitsRemoveCustomQuotaDetails} is {@code false}.
     */
    public MemberSpaceLimitsRemoveCustomQuotaDetails getMemberSpaceLimitsRemoveCustomQuotaDetailsValue() {
        if (this._tag != Tag.MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA_DETAILS, but was Tag." + this._tag.name());
        }
        return memberSpaceLimitsRemoveCustomQuotaDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SUGGEST_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SUGGEST_DETAILS}, {@code false} otherwise.
     */
    public boolean isMemberSuggestDetails() {
        return this._tag == Tag.MEMBER_SUGGEST_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_SUGGEST_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_SUGGEST_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberSuggestDetails(MemberSuggestDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberSuggestDetails(Tag.MEMBER_SUGGEST_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#MEMBER_SUGGEST_DETAILS}.
     *
     * @return The {@link MemberSuggestDetails} value associated with this
     *     instance if {@link #isMemberSuggestDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isMemberSuggestDetails} is
     *     {@code false}.
     */
    public MemberSuggestDetails getMemberSuggestDetailsValue() {
        if (this._tag != Tag.MEMBER_SUGGEST_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SUGGEST_DETAILS, but was Tag." + this._tag.name());
        }
        return memberSuggestDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_TRANSFER_ACCOUNT_CONTENTS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_TRANSFER_ACCOUNT_CONTENTS_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isMemberTransferAccountContentsDetails() {
        return this._tag == Tag.MEMBER_TRANSFER_ACCOUNT_CONTENTS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_TRANSFER_ACCOUNT_CONTENTS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_TRANSFER_ACCOUNT_CONTENTS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberTransferAccountContentsDetails(MemberTransferAccountContentsDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberTransferAccountContentsDetails(Tag.MEMBER_TRANSFER_ACCOUNT_CONTENTS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_TRANSFER_ACCOUNT_CONTENTS_DETAILS}.
     *
     * @return The {@link MemberTransferAccountContentsDetails} value associated
     *     with this instance if {@link #isMemberTransferAccountContentsDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberTransferAccountContentsDetails} is {@code false}.
     */
    public MemberTransferAccountContentsDetails getMemberTransferAccountContentsDetailsValue() {
        if (this._tag != Tag.MEMBER_TRANSFER_ACCOUNT_CONTENTS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_TRANSFER_ACCOUNT_CONTENTS_DETAILS, but was Tag." + this._tag.name());
        }
        return memberTransferAccountContentsDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PENDING_SECONDARY_EMAIL_ADDED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PENDING_SECONDARY_EMAIL_ADDED_DETAILS}, {@code false} otherwise.
     */
    public boolean isPendingSecondaryEmailAddedDetails() {
        return this._tag == Tag.PENDING_SECONDARY_EMAIL_ADDED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PENDING_SECONDARY_EMAIL_ADDED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PENDING_SECONDARY_EMAIL_ADDED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails pendingSecondaryEmailAddedDetails(PendingSecondaryEmailAddedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPendingSecondaryEmailAddedDetails(Tag.PENDING_SECONDARY_EMAIL_ADDED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PENDING_SECONDARY_EMAIL_ADDED_DETAILS}.
     *
     * @return The {@link PendingSecondaryEmailAddedDetails} value associated
     *     with this instance if {@link #isPendingSecondaryEmailAddedDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPendingSecondaryEmailAddedDetails} is {@code false}.
     */
    public PendingSecondaryEmailAddedDetails getPendingSecondaryEmailAddedDetailsValue() {
        if (this._tag != Tag.PENDING_SECONDARY_EMAIL_ADDED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PENDING_SECONDARY_EMAIL_ADDED_DETAILS, but was Tag." + this._tag.name());
        }
        return pendingSecondaryEmailAddedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SECONDARY_EMAIL_DELETED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SECONDARY_EMAIL_DELETED_DETAILS}, {@code false} otherwise.
     */
    public boolean isSecondaryEmailDeletedDetails() {
        return this._tag == Tag.SECONDARY_EMAIL_DELETED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SECONDARY_EMAIL_DELETED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SECONDARY_EMAIL_DELETED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails secondaryEmailDeletedDetails(SecondaryEmailDeletedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSecondaryEmailDeletedDetails(Tag.SECONDARY_EMAIL_DELETED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SECONDARY_EMAIL_DELETED_DETAILS}.
     *
     * @return The {@link SecondaryEmailDeletedDetails} value associated with
     *     this instance if {@link #isSecondaryEmailDeletedDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isSecondaryEmailDeletedDetails}
     *     is {@code false}.
     */
    public SecondaryEmailDeletedDetails getSecondaryEmailDeletedDetailsValue() {
        if (this._tag != Tag.SECONDARY_EMAIL_DELETED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SECONDARY_EMAIL_DELETED_DETAILS, but was Tag." + this._tag.name());
        }
        return secondaryEmailDeletedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SECONDARY_EMAIL_VERIFIED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SECONDARY_EMAIL_VERIFIED_DETAILS}, {@code false} otherwise.
     */
    public boolean isSecondaryEmailVerifiedDetails() {
        return this._tag == Tag.SECONDARY_EMAIL_VERIFIED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SECONDARY_EMAIL_VERIFIED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SECONDARY_EMAIL_VERIFIED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails secondaryEmailVerifiedDetails(SecondaryEmailVerifiedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSecondaryEmailVerifiedDetails(Tag.SECONDARY_EMAIL_VERIFIED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SECONDARY_EMAIL_VERIFIED_DETAILS}.
     *
     * @return The {@link SecondaryEmailVerifiedDetails} value associated with
     *     this instance if {@link #isSecondaryEmailVerifiedDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSecondaryEmailVerifiedDetails} is {@code false}.
     */
    public SecondaryEmailVerifiedDetails getSecondaryEmailVerifiedDetailsValue() {
        if (this._tag != Tag.SECONDARY_EMAIL_VERIFIED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SECONDARY_EMAIL_VERIFIED_DETAILS, but was Tag." + this._tag.name());
        }
        return secondaryEmailVerifiedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SECONDARY_MAILS_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SECONDARY_MAILS_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     */
    public boolean isSecondaryMailsPolicyChangedDetails() {
        return this._tag == Tag.SECONDARY_MAILS_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SECONDARY_MAILS_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SECONDARY_MAILS_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails secondaryMailsPolicyChangedDetails(SecondaryMailsPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSecondaryMailsPolicyChangedDetails(Tag.SECONDARY_MAILS_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SECONDARY_MAILS_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link SecondaryMailsPolicyChangedDetails} value associated
     *     with this instance if {@link #isSecondaryMailsPolicyChangedDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSecondaryMailsPolicyChangedDetails} is {@code false}.
     */
    public SecondaryMailsPolicyChangedDetails getSecondaryMailsPolicyChangedDetailsValue() {
        if (this._tag != Tag.SECONDARY_MAILS_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SECONDARY_MAILS_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return secondaryMailsPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#BINDER_ADD_PAGE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#BINDER_ADD_PAGE_DETAILS}, {@code false} otherwise.
     */
    public boolean isBinderAddPageDetails() {
        return this._tag == Tag.BINDER_ADD_PAGE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#BINDER_ADD_PAGE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#BINDER_ADD_PAGE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails binderAddPageDetails(BinderAddPageDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndBinderAddPageDetails(Tag.BINDER_ADD_PAGE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#BINDER_ADD_PAGE_DETAILS}.
     *
     * @return The {@link BinderAddPageDetails} value associated with this
     *     instance if {@link #isBinderAddPageDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isBinderAddPageDetails} is
     *     {@code false}.
     */
    public BinderAddPageDetails getBinderAddPageDetailsValue() {
        if (this._tag != Tag.BINDER_ADD_PAGE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.BINDER_ADD_PAGE_DETAILS, but was Tag." + this._tag.name());
        }
        return binderAddPageDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#BINDER_ADD_SECTION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#BINDER_ADD_SECTION_DETAILS}, {@code false} otherwise.
     */
    public boolean isBinderAddSectionDetails() {
        return this._tag == Tag.BINDER_ADD_SECTION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#BINDER_ADD_SECTION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#BINDER_ADD_SECTION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails binderAddSectionDetails(BinderAddSectionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndBinderAddSectionDetails(Tag.BINDER_ADD_SECTION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#BINDER_ADD_SECTION_DETAILS}.
     *
     * @return The {@link BinderAddSectionDetails} value associated with this
     *     instance if {@link #isBinderAddSectionDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isBinderAddSectionDetails} is
     *     {@code false}.
     */
    public BinderAddSectionDetails getBinderAddSectionDetailsValue() {
        if (this._tag != Tag.BINDER_ADD_SECTION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.BINDER_ADD_SECTION_DETAILS, but was Tag." + this._tag.name());
        }
        return binderAddSectionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#BINDER_REMOVE_PAGE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#BINDER_REMOVE_PAGE_DETAILS}, {@code false} otherwise.
     */
    public boolean isBinderRemovePageDetails() {
        return this._tag == Tag.BINDER_REMOVE_PAGE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#BINDER_REMOVE_PAGE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#BINDER_REMOVE_PAGE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails binderRemovePageDetails(BinderRemovePageDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndBinderRemovePageDetails(Tag.BINDER_REMOVE_PAGE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#BINDER_REMOVE_PAGE_DETAILS}.
     *
     * @return The {@link BinderRemovePageDetails} value associated with this
     *     instance if {@link #isBinderRemovePageDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isBinderRemovePageDetails} is
     *     {@code false}.
     */
    public BinderRemovePageDetails getBinderRemovePageDetailsValue() {
        if (this._tag != Tag.BINDER_REMOVE_PAGE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.BINDER_REMOVE_PAGE_DETAILS, but was Tag." + this._tag.name());
        }
        return binderRemovePageDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#BINDER_REMOVE_SECTION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#BINDER_REMOVE_SECTION_DETAILS}, {@code false} otherwise.
     */
    public boolean isBinderRemoveSectionDetails() {
        return this._tag == Tag.BINDER_REMOVE_SECTION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#BINDER_REMOVE_SECTION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#BINDER_REMOVE_SECTION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails binderRemoveSectionDetails(BinderRemoveSectionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndBinderRemoveSectionDetails(Tag.BINDER_REMOVE_SECTION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#BINDER_REMOVE_SECTION_DETAILS}.
     *
     * @return The {@link BinderRemoveSectionDetails} value associated with this
     *     instance if {@link #isBinderRemoveSectionDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isBinderRemoveSectionDetails}
     *     is {@code false}.
     */
    public BinderRemoveSectionDetails getBinderRemoveSectionDetailsValue() {
        if (this._tag != Tag.BINDER_REMOVE_SECTION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.BINDER_REMOVE_SECTION_DETAILS, but was Tag." + this._tag.name());
        }
        return binderRemoveSectionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#BINDER_RENAME_PAGE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#BINDER_RENAME_PAGE_DETAILS}, {@code false} otherwise.
     */
    public boolean isBinderRenamePageDetails() {
        return this._tag == Tag.BINDER_RENAME_PAGE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#BINDER_RENAME_PAGE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#BINDER_RENAME_PAGE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails binderRenamePageDetails(BinderRenamePageDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndBinderRenamePageDetails(Tag.BINDER_RENAME_PAGE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#BINDER_RENAME_PAGE_DETAILS}.
     *
     * @return The {@link BinderRenamePageDetails} value associated with this
     *     instance if {@link #isBinderRenamePageDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isBinderRenamePageDetails} is
     *     {@code false}.
     */
    public BinderRenamePageDetails getBinderRenamePageDetailsValue() {
        if (this._tag != Tag.BINDER_RENAME_PAGE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.BINDER_RENAME_PAGE_DETAILS, but was Tag." + this._tag.name());
        }
        return binderRenamePageDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#BINDER_RENAME_SECTION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#BINDER_RENAME_SECTION_DETAILS}, {@code false} otherwise.
     */
    public boolean isBinderRenameSectionDetails() {
        return this._tag == Tag.BINDER_RENAME_SECTION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#BINDER_RENAME_SECTION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#BINDER_RENAME_SECTION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails binderRenameSectionDetails(BinderRenameSectionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndBinderRenameSectionDetails(Tag.BINDER_RENAME_SECTION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#BINDER_RENAME_SECTION_DETAILS}.
     *
     * @return The {@link BinderRenameSectionDetails} value associated with this
     *     instance if {@link #isBinderRenameSectionDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isBinderRenameSectionDetails}
     *     is {@code false}.
     */
    public BinderRenameSectionDetails getBinderRenameSectionDetailsValue() {
        if (this._tag != Tag.BINDER_RENAME_SECTION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.BINDER_RENAME_SECTION_DETAILS, but was Tag." + this._tag.name());
        }
        return binderRenameSectionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#BINDER_REORDER_PAGE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#BINDER_REORDER_PAGE_DETAILS}, {@code false} otherwise.
     */
    public boolean isBinderReorderPageDetails() {
        return this._tag == Tag.BINDER_REORDER_PAGE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#BINDER_REORDER_PAGE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#BINDER_REORDER_PAGE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails binderReorderPageDetails(BinderReorderPageDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndBinderReorderPageDetails(Tag.BINDER_REORDER_PAGE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#BINDER_REORDER_PAGE_DETAILS}.
     *
     * @return The {@link BinderReorderPageDetails} value associated with this
     *     instance if {@link #isBinderReorderPageDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isBinderReorderPageDetails} is
     *     {@code false}.
     */
    public BinderReorderPageDetails getBinderReorderPageDetailsValue() {
        if (this._tag != Tag.BINDER_REORDER_PAGE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.BINDER_REORDER_PAGE_DETAILS, but was Tag." + this._tag.name());
        }
        return binderReorderPageDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#BINDER_REORDER_SECTION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#BINDER_REORDER_SECTION_DETAILS}, {@code false} otherwise.
     */
    public boolean isBinderReorderSectionDetails() {
        return this._tag == Tag.BINDER_REORDER_SECTION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#BINDER_REORDER_SECTION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#BINDER_REORDER_SECTION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails binderReorderSectionDetails(BinderReorderSectionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndBinderReorderSectionDetails(Tag.BINDER_REORDER_SECTION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#BINDER_REORDER_SECTION_DETAILS}.
     *
     * @return The {@link BinderReorderSectionDetails} value associated with
     *     this instance if {@link #isBinderReorderSectionDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isBinderReorderSectionDetails}
     *     is {@code false}.
     */
    public BinderReorderSectionDetails getBinderReorderSectionDetailsValue() {
        if (this._tag != Tag.BINDER_REORDER_SECTION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.BINDER_REORDER_SECTION_DETAILS, but was Tag." + this._tag.name());
        }
        return binderReorderSectionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CONTENT_ADD_MEMBER_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CONTENT_ADD_MEMBER_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperContentAddMemberDetails() {
        return this._tag == Tag.PAPER_CONTENT_ADD_MEMBER_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_CONTENT_ADD_MEMBER_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_CONTENT_ADD_MEMBER_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperContentAddMemberDetails(PaperContentAddMemberDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperContentAddMemberDetails(Tag.PAPER_CONTENT_ADD_MEMBER_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_CONTENT_ADD_MEMBER_DETAILS}.
     *
     * @return The {@link PaperContentAddMemberDetails} value associated with
     *     this instance if {@link #isPaperContentAddMemberDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isPaperContentAddMemberDetails}
     *     is {@code false}.
     */
    public PaperContentAddMemberDetails getPaperContentAddMemberDetailsValue() {
        if (this._tag != Tag.PAPER_CONTENT_ADD_MEMBER_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CONTENT_ADD_MEMBER_DETAILS, but was Tag." + this._tag.name());
        }
        return paperContentAddMemberDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CONTENT_ADD_TO_FOLDER_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CONTENT_ADD_TO_FOLDER_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperContentAddToFolderDetails() {
        return this._tag == Tag.PAPER_CONTENT_ADD_TO_FOLDER_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_CONTENT_ADD_TO_FOLDER_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_CONTENT_ADD_TO_FOLDER_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperContentAddToFolderDetails(PaperContentAddToFolderDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperContentAddToFolderDetails(Tag.PAPER_CONTENT_ADD_TO_FOLDER_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_CONTENT_ADD_TO_FOLDER_DETAILS}.
     *
     * @return The {@link PaperContentAddToFolderDetails} value associated with
     *     this instance if {@link #isPaperContentAddToFolderDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperContentAddToFolderDetails} is {@code false}.
     */
    public PaperContentAddToFolderDetails getPaperContentAddToFolderDetailsValue() {
        if (this._tag != Tag.PAPER_CONTENT_ADD_TO_FOLDER_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CONTENT_ADD_TO_FOLDER_DETAILS, but was Tag." + this._tag.name());
        }
        return paperContentAddToFolderDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CONTENT_ARCHIVE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CONTENT_ARCHIVE_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperContentArchiveDetails() {
        return this._tag == Tag.PAPER_CONTENT_ARCHIVE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_CONTENT_ARCHIVE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_CONTENT_ARCHIVE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperContentArchiveDetails(PaperContentArchiveDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperContentArchiveDetails(Tag.PAPER_CONTENT_ARCHIVE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_CONTENT_ARCHIVE_DETAILS}.
     *
     * @return The {@link PaperContentArchiveDetails} value associated with this
     *     instance if {@link #isPaperContentArchiveDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperContentArchiveDetails}
     *     is {@code false}.
     */
    public PaperContentArchiveDetails getPaperContentArchiveDetailsValue() {
        if (this._tag != Tag.PAPER_CONTENT_ARCHIVE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CONTENT_ARCHIVE_DETAILS, but was Tag." + this._tag.name());
        }
        return paperContentArchiveDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CONTENT_CREATE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CONTENT_CREATE_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperContentCreateDetails() {
        return this._tag == Tag.PAPER_CONTENT_CREATE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_CONTENT_CREATE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_CONTENT_CREATE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperContentCreateDetails(PaperContentCreateDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperContentCreateDetails(Tag.PAPER_CONTENT_CREATE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#PAPER_CONTENT_CREATE_DETAILS}.
     *
     * @return The {@link PaperContentCreateDetails} value associated with this
     *     instance if {@link #isPaperContentCreateDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperContentCreateDetails} is
     *     {@code false}.
     */
    public PaperContentCreateDetails getPaperContentCreateDetailsValue() {
        if (this._tag != Tag.PAPER_CONTENT_CREATE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CONTENT_CREATE_DETAILS, but was Tag." + this._tag.name());
        }
        return paperContentCreateDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CONTENT_PERMANENTLY_DELETE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CONTENT_PERMANENTLY_DELETE_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isPaperContentPermanentlyDeleteDetails() {
        return this._tag == Tag.PAPER_CONTENT_PERMANENTLY_DELETE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_CONTENT_PERMANENTLY_DELETE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_CONTENT_PERMANENTLY_DELETE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperContentPermanentlyDeleteDetails(PaperContentPermanentlyDeleteDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperContentPermanentlyDeleteDetails(Tag.PAPER_CONTENT_PERMANENTLY_DELETE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_CONTENT_PERMANENTLY_DELETE_DETAILS}.
     *
     * @return The {@link PaperContentPermanentlyDeleteDetails} value associated
     *     with this instance if {@link #isPaperContentPermanentlyDeleteDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperContentPermanentlyDeleteDetails} is {@code false}.
     */
    public PaperContentPermanentlyDeleteDetails getPaperContentPermanentlyDeleteDetailsValue() {
        if (this._tag != Tag.PAPER_CONTENT_PERMANENTLY_DELETE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CONTENT_PERMANENTLY_DELETE_DETAILS, but was Tag." + this._tag.name());
        }
        return paperContentPermanentlyDeleteDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CONTENT_REMOVE_FROM_FOLDER_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CONTENT_REMOVE_FROM_FOLDER_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isPaperContentRemoveFromFolderDetails() {
        return this._tag == Tag.PAPER_CONTENT_REMOVE_FROM_FOLDER_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_CONTENT_REMOVE_FROM_FOLDER_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_CONTENT_REMOVE_FROM_FOLDER_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperContentRemoveFromFolderDetails(PaperContentRemoveFromFolderDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperContentRemoveFromFolderDetails(Tag.PAPER_CONTENT_REMOVE_FROM_FOLDER_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_CONTENT_REMOVE_FROM_FOLDER_DETAILS}.
     *
     * @return The {@link PaperContentRemoveFromFolderDetails} value associated
     *     with this instance if {@link #isPaperContentRemoveFromFolderDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperContentRemoveFromFolderDetails} is {@code false}.
     */
    public PaperContentRemoveFromFolderDetails getPaperContentRemoveFromFolderDetailsValue() {
        if (this._tag != Tag.PAPER_CONTENT_REMOVE_FROM_FOLDER_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CONTENT_REMOVE_FROM_FOLDER_DETAILS, but was Tag." + this._tag.name());
        }
        return paperContentRemoveFromFolderDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CONTENT_REMOVE_MEMBER_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CONTENT_REMOVE_MEMBER_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperContentRemoveMemberDetails() {
        return this._tag == Tag.PAPER_CONTENT_REMOVE_MEMBER_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_CONTENT_REMOVE_MEMBER_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_CONTENT_REMOVE_MEMBER_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperContentRemoveMemberDetails(PaperContentRemoveMemberDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperContentRemoveMemberDetails(Tag.PAPER_CONTENT_REMOVE_MEMBER_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_CONTENT_REMOVE_MEMBER_DETAILS}.
     *
     * @return The {@link PaperContentRemoveMemberDetails} value associated with
     *     this instance if {@link #isPaperContentRemoveMemberDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperContentRemoveMemberDetails} is {@code false}.
     */
    public PaperContentRemoveMemberDetails getPaperContentRemoveMemberDetailsValue() {
        if (this._tag != Tag.PAPER_CONTENT_REMOVE_MEMBER_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CONTENT_REMOVE_MEMBER_DETAILS, but was Tag." + this._tag.name());
        }
        return paperContentRemoveMemberDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CONTENT_RENAME_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CONTENT_RENAME_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperContentRenameDetails() {
        return this._tag == Tag.PAPER_CONTENT_RENAME_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_CONTENT_RENAME_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_CONTENT_RENAME_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperContentRenameDetails(PaperContentRenameDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperContentRenameDetails(Tag.PAPER_CONTENT_RENAME_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#PAPER_CONTENT_RENAME_DETAILS}.
     *
     * @return The {@link PaperContentRenameDetails} value associated with this
     *     instance if {@link #isPaperContentRenameDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperContentRenameDetails} is
     *     {@code false}.
     */
    public PaperContentRenameDetails getPaperContentRenameDetailsValue() {
        if (this._tag != Tag.PAPER_CONTENT_RENAME_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CONTENT_RENAME_DETAILS, but was Tag." + this._tag.name());
        }
        return paperContentRenameDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CONTENT_RESTORE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CONTENT_RESTORE_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperContentRestoreDetails() {
        return this._tag == Tag.PAPER_CONTENT_RESTORE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_CONTENT_RESTORE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_CONTENT_RESTORE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperContentRestoreDetails(PaperContentRestoreDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperContentRestoreDetails(Tag.PAPER_CONTENT_RESTORE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_CONTENT_RESTORE_DETAILS}.
     *
     * @return The {@link PaperContentRestoreDetails} value associated with this
     *     instance if {@link #isPaperContentRestoreDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperContentRestoreDetails}
     *     is {@code false}.
     */
    public PaperContentRestoreDetails getPaperContentRestoreDetailsValue() {
        if (this._tag != Tag.PAPER_CONTENT_RESTORE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CONTENT_RESTORE_DETAILS, but was Tag." + this._tag.name());
        }
        return paperContentRestoreDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_ADD_COMMENT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_ADD_COMMENT_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDocAddCommentDetails() {
        return this._tag == Tag.PAPER_DOC_ADD_COMMENT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_ADD_COMMENT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_ADD_COMMENT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocAddCommentDetails(PaperDocAddCommentDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocAddCommentDetails(Tag.PAPER_DOC_ADD_COMMENT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_DOC_ADD_COMMENT_DETAILS}.
     *
     * @return The {@link PaperDocAddCommentDetails} value associated with this
     *     instance if {@link #isPaperDocAddCommentDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocAddCommentDetails} is
     *     {@code false}.
     */
    public PaperDocAddCommentDetails getPaperDocAddCommentDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_ADD_COMMENT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_ADD_COMMENT_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocAddCommentDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_CHANGE_MEMBER_ROLE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_CHANGE_MEMBER_ROLE_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDocChangeMemberRoleDetails() {
        return this._tag == Tag.PAPER_DOC_CHANGE_MEMBER_ROLE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_CHANGE_MEMBER_ROLE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_CHANGE_MEMBER_ROLE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocChangeMemberRoleDetails(PaperDocChangeMemberRoleDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocChangeMemberRoleDetails(Tag.PAPER_DOC_CHANGE_MEMBER_ROLE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_DOC_CHANGE_MEMBER_ROLE_DETAILS}.
     *
     * @return The {@link PaperDocChangeMemberRoleDetails} value associated with
     *     this instance if {@link #isPaperDocChangeMemberRoleDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperDocChangeMemberRoleDetails} is {@code false}.
     */
    public PaperDocChangeMemberRoleDetails getPaperDocChangeMemberRoleDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_CHANGE_MEMBER_ROLE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_CHANGE_MEMBER_ROLE_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocChangeMemberRoleDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_CHANGE_SHARING_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_CHANGE_SHARING_POLICY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isPaperDocChangeSharingPolicyDetails() {
        return this._tag == Tag.PAPER_DOC_CHANGE_SHARING_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_CHANGE_SHARING_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_CHANGE_SHARING_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocChangeSharingPolicyDetails(PaperDocChangeSharingPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocChangeSharingPolicyDetails(Tag.PAPER_DOC_CHANGE_SHARING_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_DOC_CHANGE_SHARING_POLICY_DETAILS}.
     *
     * @return The {@link PaperDocChangeSharingPolicyDetails} value associated
     *     with this instance if {@link #isPaperDocChangeSharingPolicyDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperDocChangeSharingPolicyDetails} is {@code false}.
     */
    public PaperDocChangeSharingPolicyDetails getPaperDocChangeSharingPolicyDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_CHANGE_SHARING_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_CHANGE_SHARING_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocChangeSharingPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_CHANGE_SUBSCRIPTION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_CHANGE_SUBSCRIPTION_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDocChangeSubscriptionDetails() {
        return this._tag == Tag.PAPER_DOC_CHANGE_SUBSCRIPTION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_CHANGE_SUBSCRIPTION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_CHANGE_SUBSCRIPTION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocChangeSubscriptionDetails(PaperDocChangeSubscriptionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocChangeSubscriptionDetails(Tag.PAPER_DOC_CHANGE_SUBSCRIPTION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_DOC_CHANGE_SUBSCRIPTION_DETAILS}.
     *
     * @return The {@link PaperDocChangeSubscriptionDetails} value associated
     *     with this instance if {@link #isPaperDocChangeSubscriptionDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperDocChangeSubscriptionDetails} is {@code false}.
     */
    public PaperDocChangeSubscriptionDetails getPaperDocChangeSubscriptionDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_CHANGE_SUBSCRIPTION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_CHANGE_SUBSCRIPTION_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocChangeSubscriptionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_DELETED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_DELETED_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDocDeletedDetails() {
        return this._tag == Tag.PAPER_DOC_DELETED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_DELETED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_DELETED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocDeletedDetails(PaperDocDeletedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocDeletedDetails(Tag.PAPER_DOC_DELETED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#PAPER_DOC_DELETED_DETAILS}.
     *
     * @return The {@link PaperDocDeletedDetails} value associated with this
     *     instance if {@link #isPaperDocDeletedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocDeletedDetails} is
     *     {@code false}.
     */
    public PaperDocDeletedDetails getPaperDocDeletedDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_DELETED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_DELETED_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocDeletedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_DELETE_COMMENT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_DELETE_COMMENT_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDocDeleteCommentDetails() {
        return this._tag == Tag.PAPER_DOC_DELETE_COMMENT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_DELETE_COMMENT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_DELETE_COMMENT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocDeleteCommentDetails(PaperDocDeleteCommentDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocDeleteCommentDetails(Tag.PAPER_DOC_DELETE_COMMENT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_DOC_DELETE_COMMENT_DETAILS}.
     *
     * @return The {@link PaperDocDeleteCommentDetails} value associated with
     *     this instance if {@link #isPaperDocDeleteCommentDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocDeleteCommentDetails}
     *     is {@code false}.
     */
    public PaperDocDeleteCommentDetails getPaperDocDeleteCommentDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_DELETE_COMMENT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_DELETE_COMMENT_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocDeleteCommentDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_DOWNLOAD_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_DOWNLOAD_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDocDownloadDetails() {
        return this._tag == Tag.PAPER_DOC_DOWNLOAD_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_DOWNLOAD_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_DOWNLOAD_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocDownloadDetails(PaperDocDownloadDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocDownloadDetails(Tag.PAPER_DOC_DOWNLOAD_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#PAPER_DOC_DOWNLOAD_DETAILS}.
     *
     * @return The {@link PaperDocDownloadDetails} value associated with this
     *     instance if {@link #isPaperDocDownloadDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocDownloadDetails} is
     *     {@code false}.
     */
    public PaperDocDownloadDetails getPaperDocDownloadDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_DOWNLOAD_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_DOWNLOAD_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocDownloadDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_EDIT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_EDIT_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDocEditDetails() {
        return this._tag == Tag.PAPER_DOC_EDIT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_EDIT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_EDIT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocEditDetails(PaperDocEditDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocEditDetails(Tag.PAPER_DOC_EDIT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#PAPER_DOC_EDIT_DETAILS}.
     *
     * @return The {@link PaperDocEditDetails} value associated with this
     *     instance if {@link #isPaperDocEditDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocEditDetails} is
     *     {@code false}.
     */
    public PaperDocEditDetails getPaperDocEditDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_EDIT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_EDIT_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocEditDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_EDIT_COMMENT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_EDIT_COMMENT_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDocEditCommentDetails() {
        return this._tag == Tag.PAPER_DOC_EDIT_COMMENT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_EDIT_COMMENT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_EDIT_COMMENT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocEditCommentDetails(PaperDocEditCommentDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocEditCommentDetails(Tag.PAPER_DOC_EDIT_COMMENT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_DOC_EDIT_COMMENT_DETAILS}.
     *
     * @return The {@link PaperDocEditCommentDetails} value associated with this
     *     instance if {@link #isPaperDocEditCommentDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocEditCommentDetails}
     *     is {@code false}.
     */
    public PaperDocEditCommentDetails getPaperDocEditCommentDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_EDIT_COMMENT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_EDIT_COMMENT_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocEditCommentDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_FOLLOWED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_FOLLOWED_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDocFollowedDetails() {
        return this._tag == Tag.PAPER_DOC_FOLLOWED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_FOLLOWED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_FOLLOWED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocFollowedDetails(PaperDocFollowedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocFollowedDetails(Tag.PAPER_DOC_FOLLOWED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#PAPER_DOC_FOLLOWED_DETAILS}.
     *
     * @return The {@link PaperDocFollowedDetails} value associated with this
     *     instance if {@link #isPaperDocFollowedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocFollowedDetails} is
     *     {@code false}.
     */
    public PaperDocFollowedDetails getPaperDocFollowedDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_FOLLOWED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_FOLLOWED_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocFollowedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_MENTION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_MENTION_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDocMentionDetails() {
        return this._tag == Tag.PAPER_DOC_MENTION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_MENTION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_MENTION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocMentionDetails(PaperDocMentionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocMentionDetails(Tag.PAPER_DOC_MENTION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#PAPER_DOC_MENTION_DETAILS}.
     *
     * @return The {@link PaperDocMentionDetails} value associated with this
     *     instance if {@link #isPaperDocMentionDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocMentionDetails} is
     *     {@code false}.
     */
    public PaperDocMentionDetails getPaperDocMentionDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_MENTION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_MENTION_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocMentionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_OWNERSHIP_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_OWNERSHIP_CHANGED_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDocOwnershipChangedDetails() {
        return this._tag == Tag.PAPER_DOC_OWNERSHIP_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_OWNERSHIP_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_OWNERSHIP_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocOwnershipChangedDetails(PaperDocOwnershipChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocOwnershipChangedDetails(Tag.PAPER_DOC_OWNERSHIP_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_DOC_OWNERSHIP_CHANGED_DETAILS}.
     *
     * @return The {@link PaperDocOwnershipChangedDetails} value associated with
     *     this instance if {@link #isPaperDocOwnershipChangedDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperDocOwnershipChangedDetails} is {@code false}.
     */
    public PaperDocOwnershipChangedDetails getPaperDocOwnershipChangedDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_OWNERSHIP_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_OWNERSHIP_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocOwnershipChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_REQUEST_ACCESS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_REQUEST_ACCESS_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDocRequestAccessDetails() {
        return this._tag == Tag.PAPER_DOC_REQUEST_ACCESS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_REQUEST_ACCESS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_REQUEST_ACCESS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocRequestAccessDetails(PaperDocRequestAccessDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocRequestAccessDetails(Tag.PAPER_DOC_REQUEST_ACCESS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_DOC_REQUEST_ACCESS_DETAILS}.
     *
     * @return The {@link PaperDocRequestAccessDetails} value associated with
     *     this instance if {@link #isPaperDocRequestAccessDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocRequestAccessDetails}
     *     is {@code false}.
     */
    public PaperDocRequestAccessDetails getPaperDocRequestAccessDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_REQUEST_ACCESS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_REQUEST_ACCESS_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocRequestAccessDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_RESOLVE_COMMENT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_RESOLVE_COMMENT_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDocResolveCommentDetails() {
        return this._tag == Tag.PAPER_DOC_RESOLVE_COMMENT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_RESOLVE_COMMENT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_RESOLVE_COMMENT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocResolveCommentDetails(PaperDocResolveCommentDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocResolveCommentDetails(Tag.PAPER_DOC_RESOLVE_COMMENT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_DOC_RESOLVE_COMMENT_DETAILS}.
     *
     * @return The {@link PaperDocResolveCommentDetails} value associated with
     *     this instance if {@link #isPaperDocResolveCommentDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperDocResolveCommentDetails} is {@code false}.
     */
    public PaperDocResolveCommentDetails getPaperDocResolveCommentDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_RESOLVE_COMMENT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_RESOLVE_COMMENT_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocResolveCommentDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_REVERT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_REVERT_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDocRevertDetails() {
        return this._tag == Tag.PAPER_DOC_REVERT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_REVERT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_REVERT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocRevertDetails(PaperDocRevertDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocRevertDetails(Tag.PAPER_DOC_REVERT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#PAPER_DOC_REVERT_DETAILS}.
     *
     * @return The {@link PaperDocRevertDetails} value associated with this
     *     instance if {@link #isPaperDocRevertDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocRevertDetails} is
     *     {@code false}.
     */
    public PaperDocRevertDetails getPaperDocRevertDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_REVERT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_REVERT_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocRevertDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_SLACK_SHARE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_SLACK_SHARE_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDocSlackShareDetails() {
        return this._tag == Tag.PAPER_DOC_SLACK_SHARE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_SLACK_SHARE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_SLACK_SHARE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocSlackShareDetails(PaperDocSlackShareDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocSlackShareDetails(Tag.PAPER_DOC_SLACK_SHARE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_DOC_SLACK_SHARE_DETAILS}.
     *
     * @return The {@link PaperDocSlackShareDetails} value associated with this
     *     instance if {@link #isPaperDocSlackShareDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocSlackShareDetails} is
     *     {@code false}.
     */
    public PaperDocSlackShareDetails getPaperDocSlackShareDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_SLACK_SHARE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_SLACK_SHARE_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocSlackShareDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_TEAM_INVITE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_TEAM_INVITE_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDocTeamInviteDetails() {
        return this._tag == Tag.PAPER_DOC_TEAM_INVITE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_TEAM_INVITE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_TEAM_INVITE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocTeamInviteDetails(PaperDocTeamInviteDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocTeamInviteDetails(Tag.PAPER_DOC_TEAM_INVITE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_DOC_TEAM_INVITE_DETAILS}.
     *
     * @return The {@link PaperDocTeamInviteDetails} value associated with this
     *     instance if {@link #isPaperDocTeamInviteDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocTeamInviteDetails} is
     *     {@code false}.
     */
    public PaperDocTeamInviteDetails getPaperDocTeamInviteDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_TEAM_INVITE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_TEAM_INVITE_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocTeamInviteDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_TRASHED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_TRASHED_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDocTrashedDetails() {
        return this._tag == Tag.PAPER_DOC_TRASHED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_TRASHED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_TRASHED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocTrashedDetails(PaperDocTrashedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocTrashedDetails(Tag.PAPER_DOC_TRASHED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#PAPER_DOC_TRASHED_DETAILS}.
     *
     * @return The {@link PaperDocTrashedDetails} value associated with this
     *     instance if {@link #isPaperDocTrashedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocTrashedDetails} is
     *     {@code false}.
     */
    public PaperDocTrashedDetails getPaperDocTrashedDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_TRASHED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_TRASHED_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocTrashedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_UNRESOLVE_COMMENT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_UNRESOLVE_COMMENT_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDocUnresolveCommentDetails() {
        return this._tag == Tag.PAPER_DOC_UNRESOLVE_COMMENT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_UNRESOLVE_COMMENT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_UNRESOLVE_COMMENT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocUnresolveCommentDetails(PaperDocUnresolveCommentDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocUnresolveCommentDetails(Tag.PAPER_DOC_UNRESOLVE_COMMENT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_DOC_UNRESOLVE_COMMENT_DETAILS}.
     *
     * @return The {@link PaperDocUnresolveCommentDetails} value associated with
     *     this instance if {@link #isPaperDocUnresolveCommentDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperDocUnresolveCommentDetails} is {@code false}.
     */
    public PaperDocUnresolveCommentDetails getPaperDocUnresolveCommentDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_UNRESOLVE_COMMENT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_UNRESOLVE_COMMENT_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocUnresolveCommentDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_UNTRASHED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_UNTRASHED_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDocUntrashedDetails() {
        return this._tag == Tag.PAPER_DOC_UNTRASHED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_UNTRASHED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_UNTRASHED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocUntrashedDetails(PaperDocUntrashedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocUntrashedDetails(Tag.PAPER_DOC_UNTRASHED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#PAPER_DOC_UNTRASHED_DETAILS}.
     *
     * @return The {@link PaperDocUntrashedDetails} value associated with this
     *     instance if {@link #isPaperDocUntrashedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocUntrashedDetails} is
     *     {@code false}.
     */
    public PaperDocUntrashedDetails getPaperDocUntrashedDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_UNTRASHED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_UNTRASHED_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocUntrashedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_VIEW_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_VIEW_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDocViewDetails() {
        return this._tag == Tag.PAPER_DOC_VIEW_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DOC_VIEW_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DOC_VIEW_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDocViewDetails(PaperDocViewDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDocViewDetails(Tag.PAPER_DOC_VIEW_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#PAPER_DOC_VIEW_DETAILS}.
     *
     * @return The {@link PaperDocViewDetails} value associated with this
     *     instance if {@link #isPaperDocViewDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocViewDetails} is
     *     {@code false}.
     */
    public PaperDocViewDetails getPaperDocViewDetailsValue() {
        if (this._tag != Tag.PAPER_DOC_VIEW_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_VIEW_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDocViewDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_EXTERNAL_VIEW_ALLOW_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_EXTERNAL_VIEW_ALLOW_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperExternalViewAllowDetails() {
        return this._tag == Tag.PAPER_EXTERNAL_VIEW_ALLOW_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_EXTERNAL_VIEW_ALLOW_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_EXTERNAL_VIEW_ALLOW_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperExternalViewAllowDetails(PaperExternalViewAllowDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperExternalViewAllowDetails(Tag.PAPER_EXTERNAL_VIEW_ALLOW_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_EXTERNAL_VIEW_ALLOW_DETAILS}.
     *
     * @return The {@link PaperExternalViewAllowDetails} value associated with
     *     this instance if {@link #isPaperExternalViewAllowDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperExternalViewAllowDetails} is {@code false}.
     */
    public PaperExternalViewAllowDetails getPaperExternalViewAllowDetailsValue() {
        if (this._tag != Tag.PAPER_EXTERNAL_VIEW_ALLOW_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_EXTERNAL_VIEW_ALLOW_DETAILS, but was Tag." + this._tag.name());
        }
        return paperExternalViewAllowDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_EXTERNAL_VIEW_DEFAULT_TEAM_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_EXTERNAL_VIEW_DEFAULT_TEAM_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isPaperExternalViewDefaultTeamDetails() {
        return this._tag == Tag.PAPER_EXTERNAL_VIEW_DEFAULT_TEAM_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_EXTERNAL_VIEW_DEFAULT_TEAM_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_EXTERNAL_VIEW_DEFAULT_TEAM_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperExternalViewDefaultTeamDetails(PaperExternalViewDefaultTeamDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperExternalViewDefaultTeamDetails(Tag.PAPER_EXTERNAL_VIEW_DEFAULT_TEAM_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_EXTERNAL_VIEW_DEFAULT_TEAM_DETAILS}.
     *
     * @return The {@link PaperExternalViewDefaultTeamDetails} value associated
     *     with this instance if {@link #isPaperExternalViewDefaultTeamDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperExternalViewDefaultTeamDetails} is {@code false}.
     */
    public PaperExternalViewDefaultTeamDetails getPaperExternalViewDefaultTeamDetailsValue() {
        if (this._tag != Tag.PAPER_EXTERNAL_VIEW_DEFAULT_TEAM_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_EXTERNAL_VIEW_DEFAULT_TEAM_DETAILS, but was Tag." + this._tag.name());
        }
        return paperExternalViewDefaultTeamDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_EXTERNAL_VIEW_FORBID_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_EXTERNAL_VIEW_FORBID_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperExternalViewForbidDetails() {
        return this._tag == Tag.PAPER_EXTERNAL_VIEW_FORBID_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_EXTERNAL_VIEW_FORBID_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_EXTERNAL_VIEW_FORBID_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperExternalViewForbidDetails(PaperExternalViewForbidDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperExternalViewForbidDetails(Tag.PAPER_EXTERNAL_VIEW_FORBID_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_EXTERNAL_VIEW_FORBID_DETAILS}.
     *
     * @return The {@link PaperExternalViewForbidDetails} value associated with
     *     this instance if {@link #isPaperExternalViewForbidDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperExternalViewForbidDetails} is {@code false}.
     */
    public PaperExternalViewForbidDetails getPaperExternalViewForbidDetailsValue() {
        if (this._tag != Tag.PAPER_EXTERNAL_VIEW_FORBID_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_EXTERNAL_VIEW_FORBID_DETAILS, but was Tag." + this._tag.name());
        }
        return paperExternalViewForbidDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_FOLDER_CHANGE_SUBSCRIPTION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_FOLDER_CHANGE_SUBSCRIPTION_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isPaperFolderChangeSubscriptionDetails() {
        return this._tag == Tag.PAPER_FOLDER_CHANGE_SUBSCRIPTION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_FOLDER_CHANGE_SUBSCRIPTION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_FOLDER_CHANGE_SUBSCRIPTION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperFolderChangeSubscriptionDetails(PaperFolderChangeSubscriptionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperFolderChangeSubscriptionDetails(Tag.PAPER_FOLDER_CHANGE_SUBSCRIPTION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_FOLDER_CHANGE_SUBSCRIPTION_DETAILS}.
     *
     * @return The {@link PaperFolderChangeSubscriptionDetails} value associated
     *     with this instance if {@link #isPaperFolderChangeSubscriptionDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperFolderChangeSubscriptionDetails} is {@code false}.
     */
    public PaperFolderChangeSubscriptionDetails getPaperFolderChangeSubscriptionDetailsValue() {
        if (this._tag != Tag.PAPER_FOLDER_CHANGE_SUBSCRIPTION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_FOLDER_CHANGE_SUBSCRIPTION_DETAILS, but was Tag." + this._tag.name());
        }
        return paperFolderChangeSubscriptionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_FOLDER_DELETED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_FOLDER_DELETED_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperFolderDeletedDetails() {
        return this._tag == Tag.PAPER_FOLDER_DELETED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_FOLDER_DELETED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_FOLDER_DELETED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperFolderDeletedDetails(PaperFolderDeletedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperFolderDeletedDetails(Tag.PAPER_FOLDER_DELETED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#PAPER_FOLDER_DELETED_DETAILS}.
     *
     * @return The {@link PaperFolderDeletedDetails} value associated with this
     *     instance if {@link #isPaperFolderDeletedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperFolderDeletedDetails} is
     *     {@code false}.
     */
    public PaperFolderDeletedDetails getPaperFolderDeletedDetailsValue() {
        if (this._tag != Tag.PAPER_FOLDER_DELETED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_FOLDER_DELETED_DETAILS, but was Tag." + this._tag.name());
        }
        return paperFolderDeletedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_FOLDER_FOLLOWED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_FOLDER_FOLLOWED_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperFolderFollowedDetails() {
        return this._tag == Tag.PAPER_FOLDER_FOLLOWED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_FOLDER_FOLLOWED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_FOLDER_FOLLOWED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperFolderFollowedDetails(PaperFolderFollowedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperFolderFollowedDetails(Tag.PAPER_FOLDER_FOLLOWED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_FOLDER_FOLLOWED_DETAILS}.
     *
     * @return The {@link PaperFolderFollowedDetails} value associated with this
     *     instance if {@link #isPaperFolderFollowedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperFolderFollowedDetails}
     *     is {@code false}.
     */
    public PaperFolderFollowedDetails getPaperFolderFollowedDetailsValue() {
        if (this._tag != Tag.PAPER_FOLDER_FOLLOWED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_FOLDER_FOLLOWED_DETAILS, but was Tag." + this._tag.name());
        }
        return paperFolderFollowedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_FOLDER_TEAM_INVITE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_FOLDER_TEAM_INVITE_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperFolderTeamInviteDetails() {
        return this._tag == Tag.PAPER_FOLDER_TEAM_INVITE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_FOLDER_TEAM_INVITE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_FOLDER_TEAM_INVITE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperFolderTeamInviteDetails(PaperFolderTeamInviteDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperFolderTeamInviteDetails(Tag.PAPER_FOLDER_TEAM_INVITE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_FOLDER_TEAM_INVITE_DETAILS}.
     *
     * @return The {@link PaperFolderTeamInviteDetails} value associated with
     *     this instance if {@link #isPaperFolderTeamInviteDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isPaperFolderTeamInviteDetails}
     *     is {@code false}.
     */
    public PaperFolderTeamInviteDetails getPaperFolderTeamInviteDetailsValue() {
        if (this._tag != Tag.PAPER_FOLDER_TEAM_INVITE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_FOLDER_TEAM_INVITE_DETAILS, but was Tag." + this._tag.name());
        }
        return paperFolderTeamInviteDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_PUBLISHED_LINK_CHANGE_PERMISSION_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_PUBLISHED_LINK_CHANGE_PERMISSION_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isPaperPublishedLinkChangePermissionDetails() {
        return this._tag == Tag.PAPER_PUBLISHED_LINK_CHANGE_PERMISSION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_PUBLISHED_LINK_CHANGE_PERMISSION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_PUBLISHED_LINK_CHANGE_PERMISSION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperPublishedLinkChangePermissionDetails(PaperPublishedLinkChangePermissionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperPublishedLinkChangePermissionDetails(Tag.PAPER_PUBLISHED_LINK_CHANGE_PERMISSION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_PUBLISHED_LINK_CHANGE_PERMISSION_DETAILS}.
     *
     * @return The {@link PaperPublishedLinkChangePermissionDetails} value
     *     associated with this instance if {@link
     *     #isPaperPublishedLinkChangePermissionDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperPublishedLinkChangePermissionDetails} is {@code false}.
     */
    public PaperPublishedLinkChangePermissionDetails getPaperPublishedLinkChangePermissionDetailsValue() {
        if (this._tag != Tag.PAPER_PUBLISHED_LINK_CHANGE_PERMISSION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_PUBLISHED_LINK_CHANGE_PERMISSION_DETAILS, but was Tag." + this._tag.name());
        }
        return paperPublishedLinkChangePermissionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_PUBLISHED_LINK_CREATE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_PUBLISHED_LINK_CREATE_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperPublishedLinkCreateDetails() {
        return this._tag == Tag.PAPER_PUBLISHED_LINK_CREATE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_PUBLISHED_LINK_CREATE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_PUBLISHED_LINK_CREATE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperPublishedLinkCreateDetails(PaperPublishedLinkCreateDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperPublishedLinkCreateDetails(Tag.PAPER_PUBLISHED_LINK_CREATE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_PUBLISHED_LINK_CREATE_DETAILS}.
     *
     * @return The {@link PaperPublishedLinkCreateDetails} value associated with
     *     this instance if {@link #isPaperPublishedLinkCreateDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperPublishedLinkCreateDetails} is {@code false}.
     */
    public PaperPublishedLinkCreateDetails getPaperPublishedLinkCreateDetailsValue() {
        if (this._tag != Tag.PAPER_PUBLISHED_LINK_CREATE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_PUBLISHED_LINK_CREATE_DETAILS, but was Tag." + this._tag.name());
        }
        return paperPublishedLinkCreateDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_PUBLISHED_LINK_DISABLED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_PUBLISHED_LINK_DISABLED_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperPublishedLinkDisabledDetails() {
        return this._tag == Tag.PAPER_PUBLISHED_LINK_DISABLED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_PUBLISHED_LINK_DISABLED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_PUBLISHED_LINK_DISABLED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperPublishedLinkDisabledDetails(PaperPublishedLinkDisabledDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperPublishedLinkDisabledDetails(Tag.PAPER_PUBLISHED_LINK_DISABLED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_PUBLISHED_LINK_DISABLED_DETAILS}.
     *
     * @return The {@link PaperPublishedLinkDisabledDetails} value associated
     *     with this instance if {@link #isPaperPublishedLinkDisabledDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperPublishedLinkDisabledDetails} is {@code false}.
     */
    public PaperPublishedLinkDisabledDetails getPaperPublishedLinkDisabledDetailsValue() {
        if (this._tag != Tag.PAPER_PUBLISHED_LINK_DISABLED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_PUBLISHED_LINK_DISABLED_DETAILS, but was Tag." + this._tag.name());
        }
        return paperPublishedLinkDisabledDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_PUBLISHED_LINK_VIEW_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_PUBLISHED_LINK_VIEW_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperPublishedLinkViewDetails() {
        return this._tag == Tag.PAPER_PUBLISHED_LINK_VIEW_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_PUBLISHED_LINK_VIEW_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_PUBLISHED_LINK_VIEW_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperPublishedLinkViewDetails(PaperPublishedLinkViewDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperPublishedLinkViewDetails(Tag.PAPER_PUBLISHED_LINK_VIEW_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_PUBLISHED_LINK_VIEW_DETAILS}.
     *
     * @return The {@link PaperPublishedLinkViewDetails} value associated with
     *     this instance if {@link #isPaperPublishedLinkViewDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperPublishedLinkViewDetails} is {@code false}.
     */
    public PaperPublishedLinkViewDetails getPaperPublishedLinkViewDetailsValue() {
        if (this._tag != Tag.PAPER_PUBLISHED_LINK_VIEW_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_PUBLISHED_LINK_VIEW_DETAILS, but was Tag." + this._tag.name());
        }
        return paperPublishedLinkViewDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PASSWORD_CHANGE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PASSWORD_CHANGE_DETAILS}, {@code false} otherwise.
     */
    public boolean isPasswordChangeDetails() {
        return this._tag == Tag.PASSWORD_CHANGE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PASSWORD_CHANGE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PASSWORD_CHANGE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails passwordChangeDetails(PasswordChangeDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPasswordChangeDetails(Tag.PASSWORD_CHANGE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#PASSWORD_CHANGE_DETAILS}.
     *
     * @return The {@link PasswordChangeDetails} value associated with this
     *     instance if {@link #isPasswordChangeDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPasswordChangeDetails} is
     *     {@code false}.
     */
    public PasswordChangeDetails getPasswordChangeDetailsValue() {
        if (this._tag != Tag.PASSWORD_CHANGE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PASSWORD_CHANGE_DETAILS, but was Tag." + this._tag.name());
        }
        return passwordChangeDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PASSWORD_RESET_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PASSWORD_RESET_DETAILS}, {@code false} otherwise.
     */
    public boolean isPasswordResetDetails() {
        return this._tag == Tag.PASSWORD_RESET_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PASSWORD_RESET_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PASSWORD_RESET_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails passwordResetDetails(PasswordResetDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPasswordResetDetails(Tag.PASSWORD_RESET_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#PASSWORD_RESET_DETAILS}.
     *
     * @return The {@link PasswordResetDetails} value associated with this
     *     instance if {@link #isPasswordResetDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPasswordResetDetails} is
     *     {@code false}.
     */
    public PasswordResetDetails getPasswordResetDetailsValue() {
        if (this._tag != Tag.PASSWORD_RESET_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PASSWORD_RESET_DETAILS, but was Tag." + this._tag.name());
        }
        return passwordResetDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PASSWORD_RESET_ALL_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PASSWORD_RESET_ALL_DETAILS}, {@code false} otherwise.
     */
    public boolean isPasswordResetAllDetails() {
        return this._tag == Tag.PASSWORD_RESET_ALL_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PASSWORD_RESET_ALL_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PASSWORD_RESET_ALL_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails passwordResetAllDetails(PasswordResetAllDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPasswordResetAllDetails(Tag.PASSWORD_RESET_ALL_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#PASSWORD_RESET_ALL_DETAILS}.
     *
     * @return The {@link PasswordResetAllDetails} value associated with this
     *     instance if {@link #isPasswordResetAllDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPasswordResetAllDetails} is
     *     {@code false}.
     */
    public PasswordResetAllDetails getPasswordResetAllDetailsValue() {
        if (this._tag != Tag.PASSWORD_RESET_ALL_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PASSWORD_RESET_ALL_DETAILS, but was Tag." + this._tag.name());
        }
        return passwordResetAllDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#CLASSIFICATION_CREATE_REPORT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#CLASSIFICATION_CREATE_REPORT_DETAILS}, {@code false} otherwise.
     */
    public boolean isClassificationCreateReportDetails() {
        return this._tag == Tag.CLASSIFICATION_CREATE_REPORT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#CLASSIFICATION_CREATE_REPORT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#CLASSIFICATION_CREATE_REPORT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails classificationCreateReportDetails(ClassificationCreateReportDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndClassificationCreateReportDetails(Tag.CLASSIFICATION_CREATE_REPORT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#CLASSIFICATION_CREATE_REPORT_DETAILS}.
     *
     * @return The {@link ClassificationCreateReportDetails} value associated
     *     with this instance if {@link #isClassificationCreateReportDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isClassificationCreateReportDetails} is {@code false}.
     */
    public ClassificationCreateReportDetails getClassificationCreateReportDetailsValue() {
        if (this._tag != Tag.CLASSIFICATION_CREATE_REPORT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.CLASSIFICATION_CREATE_REPORT_DETAILS, but was Tag." + this._tag.name());
        }
        return classificationCreateReportDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#CLASSIFICATION_CREATE_REPORT_FAIL_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#CLASSIFICATION_CREATE_REPORT_FAIL_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isClassificationCreateReportFailDetails() {
        return this._tag == Tag.CLASSIFICATION_CREATE_REPORT_FAIL_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#CLASSIFICATION_CREATE_REPORT_FAIL_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#CLASSIFICATION_CREATE_REPORT_FAIL_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails classificationCreateReportFailDetails(ClassificationCreateReportFailDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndClassificationCreateReportFailDetails(Tag.CLASSIFICATION_CREATE_REPORT_FAIL_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#CLASSIFICATION_CREATE_REPORT_FAIL_DETAILS}.
     *
     * @return The {@link ClassificationCreateReportFailDetails} value
     *     associated with this instance if {@link
     *     #isClassificationCreateReportFailDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isClassificationCreateReportFailDetails} is {@code false}.
     */
    public ClassificationCreateReportFailDetails getClassificationCreateReportFailDetailsValue() {
        if (this._tag != Tag.CLASSIFICATION_CREATE_REPORT_FAIL_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.CLASSIFICATION_CREATE_REPORT_FAIL_DETAILS, but was Tag." + this._tag.name());
        }
        return classificationCreateReportFailDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EMM_CREATE_EXCEPTIONS_REPORT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EMM_CREATE_EXCEPTIONS_REPORT_DETAILS}, {@code false} otherwise.
     */
    public boolean isEmmCreateExceptionsReportDetails() {
        return this._tag == Tag.EMM_CREATE_EXCEPTIONS_REPORT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#EMM_CREATE_EXCEPTIONS_REPORT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#EMM_CREATE_EXCEPTIONS_REPORT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails emmCreateExceptionsReportDetails(EmmCreateExceptionsReportDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndEmmCreateExceptionsReportDetails(Tag.EMM_CREATE_EXCEPTIONS_REPORT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#EMM_CREATE_EXCEPTIONS_REPORT_DETAILS}.
     *
     * @return The {@link EmmCreateExceptionsReportDetails} value associated
     *     with this instance if {@link #isEmmCreateExceptionsReportDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isEmmCreateExceptionsReportDetails} is {@code false}.
     */
    public EmmCreateExceptionsReportDetails getEmmCreateExceptionsReportDetailsValue() {
        if (this._tag != Tag.EMM_CREATE_EXCEPTIONS_REPORT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.EMM_CREATE_EXCEPTIONS_REPORT_DETAILS, but was Tag." + this._tag.name());
        }
        return emmCreateExceptionsReportDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EMM_CREATE_USAGE_REPORT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EMM_CREATE_USAGE_REPORT_DETAILS}, {@code false} otherwise.
     */
    public boolean isEmmCreateUsageReportDetails() {
        return this._tag == Tag.EMM_CREATE_USAGE_REPORT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#EMM_CREATE_USAGE_REPORT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#EMM_CREATE_USAGE_REPORT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails emmCreateUsageReportDetails(EmmCreateUsageReportDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndEmmCreateUsageReportDetails(Tag.EMM_CREATE_USAGE_REPORT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#EMM_CREATE_USAGE_REPORT_DETAILS}.
     *
     * @return The {@link EmmCreateUsageReportDetails} value associated with
     *     this instance if {@link #isEmmCreateUsageReportDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isEmmCreateUsageReportDetails}
     *     is {@code false}.
     */
    public EmmCreateUsageReportDetails getEmmCreateUsageReportDetailsValue() {
        if (this._tag != Tag.EMM_CREATE_USAGE_REPORT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.EMM_CREATE_USAGE_REPORT_DETAILS, but was Tag." + this._tag.name());
        }
        return emmCreateUsageReportDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EXPORT_MEMBERS_REPORT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EXPORT_MEMBERS_REPORT_DETAILS}, {@code false} otherwise.
     */
    public boolean isExportMembersReportDetails() {
        return this._tag == Tag.EXPORT_MEMBERS_REPORT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#EXPORT_MEMBERS_REPORT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#EXPORT_MEMBERS_REPORT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails exportMembersReportDetails(ExportMembersReportDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndExportMembersReportDetails(Tag.EXPORT_MEMBERS_REPORT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#EXPORT_MEMBERS_REPORT_DETAILS}.
     *
     * @return The {@link ExportMembersReportDetails} value associated with this
     *     instance if {@link #isExportMembersReportDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isExportMembersReportDetails}
     *     is {@code false}.
     */
    public ExportMembersReportDetails getExportMembersReportDetailsValue() {
        if (this._tag != Tag.EXPORT_MEMBERS_REPORT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.EXPORT_MEMBERS_REPORT_DETAILS, but was Tag." + this._tag.name());
        }
        return exportMembersReportDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EXPORT_MEMBERS_REPORT_FAIL_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EXPORT_MEMBERS_REPORT_FAIL_DETAILS}, {@code false} otherwise.
     */
    public boolean isExportMembersReportFailDetails() {
        return this._tag == Tag.EXPORT_MEMBERS_REPORT_FAIL_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#EXPORT_MEMBERS_REPORT_FAIL_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#EXPORT_MEMBERS_REPORT_FAIL_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails exportMembersReportFailDetails(ExportMembersReportFailDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndExportMembersReportFailDetails(Tag.EXPORT_MEMBERS_REPORT_FAIL_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#EXPORT_MEMBERS_REPORT_FAIL_DETAILS}.
     *
     * @return The {@link ExportMembersReportFailDetails} value associated with
     *     this instance if {@link #isExportMembersReportFailDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isExportMembersReportFailDetails} is {@code false}.
     */
    public ExportMembersReportFailDetails getExportMembersReportFailDetailsValue() {
        if (this._tag != Tag.EXPORT_MEMBERS_REPORT_FAIL_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.EXPORT_MEMBERS_REPORT_FAIL_DETAILS, but was Tag." + this._tag.name());
        }
        return exportMembersReportFailDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EXTERNAL_SHARING_CREATE_REPORT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EXTERNAL_SHARING_CREATE_REPORT_DETAILS}, {@code false} otherwise.
     */
    public boolean isExternalSharingCreateReportDetails() {
        return this._tag == Tag.EXTERNAL_SHARING_CREATE_REPORT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#EXTERNAL_SHARING_CREATE_REPORT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#EXTERNAL_SHARING_CREATE_REPORT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails externalSharingCreateReportDetails(ExternalSharingCreateReportDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndExternalSharingCreateReportDetails(Tag.EXTERNAL_SHARING_CREATE_REPORT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#EXTERNAL_SHARING_CREATE_REPORT_DETAILS}.
     *
     * @return The {@link ExternalSharingCreateReportDetails} value associated
     *     with this instance if {@link #isExternalSharingCreateReportDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isExternalSharingCreateReportDetails} is {@code false}.
     */
    public ExternalSharingCreateReportDetails getExternalSharingCreateReportDetailsValue() {
        if (this._tag != Tag.EXTERNAL_SHARING_CREATE_REPORT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.EXTERNAL_SHARING_CREATE_REPORT_DETAILS, but was Tag." + this._tag.name());
        }
        return externalSharingCreateReportDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EXTERNAL_SHARING_REPORT_FAILED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EXTERNAL_SHARING_REPORT_FAILED_DETAILS}, {@code false} otherwise.
     */
    public boolean isExternalSharingReportFailedDetails() {
        return this._tag == Tag.EXTERNAL_SHARING_REPORT_FAILED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#EXTERNAL_SHARING_REPORT_FAILED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#EXTERNAL_SHARING_REPORT_FAILED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails externalSharingReportFailedDetails(ExternalSharingReportFailedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndExternalSharingReportFailedDetails(Tag.EXTERNAL_SHARING_REPORT_FAILED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#EXTERNAL_SHARING_REPORT_FAILED_DETAILS}.
     *
     * @return The {@link ExternalSharingReportFailedDetails} value associated
     *     with this instance if {@link #isExternalSharingReportFailedDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isExternalSharingReportFailedDetails} is {@code false}.
     */
    public ExternalSharingReportFailedDetails getExternalSharingReportFailedDetailsValue() {
        if (this._tag != Tag.EXTERNAL_SHARING_REPORT_FAILED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.EXTERNAL_SHARING_REPORT_FAILED_DETAILS, but was Tag." + this._tag.name());
        }
        return externalSharingReportFailedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NO_EXPIRATION_LINK_GEN_CREATE_REPORT_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NO_EXPIRATION_LINK_GEN_CREATE_REPORT_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isNoExpirationLinkGenCreateReportDetails() {
        return this._tag == Tag.NO_EXPIRATION_LINK_GEN_CREATE_REPORT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#NO_EXPIRATION_LINK_GEN_CREATE_REPORT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#NO_EXPIRATION_LINK_GEN_CREATE_REPORT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails noExpirationLinkGenCreateReportDetails(NoExpirationLinkGenCreateReportDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndNoExpirationLinkGenCreateReportDetails(Tag.NO_EXPIRATION_LINK_GEN_CREATE_REPORT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#NO_EXPIRATION_LINK_GEN_CREATE_REPORT_DETAILS}.
     *
     * @return The {@link NoExpirationLinkGenCreateReportDetails} value
     *     associated with this instance if {@link
     *     #isNoExpirationLinkGenCreateReportDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isNoExpirationLinkGenCreateReportDetails} is {@code false}.
     */
    public NoExpirationLinkGenCreateReportDetails getNoExpirationLinkGenCreateReportDetailsValue() {
        if (this._tag != Tag.NO_EXPIRATION_LINK_GEN_CREATE_REPORT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.NO_EXPIRATION_LINK_GEN_CREATE_REPORT_DETAILS, but was Tag." + this._tag.name());
        }
        return noExpirationLinkGenCreateReportDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NO_EXPIRATION_LINK_GEN_REPORT_FAILED_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NO_EXPIRATION_LINK_GEN_REPORT_FAILED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isNoExpirationLinkGenReportFailedDetails() {
        return this._tag == Tag.NO_EXPIRATION_LINK_GEN_REPORT_FAILED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#NO_EXPIRATION_LINK_GEN_REPORT_FAILED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#NO_EXPIRATION_LINK_GEN_REPORT_FAILED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails noExpirationLinkGenReportFailedDetails(NoExpirationLinkGenReportFailedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndNoExpirationLinkGenReportFailedDetails(Tag.NO_EXPIRATION_LINK_GEN_REPORT_FAILED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#NO_EXPIRATION_LINK_GEN_REPORT_FAILED_DETAILS}.
     *
     * @return The {@link NoExpirationLinkGenReportFailedDetails} value
     *     associated with this instance if {@link
     *     #isNoExpirationLinkGenReportFailedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isNoExpirationLinkGenReportFailedDetails} is {@code false}.
     */
    public NoExpirationLinkGenReportFailedDetails getNoExpirationLinkGenReportFailedDetailsValue() {
        if (this._tag != Tag.NO_EXPIRATION_LINK_GEN_REPORT_FAILED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.NO_EXPIRATION_LINK_GEN_REPORT_FAILED_DETAILS, but was Tag." + this._tag.name());
        }
        return noExpirationLinkGenReportFailedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NO_PASSWORD_LINK_GEN_CREATE_REPORT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NO_PASSWORD_LINK_GEN_CREATE_REPORT_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isNoPasswordLinkGenCreateReportDetails() {
        return this._tag == Tag.NO_PASSWORD_LINK_GEN_CREATE_REPORT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#NO_PASSWORD_LINK_GEN_CREATE_REPORT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#NO_PASSWORD_LINK_GEN_CREATE_REPORT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails noPasswordLinkGenCreateReportDetails(NoPasswordLinkGenCreateReportDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndNoPasswordLinkGenCreateReportDetails(Tag.NO_PASSWORD_LINK_GEN_CREATE_REPORT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#NO_PASSWORD_LINK_GEN_CREATE_REPORT_DETAILS}.
     *
     * @return The {@link NoPasswordLinkGenCreateReportDetails} value associated
     *     with this instance if {@link #isNoPasswordLinkGenCreateReportDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isNoPasswordLinkGenCreateReportDetails} is {@code false}.
     */
    public NoPasswordLinkGenCreateReportDetails getNoPasswordLinkGenCreateReportDetailsValue() {
        if (this._tag != Tag.NO_PASSWORD_LINK_GEN_CREATE_REPORT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.NO_PASSWORD_LINK_GEN_CREATE_REPORT_DETAILS, but was Tag." + this._tag.name());
        }
        return noPasswordLinkGenCreateReportDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NO_PASSWORD_LINK_GEN_REPORT_FAILED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NO_PASSWORD_LINK_GEN_REPORT_FAILED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isNoPasswordLinkGenReportFailedDetails() {
        return this._tag == Tag.NO_PASSWORD_LINK_GEN_REPORT_FAILED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#NO_PASSWORD_LINK_GEN_REPORT_FAILED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#NO_PASSWORD_LINK_GEN_REPORT_FAILED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails noPasswordLinkGenReportFailedDetails(NoPasswordLinkGenReportFailedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndNoPasswordLinkGenReportFailedDetails(Tag.NO_PASSWORD_LINK_GEN_REPORT_FAILED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#NO_PASSWORD_LINK_GEN_REPORT_FAILED_DETAILS}.
     *
     * @return The {@link NoPasswordLinkGenReportFailedDetails} value associated
     *     with this instance if {@link #isNoPasswordLinkGenReportFailedDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isNoPasswordLinkGenReportFailedDetails} is {@code false}.
     */
    public NoPasswordLinkGenReportFailedDetails getNoPasswordLinkGenReportFailedDetailsValue() {
        if (this._tag != Tag.NO_PASSWORD_LINK_GEN_REPORT_FAILED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.NO_PASSWORD_LINK_GEN_REPORT_FAILED_DETAILS, but was Tag." + this._tag.name());
        }
        return noPasswordLinkGenReportFailedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NO_PASSWORD_LINK_VIEW_CREATE_REPORT_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NO_PASSWORD_LINK_VIEW_CREATE_REPORT_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isNoPasswordLinkViewCreateReportDetails() {
        return this._tag == Tag.NO_PASSWORD_LINK_VIEW_CREATE_REPORT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#NO_PASSWORD_LINK_VIEW_CREATE_REPORT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#NO_PASSWORD_LINK_VIEW_CREATE_REPORT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails noPasswordLinkViewCreateReportDetails(NoPasswordLinkViewCreateReportDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndNoPasswordLinkViewCreateReportDetails(Tag.NO_PASSWORD_LINK_VIEW_CREATE_REPORT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#NO_PASSWORD_LINK_VIEW_CREATE_REPORT_DETAILS}.
     *
     * @return The {@link NoPasswordLinkViewCreateReportDetails} value
     *     associated with this instance if {@link
     *     #isNoPasswordLinkViewCreateReportDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isNoPasswordLinkViewCreateReportDetails} is {@code false}.
     */
    public NoPasswordLinkViewCreateReportDetails getNoPasswordLinkViewCreateReportDetailsValue() {
        if (this._tag != Tag.NO_PASSWORD_LINK_VIEW_CREATE_REPORT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.NO_PASSWORD_LINK_VIEW_CREATE_REPORT_DETAILS, but was Tag." + this._tag.name());
        }
        return noPasswordLinkViewCreateReportDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NO_PASSWORD_LINK_VIEW_REPORT_FAILED_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NO_PASSWORD_LINK_VIEW_REPORT_FAILED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isNoPasswordLinkViewReportFailedDetails() {
        return this._tag == Tag.NO_PASSWORD_LINK_VIEW_REPORT_FAILED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#NO_PASSWORD_LINK_VIEW_REPORT_FAILED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#NO_PASSWORD_LINK_VIEW_REPORT_FAILED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails noPasswordLinkViewReportFailedDetails(NoPasswordLinkViewReportFailedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndNoPasswordLinkViewReportFailedDetails(Tag.NO_PASSWORD_LINK_VIEW_REPORT_FAILED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#NO_PASSWORD_LINK_VIEW_REPORT_FAILED_DETAILS}.
     *
     * @return The {@link NoPasswordLinkViewReportFailedDetails} value
     *     associated with this instance if {@link
     *     #isNoPasswordLinkViewReportFailedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isNoPasswordLinkViewReportFailedDetails} is {@code false}.
     */
    public NoPasswordLinkViewReportFailedDetails getNoPasswordLinkViewReportFailedDetailsValue() {
        if (this._tag != Tag.NO_PASSWORD_LINK_VIEW_REPORT_FAILED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.NO_PASSWORD_LINK_VIEW_REPORT_FAILED_DETAILS, but was Tag." + this._tag.name());
        }
        return noPasswordLinkViewReportFailedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#OUTDATED_LINK_VIEW_CREATE_REPORT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#OUTDATED_LINK_VIEW_CREATE_REPORT_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isOutdatedLinkViewCreateReportDetails() {
        return this._tag == Tag.OUTDATED_LINK_VIEW_CREATE_REPORT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#OUTDATED_LINK_VIEW_CREATE_REPORT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#OUTDATED_LINK_VIEW_CREATE_REPORT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails outdatedLinkViewCreateReportDetails(OutdatedLinkViewCreateReportDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndOutdatedLinkViewCreateReportDetails(Tag.OUTDATED_LINK_VIEW_CREATE_REPORT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#OUTDATED_LINK_VIEW_CREATE_REPORT_DETAILS}.
     *
     * @return The {@link OutdatedLinkViewCreateReportDetails} value associated
     *     with this instance if {@link #isOutdatedLinkViewCreateReportDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isOutdatedLinkViewCreateReportDetails} is {@code false}.
     */
    public OutdatedLinkViewCreateReportDetails getOutdatedLinkViewCreateReportDetailsValue() {
        if (this._tag != Tag.OUTDATED_LINK_VIEW_CREATE_REPORT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.OUTDATED_LINK_VIEW_CREATE_REPORT_DETAILS, but was Tag." + this._tag.name());
        }
        return outdatedLinkViewCreateReportDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#OUTDATED_LINK_VIEW_REPORT_FAILED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#OUTDATED_LINK_VIEW_REPORT_FAILED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isOutdatedLinkViewReportFailedDetails() {
        return this._tag == Tag.OUTDATED_LINK_VIEW_REPORT_FAILED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#OUTDATED_LINK_VIEW_REPORT_FAILED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#OUTDATED_LINK_VIEW_REPORT_FAILED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails outdatedLinkViewReportFailedDetails(OutdatedLinkViewReportFailedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndOutdatedLinkViewReportFailedDetails(Tag.OUTDATED_LINK_VIEW_REPORT_FAILED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#OUTDATED_LINK_VIEW_REPORT_FAILED_DETAILS}.
     *
     * @return The {@link OutdatedLinkViewReportFailedDetails} value associated
     *     with this instance if {@link #isOutdatedLinkViewReportFailedDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isOutdatedLinkViewReportFailedDetails} is {@code false}.
     */
    public OutdatedLinkViewReportFailedDetails getOutdatedLinkViewReportFailedDetailsValue() {
        if (this._tag != Tag.OUTDATED_LINK_VIEW_REPORT_FAILED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.OUTDATED_LINK_VIEW_REPORT_FAILED_DETAILS, but was Tag." + this._tag.name());
        }
        return outdatedLinkViewReportFailedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_ADMIN_EXPORT_START_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_ADMIN_EXPORT_START_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperAdminExportStartDetails() {
        return this._tag == Tag.PAPER_ADMIN_EXPORT_START_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_ADMIN_EXPORT_START_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_ADMIN_EXPORT_START_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperAdminExportStartDetails(PaperAdminExportStartDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperAdminExportStartDetails(Tag.PAPER_ADMIN_EXPORT_START_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_ADMIN_EXPORT_START_DETAILS}.
     *
     * @return The {@link PaperAdminExportStartDetails} value associated with
     *     this instance if {@link #isPaperAdminExportStartDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isPaperAdminExportStartDetails}
     *     is {@code false}.
     */
    public PaperAdminExportStartDetails getPaperAdminExportStartDetailsValue() {
        if (this._tag != Tag.PAPER_ADMIN_EXPORT_START_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_ADMIN_EXPORT_START_DETAILS, but was Tag." + this._tag.name());
        }
        return paperAdminExportStartDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSmartSyncCreateAdminPrivilegeReportDetails() {
        return this._tag == Tag.SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails smartSyncCreateAdminPrivilegeReportDetails(SmartSyncCreateAdminPrivilegeReportDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSmartSyncCreateAdminPrivilegeReportDetails(Tag.SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT_DETAILS}.
     *
     * @return The {@link SmartSyncCreateAdminPrivilegeReportDetails} value
     *     associated with this instance if {@link
     *     #isSmartSyncCreateAdminPrivilegeReportDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSmartSyncCreateAdminPrivilegeReportDetails} is {@code false}.
     */
    public SmartSyncCreateAdminPrivilegeReportDetails getSmartSyncCreateAdminPrivilegeReportDetailsValue() {
        if (this._tag != Tag.SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT_DETAILS, but was Tag." + this._tag.name());
        }
        return smartSyncCreateAdminPrivilegeReportDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_ACTIVITY_CREATE_REPORT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_ACTIVITY_CREATE_REPORT_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamActivityCreateReportDetails() {
        return this._tag == Tag.TEAM_ACTIVITY_CREATE_REPORT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_ACTIVITY_CREATE_REPORT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_ACTIVITY_CREATE_REPORT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamActivityCreateReportDetails(TeamActivityCreateReportDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamActivityCreateReportDetails(Tag.TEAM_ACTIVITY_CREATE_REPORT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_ACTIVITY_CREATE_REPORT_DETAILS}.
     *
     * @return The {@link TeamActivityCreateReportDetails} value associated with
     *     this instance if {@link #isTeamActivityCreateReportDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamActivityCreateReportDetails} is {@code false}.
     */
    public TeamActivityCreateReportDetails getTeamActivityCreateReportDetailsValue() {
        if (this._tag != Tag.TEAM_ACTIVITY_CREATE_REPORT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_ACTIVITY_CREATE_REPORT_DETAILS, but was Tag." + this._tag.name());
        }
        return teamActivityCreateReportDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_ACTIVITY_CREATE_REPORT_FAIL_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_ACTIVITY_CREATE_REPORT_FAIL_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isTeamActivityCreateReportFailDetails() {
        return this._tag == Tag.TEAM_ACTIVITY_CREATE_REPORT_FAIL_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_ACTIVITY_CREATE_REPORT_FAIL_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_ACTIVITY_CREATE_REPORT_FAIL_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamActivityCreateReportFailDetails(TeamActivityCreateReportFailDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamActivityCreateReportFailDetails(Tag.TEAM_ACTIVITY_CREATE_REPORT_FAIL_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_ACTIVITY_CREATE_REPORT_FAIL_DETAILS}.
     *
     * @return The {@link TeamActivityCreateReportFailDetails} value associated
     *     with this instance if {@link #isTeamActivityCreateReportFailDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamActivityCreateReportFailDetails} is {@code false}.
     */
    public TeamActivityCreateReportFailDetails getTeamActivityCreateReportFailDetailsValue() {
        if (this._tag != Tag.TEAM_ACTIVITY_CREATE_REPORT_FAIL_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_ACTIVITY_CREATE_REPORT_FAIL_DETAILS, but was Tag." + this._tag.name());
        }
        return teamActivityCreateReportFailDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#COLLECTION_SHARE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#COLLECTION_SHARE_DETAILS}, {@code false} otherwise.
     */
    public boolean isCollectionShareDetails() {
        return this._tag == Tag.COLLECTION_SHARE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#COLLECTION_SHARE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#COLLECTION_SHARE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails collectionShareDetails(CollectionShareDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndCollectionShareDetails(Tag.COLLECTION_SHARE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#COLLECTION_SHARE_DETAILS}.
     *
     * @return The {@link CollectionShareDetails} value associated with this
     *     instance if {@link #isCollectionShareDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isCollectionShareDetails} is
     *     {@code false}.
     */
    public CollectionShareDetails getCollectionShareDetailsValue() {
        if (this._tag != Tag.COLLECTION_SHARE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.COLLECTION_SHARE_DETAILS, but was Tag." + this._tag.name());
        }
        return collectionShareDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_TRANSFERS_FILE_ADD_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_TRANSFERS_FILE_ADD_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileTransfersFileAddDetails() {
        return this._tag == Tag.FILE_TRANSFERS_FILE_ADD_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_TRANSFERS_FILE_ADD_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_TRANSFERS_FILE_ADD_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileTransfersFileAddDetails(FileTransfersFileAddDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileTransfersFileAddDetails(Tag.FILE_TRANSFERS_FILE_ADD_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FILE_TRANSFERS_FILE_ADD_DETAILS}.
     *
     * @return The {@link FileTransfersFileAddDetails} value associated with
     *     this instance if {@link #isFileTransfersFileAddDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isFileTransfersFileAddDetails}
     *     is {@code false}.
     */
    public FileTransfersFileAddDetails getFileTransfersFileAddDetailsValue() {
        if (this._tag != Tag.FILE_TRANSFERS_FILE_ADD_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_TRANSFERS_FILE_ADD_DETAILS, but was Tag." + this._tag.name());
        }
        return fileTransfersFileAddDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_TRANSFERS_TRANSFER_DELETE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_TRANSFERS_TRANSFER_DELETE_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileTransfersTransferDeleteDetails() {
        return this._tag == Tag.FILE_TRANSFERS_TRANSFER_DELETE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_TRANSFERS_TRANSFER_DELETE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_TRANSFERS_TRANSFER_DELETE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileTransfersTransferDeleteDetails(FileTransfersTransferDeleteDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileTransfersTransferDeleteDetails(Tag.FILE_TRANSFERS_TRANSFER_DELETE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FILE_TRANSFERS_TRANSFER_DELETE_DETAILS}.
     *
     * @return The {@link FileTransfersTransferDeleteDetails} value associated
     *     with this instance if {@link #isFileTransfersTransferDeleteDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFileTransfersTransferDeleteDetails} is {@code false}.
     */
    public FileTransfersTransferDeleteDetails getFileTransfersTransferDeleteDetailsValue() {
        if (this._tag != Tag.FILE_TRANSFERS_TRANSFER_DELETE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_TRANSFERS_TRANSFER_DELETE_DETAILS, but was Tag." + this._tag.name());
        }
        return fileTransfersTransferDeleteDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_TRANSFERS_TRANSFER_DOWNLOAD_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_TRANSFERS_TRANSFER_DOWNLOAD_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isFileTransfersTransferDownloadDetails() {
        return this._tag == Tag.FILE_TRANSFERS_TRANSFER_DOWNLOAD_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_TRANSFERS_TRANSFER_DOWNLOAD_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_TRANSFERS_TRANSFER_DOWNLOAD_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileTransfersTransferDownloadDetails(FileTransfersTransferDownloadDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileTransfersTransferDownloadDetails(Tag.FILE_TRANSFERS_TRANSFER_DOWNLOAD_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FILE_TRANSFERS_TRANSFER_DOWNLOAD_DETAILS}.
     *
     * @return The {@link FileTransfersTransferDownloadDetails} value associated
     *     with this instance if {@link #isFileTransfersTransferDownloadDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFileTransfersTransferDownloadDetails} is {@code false}.
     */
    public FileTransfersTransferDownloadDetails getFileTransfersTransferDownloadDetailsValue() {
        if (this._tag != Tag.FILE_TRANSFERS_TRANSFER_DOWNLOAD_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_TRANSFERS_TRANSFER_DOWNLOAD_DETAILS, but was Tag." + this._tag.name());
        }
        return fileTransfersTransferDownloadDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_TRANSFERS_TRANSFER_SEND_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_TRANSFERS_TRANSFER_SEND_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileTransfersTransferSendDetails() {
        return this._tag == Tag.FILE_TRANSFERS_TRANSFER_SEND_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_TRANSFERS_TRANSFER_SEND_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_TRANSFERS_TRANSFER_SEND_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileTransfersTransferSendDetails(FileTransfersTransferSendDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileTransfersTransferSendDetails(Tag.FILE_TRANSFERS_TRANSFER_SEND_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FILE_TRANSFERS_TRANSFER_SEND_DETAILS}.
     *
     * @return The {@link FileTransfersTransferSendDetails} value associated
     *     with this instance if {@link #isFileTransfersTransferSendDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFileTransfersTransferSendDetails} is {@code false}.
     */
    public FileTransfersTransferSendDetails getFileTransfersTransferSendDetailsValue() {
        if (this._tag != Tag.FILE_TRANSFERS_TRANSFER_SEND_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_TRANSFERS_TRANSFER_SEND_DETAILS, but was Tag." + this._tag.name());
        }
        return fileTransfersTransferSendDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_TRANSFERS_TRANSFER_VIEW_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_TRANSFERS_TRANSFER_VIEW_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileTransfersTransferViewDetails() {
        return this._tag == Tag.FILE_TRANSFERS_TRANSFER_VIEW_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_TRANSFERS_TRANSFER_VIEW_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_TRANSFERS_TRANSFER_VIEW_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileTransfersTransferViewDetails(FileTransfersTransferViewDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileTransfersTransferViewDetails(Tag.FILE_TRANSFERS_TRANSFER_VIEW_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FILE_TRANSFERS_TRANSFER_VIEW_DETAILS}.
     *
     * @return The {@link FileTransfersTransferViewDetails} value associated
     *     with this instance if {@link #isFileTransfersTransferViewDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFileTransfersTransferViewDetails} is {@code false}.
     */
    public FileTransfersTransferViewDetails getFileTransfersTransferViewDetailsValue() {
        if (this._tag != Tag.FILE_TRANSFERS_TRANSFER_VIEW_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_TRANSFERS_TRANSFER_VIEW_DETAILS, but was Tag." + this._tag.name());
        }
        return fileTransfersTransferViewDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NOTE_ACL_INVITE_ONLY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NOTE_ACL_INVITE_ONLY_DETAILS}, {@code false} otherwise.
     */
    public boolean isNoteAclInviteOnlyDetails() {
        return this._tag == Tag.NOTE_ACL_INVITE_ONLY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#NOTE_ACL_INVITE_ONLY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#NOTE_ACL_INVITE_ONLY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails noteAclInviteOnlyDetails(NoteAclInviteOnlyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndNoteAclInviteOnlyDetails(Tag.NOTE_ACL_INVITE_ONLY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#NOTE_ACL_INVITE_ONLY_DETAILS}.
     *
     * @return The {@link NoteAclInviteOnlyDetails} value associated with this
     *     instance if {@link #isNoteAclInviteOnlyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isNoteAclInviteOnlyDetails} is
     *     {@code false}.
     */
    public NoteAclInviteOnlyDetails getNoteAclInviteOnlyDetailsValue() {
        if (this._tag != Tag.NOTE_ACL_INVITE_ONLY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.NOTE_ACL_INVITE_ONLY_DETAILS, but was Tag." + this._tag.name());
        }
        return noteAclInviteOnlyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NOTE_ACL_LINK_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NOTE_ACL_LINK_DETAILS}, {@code false} otherwise.
     */
    public boolean isNoteAclLinkDetails() {
        return this._tag == Tag.NOTE_ACL_LINK_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#NOTE_ACL_LINK_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#NOTE_ACL_LINK_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails noteAclLinkDetails(NoteAclLinkDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndNoteAclLinkDetails(Tag.NOTE_ACL_LINK_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#NOTE_ACL_LINK_DETAILS}.
     *
     * @return The {@link NoteAclLinkDetails} value associated with this
     *     instance if {@link #isNoteAclLinkDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isNoteAclLinkDetails} is {@code
     *     false}.
     */
    public NoteAclLinkDetails getNoteAclLinkDetailsValue() {
        if (this._tag != Tag.NOTE_ACL_LINK_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.NOTE_ACL_LINK_DETAILS, but was Tag." + this._tag.name());
        }
        return noteAclLinkDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NOTE_ACL_TEAM_LINK_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NOTE_ACL_TEAM_LINK_DETAILS}, {@code false} otherwise.
     */
    public boolean isNoteAclTeamLinkDetails() {
        return this._tag == Tag.NOTE_ACL_TEAM_LINK_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#NOTE_ACL_TEAM_LINK_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#NOTE_ACL_TEAM_LINK_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails noteAclTeamLinkDetails(NoteAclTeamLinkDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndNoteAclTeamLinkDetails(Tag.NOTE_ACL_TEAM_LINK_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#NOTE_ACL_TEAM_LINK_DETAILS}.
     *
     * @return The {@link NoteAclTeamLinkDetails} value associated with this
     *     instance if {@link #isNoteAclTeamLinkDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isNoteAclTeamLinkDetails} is
     *     {@code false}.
     */
    public NoteAclTeamLinkDetails getNoteAclTeamLinkDetailsValue() {
        if (this._tag != Tag.NOTE_ACL_TEAM_LINK_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.NOTE_ACL_TEAM_LINK_DETAILS, but was Tag." + this._tag.name());
        }
        return noteAclTeamLinkDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NOTE_SHARED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NOTE_SHARED_DETAILS}, {@code false} otherwise.
     */
    public boolean isNoteSharedDetails() {
        return this._tag == Tag.NOTE_SHARED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#NOTE_SHARED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#NOTE_SHARED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails noteSharedDetails(NoteSharedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndNoteSharedDetails(Tag.NOTE_SHARED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#NOTE_SHARED_DETAILS}.
     *
     * @return The {@link NoteSharedDetails} value associated with this instance
     *     if {@link #isNoteSharedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isNoteSharedDetails} is {@code
     *     false}.
     */
    public NoteSharedDetails getNoteSharedDetailsValue() {
        if (this._tag != Tag.NOTE_SHARED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.NOTE_SHARED_DETAILS, but was Tag." + this._tag.name());
        }
        return noteSharedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NOTE_SHARE_RECEIVE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NOTE_SHARE_RECEIVE_DETAILS}, {@code false} otherwise.
     */
    public boolean isNoteShareReceiveDetails() {
        return this._tag == Tag.NOTE_SHARE_RECEIVE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#NOTE_SHARE_RECEIVE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#NOTE_SHARE_RECEIVE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails noteShareReceiveDetails(NoteShareReceiveDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndNoteShareReceiveDetails(Tag.NOTE_SHARE_RECEIVE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#NOTE_SHARE_RECEIVE_DETAILS}.
     *
     * @return The {@link NoteShareReceiveDetails} value associated with this
     *     instance if {@link #isNoteShareReceiveDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isNoteShareReceiveDetails} is
     *     {@code false}.
     */
    public NoteShareReceiveDetails getNoteShareReceiveDetailsValue() {
        if (this._tag != Tag.NOTE_SHARE_RECEIVE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.NOTE_SHARE_RECEIVE_DETAILS, but was Tag." + this._tag.name());
        }
        return noteShareReceiveDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#OPEN_NOTE_SHARED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#OPEN_NOTE_SHARED_DETAILS}, {@code false} otherwise.
     */
    public boolean isOpenNoteSharedDetails() {
        return this._tag == Tag.OPEN_NOTE_SHARED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#OPEN_NOTE_SHARED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#OPEN_NOTE_SHARED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails openNoteSharedDetails(OpenNoteSharedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndOpenNoteSharedDetails(Tag.OPEN_NOTE_SHARED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#OPEN_NOTE_SHARED_DETAILS}.
     *
     * @return The {@link OpenNoteSharedDetails} value associated with this
     *     instance if {@link #isOpenNoteSharedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isOpenNoteSharedDetails} is
     *     {@code false}.
     */
    public OpenNoteSharedDetails getOpenNoteSharedDetailsValue() {
        if (this._tag != Tag.OPEN_NOTE_SHARED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.OPEN_NOTE_SHARED_DETAILS, but was Tag." + this._tag.name());
        }
        return openNoteSharedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_ADD_GROUP_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_ADD_GROUP_DETAILS}, {@code false} otherwise.
     */
    public boolean isSfAddGroupDetails() {
        return this._tag == Tag.SF_ADD_GROUP_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SF_ADD_GROUP_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SF_ADD_GROUP_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sfAddGroupDetails(SfAddGroupDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSfAddGroupDetails(Tag.SF_ADD_GROUP_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SF_ADD_GROUP_DETAILS}.
     *
     * @return The {@link SfAddGroupDetails} value associated with this instance
     *     if {@link #isSfAddGroupDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSfAddGroupDetails} is {@code
     *     false}.
     */
    public SfAddGroupDetails getSfAddGroupDetailsValue() {
        if (this._tag != Tag.SF_ADD_GROUP_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_ADD_GROUP_DETAILS, but was Tag." + this._tag.name());
        }
        return sfAddGroupDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSfAllowNonMembersToViewSharedLinksDetails() {
        return this._tag == Tag.SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sfAllowNonMembersToViewSharedLinksDetails(SfAllowNonMembersToViewSharedLinksDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSfAllowNonMembersToViewSharedLinksDetails(Tag.SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS_DETAILS}.
     *
     * @return The {@link SfAllowNonMembersToViewSharedLinksDetails} value
     *     associated with this instance if {@link
     *     #isSfAllowNonMembersToViewSharedLinksDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSfAllowNonMembersToViewSharedLinksDetails} is {@code false}.
     */
    public SfAllowNonMembersToViewSharedLinksDetails getSfAllowNonMembersToViewSharedLinksDetailsValue() {
        if (this._tag != Tag.SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS_DETAILS, but was Tag." + this._tag.name());
        }
        return sfAllowNonMembersToViewSharedLinksDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_EXTERNAL_INVITE_WARN_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_EXTERNAL_INVITE_WARN_DETAILS}, {@code false} otherwise.
     */
    public boolean isSfExternalInviteWarnDetails() {
        return this._tag == Tag.SF_EXTERNAL_INVITE_WARN_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SF_EXTERNAL_INVITE_WARN_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SF_EXTERNAL_INVITE_WARN_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sfExternalInviteWarnDetails(SfExternalInviteWarnDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSfExternalInviteWarnDetails(Tag.SF_EXTERNAL_INVITE_WARN_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SF_EXTERNAL_INVITE_WARN_DETAILS}.
     *
     * @return The {@link SfExternalInviteWarnDetails} value associated with
     *     this instance if {@link #isSfExternalInviteWarnDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isSfExternalInviteWarnDetails}
     *     is {@code false}.
     */
    public SfExternalInviteWarnDetails getSfExternalInviteWarnDetailsValue() {
        if (this._tag != Tag.SF_EXTERNAL_INVITE_WARN_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_EXTERNAL_INVITE_WARN_DETAILS, but was Tag." + this._tag.name());
        }
        return sfExternalInviteWarnDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_FB_INVITE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_FB_INVITE_DETAILS}, {@code false} otherwise.
     */
    public boolean isSfFbInviteDetails() {
        return this._tag == Tag.SF_FB_INVITE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SF_FB_INVITE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SF_FB_INVITE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sfFbInviteDetails(SfFbInviteDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSfFbInviteDetails(Tag.SF_FB_INVITE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SF_FB_INVITE_DETAILS}.
     *
     * @return The {@link SfFbInviteDetails} value associated with this instance
     *     if {@link #isSfFbInviteDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSfFbInviteDetails} is {@code
     *     false}.
     */
    public SfFbInviteDetails getSfFbInviteDetailsValue() {
        if (this._tag != Tag.SF_FB_INVITE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_FB_INVITE_DETAILS, but was Tag." + this._tag.name());
        }
        return sfFbInviteDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_FB_INVITE_CHANGE_ROLE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_FB_INVITE_CHANGE_ROLE_DETAILS}, {@code false} otherwise.
     */
    public boolean isSfFbInviteChangeRoleDetails() {
        return this._tag == Tag.SF_FB_INVITE_CHANGE_ROLE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SF_FB_INVITE_CHANGE_ROLE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SF_FB_INVITE_CHANGE_ROLE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sfFbInviteChangeRoleDetails(SfFbInviteChangeRoleDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSfFbInviteChangeRoleDetails(Tag.SF_FB_INVITE_CHANGE_ROLE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SF_FB_INVITE_CHANGE_ROLE_DETAILS}.
     *
     * @return The {@link SfFbInviteChangeRoleDetails} value associated with
     *     this instance if {@link #isSfFbInviteChangeRoleDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isSfFbInviteChangeRoleDetails}
     *     is {@code false}.
     */
    public SfFbInviteChangeRoleDetails getSfFbInviteChangeRoleDetailsValue() {
        if (this._tag != Tag.SF_FB_INVITE_CHANGE_ROLE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_FB_INVITE_CHANGE_ROLE_DETAILS, but was Tag." + this._tag.name());
        }
        return sfFbInviteChangeRoleDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_FB_UNINVITE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_FB_UNINVITE_DETAILS}, {@code false} otherwise.
     */
    public boolean isSfFbUninviteDetails() {
        return this._tag == Tag.SF_FB_UNINVITE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SF_FB_UNINVITE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SF_FB_UNINVITE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sfFbUninviteDetails(SfFbUninviteDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSfFbUninviteDetails(Tag.SF_FB_UNINVITE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SF_FB_UNINVITE_DETAILS}.
     *
     * @return The {@link SfFbUninviteDetails} value associated with this
     *     instance if {@link #isSfFbUninviteDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSfFbUninviteDetails} is
     *     {@code false}.
     */
    public SfFbUninviteDetails getSfFbUninviteDetailsValue() {
        if (this._tag != Tag.SF_FB_UNINVITE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_FB_UNINVITE_DETAILS, but was Tag." + this._tag.name());
        }
        return sfFbUninviteDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_INVITE_GROUP_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_INVITE_GROUP_DETAILS}, {@code false} otherwise.
     */
    public boolean isSfInviteGroupDetails() {
        return this._tag == Tag.SF_INVITE_GROUP_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SF_INVITE_GROUP_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SF_INVITE_GROUP_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sfInviteGroupDetails(SfInviteGroupDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSfInviteGroupDetails(Tag.SF_INVITE_GROUP_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SF_INVITE_GROUP_DETAILS}.
     *
     * @return The {@link SfInviteGroupDetails} value associated with this
     *     instance if {@link #isSfInviteGroupDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSfInviteGroupDetails} is
     *     {@code false}.
     */
    public SfInviteGroupDetails getSfInviteGroupDetailsValue() {
        if (this._tag != Tag.SF_INVITE_GROUP_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_INVITE_GROUP_DETAILS, but was Tag." + this._tag.name());
        }
        return sfInviteGroupDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_TEAM_GRANT_ACCESS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_TEAM_GRANT_ACCESS_DETAILS}, {@code false} otherwise.
     */
    public boolean isSfTeamGrantAccessDetails() {
        return this._tag == Tag.SF_TEAM_GRANT_ACCESS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SF_TEAM_GRANT_ACCESS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SF_TEAM_GRANT_ACCESS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sfTeamGrantAccessDetails(SfTeamGrantAccessDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSfTeamGrantAccessDetails(Tag.SF_TEAM_GRANT_ACCESS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SF_TEAM_GRANT_ACCESS_DETAILS}.
     *
     * @return The {@link SfTeamGrantAccessDetails} value associated with this
     *     instance if {@link #isSfTeamGrantAccessDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSfTeamGrantAccessDetails} is
     *     {@code false}.
     */
    public SfTeamGrantAccessDetails getSfTeamGrantAccessDetailsValue() {
        if (this._tag != Tag.SF_TEAM_GRANT_ACCESS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_TEAM_GRANT_ACCESS_DETAILS, but was Tag." + this._tag.name());
        }
        return sfTeamGrantAccessDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_TEAM_INVITE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_TEAM_INVITE_DETAILS}, {@code false} otherwise.
     */
    public boolean isSfTeamInviteDetails() {
        return this._tag == Tag.SF_TEAM_INVITE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SF_TEAM_INVITE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SF_TEAM_INVITE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sfTeamInviteDetails(SfTeamInviteDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSfTeamInviteDetails(Tag.SF_TEAM_INVITE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SF_TEAM_INVITE_DETAILS}.
     *
     * @return The {@link SfTeamInviteDetails} value associated with this
     *     instance if {@link #isSfTeamInviteDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSfTeamInviteDetails} is
     *     {@code false}.
     */
    public SfTeamInviteDetails getSfTeamInviteDetailsValue() {
        if (this._tag != Tag.SF_TEAM_INVITE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_TEAM_INVITE_DETAILS, but was Tag." + this._tag.name());
        }
        return sfTeamInviteDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_TEAM_INVITE_CHANGE_ROLE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_TEAM_INVITE_CHANGE_ROLE_DETAILS}, {@code false} otherwise.
     */
    public boolean isSfTeamInviteChangeRoleDetails() {
        return this._tag == Tag.SF_TEAM_INVITE_CHANGE_ROLE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SF_TEAM_INVITE_CHANGE_ROLE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SF_TEAM_INVITE_CHANGE_ROLE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sfTeamInviteChangeRoleDetails(SfTeamInviteChangeRoleDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSfTeamInviteChangeRoleDetails(Tag.SF_TEAM_INVITE_CHANGE_ROLE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SF_TEAM_INVITE_CHANGE_ROLE_DETAILS}.
     *
     * @return The {@link SfTeamInviteChangeRoleDetails} value associated with
     *     this instance if {@link #isSfTeamInviteChangeRoleDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSfTeamInviteChangeRoleDetails} is {@code false}.
     */
    public SfTeamInviteChangeRoleDetails getSfTeamInviteChangeRoleDetailsValue() {
        if (this._tag != Tag.SF_TEAM_INVITE_CHANGE_ROLE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_TEAM_INVITE_CHANGE_ROLE_DETAILS, but was Tag." + this._tag.name());
        }
        return sfTeamInviteChangeRoleDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_TEAM_JOIN_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_TEAM_JOIN_DETAILS}, {@code false} otherwise.
     */
    public boolean isSfTeamJoinDetails() {
        return this._tag == Tag.SF_TEAM_JOIN_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SF_TEAM_JOIN_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SF_TEAM_JOIN_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sfTeamJoinDetails(SfTeamJoinDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSfTeamJoinDetails(Tag.SF_TEAM_JOIN_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SF_TEAM_JOIN_DETAILS}.
     *
     * @return The {@link SfTeamJoinDetails} value associated with this instance
     *     if {@link #isSfTeamJoinDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSfTeamJoinDetails} is {@code
     *     false}.
     */
    public SfTeamJoinDetails getSfTeamJoinDetailsValue() {
        if (this._tag != Tag.SF_TEAM_JOIN_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_TEAM_JOIN_DETAILS, but was Tag." + this._tag.name());
        }
        return sfTeamJoinDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_TEAM_JOIN_FROM_OOB_LINK_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_TEAM_JOIN_FROM_OOB_LINK_DETAILS}, {@code false} otherwise.
     */
    public boolean isSfTeamJoinFromOobLinkDetails() {
        return this._tag == Tag.SF_TEAM_JOIN_FROM_OOB_LINK_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SF_TEAM_JOIN_FROM_OOB_LINK_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SF_TEAM_JOIN_FROM_OOB_LINK_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sfTeamJoinFromOobLinkDetails(SfTeamJoinFromOobLinkDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSfTeamJoinFromOobLinkDetails(Tag.SF_TEAM_JOIN_FROM_OOB_LINK_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SF_TEAM_JOIN_FROM_OOB_LINK_DETAILS}.
     *
     * @return The {@link SfTeamJoinFromOobLinkDetails} value associated with
     *     this instance if {@link #isSfTeamJoinFromOobLinkDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isSfTeamJoinFromOobLinkDetails}
     *     is {@code false}.
     */
    public SfTeamJoinFromOobLinkDetails getSfTeamJoinFromOobLinkDetailsValue() {
        if (this._tag != Tag.SF_TEAM_JOIN_FROM_OOB_LINK_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_TEAM_JOIN_FROM_OOB_LINK_DETAILS, but was Tag." + this._tag.name());
        }
        return sfTeamJoinFromOobLinkDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_TEAM_UNINVITE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_TEAM_UNINVITE_DETAILS}, {@code false} otherwise.
     */
    public boolean isSfTeamUninviteDetails() {
        return this._tag == Tag.SF_TEAM_UNINVITE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SF_TEAM_UNINVITE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SF_TEAM_UNINVITE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sfTeamUninviteDetails(SfTeamUninviteDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSfTeamUninviteDetails(Tag.SF_TEAM_UNINVITE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SF_TEAM_UNINVITE_DETAILS}.
     *
     * @return The {@link SfTeamUninviteDetails} value associated with this
     *     instance if {@link #isSfTeamUninviteDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSfTeamUninviteDetails} is
     *     {@code false}.
     */
    public SfTeamUninviteDetails getSfTeamUninviteDetailsValue() {
        if (this._tag != Tag.SF_TEAM_UNINVITE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_TEAM_UNINVITE_DETAILS, but was Tag." + this._tag.name());
        }
        return sfTeamUninviteDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_ADD_INVITEES_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_ADD_INVITEES_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedContentAddInviteesDetails() {
        return this._tag == Tag.SHARED_CONTENT_ADD_INVITEES_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_ADD_INVITEES_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_ADD_INVITEES_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentAddInviteesDetails(SharedContentAddInviteesDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentAddInviteesDetails(Tag.SHARED_CONTENT_ADD_INVITEES_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_ADD_INVITEES_DETAILS}.
     *
     * @return The {@link SharedContentAddInviteesDetails} value associated with
     *     this instance if {@link #isSharedContentAddInviteesDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentAddInviteesDetails} is {@code false}.
     */
    public SharedContentAddInviteesDetails getSharedContentAddInviteesDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_ADD_INVITEES_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_ADD_INVITEES_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentAddInviteesDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_ADD_LINK_EXPIRY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_ADD_LINK_EXPIRY_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedContentAddLinkExpiryDetails() {
        return this._tag == Tag.SHARED_CONTENT_ADD_LINK_EXPIRY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_ADD_LINK_EXPIRY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_ADD_LINK_EXPIRY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentAddLinkExpiryDetails(SharedContentAddLinkExpiryDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentAddLinkExpiryDetails(Tag.SHARED_CONTENT_ADD_LINK_EXPIRY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_ADD_LINK_EXPIRY_DETAILS}.
     *
     * @return The {@link SharedContentAddLinkExpiryDetails} value associated
     *     with this instance if {@link #isSharedContentAddLinkExpiryDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentAddLinkExpiryDetails} is {@code false}.
     */
    public SharedContentAddLinkExpiryDetails getSharedContentAddLinkExpiryDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_ADD_LINK_EXPIRY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_ADD_LINK_EXPIRY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentAddLinkExpiryDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_ADD_LINK_PASSWORD_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_ADD_LINK_PASSWORD_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedContentAddLinkPasswordDetails() {
        return this._tag == Tag.SHARED_CONTENT_ADD_LINK_PASSWORD_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_ADD_LINK_PASSWORD_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_ADD_LINK_PASSWORD_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentAddLinkPasswordDetails(SharedContentAddLinkPasswordDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentAddLinkPasswordDetails(Tag.SHARED_CONTENT_ADD_LINK_PASSWORD_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_ADD_LINK_PASSWORD_DETAILS}.
     *
     * @return The {@link SharedContentAddLinkPasswordDetails} value associated
     *     with this instance if {@link #isSharedContentAddLinkPasswordDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentAddLinkPasswordDetails} is {@code false}.
     */
    public SharedContentAddLinkPasswordDetails getSharedContentAddLinkPasswordDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_ADD_LINK_PASSWORD_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_ADD_LINK_PASSWORD_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentAddLinkPasswordDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_ADD_MEMBER_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_ADD_MEMBER_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedContentAddMemberDetails() {
        return this._tag == Tag.SHARED_CONTENT_ADD_MEMBER_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_ADD_MEMBER_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_ADD_MEMBER_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentAddMemberDetails(SharedContentAddMemberDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentAddMemberDetails(Tag.SHARED_CONTENT_ADD_MEMBER_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_ADD_MEMBER_DETAILS}.
     *
     * @return The {@link SharedContentAddMemberDetails} value associated with
     *     this instance if {@link #isSharedContentAddMemberDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentAddMemberDetails} is {@code false}.
     */
    public SharedContentAddMemberDetails getSharedContentAddMemberDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_ADD_MEMBER_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_ADD_MEMBER_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentAddMemberDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedContentChangeDownloadsPolicyDetails() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentChangeDownloadsPolicyDetails(SharedContentChangeDownloadsPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentChangeDownloadsPolicyDetails(Tag.SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY_DETAILS}.
     *
     * @return The {@link SharedContentChangeDownloadsPolicyDetails} value
     *     associated with this instance if {@link
     *     #isSharedContentChangeDownloadsPolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentChangeDownloadsPolicyDetails} is {@code false}.
     */
    public SharedContentChangeDownloadsPolicyDetails getSharedContentChangeDownloadsPolicyDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentChangeDownloadsPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_CHANGE_INVITEE_ROLE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_CHANGE_INVITEE_ROLE_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedContentChangeInviteeRoleDetails() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_INVITEE_ROLE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_CHANGE_INVITEE_ROLE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_CHANGE_INVITEE_ROLE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentChangeInviteeRoleDetails(SharedContentChangeInviteeRoleDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentChangeInviteeRoleDetails(Tag.SHARED_CONTENT_CHANGE_INVITEE_ROLE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_CHANGE_INVITEE_ROLE_DETAILS}.
     *
     * @return The {@link SharedContentChangeInviteeRoleDetails} value
     *     associated with this instance if {@link
     *     #isSharedContentChangeInviteeRoleDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentChangeInviteeRoleDetails} is {@code false}.
     */
    public SharedContentChangeInviteeRoleDetails getSharedContentChangeInviteeRoleDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_CHANGE_INVITEE_ROLE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_INVITEE_ROLE_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentChangeInviteeRoleDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_CHANGE_LINK_AUDIENCE_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_CHANGE_LINK_AUDIENCE_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedContentChangeLinkAudienceDetails() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_LINK_AUDIENCE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_CHANGE_LINK_AUDIENCE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_CHANGE_LINK_AUDIENCE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentChangeLinkAudienceDetails(SharedContentChangeLinkAudienceDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentChangeLinkAudienceDetails(Tag.SHARED_CONTENT_CHANGE_LINK_AUDIENCE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_CHANGE_LINK_AUDIENCE_DETAILS}.
     *
     * @return The {@link SharedContentChangeLinkAudienceDetails} value
     *     associated with this instance if {@link
     *     #isSharedContentChangeLinkAudienceDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentChangeLinkAudienceDetails} is {@code false}.
     */
    public SharedContentChangeLinkAudienceDetails getSharedContentChangeLinkAudienceDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_CHANGE_LINK_AUDIENCE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_LINK_AUDIENCE_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentChangeLinkAudienceDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_CHANGE_LINK_EXPIRY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_CHANGE_LINK_EXPIRY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedContentChangeLinkExpiryDetails() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_LINK_EXPIRY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_CHANGE_LINK_EXPIRY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_CHANGE_LINK_EXPIRY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentChangeLinkExpiryDetails(SharedContentChangeLinkExpiryDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentChangeLinkExpiryDetails(Tag.SHARED_CONTENT_CHANGE_LINK_EXPIRY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_CHANGE_LINK_EXPIRY_DETAILS}.
     *
     * @return The {@link SharedContentChangeLinkExpiryDetails} value associated
     *     with this instance if {@link #isSharedContentChangeLinkExpiryDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentChangeLinkExpiryDetails} is {@code false}.
     */
    public SharedContentChangeLinkExpiryDetails getSharedContentChangeLinkExpiryDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_CHANGE_LINK_EXPIRY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_LINK_EXPIRY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentChangeLinkExpiryDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_CHANGE_LINK_PASSWORD_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_CHANGE_LINK_PASSWORD_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedContentChangeLinkPasswordDetails() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_LINK_PASSWORD_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_CHANGE_LINK_PASSWORD_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_CHANGE_LINK_PASSWORD_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentChangeLinkPasswordDetails(SharedContentChangeLinkPasswordDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentChangeLinkPasswordDetails(Tag.SHARED_CONTENT_CHANGE_LINK_PASSWORD_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_CHANGE_LINK_PASSWORD_DETAILS}.
     *
     * @return The {@link SharedContentChangeLinkPasswordDetails} value
     *     associated with this instance if {@link
     *     #isSharedContentChangeLinkPasswordDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentChangeLinkPasswordDetails} is {@code false}.
     */
    public SharedContentChangeLinkPasswordDetails getSharedContentChangeLinkPasswordDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_CHANGE_LINK_PASSWORD_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_LINK_PASSWORD_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentChangeLinkPasswordDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_CHANGE_MEMBER_ROLE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_CHANGE_MEMBER_ROLE_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedContentChangeMemberRoleDetails() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_MEMBER_ROLE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_CHANGE_MEMBER_ROLE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_CHANGE_MEMBER_ROLE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentChangeMemberRoleDetails(SharedContentChangeMemberRoleDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentChangeMemberRoleDetails(Tag.SHARED_CONTENT_CHANGE_MEMBER_ROLE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_CHANGE_MEMBER_ROLE_DETAILS}.
     *
     * @return The {@link SharedContentChangeMemberRoleDetails} value associated
     *     with this instance if {@link #isSharedContentChangeMemberRoleDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentChangeMemberRoleDetails} is {@code false}.
     */
    public SharedContentChangeMemberRoleDetails getSharedContentChangeMemberRoleDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_CHANGE_MEMBER_ROLE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_MEMBER_ROLE_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentChangeMemberRoleDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedContentChangeViewerInfoPolicyDetails() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentChangeViewerInfoPolicyDetails(SharedContentChangeViewerInfoPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentChangeViewerInfoPolicyDetails(Tag.SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY_DETAILS}.
     *
     * @return The {@link SharedContentChangeViewerInfoPolicyDetails} value
     *     associated with this instance if {@link
     *     #isSharedContentChangeViewerInfoPolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentChangeViewerInfoPolicyDetails} is {@code false}.
     */
    public SharedContentChangeViewerInfoPolicyDetails getSharedContentChangeViewerInfoPolicyDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentChangeViewerInfoPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_CLAIM_INVITATION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_CLAIM_INVITATION_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedContentClaimInvitationDetails() {
        return this._tag == Tag.SHARED_CONTENT_CLAIM_INVITATION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_CLAIM_INVITATION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_CLAIM_INVITATION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentClaimInvitationDetails(SharedContentClaimInvitationDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentClaimInvitationDetails(Tag.SHARED_CONTENT_CLAIM_INVITATION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_CLAIM_INVITATION_DETAILS}.
     *
     * @return The {@link SharedContentClaimInvitationDetails} value associated
     *     with this instance if {@link #isSharedContentClaimInvitationDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentClaimInvitationDetails} is {@code false}.
     */
    public SharedContentClaimInvitationDetails getSharedContentClaimInvitationDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_CLAIM_INVITATION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_CLAIM_INVITATION_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentClaimInvitationDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_COPY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_COPY_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedContentCopyDetails() {
        return this._tag == Tag.SHARED_CONTENT_COPY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_COPY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_COPY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentCopyDetails(SharedContentCopyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentCopyDetails(Tag.SHARED_CONTENT_COPY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHARED_CONTENT_COPY_DETAILS}.
     *
     * @return The {@link SharedContentCopyDetails} value associated with this
     *     instance if {@link #isSharedContentCopyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedContentCopyDetails} is
     *     {@code false}.
     */
    public SharedContentCopyDetails getSharedContentCopyDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_COPY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_COPY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentCopyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_DOWNLOAD_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_DOWNLOAD_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedContentDownloadDetails() {
        return this._tag == Tag.SHARED_CONTENT_DOWNLOAD_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_DOWNLOAD_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_DOWNLOAD_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentDownloadDetails(SharedContentDownloadDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentDownloadDetails(Tag.SHARED_CONTENT_DOWNLOAD_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_DOWNLOAD_DETAILS}.
     *
     * @return The {@link SharedContentDownloadDetails} value associated with
     *     this instance if {@link #isSharedContentDownloadDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isSharedContentDownloadDetails}
     *     is {@code false}.
     */
    public SharedContentDownloadDetails getSharedContentDownloadDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_DOWNLOAD_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_DOWNLOAD_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentDownloadDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_RELINQUISH_MEMBERSHIP_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_RELINQUISH_MEMBERSHIP_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedContentRelinquishMembershipDetails() {
        return this._tag == Tag.SHARED_CONTENT_RELINQUISH_MEMBERSHIP_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_RELINQUISH_MEMBERSHIP_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_RELINQUISH_MEMBERSHIP_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentRelinquishMembershipDetails(SharedContentRelinquishMembershipDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentRelinquishMembershipDetails(Tag.SHARED_CONTENT_RELINQUISH_MEMBERSHIP_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_RELINQUISH_MEMBERSHIP_DETAILS}.
     *
     * @return The {@link SharedContentRelinquishMembershipDetails} value
     *     associated with this instance if {@link
     *     #isSharedContentRelinquishMembershipDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentRelinquishMembershipDetails} is {@code false}.
     */
    public SharedContentRelinquishMembershipDetails getSharedContentRelinquishMembershipDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_RELINQUISH_MEMBERSHIP_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_RELINQUISH_MEMBERSHIP_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentRelinquishMembershipDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_REMOVE_INVITEES_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_REMOVE_INVITEES_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedContentRemoveInviteesDetails() {
        return this._tag == Tag.SHARED_CONTENT_REMOVE_INVITEES_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_REMOVE_INVITEES_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_REMOVE_INVITEES_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentRemoveInviteesDetails(SharedContentRemoveInviteesDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentRemoveInviteesDetails(Tag.SHARED_CONTENT_REMOVE_INVITEES_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_REMOVE_INVITEES_DETAILS}.
     *
     * @return The {@link SharedContentRemoveInviteesDetails} value associated
     *     with this instance if {@link #isSharedContentRemoveInviteesDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentRemoveInviteesDetails} is {@code false}.
     */
    public SharedContentRemoveInviteesDetails getSharedContentRemoveInviteesDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_REMOVE_INVITEES_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_REMOVE_INVITEES_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentRemoveInviteesDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_REMOVE_LINK_EXPIRY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_REMOVE_LINK_EXPIRY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedContentRemoveLinkExpiryDetails() {
        return this._tag == Tag.SHARED_CONTENT_REMOVE_LINK_EXPIRY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_REMOVE_LINK_EXPIRY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_REMOVE_LINK_EXPIRY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentRemoveLinkExpiryDetails(SharedContentRemoveLinkExpiryDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentRemoveLinkExpiryDetails(Tag.SHARED_CONTENT_REMOVE_LINK_EXPIRY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_REMOVE_LINK_EXPIRY_DETAILS}.
     *
     * @return The {@link SharedContentRemoveLinkExpiryDetails} value associated
     *     with this instance if {@link #isSharedContentRemoveLinkExpiryDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentRemoveLinkExpiryDetails} is {@code false}.
     */
    public SharedContentRemoveLinkExpiryDetails getSharedContentRemoveLinkExpiryDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_REMOVE_LINK_EXPIRY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_REMOVE_LINK_EXPIRY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentRemoveLinkExpiryDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_REMOVE_LINK_PASSWORD_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_REMOVE_LINK_PASSWORD_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedContentRemoveLinkPasswordDetails() {
        return this._tag == Tag.SHARED_CONTENT_REMOVE_LINK_PASSWORD_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_REMOVE_LINK_PASSWORD_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_REMOVE_LINK_PASSWORD_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentRemoveLinkPasswordDetails(SharedContentRemoveLinkPasswordDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentRemoveLinkPasswordDetails(Tag.SHARED_CONTENT_REMOVE_LINK_PASSWORD_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_REMOVE_LINK_PASSWORD_DETAILS}.
     *
     * @return The {@link SharedContentRemoveLinkPasswordDetails} value
     *     associated with this instance if {@link
     *     #isSharedContentRemoveLinkPasswordDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentRemoveLinkPasswordDetails} is {@code false}.
     */
    public SharedContentRemoveLinkPasswordDetails getSharedContentRemoveLinkPasswordDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_REMOVE_LINK_PASSWORD_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_REMOVE_LINK_PASSWORD_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentRemoveLinkPasswordDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_REMOVE_MEMBER_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_REMOVE_MEMBER_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedContentRemoveMemberDetails() {
        return this._tag == Tag.SHARED_CONTENT_REMOVE_MEMBER_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_REMOVE_MEMBER_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_REMOVE_MEMBER_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentRemoveMemberDetails(SharedContentRemoveMemberDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentRemoveMemberDetails(Tag.SHARED_CONTENT_REMOVE_MEMBER_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_REMOVE_MEMBER_DETAILS}.
     *
     * @return The {@link SharedContentRemoveMemberDetails} value associated
     *     with this instance if {@link #isSharedContentRemoveMemberDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentRemoveMemberDetails} is {@code false}.
     */
    public SharedContentRemoveMemberDetails getSharedContentRemoveMemberDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_REMOVE_MEMBER_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_REMOVE_MEMBER_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentRemoveMemberDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_REQUEST_ACCESS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_REQUEST_ACCESS_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedContentRequestAccessDetails() {
        return this._tag == Tag.SHARED_CONTENT_REQUEST_ACCESS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_REQUEST_ACCESS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_REQUEST_ACCESS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentRequestAccessDetails(SharedContentRequestAccessDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentRequestAccessDetails(Tag.SHARED_CONTENT_REQUEST_ACCESS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_REQUEST_ACCESS_DETAILS}.
     *
     * @return The {@link SharedContentRequestAccessDetails} value associated
     *     with this instance if {@link #isSharedContentRequestAccessDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentRequestAccessDetails} is {@code false}.
     */
    public SharedContentRequestAccessDetails getSharedContentRequestAccessDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_REQUEST_ACCESS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_REQUEST_ACCESS_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentRequestAccessDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_RESTORE_INVITEES_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_RESTORE_INVITEES_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedContentRestoreInviteesDetails() {
        return this._tag == Tag.SHARED_CONTENT_RESTORE_INVITEES_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_RESTORE_INVITEES_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_RESTORE_INVITEES_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentRestoreInviteesDetails(SharedContentRestoreInviteesDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentRestoreInviteesDetails(Tag.SHARED_CONTENT_RESTORE_INVITEES_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_RESTORE_INVITEES_DETAILS}.
     *
     * @return The {@link SharedContentRestoreInviteesDetails} value associated
     *     with this instance if {@link #isSharedContentRestoreInviteesDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentRestoreInviteesDetails} is {@code false}.
     */
    public SharedContentRestoreInviteesDetails getSharedContentRestoreInviteesDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_RESTORE_INVITEES_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_RESTORE_INVITEES_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentRestoreInviteesDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_RESTORE_MEMBER_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_RESTORE_MEMBER_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedContentRestoreMemberDetails() {
        return this._tag == Tag.SHARED_CONTENT_RESTORE_MEMBER_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_RESTORE_MEMBER_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_RESTORE_MEMBER_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentRestoreMemberDetails(SharedContentRestoreMemberDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentRestoreMemberDetails(Tag.SHARED_CONTENT_RESTORE_MEMBER_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_RESTORE_MEMBER_DETAILS}.
     *
     * @return The {@link SharedContentRestoreMemberDetails} value associated
     *     with this instance if {@link #isSharedContentRestoreMemberDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentRestoreMemberDetails} is {@code false}.
     */
    public SharedContentRestoreMemberDetails getSharedContentRestoreMemberDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_RESTORE_MEMBER_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_RESTORE_MEMBER_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentRestoreMemberDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_UNSHARE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_UNSHARE_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedContentUnshareDetails() {
        return this._tag == Tag.SHARED_CONTENT_UNSHARE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_UNSHARE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_UNSHARE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentUnshareDetails(SharedContentUnshareDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentUnshareDetails(Tag.SHARED_CONTENT_UNSHARE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_UNSHARE_DETAILS}.
     *
     * @return The {@link SharedContentUnshareDetails} value associated with
     *     this instance if {@link #isSharedContentUnshareDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isSharedContentUnshareDetails}
     *     is {@code false}.
     */
    public SharedContentUnshareDetails getSharedContentUnshareDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_UNSHARE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_UNSHARE_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentUnshareDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_VIEW_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_VIEW_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedContentViewDetails() {
        return this._tag == Tag.SHARED_CONTENT_VIEW_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_CONTENT_VIEW_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_CONTENT_VIEW_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedContentViewDetails(SharedContentViewDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedContentViewDetails(Tag.SHARED_CONTENT_VIEW_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHARED_CONTENT_VIEW_DETAILS}.
     *
     * @return The {@link SharedContentViewDetails} value associated with this
     *     instance if {@link #isSharedContentViewDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedContentViewDetails} is
     *     {@code false}.
     */
    public SharedContentViewDetails getSharedContentViewDetailsValue() {
        if (this._tag != Tag.SHARED_CONTENT_VIEW_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_VIEW_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedContentViewDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_FOLDER_CHANGE_LINK_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_FOLDER_CHANGE_LINK_POLICY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedFolderChangeLinkPolicyDetails() {
        return this._tag == Tag.SHARED_FOLDER_CHANGE_LINK_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_FOLDER_CHANGE_LINK_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_FOLDER_CHANGE_LINK_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedFolderChangeLinkPolicyDetails(SharedFolderChangeLinkPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedFolderChangeLinkPolicyDetails(Tag.SHARED_FOLDER_CHANGE_LINK_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_FOLDER_CHANGE_LINK_POLICY_DETAILS}.
     *
     * @return The {@link SharedFolderChangeLinkPolicyDetails} value associated
     *     with this instance if {@link #isSharedFolderChangeLinkPolicyDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedFolderChangeLinkPolicyDetails} is {@code false}.
     */
    public SharedFolderChangeLinkPolicyDetails getSharedFolderChangeLinkPolicyDetailsValue() {
        if (this._tag != Tag.SHARED_FOLDER_CHANGE_LINK_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_FOLDER_CHANGE_LINK_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedFolderChangeLinkPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY_DETAILS}, {@code
     * false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY_DETAILS}, {@code
     *     false} otherwise.
     */
    public boolean isSharedFolderChangeMembersInheritancePolicyDetails() {
        return this._tag == Tag.SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedFolderChangeMembersInheritancePolicyDetails(SharedFolderChangeMembersInheritancePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedFolderChangeMembersInheritancePolicyDetails(Tag.SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY_DETAILS}.
     *
     * @return The {@link SharedFolderChangeMembersInheritancePolicyDetails}
     *     value associated with this instance if {@link
     *     #isSharedFolderChangeMembersInheritancePolicyDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedFolderChangeMembersInheritancePolicyDetails} is {@code
     *     false}.
     */
    public SharedFolderChangeMembersInheritancePolicyDetails getSharedFolderChangeMembersInheritancePolicyDetailsValue() {
        if (this._tag != Tag.SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedFolderChangeMembersInheritancePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY_DETAILS}, {@code
     * false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY_DETAILS}, {@code
     *     false} otherwise.
     */
    public boolean isSharedFolderChangeMembersManagementPolicyDetails() {
        return this._tag == Tag.SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedFolderChangeMembersManagementPolicyDetails(SharedFolderChangeMembersManagementPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedFolderChangeMembersManagementPolicyDetails(Tag.SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY_DETAILS}.
     *
     * @return The {@link SharedFolderChangeMembersManagementPolicyDetails}
     *     value associated with this instance if {@link
     *     #isSharedFolderChangeMembersManagementPolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedFolderChangeMembersManagementPolicyDetails} is {@code
     *     false}.
     */
    public SharedFolderChangeMembersManagementPolicyDetails getSharedFolderChangeMembersManagementPolicyDetailsValue() {
        if (this._tag != Tag.SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedFolderChangeMembersManagementPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_FOLDER_CHANGE_MEMBERS_POLICY_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_FOLDER_CHANGE_MEMBERS_POLICY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedFolderChangeMembersPolicyDetails() {
        return this._tag == Tag.SHARED_FOLDER_CHANGE_MEMBERS_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_FOLDER_CHANGE_MEMBERS_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_FOLDER_CHANGE_MEMBERS_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedFolderChangeMembersPolicyDetails(SharedFolderChangeMembersPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedFolderChangeMembersPolicyDetails(Tag.SHARED_FOLDER_CHANGE_MEMBERS_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_FOLDER_CHANGE_MEMBERS_POLICY_DETAILS}.
     *
     * @return The {@link SharedFolderChangeMembersPolicyDetails} value
     *     associated with this instance if {@link
     *     #isSharedFolderChangeMembersPolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedFolderChangeMembersPolicyDetails} is {@code false}.
     */
    public SharedFolderChangeMembersPolicyDetails getSharedFolderChangeMembersPolicyDetailsValue() {
        if (this._tag != Tag.SHARED_FOLDER_CHANGE_MEMBERS_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_FOLDER_CHANGE_MEMBERS_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedFolderChangeMembersPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_FOLDER_CREATE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_FOLDER_CREATE_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedFolderCreateDetails() {
        return this._tag == Tag.SHARED_FOLDER_CREATE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_FOLDER_CREATE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_FOLDER_CREATE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedFolderCreateDetails(SharedFolderCreateDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedFolderCreateDetails(Tag.SHARED_FOLDER_CREATE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHARED_FOLDER_CREATE_DETAILS}.
     *
     * @return The {@link SharedFolderCreateDetails} value associated with this
     *     instance if {@link #isSharedFolderCreateDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedFolderCreateDetails} is
     *     {@code false}.
     */
    public SharedFolderCreateDetails getSharedFolderCreateDetailsValue() {
        if (this._tag != Tag.SHARED_FOLDER_CREATE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_FOLDER_CREATE_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedFolderCreateDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_FOLDER_DECLINE_INVITATION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_FOLDER_DECLINE_INVITATION_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedFolderDeclineInvitationDetails() {
        return this._tag == Tag.SHARED_FOLDER_DECLINE_INVITATION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_FOLDER_DECLINE_INVITATION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_FOLDER_DECLINE_INVITATION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedFolderDeclineInvitationDetails(SharedFolderDeclineInvitationDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedFolderDeclineInvitationDetails(Tag.SHARED_FOLDER_DECLINE_INVITATION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_FOLDER_DECLINE_INVITATION_DETAILS}.
     *
     * @return The {@link SharedFolderDeclineInvitationDetails} value associated
     *     with this instance if {@link #isSharedFolderDeclineInvitationDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedFolderDeclineInvitationDetails} is {@code false}.
     */
    public SharedFolderDeclineInvitationDetails getSharedFolderDeclineInvitationDetailsValue() {
        if (this._tag != Tag.SHARED_FOLDER_DECLINE_INVITATION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_FOLDER_DECLINE_INVITATION_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedFolderDeclineInvitationDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_FOLDER_MOUNT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_FOLDER_MOUNT_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedFolderMountDetails() {
        return this._tag == Tag.SHARED_FOLDER_MOUNT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_FOLDER_MOUNT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_FOLDER_MOUNT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedFolderMountDetails(SharedFolderMountDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedFolderMountDetails(Tag.SHARED_FOLDER_MOUNT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHARED_FOLDER_MOUNT_DETAILS}.
     *
     * @return The {@link SharedFolderMountDetails} value associated with this
     *     instance if {@link #isSharedFolderMountDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedFolderMountDetails} is
     *     {@code false}.
     */
    public SharedFolderMountDetails getSharedFolderMountDetailsValue() {
        if (this._tag != Tag.SHARED_FOLDER_MOUNT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_FOLDER_MOUNT_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedFolderMountDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_FOLDER_NEST_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_FOLDER_NEST_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedFolderNestDetails() {
        return this._tag == Tag.SHARED_FOLDER_NEST_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_FOLDER_NEST_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_FOLDER_NEST_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedFolderNestDetails(SharedFolderNestDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedFolderNestDetails(Tag.SHARED_FOLDER_NEST_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHARED_FOLDER_NEST_DETAILS}.
     *
     * @return The {@link SharedFolderNestDetails} value associated with this
     *     instance if {@link #isSharedFolderNestDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedFolderNestDetails} is
     *     {@code false}.
     */
    public SharedFolderNestDetails getSharedFolderNestDetailsValue() {
        if (this._tag != Tag.SHARED_FOLDER_NEST_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_FOLDER_NEST_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedFolderNestDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_FOLDER_TRANSFER_OWNERSHIP_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_FOLDER_TRANSFER_OWNERSHIP_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedFolderTransferOwnershipDetails() {
        return this._tag == Tag.SHARED_FOLDER_TRANSFER_OWNERSHIP_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_FOLDER_TRANSFER_OWNERSHIP_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_FOLDER_TRANSFER_OWNERSHIP_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedFolderTransferOwnershipDetails(SharedFolderTransferOwnershipDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedFolderTransferOwnershipDetails(Tag.SHARED_FOLDER_TRANSFER_OWNERSHIP_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_FOLDER_TRANSFER_OWNERSHIP_DETAILS}.
     *
     * @return The {@link SharedFolderTransferOwnershipDetails} value associated
     *     with this instance if {@link #isSharedFolderTransferOwnershipDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedFolderTransferOwnershipDetails} is {@code false}.
     */
    public SharedFolderTransferOwnershipDetails getSharedFolderTransferOwnershipDetailsValue() {
        if (this._tag != Tag.SHARED_FOLDER_TRANSFER_OWNERSHIP_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_FOLDER_TRANSFER_OWNERSHIP_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedFolderTransferOwnershipDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_FOLDER_UNMOUNT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_FOLDER_UNMOUNT_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedFolderUnmountDetails() {
        return this._tag == Tag.SHARED_FOLDER_UNMOUNT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_FOLDER_UNMOUNT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_FOLDER_UNMOUNT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedFolderUnmountDetails(SharedFolderUnmountDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedFolderUnmountDetails(Tag.SHARED_FOLDER_UNMOUNT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_FOLDER_UNMOUNT_DETAILS}.
     *
     * @return The {@link SharedFolderUnmountDetails} value associated with this
     *     instance if {@link #isSharedFolderUnmountDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedFolderUnmountDetails}
     *     is {@code false}.
     */
    public SharedFolderUnmountDetails getSharedFolderUnmountDetailsValue() {
        if (this._tag != Tag.SHARED_FOLDER_UNMOUNT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_FOLDER_UNMOUNT_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedFolderUnmountDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_ADD_EXPIRY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_ADD_EXPIRY_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedLinkAddExpiryDetails() {
        return this._tag == Tag.SHARED_LINK_ADD_EXPIRY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_LINK_ADD_EXPIRY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_LINK_ADD_EXPIRY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedLinkAddExpiryDetails(SharedLinkAddExpiryDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedLinkAddExpiryDetails(Tag.SHARED_LINK_ADD_EXPIRY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_LINK_ADD_EXPIRY_DETAILS}.
     *
     * @return The {@link SharedLinkAddExpiryDetails} value associated with this
     *     instance if {@link #isSharedLinkAddExpiryDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedLinkAddExpiryDetails}
     *     is {@code false}.
     */
    public SharedLinkAddExpiryDetails getSharedLinkAddExpiryDetailsValue() {
        if (this._tag != Tag.SHARED_LINK_ADD_EXPIRY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_ADD_EXPIRY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedLinkAddExpiryDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_CHANGE_EXPIRY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_CHANGE_EXPIRY_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedLinkChangeExpiryDetails() {
        return this._tag == Tag.SHARED_LINK_CHANGE_EXPIRY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_LINK_CHANGE_EXPIRY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_LINK_CHANGE_EXPIRY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedLinkChangeExpiryDetails(SharedLinkChangeExpiryDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedLinkChangeExpiryDetails(Tag.SHARED_LINK_CHANGE_EXPIRY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_LINK_CHANGE_EXPIRY_DETAILS}.
     *
     * @return The {@link SharedLinkChangeExpiryDetails} value associated with
     *     this instance if {@link #isSharedLinkChangeExpiryDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkChangeExpiryDetails} is {@code false}.
     */
    public SharedLinkChangeExpiryDetails getSharedLinkChangeExpiryDetailsValue() {
        if (this._tag != Tag.SHARED_LINK_CHANGE_EXPIRY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_CHANGE_EXPIRY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedLinkChangeExpiryDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_CHANGE_VISIBILITY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_CHANGE_VISIBILITY_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedLinkChangeVisibilityDetails() {
        return this._tag == Tag.SHARED_LINK_CHANGE_VISIBILITY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_LINK_CHANGE_VISIBILITY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_LINK_CHANGE_VISIBILITY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedLinkChangeVisibilityDetails(SharedLinkChangeVisibilityDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedLinkChangeVisibilityDetails(Tag.SHARED_LINK_CHANGE_VISIBILITY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_LINK_CHANGE_VISIBILITY_DETAILS}.
     *
     * @return The {@link SharedLinkChangeVisibilityDetails} value associated
     *     with this instance if {@link #isSharedLinkChangeVisibilityDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkChangeVisibilityDetails} is {@code false}.
     */
    public SharedLinkChangeVisibilityDetails getSharedLinkChangeVisibilityDetailsValue() {
        if (this._tag != Tag.SHARED_LINK_CHANGE_VISIBILITY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_CHANGE_VISIBILITY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedLinkChangeVisibilityDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_COPY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_COPY_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedLinkCopyDetails() {
        return this._tag == Tag.SHARED_LINK_COPY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_LINK_COPY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_LINK_COPY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedLinkCopyDetails(SharedLinkCopyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedLinkCopyDetails(Tag.SHARED_LINK_COPY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHARED_LINK_COPY_DETAILS}.
     *
     * @return The {@link SharedLinkCopyDetails} value associated with this
     *     instance if {@link #isSharedLinkCopyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedLinkCopyDetails} is
     *     {@code false}.
     */
    public SharedLinkCopyDetails getSharedLinkCopyDetailsValue() {
        if (this._tag != Tag.SHARED_LINK_COPY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_COPY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedLinkCopyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_CREATE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_CREATE_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedLinkCreateDetails() {
        return this._tag == Tag.SHARED_LINK_CREATE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_LINK_CREATE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_LINK_CREATE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedLinkCreateDetails(SharedLinkCreateDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedLinkCreateDetails(Tag.SHARED_LINK_CREATE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHARED_LINK_CREATE_DETAILS}.
     *
     * @return The {@link SharedLinkCreateDetails} value associated with this
     *     instance if {@link #isSharedLinkCreateDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedLinkCreateDetails} is
     *     {@code false}.
     */
    public SharedLinkCreateDetails getSharedLinkCreateDetailsValue() {
        if (this._tag != Tag.SHARED_LINK_CREATE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_CREATE_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedLinkCreateDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_DISABLE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_DISABLE_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedLinkDisableDetails() {
        return this._tag == Tag.SHARED_LINK_DISABLE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_LINK_DISABLE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_LINK_DISABLE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedLinkDisableDetails(SharedLinkDisableDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedLinkDisableDetails(Tag.SHARED_LINK_DISABLE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHARED_LINK_DISABLE_DETAILS}.
     *
     * @return The {@link SharedLinkDisableDetails} value associated with this
     *     instance if {@link #isSharedLinkDisableDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedLinkDisableDetails} is
     *     {@code false}.
     */
    public SharedLinkDisableDetails getSharedLinkDisableDetailsValue() {
        if (this._tag != Tag.SHARED_LINK_DISABLE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_DISABLE_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedLinkDisableDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_DOWNLOAD_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_DOWNLOAD_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedLinkDownloadDetails() {
        return this._tag == Tag.SHARED_LINK_DOWNLOAD_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_LINK_DOWNLOAD_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_LINK_DOWNLOAD_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedLinkDownloadDetails(SharedLinkDownloadDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedLinkDownloadDetails(Tag.SHARED_LINK_DOWNLOAD_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHARED_LINK_DOWNLOAD_DETAILS}.
     *
     * @return The {@link SharedLinkDownloadDetails} value associated with this
     *     instance if {@link #isSharedLinkDownloadDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedLinkDownloadDetails} is
     *     {@code false}.
     */
    public SharedLinkDownloadDetails getSharedLinkDownloadDetailsValue() {
        if (this._tag != Tag.SHARED_LINK_DOWNLOAD_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_DOWNLOAD_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedLinkDownloadDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_REMOVE_EXPIRY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_REMOVE_EXPIRY_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedLinkRemoveExpiryDetails() {
        return this._tag == Tag.SHARED_LINK_REMOVE_EXPIRY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_LINK_REMOVE_EXPIRY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_LINK_REMOVE_EXPIRY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedLinkRemoveExpiryDetails(SharedLinkRemoveExpiryDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedLinkRemoveExpiryDetails(Tag.SHARED_LINK_REMOVE_EXPIRY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_LINK_REMOVE_EXPIRY_DETAILS}.
     *
     * @return The {@link SharedLinkRemoveExpiryDetails} value associated with
     *     this instance if {@link #isSharedLinkRemoveExpiryDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkRemoveExpiryDetails} is {@code false}.
     */
    public SharedLinkRemoveExpiryDetails getSharedLinkRemoveExpiryDetailsValue() {
        if (this._tag != Tag.SHARED_LINK_REMOVE_EXPIRY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_REMOVE_EXPIRY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedLinkRemoveExpiryDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_SETTINGS_ADD_EXPIRATION_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_SETTINGS_ADD_EXPIRATION_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedLinkSettingsAddExpirationDetails() {
        return this._tag == Tag.SHARED_LINK_SETTINGS_ADD_EXPIRATION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_LINK_SETTINGS_ADD_EXPIRATION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_LINK_SETTINGS_ADD_EXPIRATION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedLinkSettingsAddExpirationDetails(SharedLinkSettingsAddExpirationDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedLinkSettingsAddExpirationDetails(Tag.SHARED_LINK_SETTINGS_ADD_EXPIRATION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_LINK_SETTINGS_ADD_EXPIRATION_DETAILS}.
     *
     * @return The {@link SharedLinkSettingsAddExpirationDetails} value
     *     associated with this instance if {@link
     *     #isSharedLinkSettingsAddExpirationDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkSettingsAddExpirationDetails} is {@code false}.
     */
    public SharedLinkSettingsAddExpirationDetails getSharedLinkSettingsAddExpirationDetailsValue() {
        if (this._tag != Tag.SHARED_LINK_SETTINGS_ADD_EXPIRATION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_SETTINGS_ADD_EXPIRATION_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedLinkSettingsAddExpirationDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_SETTINGS_ADD_PASSWORD_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_SETTINGS_ADD_PASSWORD_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedLinkSettingsAddPasswordDetails() {
        return this._tag == Tag.SHARED_LINK_SETTINGS_ADD_PASSWORD_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_LINK_SETTINGS_ADD_PASSWORD_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_LINK_SETTINGS_ADD_PASSWORD_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedLinkSettingsAddPasswordDetails(SharedLinkSettingsAddPasswordDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedLinkSettingsAddPasswordDetails(Tag.SHARED_LINK_SETTINGS_ADD_PASSWORD_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_LINK_SETTINGS_ADD_PASSWORD_DETAILS}.
     *
     * @return The {@link SharedLinkSettingsAddPasswordDetails} value associated
     *     with this instance if {@link #isSharedLinkSettingsAddPasswordDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkSettingsAddPasswordDetails} is {@code false}.
     */
    public SharedLinkSettingsAddPasswordDetails getSharedLinkSettingsAddPasswordDetailsValue() {
        if (this._tag != Tag.SHARED_LINK_SETTINGS_ADD_PASSWORD_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_SETTINGS_ADD_PASSWORD_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedLinkSettingsAddPasswordDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED_DETAILS}, {@code
     *     false} otherwise.
     */
    public boolean isSharedLinkSettingsAllowDownloadDisabledDetails() {
        return this._tag == Tag.SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedLinkSettingsAllowDownloadDisabledDetails(SharedLinkSettingsAllowDownloadDisabledDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedLinkSettingsAllowDownloadDisabledDetails(Tag.SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED_DETAILS}.
     *
     * @return The {@link SharedLinkSettingsAllowDownloadDisabledDetails} value
     *     associated with this instance if {@link
     *     #isSharedLinkSettingsAllowDownloadDisabledDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkSettingsAllowDownloadDisabledDetails} is {@code false}.
     */
    public SharedLinkSettingsAllowDownloadDisabledDetails getSharedLinkSettingsAllowDownloadDisabledDetailsValue() {
        if (this._tag != Tag.SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedLinkSettingsAllowDownloadDisabledDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED_DETAILS}, {@code
     *     false} otherwise.
     */
    public boolean isSharedLinkSettingsAllowDownloadEnabledDetails() {
        return this._tag == Tag.SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedLinkSettingsAllowDownloadEnabledDetails(SharedLinkSettingsAllowDownloadEnabledDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedLinkSettingsAllowDownloadEnabledDetails(Tag.SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED_DETAILS}.
     *
     * @return The {@link SharedLinkSettingsAllowDownloadEnabledDetails} value
     *     associated with this instance if {@link
     *     #isSharedLinkSettingsAllowDownloadEnabledDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkSettingsAllowDownloadEnabledDetails} is {@code false}.
     */
    public SharedLinkSettingsAllowDownloadEnabledDetails getSharedLinkSettingsAllowDownloadEnabledDetailsValue() {
        if (this._tag != Tag.SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedLinkSettingsAllowDownloadEnabledDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_SETTINGS_CHANGE_AUDIENCE_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_SETTINGS_CHANGE_AUDIENCE_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedLinkSettingsChangeAudienceDetails() {
        return this._tag == Tag.SHARED_LINK_SETTINGS_CHANGE_AUDIENCE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_LINK_SETTINGS_CHANGE_AUDIENCE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_LINK_SETTINGS_CHANGE_AUDIENCE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedLinkSettingsChangeAudienceDetails(SharedLinkSettingsChangeAudienceDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedLinkSettingsChangeAudienceDetails(Tag.SHARED_LINK_SETTINGS_CHANGE_AUDIENCE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_LINK_SETTINGS_CHANGE_AUDIENCE_DETAILS}.
     *
     * @return The {@link SharedLinkSettingsChangeAudienceDetails} value
     *     associated with this instance if {@link
     *     #isSharedLinkSettingsChangeAudienceDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkSettingsChangeAudienceDetails} is {@code false}.
     */
    public SharedLinkSettingsChangeAudienceDetails getSharedLinkSettingsChangeAudienceDetailsValue() {
        if (this._tag != Tag.SHARED_LINK_SETTINGS_CHANGE_AUDIENCE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_SETTINGS_CHANGE_AUDIENCE_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedLinkSettingsChangeAudienceDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_SETTINGS_CHANGE_EXPIRATION_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_SETTINGS_CHANGE_EXPIRATION_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedLinkSettingsChangeExpirationDetails() {
        return this._tag == Tag.SHARED_LINK_SETTINGS_CHANGE_EXPIRATION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_LINK_SETTINGS_CHANGE_EXPIRATION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_LINK_SETTINGS_CHANGE_EXPIRATION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedLinkSettingsChangeExpirationDetails(SharedLinkSettingsChangeExpirationDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedLinkSettingsChangeExpirationDetails(Tag.SHARED_LINK_SETTINGS_CHANGE_EXPIRATION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_LINK_SETTINGS_CHANGE_EXPIRATION_DETAILS}.
     *
     * @return The {@link SharedLinkSettingsChangeExpirationDetails} value
     *     associated with this instance if {@link
     *     #isSharedLinkSettingsChangeExpirationDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkSettingsChangeExpirationDetails} is {@code false}.
     */
    public SharedLinkSettingsChangeExpirationDetails getSharedLinkSettingsChangeExpirationDetailsValue() {
        if (this._tag != Tag.SHARED_LINK_SETTINGS_CHANGE_EXPIRATION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_SETTINGS_CHANGE_EXPIRATION_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedLinkSettingsChangeExpirationDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_SETTINGS_CHANGE_PASSWORD_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_SETTINGS_CHANGE_PASSWORD_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedLinkSettingsChangePasswordDetails() {
        return this._tag == Tag.SHARED_LINK_SETTINGS_CHANGE_PASSWORD_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_LINK_SETTINGS_CHANGE_PASSWORD_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_LINK_SETTINGS_CHANGE_PASSWORD_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedLinkSettingsChangePasswordDetails(SharedLinkSettingsChangePasswordDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedLinkSettingsChangePasswordDetails(Tag.SHARED_LINK_SETTINGS_CHANGE_PASSWORD_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_LINK_SETTINGS_CHANGE_PASSWORD_DETAILS}.
     *
     * @return The {@link SharedLinkSettingsChangePasswordDetails} value
     *     associated with this instance if {@link
     *     #isSharedLinkSettingsChangePasswordDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkSettingsChangePasswordDetails} is {@code false}.
     */
    public SharedLinkSettingsChangePasswordDetails getSharedLinkSettingsChangePasswordDetailsValue() {
        if (this._tag != Tag.SHARED_LINK_SETTINGS_CHANGE_PASSWORD_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_SETTINGS_CHANGE_PASSWORD_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedLinkSettingsChangePasswordDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_SETTINGS_REMOVE_EXPIRATION_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_SETTINGS_REMOVE_EXPIRATION_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedLinkSettingsRemoveExpirationDetails() {
        return this._tag == Tag.SHARED_LINK_SETTINGS_REMOVE_EXPIRATION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_LINK_SETTINGS_REMOVE_EXPIRATION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_LINK_SETTINGS_REMOVE_EXPIRATION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedLinkSettingsRemoveExpirationDetails(SharedLinkSettingsRemoveExpirationDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedLinkSettingsRemoveExpirationDetails(Tag.SHARED_LINK_SETTINGS_REMOVE_EXPIRATION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_LINK_SETTINGS_REMOVE_EXPIRATION_DETAILS}.
     *
     * @return The {@link SharedLinkSettingsRemoveExpirationDetails} value
     *     associated with this instance if {@link
     *     #isSharedLinkSettingsRemoveExpirationDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkSettingsRemoveExpirationDetails} is {@code false}.
     */
    public SharedLinkSettingsRemoveExpirationDetails getSharedLinkSettingsRemoveExpirationDetailsValue() {
        if (this._tag != Tag.SHARED_LINK_SETTINGS_REMOVE_EXPIRATION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_SETTINGS_REMOVE_EXPIRATION_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedLinkSettingsRemoveExpirationDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_SETTINGS_REMOVE_PASSWORD_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_SETTINGS_REMOVE_PASSWORD_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharedLinkSettingsRemovePasswordDetails() {
        return this._tag == Tag.SHARED_LINK_SETTINGS_REMOVE_PASSWORD_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_LINK_SETTINGS_REMOVE_PASSWORD_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_LINK_SETTINGS_REMOVE_PASSWORD_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedLinkSettingsRemovePasswordDetails(SharedLinkSettingsRemovePasswordDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedLinkSettingsRemovePasswordDetails(Tag.SHARED_LINK_SETTINGS_REMOVE_PASSWORD_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARED_LINK_SETTINGS_REMOVE_PASSWORD_DETAILS}.
     *
     * @return The {@link SharedLinkSettingsRemovePasswordDetails} value
     *     associated with this instance if {@link
     *     #isSharedLinkSettingsRemovePasswordDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkSettingsRemovePasswordDetails} is {@code false}.
     */
    public SharedLinkSettingsRemovePasswordDetails getSharedLinkSettingsRemovePasswordDetailsValue() {
        if (this._tag != Tag.SHARED_LINK_SETTINGS_REMOVE_PASSWORD_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_SETTINGS_REMOVE_PASSWORD_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedLinkSettingsRemovePasswordDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_SHARE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_SHARE_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedLinkShareDetails() {
        return this._tag == Tag.SHARED_LINK_SHARE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_LINK_SHARE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_LINK_SHARE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedLinkShareDetails(SharedLinkShareDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedLinkShareDetails(Tag.SHARED_LINK_SHARE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHARED_LINK_SHARE_DETAILS}.
     *
     * @return The {@link SharedLinkShareDetails} value associated with this
     *     instance if {@link #isSharedLinkShareDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedLinkShareDetails} is
     *     {@code false}.
     */
    public SharedLinkShareDetails getSharedLinkShareDetailsValue() {
        if (this._tag != Tag.SHARED_LINK_SHARE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_SHARE_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedLinkShareDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_VIEW_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_VIEW_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedLinkViewDetails() {
        return this._tag == Tag.SHARED_LINK_VIEW_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_LINK_VIEW_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_LINK_VIEW_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedLinkViewDetails(SharedLinkViewDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedLinkViewDetails(Tag.SHARED_LINK_VIEW_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHARED_LINK_VIEW_DETAILS}.
     *
     * @return The {@link SharedLinkViewDetails} value associated with this
     *     instance if {@link #isSharedLinkViewDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedLinkViewDetails} is
     *     {@code false}.
     */
    public SharedLinkViewDetails getSharedLinkViewDetailsValue() {
        if (this._tag != Tag.SHARED_LINK_VIEW_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_VIEW_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedLinkViewDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_NOTE_OPENED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_NOTE_OPENED_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharedNoteOpenedDetails() {
        return this._tag == Tag.SHARED_NOTE_OPENED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARED_NOTE_OPENED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARED_NOTE_OPENED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharedNoteOpenedDetails(SharedNoteOpenedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharedNoteOpenedDetails(Tag.SHARED_NOTE_OPENED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHARED_NOTE_OPENED_DETAILS}.
     *
     * @return The {@link SharedNoteOpenedDetails} value associated with this
     *     instance if {@link #isSharedNoteOpenedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedNoteOpenedDetails} is
     *     {@code false}.
     */
    public SharedNoteOpenedDetails getSharedNoteOpenedDetailsValue() {
        if (this._tag != Tag.SHARED_NOTE_OPENED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_NOTE_OPENED_DETAILS, but was Tag." + this._tag.name());
        }
        return sharedNoteOpenedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHMODEL_DISABLE_DOWNLOADS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHMODEL_DISABLE_DOWNLOADS_DETAILS}, {@code false} otherwise.
     */
    public boolean isShmodelDisableDownloadsDetails() {
        return this._tag == Tag.SHMODEL_DISABLE_DOWNLOADS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHMODEL_DISABLE_DOWNLOADS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHMODEL_DISABLE_DOWNLOADS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails shmodelDisableDownloadsDetails(ShmodelDisableDownloadsDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShmodelDisableDownloadsDetails(Tag.SHMODEL_DISABLE_DOWNLOADS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHMODEL_DISABLE_DOWNLOADS_DETAILS}.
     *
     * @return The {@link ShmodelDisableDownloadsDetails} value associated with
     *     this instance if {@link #isShmodelDisableDownloadsDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isShmodelDisableDownloadsDetails} is {@code false}.
     */
    public ShmodelDisableDownloadsDetails getShmodelDisableDownloadsDetailsValue() {
        if (this._tag != Tag.SHMODEL_DISABLE_DOWNLOADS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHMODEL_DISABLE_DOWNLOADS_DETAILS, but was Tag." + this._tag.name());
        }
        return shmodelDisableDownloadsDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHMODEL_ENABLE_DOWNLOADS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHMODEL_ENABLE_DOWNLOADS_DETAILS}, {@code false} otherwise.
     */
    public boolean isShmodelEnableDownloadsDetails() {
        return this._tag == Tag.SHMODEL_ENABLE_DOWNLOADS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHMODEL_ENABLE_DOWNLOADS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHMODEL_ENABLE_DOWNLOADS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails shmodelEnableDownloadsDetails(ShmodelEnableDownloadsDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShmodelEnableDownloadsDetails(Tag.SHMODEL_ENABLE_DOWNLOADS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHMODEL_ENABLE_DOWNLOADS_DETAILS}.
     *
     * @return The {@link ShmodelEnableDownloadsDetails} value associated with
     *     this instance if {@link #isShmodelEnableDownloadsDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isShmodelEnableDownloadsDetails} is {@code false}.
     */
    public ShmodelEnableDownloadsDetails getShmodelEnableDownloadsDetailsValue() {
        if (this._tag != Tag.SHMODEL_ENABLE_DOWNLOADS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHMODEL_ENABLE_DOWNLOADS_DETAILS, but was Tag." + this._tag.name());
        }
        return shmodelEnableDownloadsDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHMODEL_GROUP_SHARE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHMODEL_GROUP_SHARE_DETAILS}, {@code false} otherwise.
     */
    public boolean isShmodelGroupShareDetails() {
        return this._tag == Tag.SHMODEL_GROUP_SHARE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHMODEL_GROUP_SHARE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHMODEL_GROUP_SHARE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails shmodelGroupShareDetails(ShmodelGroupShareDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShmodelGroupShareDetails(Tag.SHMODEL_GROUP_SHARE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHMODEL_GROUP_SHARE_DETAILS}.
     *
     * @return The {@link ShmodelGroupShareDetails} value associated with this
     *     instance if {@link #isShmodelGroupShareDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShmodelGroupShareDetails} is
     *     {@code false}.
     */
    public ShmodelGroupShareDetails getShmodelGroupShareDetailsValue() {
        if (this._tag != Tag.SHMODEL_GROUP_SHARE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHMODEL_GROUP_SHARE_DETAILS, but was Tag." + this._tag.name());
        }
        return shmodelGroupShareDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_ACCESS_GRANTED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_ACCESS_GRANTED_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseAccessGrantedDetails() {
        return this._tag == Tag.SHOWCASE_ACCESS_GRANTED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_ACCESS_GRANTED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_ACCESS_GRANTED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseAccessGrantedDetails(ShowcaseAccessGrantedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseAccessGrantedDetails(Tag.SHOWCASE_ACCESS_GRANTED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHOWCASE_ACCESS_GRANTED_DETAILS}.
     *
     * @return The {@link ShowcaseAccessGrantedDetails} value associated with
     *     this instance if {@link #isShowcaseAccessGrantedDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseAccessGrantedDetails}
     *     is {@code false}.
     */
    public ShowcaseAccessGrantedDetails getShowcaseAccessGrantedDetailsValue() {
        if (this._tag != Tag.SHOWCASE_ACCESS_GRANTED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_ACCESS_GRANTED_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseAccessGrantedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_ADD_MEMBER_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_ADD_MEMBER_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseAddMemberDetails() {
        return this._tag == Tag.SHOWCASE_ADD_MEMBER_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_ADD_MEMBER_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_ADD_MEMBER_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseAddMemberDetails(ShowcaseAddMemberDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseAddMemberDetails(Tag.SHOWCASE_ADD_MEMBER_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHOWCASE_ADD_MEMBER_DETAILS}.
     *
     * @return The {@link ShowcaseAddMemberDetails} value associated with this
     *     instance if {@link #isShowcaseAddMemberDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseAddMemberDetails} is
     *     {@code false}.
     */
    public ShowcaseAddMemberDetails getShowcaseAddMemberDetailsValue() {
        if (this._tag != Tag.SHOWCASE_ADD_MEMBER_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_ADD_MEMBER_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseAddMemberDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_ARCHIVED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_ARCHIVED_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseArchivedDetails() {
        return this._tag == Tag.SHOWCASE_ARCHIVED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_ARCHIVED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_ARCHIVED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseArchivedDetails(ShowcaseArchivedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseArchivedDetails(Tag.SHOWCASE_ARCHIVED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHOWCASE_ARCHIVED_DETAILS}.
     *
     * @return The {@link ShowcaseArchivedDetails} value associated with this
     *     instance if {@link #isShowcaseArchivedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseArchivedDetails} is
     *     {@code false}.
     */
    public ShowcaseArchivedDetails getShowcaseArchivedDetailsValue() {
        if (this._tag != Tag.SHOWCASE_ARCHIVED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_ARCHIVED_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseArchivedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_CREATED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_CREATED_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseCreatedDetails() {
        return this._tag == Tag.SHOWCASE_CREATED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_CREATED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_CREATED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseCreatedDetails(ShowcaseCreatedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseCreatedDetails(Tag.SHOWCASE_CREATED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHOWCASE_CREATED_DETAILS}.
     *
     * @return The {@link ShowcaseCreatedDetails} value associated with this
     *     instance if {@link #isShowcaseCreatedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseCreatedDetails} is
     *     {@code false}.
     */
    public ShowcaseCreatedDetails getShowcaseCreatedDetailsValue() {
        if (this._tag != Tag.SHOWCASE_CREATED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_CREATED_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseCreatedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_DELETE_COMMENT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_DELETE_COMMENT_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseDeleteCommentDetails() {
        return this._tag == Tag.SHOWCASE_DELETE_COMMENT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_DELETE_COMMENT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_DELETE_COMMENT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseDeleteCommentDetails(ShowcaseDeleteCommentDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseDeleteCommentDetails(Tag.SHOWCASE_DELETE_COMMENT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHOWCASE_DELETE_COMMENT_DETAILS}.
     *
     * @return The {@link ShowcaseDeleteCommentDetails} value associated with
     *     this instance if {@link #isShowcaseDeleteCommentDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseDeleteCommentDetails}
     *     is {@code false}.
     */
    public ShowcaseDeleteCommentDetails getShowcaseDeleteCommentDetailsValue() {
        if (this._tag != Tag.SHOWCASE_DELETE_COMMENT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_DELETE_COMMENT_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseDeleteCommentDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_EDITED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_EDITED_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseEditedDetails() {
        return this._tag == Tag.SHOWCASE_EDITED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_EDITED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_EDITED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseEditedDetails(ShowcaseEditedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseEditedDetails(Tag.SHOWCASE_EDITED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHOWCASE_EDITED_DETAILS}.
     *
     * @return The {@link ShowcaseEditedDetails} value associated with this
     *     instance if {@link #isShowcaseEditedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseEditedDetails} is
     *     {@code false}.
     */
    public ShowcaseEditedDetails getShowcaseEditedDetailsValue() {
        if (this._tag != Tag.SHOWCASE_EDITED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_EDITED_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseEditedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_EDIT_COMMENT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_EDIT_COMMENT_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseEditCommentDetails() {
        return this._tag == Tag.SHOWCASE_EDIT_COMMENT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_EDIT_COMMENT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_EDIT_COMMENT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseEditCommentDetails(ShowcaseEditCommentDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseEditCommentDetails(Tag.SHOWCASE_EDIT_COMMENT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHOWCASE_EDIT_COMMENT_DETAILS}.
     *
     * @return The {@link ShowcaseEditCommentDetails} value associated with this
     *     instance if {@link #isShowcaseEditCommentDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseEditCommentDetails}
     *     is {@code false}.
     */
    public ShowcaseEditCommentDetails getShowcaseEditCommentDetailsValue() {
        if (this._tag != Tag.SHOWCASE_EDIT_COMMENT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_EDIT_COMMENT_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseEditCommentDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_FILE_ADDED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_FILE_ADDED_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseFileAddedDetails() {
        return this._tag == Tag.SHOWCASE_FILE_ADDED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_FILE_ADDED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_FILE_ADDED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseFileAddedDetails(ShowcaseFileAddedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseFileAddedDetails(Tag.SHOWCASE_FILE_ADDED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHOWCASE_FILE_ADDED_DETAILS}.
     *
     * @return The {@link ShowcaseFileAddedDetails} value associated with this
     *     instance if {@link #isShowcaseFileAddedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseFileAddedDetails} is
     *     {@code false}.
     */
    public ShowcaseFileAddedDetails getShowcaseFileAddedDetailsValue() {
        if (this._tag != Tag.SHOWCASE_FILE_ADDED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_FILE_ADDED_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseFileAddedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_FILE_DOWNLOAD_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_FILE_DOWNLOAD_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseFileDownloadDetails() {
        return this._tag == Tag.SHOWCASE_FILE_DOWNLOAD_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_FILE_DOWNLOAD_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_FILE_DOWNLOAD_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseFileDownloadDetails(ShowcaseFileDownloadDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseFileDownloadDetails(Tag.SHOWCASE_FILE_DOWNLOAD_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHOWCASE_FILE_DOWNLOAD_DETAILS}.
     *
     * @return The {@link ShowcaseFileDownloadDetails} value associated with
     *     this instance if {@link #isShowcaseFileDownloadDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseFileDownloadDetails}
     *     is {@code false}.
     */
    public ShowcaseFileDownloadDetails getShowcaseFileDownloadDetailsValue() {
        if (this._tag != Tag.SHOWCASE_FILE_DOWNLOAD_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_FILE_DOWNLOAD_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseFileDownloadDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_FILE_REMOVED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_FILE_REMOVED_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseFileRemovedDetails() {
        return this._tag == Tag.SHOWCASE_FILE_REMOVED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_FILE_REMOVED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_FILE_REMOVED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseFileRemovedDetails(ShowcaseFileRemovedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseFileRemovedDetails(Tag.SHOWCASE_FILE_REMOVED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHOWCASE_FILE_REMOVED_DETAILS}.
     *
     * @return The {@link ShowcaseFileRemovedDetails} value associated with this
     *     instance if {@link #isShowcaseFileRemovedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseFileRemovedDetails}
     *     is {@code false}.
     */
    public ShowcaseFileRemovedDetails getShowcaseFileRemovedDetailsValue() {
        if (this._tag != Tag.SHOWCASE_FILE_REMOVED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_FILE_REMOVED_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseFileRemovedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_FILE_VIEW_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_FILE_VIEW_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseFileViewDetails() {
        return this._tag == Tag.SHOWCASE_FILE_VIEW_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_FILE_VIEW_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_FILE_VIEW_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseFileViewDetails(ShowcaseFileViewDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseFileViewDetails(Tag.SHOWCASE_FILE_VIEW_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHOWCASE_FILE_VIEW_DETAILS}.
     *
     * @return The {@link ShowcaseFileViewDetails} value associated with this
     *     instance if {@link #isShowcaseFileViewDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseFileViewDetails} is
     *     {@code false}.
     */
    public ShowcaseFileViewDetails getShowcaseFileViewDetailsValue() {
        if (this._tag != Tag.SHOWCASE_FILE_VIEW_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_FILE_VIEW_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseFileViewDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_PERMANENTLY_DELETED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_PERMANENTLY_DELETED_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcasePermanentlyDeletedDetails() {
        return this._tag == Tag.SHOWCASE_PERMANENTLY_DELETED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_PERMANENTLY_DELETED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_PERMANENTLY_DELETED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcasePermanentlyDeletedDetails(ShowcasePermanentlyDeletedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcasePermanentlyDeletedDetails(Tag.SHOWCASE_PERMANENTLY_DELETED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHOWCASE_PERMANENTLY_DELETED_DETAILS}.
     *
     * @return The {@link ShowcasePermanentlyDeletedDetails} value associated
     *     with this instance if {@link #isShowcasePermanentlyDeletedDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isShowcasePermanentlyDeletedDetails} is {@code false}.
     */
    public ShowcasePermanentlyDeletedDetails getShowcasePermanentlyDeletedDetailsValue() {
        if (this._tag != Tag.SHOWCASE_PERMANENTLY_DELETED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_PERMANENTLY_DELETED_DETAILS, but was Tag." + this._tag.name());
        }
        return showcasePermanentlyDeletedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_POST_COMMENT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_POST_COMMENT_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcasePostCommentDetails() {
        return this._tag == Tag.SHOWCASE_POST_COMMENT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_POST_COMMENT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_POST_COMMENT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcasePostCommentDetails(ShowcasePostCommentDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcasePostCommentDetails(Tag.SHOWCASE_POST_COMMENT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHOWCASE_POST_COMMENT_DETAILS}.
     *
     * @return The {@link ShowcasePostCommentDetails} value associated with this
     *     instance if {@link #isShowcasePostCommentDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcasePostCommentDetails}
     *     is {@code false}.
     */
    public ShowcasePostCommentDetails getShowcasePostCommentDetailsValue() {
        if (this._tag != Tag.SHOWCASE_POST_COMMENT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_POST_COMMENT_DETAILS, but was Tag." + this._tag.name());
        }
        return showcasePostCommentDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_REMOVE_MEMBER_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_REMOVE_MEMBER_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseRemoveMemberDetails() {
        return this._tag == Tag.SHOWCASE_REMOVE_MEMBER_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_REMOVE_MEMBER_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_REMOVE_MEMBER_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseRemoveMemberDetails(ShowcaseRemoveMemberDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseRemoveMemberDetails(Tag.SHOWCASE_REMOVE_MEMBER_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHOWCASE_REMOVE_MEMBER_DETAILS}.
     *
     * @return The {@link ShowcaseRemoveMemberDetails} value associated with
     *     this instance if {@link #isShowcaseRemoveMemberDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseRemoveMemberDetails}
     *     is {@code false}.
     */
    public ShowcaseRemoveMemberDetails getShowcaseRemoveMemberDetailsValue() {
        if (this._tag != Tag.SHOWCASE_REMOVE_MEMBER_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_REMOVE_MEMBER_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseRemoveMemberDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_RENAMED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_RENAMED_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseRenamedDetails() {
        return this._tag == Tag.SHOWCASE_RENAMED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_RENAMED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_RENAMED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseRenamedDetails(ShowcaseRenamedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseRenamedDetails(Tag.SHOWCASE_RENAMED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHOWCASE_RENAMED_DETAILS}.
     *
     * @return The {@link ShowcaseRenamedDetails} value associated with this
     *     instance if {@link #isShowcaseRenamedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseRenamedDetails} is
     *     {@code false}.
     */
    public ShowcaseRenamedDetails getShowcaseRenamedDetailsValue() {
        if (this._tag != Tag.SHOWCASE_RENAMED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_RENAMED_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseRenamedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_REQUEST_ACCESS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_REQUEST_ACCESS_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseRequestAccessDetails() {
        return this._tag == Tag.SHOWCASE_REQUEST_ACCESS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_REQUEST_ACCESS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_REQUEST_ACCESS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseRequestAccessDetails(ShowcaseRequestAccessDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseRequestAccessDetails(Tag.SHOWCASE_REQUEST_ACCESS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHOWCASE_REQUEST_ACCESS_DETAILS}.
     *
     * @return The {@link ShowcaseRequestAccessDetails} value associated with
     *     this instance if {@link #isShowcaseRequestAccessDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseRequestAccessDetails}
     *     is {@code false}.
     */
    public ShowcaseRequestAccessDetails getShowcaseRequestAccessDetailsValue() {
        if (this._tag != Tag.SHOWCASE_REQUEST_ACCESS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_REQUEST_ACCESS_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseRequestAccessDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_RESOLVE_COMMENT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_RESOLVE_COMMENT_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseResolveCommentDetails() {
        return this._tag == Tag.SHOWCASE_RESOLVE_COMMENT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_RESOLVE_COMMENT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_RESOLVE_COMMENT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseResolveCommentDetails(ShowcaseResolveCommentDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseResolveCommentDetails(Tag.SHOWCASE_RESOLVE_COMMENT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHOWCASE_RESOLVE_COMMENT_DETAILS}.
     *
     * @return The {@link ShowcaseResolveCommentDetails} value associated with
     *     this instance if {@link #isShowcaseResolveCommentDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isShowcaseResolveCommentDetails} is {@code false}.
     */
    public ShowcaseResolveCommentDetails getShowcaseResolveCommentDetailsValue() {
        if (this._tag != Tag.SHOWCASE_RESOLVE_COMMENT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_RESOLVE_COMMENT_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseResolveCommentDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_RESTORED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_RESTORED_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseRestoredDetails() {
        return this._tag == Tag.SHOWCASE_RESTORED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_RESTORED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_RESTORED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseRestoredDetails(ShowcaseRestoredDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseRestoredDetails(Tag.SHOWCASE_RESTORED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHOWCASE_RESTORED_DETAILS}.
     *
     * @return The {@link ShowcaseRestoredDetails} value associated with this
     *     instance if {@link #isShowcaseRestoredDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseRestoredDetails} is
     *     {@code false}.
     */
    public ShowcaseRestoredDetails getShowcaseRestoredDetailsValue() {
        if (this._tag != Tag.SHOWCASE_RESTORED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_RESTORED_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseRestoredDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_TRASHED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_TRASHED_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseTrashedDetails() {
        return this._tag == Tag.SHOWCASE_TRASHED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_TRASHED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_TRASHED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseTrashedDetails(ShowcaseTrashedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseTrashedDetails(Tag.SHOWCASE_TRASHED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHOWCASE_TRASHED_DETAILS}.
     *
     * @return The {@link ShowcaseTrashedDetails} value associated with this
     *     instance if {@link #isShowcaseTrashedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseTrashedDetails} is
     *     {@code false}.
     */
    public ShowcaseTrashedDetails getShowcaseTrashedDetailsValue() {
        if (this._tag != Tag.SHOWCASE_TRASHED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_TRASHED_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseTrashedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_TRASHED_DEPRECATED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_TRASHED_DEPRECATED_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseTrashedDeprecatedDetails() {
        return this._tag == Tag.SHOWCASE_TRASHED_DEPRECATED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_TRASHED_DEPRECATED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_TRASHED_DEPRECATED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseTrashedDeprecatedDetails(ShowcaseTrashedDeprecatedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseTrashedDeprecatedDetails(Tag.SHOWCASE_TRASHED_DEPRECATED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHOWCASE_TRASHED_DEPRECATED_DETAILS}.
     *
     * @return The {@link ShowcaseTrashedDeprecatedDetails} value associated
     *     with this instance if {@link #isShowcaseTrashedDeprecatedDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isShowcaseTrashedDeprecatedDetails} is {@code false}.
     */
    public ShowcaseTrashedDeprecatedDetails getShowcaseTrashedDeprecatedDetailsValue() {
        if (this._tag != Tag.SHOWCASE_TRASHED_DEPRECATED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_TRASHED_DEPRECATED_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseTrashedDeprecatedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_UNRESOLVE_COMMENT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_UNRESOLVE_COMMENT_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseUnresolveCommentDetails() {
        return this._tag == Tag.SHOWCASE_UNRESOLVE_COMMENT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_UNRESOLVE_COMMENT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_UNRESOLVE_COMMENT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseUnresolveCommentDetails(ShowcaseUnresolveCommentDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseUnresolveCommentDetails(Tag.SHOWCASE_UNRESOLVE_COMMENT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHOWCASE_UNRESOLVE_COMMENT_DETAILS}.
     *
     * @return The {@link ShowcaseUnresolveCommentDetails} value associated with
     *     this instance if {@link #isShowcaseUnresolveCommentDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isShowcaseUnresolveCommentDetails} is {@code false}.
     */
    public ShowcaseUnresolveCommentDetails getShowcaseUnresolveCommentDetailsValue() {
        if (this._tag != Tag.SHOWCASE_UNRESOLVE_COMMENT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_UNRESOLVE_COMMENT_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseUnresolveCommentDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_UNTRASHED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_UNTRASHED_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseUntrashedDetails() {
        return this._tag == Tag.SHOWCASE_UNTRASHED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_UNTRASHED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_UNTRASHED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseUntrashedDetails(ShowcaseUntrashedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseUntrashedDetails(Tag.SHOWCASE_UNTRASHED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHOWCASE_UNTRASHED_DETAILS}.
     *
     * @return The {@link ShowcaseUntrashedDetails} value associated with this
     *     instance if {@link #isShowcaseUntrashedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseUntrashedDetails} is
     *     {@code false}.
     */
    public ShowcaseUntrashedDetails getShowcaseUntrashedDetailsValue() {
        if (this._tag != Tag.SHOWCASE_UNTRASHED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_UNTRASHED_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseUntrashedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_UNTRASHED_DEPRECATED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_UNTRASHED_DEPRECATED_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseUntrashedDeprecatedDetails() {
        return this._tag == Tag.SHOWCASE_UNTRASHED_DEPRECATED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_UNTRASHED_DEPRECATED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_UNTRASHED_DEPRECATED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseUntrashedDeprecatedDetails(ShowcaseUntrashedDeprecatedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseUntrashedDeprecatedDetails(Tag.SHOWCASE_UNTRASHED_DEPRECATED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHOWCASE_UNTRASHED_DEPRECATED_DETAILS}.
     *
     * @return The {@link ShowcaseUntrashedDeprecatedDetails} value associated
     *     with this instance if {@link #isShowcaseUntrashedDeprecatedDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isShowcaseUntrashedDeprecatedDetails} is {@code false}.
     */
    public ShowcaseUntrashedDeprecatedDetails getShowcaseUntrashedDeprecatedDetailsValue() {
        if (this._tag != Tag.SHOWCASE_UNTRASHED_DEPRECATED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_UNTRASHED_DEPRECATED_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseUntrashedDeprecatedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_VIEW_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_VIEW_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseViewDetails() {
        return this._tag == Tag.SHOWCASE_VIEW_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_VIEW_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_VIEW_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseViewDetails(ShowcaseViewDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseViewDetails(Tag.SHOWCASE_VIEW_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SHOWCASE_VIEW_DETAILS}.
     *
     * @return The {@link ShowcaseViewDetails} value associated with this
     *     instance if {@link #isShowcaseViewDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseViewDetails} is
     *     {@code false}.
     */
    public ShowcaseViewDetails getShowcaseViewDetailsValue() {
        if (this._tag != Tag.SHOWCASE_VIEW_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_VIEW_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseViewDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_ADD_CERT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_ADD_CERT_DETAILS}, {@code false} otherwise.
     */
    public boolean isSsoAddCertDetails() {
        return this._tag == Tag.SSO_ADD_CERT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SSO_ADD_CERT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SSO_ADD_CERT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails ssoAddCertDetails(SsoAddCertDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSsoAddCertDetails(Tag.SSO_ADD_CERT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SSO_ADD_CERT_DETAILS}.
     *
     * @return The {@link SsoAddCertDetails} value associated with this instance
     *     if {@link #isSsoAddCertDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoAddCertDetails} is {@code
     *     false}.
     */
    public SsoAddCertDetails getSsoAddCertDetailsValue() {
        if (this._tag != Tag.SSO_ADD_CERT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_ADD_CERT_DETAILS, but was Tag." + this._tag.name());
        }
        return ssoAddCertDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_ADD_LOGIN_URL_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_ADD_LOGIN_URL_DETAILS}, {@code false} otherwise.
     */
    public boolean isSsoAddLoginUrlDetails() {
        return this._tag == Tag.SSO_ADD_LOGIN_URL_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SSO_ADD_LOGIN_URL_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SSO_ADD_LOGIN_URL_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails ssoAddLoginUrlDetails(SsoAddLoginUrlDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSsoAddLoginUrlDetails(Tag.SSO_ADD_LOGIN_URL_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SSO_ADD_LOGIN_URL_DETAILS}.
     *
     * @return The {@link SsoAddLoginUrlDetails} value associated with this
     *     instance if {@link #isSsoAddLoginUrlDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoAddLoginUrlDetails} is
     *     {@code false}.
     */
    public SsoAddLoginUrlDetails getSsoAddLoginUrlDetailsValue() {
        if (this._tag != Tag.SSO_ADD_LOGIN_URL_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_ADD_LOGIN_URL_DETAILS, but was Tag." + this._tag.name());
        }
        return ssoAddLoginUrlDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_ADD_LOGOUT_URL_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_ADD_LOGOUT_URL_DETAILS}, {@code false} otherwise.
     */
    public boolean isSsoAddLogoutUrlDetails() {
        return this._tag == Tag.SSO_ADD_LOGOUT_URL_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SSO_ADD_LOGOUT_URL_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SSO_ADD_LOGOUT_URL_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails ssoAddLogoutUrlDetails(SsoAddLogoutUrlDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSsoAddLogoutUrlDetails(Tag.SSO_ADD_LOGOUT_URL_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SSO_ADD_LOGOUT_URL_DETAILS}.
     *
     * @return The {@link SsoAddLogoutUrlDetails} value associated with this
     *     instance if {@link #isSsoAddLogoutUrlDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoAddLogoutUrlDetails} is
     *     {@code false}.
     */
    public SsoAddLogoutUrlDetails getSsoAddLogoutUrlDetailsValue() {
        if (this._tag != Tag.SSO_ADD_LOGOUT_URL_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_ADD_LOGOUT_URL_DETAILS, but was Tag." + this._tag.name());
        }
        return ssoAddLogoutUrlDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_CHANGE_CERT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_CHANGE_CERT_DETAILS}, {@code false} otherwise.
     */
    public boolean isSsoChangeCertDetails() {
        return this._tag == Tag.SSO_CHANGE_CERT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SSO_CHANGE_CERT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SSO_CHANGE_CERT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails ssoChangeCertDetails(SsoChangeCertDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSsoChangeCertDetails(Tag.SSO_CHANGE_CERT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SSO_CHANGE_CERT_DETAILS}.
     *
     * @return The {@link SsoChangeCertDetails} value associated with this
     *     instance if {@link #isSsoChangeCertDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoChangeCertDetails} is
     *     {@code false}.
     */
    public SsoChangeCertDetails getSsoChangeCertDetailsValue() {
        if (this._tag != Tag.SSO_CHANGE_CERT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_CHANGE_CERT_DETAILS, but was Tag." + this._tag.name());
        }
        return ssoChangeCertDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_CHANGE_LOGIN_URL_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_CHANGE_LOGIN_URL_DETAILS}, {@code false} otherwise.
     */
    public boolean isSsoChangeLoginUrlDetails() {
        return this._tag == Tag.SSO_CHANGE_LOGIN_URL_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SSO_CHANGE_LOGIN_URL_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SSO_CHANGE_LOGIN_URL_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails ssoChangeLoginUrlDetails(SsoChangeLoginUrlDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSsoChangeLoginUrlDetails(Tag.SSO_CHANGE_LOGIN_URL_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SSO_CHANGE_LOGIN_URL_DETAILS}.
     *
     * @return The {@link SsoChangeLoginUrlDetails} value associated with this
     *     instance if {@link #isSsoChangeLoginUrlDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoChangeLoginUrlDetails} is
     *     {@code false}.
     */
    public SsoChangeLoginUrlDetails getSsoChangeLoginUrlDetailsValue() {
        if (this._tag != Tag.SSO_CHANGE_LOGIN_URL_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_CHANGE_LOGIN_URL_DETAILS, but was Tag." + this._tag.name());
        }
        return ssoChangeLoginUrlDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_CHANGE_LOGOUT_URL_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_CHANGE_LOGOUT_URL_DETAILS}, {@code false} otherwise.
     */
    public boolean isSsoChangeLogoutUrlDetails() {
        return this._tag == Tag.SSO_CHANGE_LOGOUT_URL_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SSO_CHANGE_LOGOUT_URL_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SSO_CHANGE_LOGOUT_URL_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails ssoChangeLogoutUrlDetails(SsoChangeLogoutUrlDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSsoChangeLogoutUrlDetails(Tag.SSO_CHANGE_LOGOUT_URL_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SSO_CHANGE_LOGOUT_URL_DETAILS}.
     *
     * @return The {@link SsoChangeLogoutUrlDetails} value associated with this
     *     instance if {@link #isSsoChangeLogoutUrlDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoChangeLogoutUrlDetails} is
     *     {@code false}.
     */
    public SsoChangeLogoutUrlDetails getSsoChangeLogoutUrlDetailsValue() {
        if (this._tag != Tag.SSO_CHANGE_LOGOUT_URL_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_CHANGE_LOGOUT_URL_DETAILS, but was Tag." + this._tag.name());
        }
        return ssoChangeLogoutUrlDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_CHANGE_SAML_IDENTITY_MODE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_CHANGE_SAML_IDENTITY_MODE_DETAILS}, {@code false} otherwise.
     */
    public boolean isSsoChangeSamlIdentityModeDetails() {
        return this._tag == Tag.SSO_CHANGE_SAML_IDENTITY_MODE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SSO_CHANGE_SAML_IDENTITY_MODE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SSO_CHANGE_SAML_IDENTITY_MODE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails ssoChangeSamlIdentityModeDetails(SsoChangeSamlIdentityModeDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSsoChangeSamlIdentityModeDetails(Tag.SSO_CHANGE_SAML_IDENTITY_MODE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SSO_CHANGE_SAML_IDENTITY_MODE_DETAILS}.
     *
     * @return The {@link SsoChangeSamlIdentityModeDetails} value associated
     *     with this instance if {@link #isSsoChangeSamlIdentityModeDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSsoChangeSamlIdentityModeDetails} is {@code false}.
     */
    public SsoChangeSamlIdentityModeDetails getSsoChangeSamlIdentityModeDetailsValue() {
        if (this._tag != Tag.SSO_CHANGE_SAML_IDENTITY_MODE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_CHANGE_SAML_IDENTITY_MODE_DETAILS, but was Tag." + this._tag.name());
        }
        return ssoChangeSamlIdentityModeDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_REMOVE_CERT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_REMOVE_CERT_DETAILS}, {@code false} otherwise.
     */
    public boolean isSsoRemoveCertDetails() {
        return this._tag == Tag.SSO_REMOVE_CERT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SSO_REMOVE_CERT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SSO_REMOVE_CERT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails ssoRemoveCertDetails(SsoRemoveCertDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSsoRemoveCertDetails(Tag.SSO_REMOVE_CERT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SSO_REMOVE_CERT_DETAILS}.
     *
     * @return The {@link SsoRemoveCertDetails} value associated with this
     *     instance if {@link #isSsoRemoveCertDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoRemoveCertDetails} is
     *     {@code false}.
     */
    public SsoRemoveCertDetails getSsoRemoveCertDetailsValue() {
        if (this._tag != Tag.SSO_REMOVE_CERT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_REMOVE_CERT_DETAILS, but was Tag." + this._tag.name());
        }
        return ssoRemoveCertDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_REMOVE_LOGIN_URL_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_REMOVE_LOGIN_URL_DETAILS}, {@code false} otherwise.
     */
    public boolean isSsoRemoveLoginUrlDetails() {
        return this._tag == Tag.SSO_REMOVE_LOGIN_URL_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SSO_REMOVE_LOGIN_URL_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SSO_REMOVE_LOGIN_URL_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails ssoRemoveLoginUrlDetails(SsoRemoveLoginUrlDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSsoRemoveLoginUrlDetails(Tag.SSO_REMOVE_LOGIN_URL_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SSO_REMOVE_LOGIN_URL_DETAILS}.
     *
     * @return The {@link SsoRemoveLoginUrlDetails} value associated with this
     *     instance if {@link #isSsoRemoveLoginUrlDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoRemoveLoginUrlDetails} is
     *     {@code false}.
     */
    public SsoRemoveLoginUrlDetails getSsoRemoveLoginUrlDetailsValue() {
        if (this._tag != Tag.SSO_REMOVE_LOGIN_URL_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_REMOVE_LOGIN_URL_DETAILS, but was Tag." + this._tag.name());
        }
        return ssoRemoveLoginUrlDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_REMOVE_LOGOUT_URL_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_REMOVE_LOGOUT_URL_DETAILS}, {@code false} otherwise.
     */
    public boolean isSsoRemoveLogoutUrlDetails() {
        return this._tag == Tag.SSO_REMOVE_LOGOUT_URL_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SSO_REMOVE_LOGOUT_URL_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SSO_REMOVE_LOGOUT_URL_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails ssoRemoveLogoutUrlDetails(SsoRemoveLogoutUrlDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSsoRemoveLogoutUrlDetails(Tag.SSO_REMOVE_LOGOUT_URL_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SSO_REMOVE_LOGOUT_URL_DETAILS}.
     *
     * @return The {@link SsoRemoveLogoutUrlDetails} value associated with this
     *     instance if {@link #isSsoRemoveLogoutUrlDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoRemoveLogoutUrlDetails} is
     *     {@code false}.
     */
    public SsoRemoveLogoutUrlDetails getSsoRemoveLogoutUrlDetailsValue() {
        if (this._tag != Tag.SSO_REMOVE_LOGOUT_URL_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_REMOVE_LOGOUT_URL_DETAILS, but was Tag." + this._tag.name());
        }
        return ssoRemoveLogoutUrlDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_FOLDER_CHANGE_STATUS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_FOLDER_CHANGE_STATUS_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamFolderChangeStatusDetails() {
        return this._tag == Tag.TEAM_FOLDER_CHANGE_STATUS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_FOLDER_CHANGE_STATUS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_FOLDER_CHANGE_STATUS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamFolderChangeStatusDetails(TeamFolderChangeStatusDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamFolderChangeStatusDetails(Tag.TEAM_FOLDER_CHANGE_STATUS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_FOLDER_CHANGE_STATUS_DETAILS}.
     *
     * @return The {@link TeamFolderChangeStatusDetails} value associated with
     *     this instance if {@link #isTeamFolderChangeStatusDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamFolderChangeStatusDetails} is {@code false}.
     */
    public TeamFolderChangeStatusDetails getTeamFolderChangeStatusDetailsValue() {
        if (this._tag != Tag.TEAM_FOLDER_CHANGE_STATUS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_FOLDER_CHANGE_STATUS_DETAILS, but was Tag." + this._tag.name());
        }
        return teamFolderChangeStatusDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_FOLDER_CREATE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_FOLDER_CREATE_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamFolderCreateDetails() {
        return this._tag == Tag.TEAM_FOLDER_CREATE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_FOLDER_CREATE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_FOLDER_CREATE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamFolderCreateDetails(TeamFolderCreateDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamFolderCreateDetails(Tag.TEAM_FOLDER_CREATE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#TEAM_FOLDER_CREATE_DETAILS}.
     *
     * @return The {@link TeamFolderCreateDetails} value associated with this
     *     instance if {@link #isTeamFolderCreateDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamFolderCreateDetails} is
     *     {@code false}.
     */
    public TeamFolderCreateDetails getTeamFolderCreateDetailsValue() {
        if (this._tag != Tag.TEAM_FOLDER_CREATE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_FOLDER_CREATE_DETAILS, but was Tag." + this._tag.name());
        }
        return teamFolderCreateDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_FOLDER_DOWNGRADE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_FOLDER_DOWNGRADE_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamFolderDowngradeDetails() {
        return this._tag == Tag.TEAM_FOLDER_DOWNGRADE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_FOLDER_DOWNGRADE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_FOLDER_DOWNGRADE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamFolderDowngradeDetails(TeamFolderDowngradeDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamFolderDowngradeDetails(Tag.TEAM_FOLDER_DOWNGRADE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_FOLDER_DOWNGRADE_DETAILS}.
     *
     * @return The {@link TeamFolderDowngradeDetails} value associated with this
     *     instance if {@link #isTeamFolderDowngradeDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamFolderDowngradeDetails}
     *     is {@code false}.
     */
    public TeamFolderDowngradeDetails getTeamFolderDowngradeDetailsValue() {
        if (this._tag != Tag.TEAM_FOLDER_DOWNGRADE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_FOLDER_DOWNGRADE_DETAILS, but was Tag." + this._tag.name());
        }
        return teamFolderDowngradeDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_FOLDER_PERMANENTLY_DELETE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_FOLDER_PERMANENTLY_DELETE_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamFolderPermanentlyDeleteDetails() {
        return this._tag == Tag.TEAM_FOLDER_PERMANENTLY_DELETE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_FOLDER_PERMANENTLY_DELETE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_FOLDER_PERMANENTLY_DELETE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamFolderPermanentlyDeleteDetails(TeamFolderPermanentlyDeleteDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamFolderPermanentlyDeleteDetails(Tag.TEAM_FOLDER_PERMANENTLY_DELETE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_FOLDER_PERMANENTLY_DELETE_DETAILS}.
     *
     * @return The {@link TeamFolderPermanentlyDeleteDetails} value associated
     *     with this instance if {@link #isTeamFolderPermanentlyDeleteDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamFolderPermanentlyDeleteDetails} is {@code false}.
     */
    public TeamFolderPermanentlyDeleteDetails getTeamFolderPermanentlyDeleteDetailsValue() {
        if (this._tag != Tag.TEAM_FOLDER_PERMANENTLY_DELETE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_FOLDER_PERMANENTLY_DELETE_DETAILS, but was Tag." + this._tag.name());
        }
        return teamFolderPermanentlyDeleteDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_FOLDER_RENAME_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_FOLDER_RENAME_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamFolderRenameDetails() {
        return this._tag == Tag.TEAM_FOLDER_RENAME_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_FOLDER_RENAME_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_FOLDER_RENAME_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamFolderRenameDetails(TeamFolderRenameDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamFolderRenameDetails(Tag.TEAM_FOLDER_RENAME_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#TEAM_FOLDER_RENAME_DETAILS}.
     *
     * @return The {@link TeamFolderRenameDetails} value associated with this
     *     instance if {@link #isTeamFolderRenameDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamFolderRenameDetails} is
     *     {@code false}.
     */
    public TeamFolderRenameDetails getTeamFolderRenameDetailsValue() {
        if (this._tag != Tag.TEAM_FOLDER_RENAME_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_FOLDER_RENAME_DETAILS, but was Tag." + this._tag.name());
        }
        return teamFolderRenameDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isTeamSelectiveSyncSettingsChangedDetails() {
        return this._tag == Tag.TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamSelectiveSyncSettingsChangedDetails(TeamSelectiveSyncSettingsChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamSelectiveSyncSettingsChangedDetails(Tag.TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED_DETAILS}.
     *
     * @return The {@link TeamSelectiveSyncSettingsChangedDetails} value
     *     associated with this instance if {@link
     *     #isTeamSelectiveSyncSettingsChangedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamSelectiveSyncSettingsChangedDetails} is {@code false}.
     */
    public TeamSelectiveSyncSettingsChangedDetails getTeamSelectiveSyncSettingsChangedDetailsValue() {
        if (this._tag != Tag.TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return teamSelectiveSyncSettingsChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ACCOUNT_CAPTURE_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ACCOUNT_CAPTURE_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     */
    public boolean isAccountCaptureChangePolicyDetails() {
        return this._tag == Tag.ACCOUNT_CAPTURE_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#ACCOUNT_CAPTURE_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#ACCOUNT_CAPTURE_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails accountCaptureChangePolicyDetails(AccountCaptureChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndAccountCaptureChangePolicyDetails(Tag.ACCOUNT_CAPTURE_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#ACCOUNT_CAPTURE_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link AccountCaptureChangePolicyDetails} value associated
     *     with this instance if {@link #isAccountCaptureChangePolicyDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isAccountCaptureChangePolicyDetails} is {@code false}.
     */
    public AccountCaptureChangePolicyDetails getAccountCaptureChangePolicyDetailsValue() {
        if (this._tag != Tag.ACCOUNT_CAPTURE_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.ACCOUNT_CAPTURE_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return accountCaptureChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ADMIN_EMAIL_REMINDERS_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ADMIN_EMAIL_REMINDERS_CHANGED_DETAILS}, {@code false} otherwise.
     */
    public boolean isAdminEmailRemindersChangedDetails() {
        return this._tag == Tag.ADMIN_EMAIL_REMINDERS_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#ADMIN_EMAIL_REMINDERS_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#ADMIN_EMAIL_REMINDERS_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails adminEmailRemindersChangedDetails(AdminEmailRemindersChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndAdminEmailRemindersChangedDetails(Tag.ADMIN_EMAIL_REMINDERS_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#ADMIN_EMAIL_REMINDERS_CHANGED_DETAILS}.
     *
     * @return The {@link AdminEmailRemindersChangedDetails} value associated
     *     with this instance if {@link #isAdminEmailRemindersChangedDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isAdminEmailRemindersChangedDetails} is {@code false}.
     */
    public AdminEmailRemindersChangedDetails getAdminEmailRemindersChangedDetailsValue() {
        if (this._tag != Tag.ADMIN_EMAIL_REMINDERS_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.ADMIN_EMAIL_REMINDERS_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return adminEmailRemindersChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ALLOW_DOWNLOAD_DISABLED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ALLOW_DOWNLOAD_DISABLED_DETAILS}, {@code false} otherwise.
     */
    public boolean isAllowDownloadDisabledDetails() {
        return this._tag == Tag.ALLOW_DOWNLOAD_DISABLED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#ALLOW_DOWNLOAD_DISABLED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#ALLOW_DOWNLOAD_DISABLED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails allowDownloadDisabledDetails(AllowDownloadDisabledDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndAllowDownloadDisabledDetails(Tag.ALLOW_DOWNLOAD_DISABLED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#ALLOW_DOWNLOAD_DISABLED_DETAILS}.
     *
     * @return The {@link AllowDownloadDisabledDetails} value associated with
     *     this instance if {@link #isAllowDownloadDisabledDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isAllowDownloadDisabledDetails}
     *     is {@code false}.
     */
    public AllowDownloadDisabledDetails getAllowDownloadDisabledDetailsValue() {
        if (this._tag != Tag.ALLOW_DOWNLOAD_DISABLED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.ALLOW_DOWNLOAD_DISABLED_DETAILS, but was Tag." + this._tag.name());
        }
        return allowDownloadDisabledDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ALLOW_DOWNLOAD_ENABLED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ALLOW_DOWNLOAD_ENABLED_DETAILS}, {@code false} otherwise.
     */
    public boolean isAllowDownloadEnabledDetails() {
        return this._tag == Tag.ALLOW_DOWNLOAD_ENABLED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#ALLOW_DOWNLOAD_ENABLED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#ALLOW_DOWNLOAD_ENABLED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails allowDownloadEnabledDetails(AllowDownloadEnabledDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndAllowDownloadEnabledDetails(Tag.ALLOW_DOWNLOAD_ENABLED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#ALLOW_DOWNLOAD_ENABLED_DETAILS}.
     *
     * @return The {@link AllowDownloadEnabledDetails} value associated with
     *     this instance if {@link #isAllowDownloadEnabledDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isAllowDownloadEnabledDetails}
     *     is {@code false}.
     */
    public AllowDownloadEnabledDetails getAllowDownloadEnabledDetailsValue() {
        if (this._tag != Tag.ALLOW_DOWNLOAD_ENABLED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.ALLOW_DOWNLOAD_ENABLED_DETAILS, but was Tag." + this._tag.name());
        }
        return allowDownloadEnabledDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#APP_PERMISSIONS_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#APP_PERMISSIONS_CHANGED_DETAILS}, {@code false} otherwise.
     */
    public boolean isAppPermissionsChangedDetails() {
        return this._tag == Tag.APP_PERMISSIONS_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#APP_PERMISSIONS_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#APP_PERMISSIONS_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails appPermissionsChangedDetails(AppPermissionsChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndAppPermissionsChangedDetails(Tag.APP_PERMISSIONS_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#APP_PERMISSIONS_CHANGED_DETAILS}.
     *
     * @return The {@link AppPermissionsChangedDetails} value associated with
     *     this instance if {@link #isAppPermissionsChangedDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isAppPermissionsChangedDetails}
     *     is {@code false}.
     */
    public AppPermissionsChangedDetails getAppPermissionsChangedDetailsValue() {
        if (this._tag != Tag.APP_PERMISSIONS_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.APP_PERMISSIONS_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return appPermissionsChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#CAMERA_UPLOADS_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#CAMERA_UPLOADS_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     */
    public boolean isCameraUploadsPolicyChangedDetails() {
        return this._tag == Tag.CAMERA_UPLOADS_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#CAMERA_UPLOADS_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#CAMERA_UPLOADS_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails cameraUploadsPolicyChangedDetails(CameraUploadsPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndCameraUploadsPolicyChangedDetails(Tag.CAMERA_UPLOADS_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#CAMERA_UPLOADS_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link CameraUploadsPolicyChangedDetails} value associated
     *     with this instance if {@link #isCameraUploadsPolicyChangedDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isCameraUploadsPolicyChangedDetails} is {@code false}.
     */
    public CameraUploadsPolicyChangedDetails getCameraUploadsPolicyChangedDetailsValue() {
        if (this._tag != Tag.CAMERA_UPLOADS_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.CAMERA_UPLOADS_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return cameraUploadsPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#CAPTURE_TRANSCRIPT_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#CAPTURE_TRANSCRIPT_POLICY_CHANGED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isCaptureTranscriptPolicyChangedDetails() {
        return this._tag == Tag.CAPTURE_TRANSCRIPT_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#CAPTURE_TRANSCRIPT_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#CAPTURE_TRANSCRIPT_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails captureTranscriptPolicyChangedDetails(CaptureTranscriptPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndCaptureTranscriptPolicyChangedDetails(Tag.CAPTURE_TRANSCRIPT_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#CAPTURE_TRANSCRIPT_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link CaptureTranscriptPolicyChangedDetails} value
     *     associated with this instance if {@link
     *     #isCaptureTranscriptPolicyChangedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isCaptureTranscriptPolicyChangedDetails} is {@code false}.
     */
    public CaptureTranscriptPolicyChangedDetails getCaptureTranscriptPolicyChangedDetailsValue() {
        if (this._tag != Tag.CAPTURE_TRANSCRIPT_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.CAPTURE_TRANSCRIPT_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return captureTranscriptPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#CLASSIFICATION_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#CLASSIFICATION_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     */
    public boolean isClassificationChangePolicyDetails() {
        return this._tag == Tag.CLASSIFICATION_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#CLASSIFICATION_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#CLASSIFICATION_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails classificationChangePolicyDetails(ClassificationChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndClassificationChangePolicyDetails(Tag.CLASSIFICATION_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#CLASSIFICATION_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link ClassificationChangePolicyDetails} value associated
     *     with this instance if {@link #isClassificationChangePolicyDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isClassificationChangePolicyDetails} is {@code false}.
     */
    public ClassificationChangePolicyDetails getClassificationChangePolicyDetailsValue() {
        if (this._tag != Tag.CLASSIFICATION_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.CLASSIFICATION_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return classificationChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#COMPUTER_BACKUP_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#COMPUTER_BACKUP_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     */
    public boolean isComputerBackupPolicyChangedDetails() {
        return this._tag == Tag.COMPUTER_BACKUP_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#COMPUTER_BACKUP_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#COMPUTER_BACKUP_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails computerBackupPolicyChangedDetails(ComputerBackupPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndComputerBackupPolicyChangedDetails(Tag.COMPUTER_BACKUP_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#COMPUTER_BACKUP_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link ComputerBackupPolicyChangedDetails} value associated
     *     with this instance if {@link #isComputerBackupPolicyChangedDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isComputerBackupPolicyChangedDetails} is {@code false}.
     */
    public ComputerBackupPolicyChangedDetails getComputerBackupPolicyChangedDetailsValue() {
        if (this._tag != Tag.COMPUTER_BACKUP_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.COMPUTER_BACKUP_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return computerBackupPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#CONTENT_ADMINISTRATION_POLICY_CHANGED_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#CONTENT_ADMINISTRATION_POLICY_CHANGED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isContentAdministrationPolicyChangedDetails() {
        return this._tag == Tag.CONTENT_ADMINISTRATION_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#CONTENT_ADMINISTRATION_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#CONTENT_ADMINISTRATION_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails contentAdministrationPolicyChangedDetails(ContentAdministrationPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndContentAdministrationPolicyChangedDetails(Tag.CONTENT_ADMINISTRATION_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#CONTENT_ADMINISTRATION_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link ContentAdministrationPolicyChangedDetails} value
     *     associated with this instance if {@link
     *     #isContentAdministrationPolicyChangedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isContentAdministrationPolicyChangedDetails} is {@code false}.
     */
    public ContentAdministrationPolicyChangedDetails getContentAdministrationPolicyChangedDetailsValue() {
        if (this._tag != Tag.CONTENT_ADMINISTRATION_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.CONTENT_ADMINISTRATION_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return contentAdministrationPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isDataPlacementRestrictionChangePolicyDetails() {
        return this._tag == Tag.DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails dataPlacementRestrictionChangePolicyDetails(DataPlacementRestrictionChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDataPlacementRestrictionChangePolicyDetails(Tag.DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link DataPlacementRestrictionChangePolicyDetails} value
     *     associated with this instance if {@link
     *     #isDataPlacementRestrictionChangePolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDataPlacementRestrictionChangePolicyDetails} is {@code false}.
     */
    public DataPlacementRestrictionChangePolicyDetails getDataPlacementRestrictionChangePolicyDetailsValue() {
        if (this._tag != Tag.DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return dataPlacementRestrictionChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isDataPlacementRestrictionSatisfyPolicyDetails() {
        return this._tag == Tag.DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails dataPlacementRestrictionSatisfyPolicyDetails(DataPlacementRestrictionSatisfyPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDataPlacementRestrictionSatisfyPolicyDetails(Tag.DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY_DETAILS}.
     *
     * @return The {@link DataPlacementRestrictionSatisfyPolicyDetails} value
     *     associated with this instance if {@link
     *     #isDataPlacementRestrictionSatisfyPolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDataPlacementRestrictionSatisfyPolicyDetails} is {@code false}.
     */
    public DataPlacementRestrictionSatisfyPolicyDetails getDataPlacementRestrictionSatisfyPolicyDetailsValue() {
        if (this._tag != Tag.DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return dataPlacementRestrictionSatisfyPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_APPROVALS_ADD_EXCEPTION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_APPROVALS_ADD_EXCEPTION_DETAILS}, {@code false} otherwise.
     */
    public boolean isDeviceApprovalsAddExceptionDetails() {
        return this._tag == Tag.DEVICE_APPROVALS_ADD_EXCEPTION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DEVICE_APPROVALS_ADD_EXCEPTION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DEVICE_APPROVALS_ADD_EXCEPTION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails deviceApprovalsAddExceptionDetails(DeviceApprovalsAddExceptionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDeviceApprovalsAddExceptionDetails(Tag.DEVICE_APPROVALS_ADD_EXCEPTION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DEVICE_APPROVALS_ADD_EXCEPTION_DETAILS}.
     *
     * @return The {@link DeviceApprovalsAddExceptionDetails} value associated
     *     with this instance if {@link #isDeviceApprovalsAddExceptionDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDeviceApprovalsAddExceptionDetails} is {@code false}.
     */
    public DeviceApprovalsAddExceptionDetails getDeviceApprovalsAddExceptionDetailsValue() {
        if (this._tag != Tag.DEVICE_APPROVALS_ADD_EXCEPTION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_APPROVALS_ADD_EXCEPTION_DETAILS, but was Tag." + this._tag.name());
        }
        return deviceApprovalsAddExceptionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isDeviceApprovalsChangeDesktopPolicyDetails() {
        return this._tag == Tag.DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails deviceApprovalsChangeDesktopPolicyDetails(DeviceApprovalsChangeDesktopPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDeviceApprovalsChangeDesktopPolicyDetails(Tag.DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY_DETAILS}.
     *
     * @return The {@link DeviceApprovalsChangeDesktopPolicyDetails} value
     *     associated with this instance if {@link
     *     #isDeviceApprovalsChangeDesktopPolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDeviceApprovalsChangeDesktopPolicyDetails} is {@code false}.
     */
    public DeviceApprovalsChangeDesktopPolicyDetails getDeviceApprovalsChangeDesktopPolicyDetailsValue() {
        if (this._tag != Tag.DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return deviceApprovalsChangeDesktopPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_APPROVALS_CHANGE_MOBILE_POLICY_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_APPROVALS_CHANGE_MOBILE_POLICY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isDeviceApprovalsChangeMobilePolicyDetails() {
        return this._tag == Tag.DEVICE_APPROVALS_CHANGE_MOBILE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DEVICE_APPROVALS_CHANGE_MOBILE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DEVICE_APPROVALS_CHANGE_MOBILE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails deviceApprovalsChangeMobilePolicyDetails(DeviceApprovalsChangeMobilePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDeviceApprovalsChangeMobilePolicyDetails(Tag.DEVICE_APPROVALS_CHANGE_MOBILE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DEVICE_APPROVALS_CHANGE_MOBILE_POLICY_DETAILS}.
     *
     * @return The {@link DeviceApprovalsChangeMobilePolicyDetails} value
     *     associated with this instance if {@link
     *     #isDeviceApprovalsChangeMobilePolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDeviceApprovalsChangeMobilePolicyDetails} is {@code false}.
     */
    public DeviceApprovalsChangeMobilePolicyDetails getDeviceApprovalsChangeMobilePolicyDetailsValue() {
        if (this._tag != Tag.DEVICE_APPROVALS_CHANGE_MOBILE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_APPROVALS_CHANGE_MOBILE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return deviceApprovalsChangeMobilePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isDeviceApprovalsChangeOverageActionDetails() {
        return this._tag == Tag.DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails deviceApprovalsChangeOverageActionDetails(DeviceApprovalsChangeOverageActionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDeviceApprovalsChangeOverageActionDetails(Tag.DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION_DETAILS}.
     *
     * @return The {@link DeviceApprovalsChangeOverageActionDetails} value
     *     associated with this instance if {@link
     *     #isDeviceApprovalsChangeOverageActionDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDeviceApprovalsChangeOverageActionDetails} is {@code false}.
     */
    public DeviceApprovalsChangeOverageActionDetails getDeviceApprovalsChangeOverageActionDetailsValue() {
        if (this._tag != Tag.DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION_DETAILS, but was Tag." + this._tag.name());
        }
        return deviceApprovalsChangeOverageActionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_APPROVALS_CHANGE_UNLINK_ACTION_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_APPROVALS_CHANGE_UNLINK_ACTION_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isDeviceApprovalsChangeUnlinkActionDetails() {
        return this._tag == Tag.DEVICE_APPROVALS_CHANGE_UNLINK_ACTION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DEVICE_APPROVALS_CHANGE_UNLINK_ACTION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DEVICE_APPROVALS_CHANGE_UNLINK_ACTION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails deviceApprovalsChangeUnlinkActionDetails(DeviceApprovalsChangeUnlinkActionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDeviceApprovalsChangeUnlinkActionDetails(Tag.DEVICE_APPROVALS_CHANGE_UNLINK_ACTION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DEVICE_APPROVALS_CHANGE_UNLINK_ACTION_DETAILS}.
     *
     * @return The {@link DeviceApprovalsChangeUnlinkActionDetails} value
     *     associated with this instance if {@link
     *     #isDeviceApprovalsChangeUnlinkActionDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDeviceApprovalsChangeUnlinkActionDetails} is {@code false}.
     */
    public DeviceApprovalsChangeUnlinkActionDetails getDeviceApprovalsChangeUnlinkActionDetailsValue() {
        if (this._tag != Tag.DEVICE_APPROVALS_CHANGE_UNLINK_ACTION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_APPROVALS_CHANGE_UNLINK_ACTION_DETAILS, but was Tag." + this._tag.name());
        }
        return deviceApprovalsChangeUnlinkActionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_APPROVALS_REMOVE_EXCEPTION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_APPROVALS_REMOVE_EXCEPTION_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isDeviceApprovalsRemoveExceptionDetails() {
        return this._tag == Tag.DEVICE_APPROVALS_REMOVE_EXCEPTION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DEVICE_APPROVALS_REMOVE_EXCEPTION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DEVICE_APPROVALS_REMOVE_EXCEPTION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails deviceApprovalsRemoveExceptionDetails(DeviceApprovalsRemoveExceptionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDeviceApprovalsRemoveExceptionDetails(Tag.DEVICE_APPROVALS_REMOVE_EXCEPTION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DEVICE_APPROVALS_REMOVE_EXCEPTION_DETAILS}.
     *
     * @return The {@link DeviceApprovalsRemoveExceptionDetails} value
     *     associated with this instance if {@link
     *     #isDeviceApprovalsRemoveExceptionDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDeviceApprovalsRemoveExceptionDetails} is {@code false}.
     */
    public DeviceApprovalsRemoveExceptionDetails getDeviceApprovalsRemoveExceptionDetailsValue() {
        if (this._tag != Tag.DEVICE_APPROVALS_REMOVE_EXCEPTION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_APPROVALS_REMOVE_EXCEPTION_DETAILS, but was Tag." + this._tag.name());
        }
        return deviceApprovalsRemoveExceptionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DIRECTORY_RESTRICTIONS_ADD_MEMBERS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DIRECTORY_RESTRICTIONS_ADD_MEMBERS_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isDirectoryRestrictionsAddMembersDetails() {
        return this._tag == Tag.DIRECTORY_RESTRICTIONS_ADD_MEMBERS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DIRECTORY_RESTRICTIONS_ADD_MEMBERS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DIRECTORY_RESTRICTIONS_ADD_MEMBERS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails directoryRestrictionsAddMembersDetails(DirectoryRestrictionsAddMembersDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDirectoryRestrictionsAddMembersDetails(Tag.DIRECTORY_RESTRICTIONS_ADD_MEMBERS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DIRECTORY_RESTRICTIONS_ADD_MEMBERS_DETAILS}.
     *
     * @return The {@link DirectoryRestrictionsAddMembersDetails} value
     *     associated with this instance if {@link
     *     #isDirectoryRestrictionsAddMembersDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDirectoryRestrictionsAddMembersDetails} is {@code false}.
     */
    public DirectoryRestrictionsAddMembersDetails getDirectoryRestrictionsAddMembersDetailsValue() {
        if (this._tag != Tag.DIRECTORY_RESTRICTIONS_ADD_MEMBERS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DIRECTORY_RESTRICTIONS_ADD_MEMBERS_DETAILS, but was Tag." + this._tag.name());
        }
        return directoryRestrictionsAddMembersDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isDirectoryRestrictionsRemoveMembersDetails() {
        return this._tag == Tag.DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails directoryRestrictionsRemoveMembersDetails(DirectoryRestrictionsRemoveMembersDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDirectoryRestrictionsRemoveMembersDetails(Tag.DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS_DETAILS}.
     *
     * @return The {@link DirectoryRestrictionsRemoveMembersDetails} value
     *     associated with this instance if {@link
     *     #isDirectoryRestrictionsRemoveMembersDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDirectoryRestrictionsRemoveMembersDetails} is {@code false}.
     */
    public DirectoryRestrictionsRemoveMembersDetails getDirectoryRestrictionsRemoveMembersDetailsValue() {
        if (this._tag != Tag.DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS_DETAILS, but was Tag." + this._tag.name());
        }
        return directoryRestrictionsRemoveMembersDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DROPBOX_PASSWORDS_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DROPBOX_PASSWORDS_POLICY_CHANGED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isDropboxPasswordsPolicyChangedDetails() {
        return this._tag == Tag.DROPBOX_PASSWORDS_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DROPBOX_PASSWORDS_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DROPBOX_PASSWORDS_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails dropboxPasswordsPolicyChangedDetails(DropboxPasswordsPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDropboxPasswordsPolicyChangedDetails(Tag.DROPBOX_PASSWORDS_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DROPBOX_PASSWORDS_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link DropboxPasswordsPolicyChangedDetails} value associated
     *     with this instance if {@link #isDropboxPasswordsPolicyChangedDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDropboxPasswordsPolicyChangedDetails} is {@code false}.
     */
    public DropboxPasswordsPolicyChangedDetails getDropboxPasswordsPolicyChangedDetailsValue() {
        if (this._tag != Tag.DROPBOX_PASSWORDS_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DROPBOX_PASSWORDS_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return dropboxPasswordsPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EMAIL_INGEST_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EMAIL_INGEST_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     */
    public boolean isEmailIngestPolicyChangedDetails() {
        return this._tag == Tag.EMAIL_INGEST_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#EMAIL_INGEST_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#EMAIL_INGEST_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails emailIngestPolicyChangedDetails(EmailIngestPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndEmailIngestPolicyChangedDetails(Tag.EMAIL_INGEST_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#EMAIL_INGEST_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link EmailIngestPolicyChangedDetails} value associated with
     *     this instance if {@link #isEmailIngestPolicyChangedDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isEmailIngestPolicyChangedDetails} is {@code false}.
     */
    public EmailIngestPolicyChangedDetails getEmailIngestPolicyChangedDetailsValue() {
        if (this._tag != Tag.EMAIL_INGEST_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.EMAIL_INGEST_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return emailIngestPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EMM_ADD_EXCEPTION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EMM_ADD_EXCEPTION_DETAILS}, {@code false} otherwise.
     */
    public boolean isEmmAddExceptionDetails() {
        return this._tag == Tag.EMM_ADD_EXCEPTION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#EMM_ADD_EXCEPTION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#EMM_ADD_EXCEPTION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails emmAddExceptionDetails(EmmAddExceptionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndEmmAddExceptionDetails(Tag.EMM_ADD_EXCEPTION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#EMM_ADD_EXCEPTION_DETAILS}.
     *
     * @return The {@link EmmAddExceptionDetails} value associated with this
     *     instance if {@link #isEmmAddExceptionDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isEmmAddExceptionDetails} is
     *     {@code false}.
     */
    public EmmAddExceptionDetails getEmmAddExceptionDetailsValue() {
        if (this._tag != Tag.EMM_ADD_EXCEPTION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.EMM_ADD_EXCEPTION_DETAILS, but was Tag." + this._tag.name());
        }
        return emmAddExceptionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EMM_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EMM_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     */
    public boolean isEmmChangePolicyDetails() {
        return this._tag == Tag.EMM_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#EMM_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#EMM_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails emmChangePolicyDetails(EmmChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndEmmChangePolicyDetails(Tag.EMM_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#EMM_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link EmmChangePolicyDetails} value associated with this
     *     instance if {@link #isEmmChangePolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isEmmChangePolicyDetails} is
     *     {@code false}.
     */
    public EmmChangePolicyDetails getEmmChangePolicyDetailsValue() {
        if (this._tag != Tag.EMM_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.EMM_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return emmChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EMM_REMOVE_EXCEPTION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EMM_REMOVE_EXCEPTION_DETAILS}, {@code false} otherwise.
     */
    public boolean isEmmRemoveExceptionDetails() {
        return this._tag == Tag.EMM_REMOVE_EXCEPTION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#EMM_REMOVE_EXCEPTION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#EMM_REMOVE_EXCEPTION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails emmRemoveExceptionDetails(EmmRemoveExceptionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndEmmRemoveExceptionDetails(Tag.EMM_REMOVE_EXCEPTION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#EMM_REMOVE_EXCEPTION_DETAILS}.
     *
     * @return The {@link EmmRemoveExceptionDetails} value associated with this
     *     instance if {@link #isEmmRemoveExceptionDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isEmmRemoveExceptionDetails} is
     *     {@code false}.
     */
    public EmmRemoveExceptionDetails getEmmRemoveExceptionDetailsValue() {
        if (this._tag != Tag.EMM_REMOVE_EXCEPTION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.EMM_REMOVE_EXCEPTION_DETAILS, but was Tag." + this._tag.name());
        }
        return emmRemoveExceptionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EXTENDED_VERSION_HISTORY_CHANGE_POLICY_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EXTENDED_VERSION_HISTORY_CHANGE_POLICY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isExtendedVersionHistoryChangePolicyDetails() {
        return this._tag == Tag.EXTENDED_VERSION_HISTORY_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#EXTENDED_VERSION_HISTORY_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#EXTENDED_VERSION_HISTORY_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails extendedVersionHistoryChangePolicyDetails(ExtendedVersionHistoryChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndExtendedVersionHistoryChangePolicyDetails(Tag.EXTENDED_VERSION_HISTORY_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#EXTENDED_VERSION_HISTORY_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link ExtendedVersionHistoryChangePolicyDetails} value
     *     associated with this instance if {@link
     *     #isExtendedVersionHistoryChangePolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isExtendedVersionHistoryChangePolicyDetails} is {@code false}.
     */
    public ExtendedVersionHistoryChangePolicyDetails getExtendedVersionHistoryChangePolicyDetailsValue() {
        if (this._tag != Tag.EXTENDED_VERSION_HISTORY_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.EXTENDED_VERSION_HISTORY_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return extendedVersionHistoryChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isExternalDriveBackupPolicyChangedDetails() {
        return this._tag == Tag.EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails externalDriveBackupPolicyChangedDetails(ExternalDriveBackupPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndExternalDriveBackupPolicyChangedDetails(Tag.EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link ExternalDriveBackupPolicyChangedDetails} value
     *     associated with this instance if {@link
     *     #isExternalDriveBackupPolicyChangedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isExternalDriveBackupPolicyChangedDetails} is {@code false}.
     */
    public ExternalDriveBackupPolicyChangedDetails getExternalDriveBackupPolicyChangedDetailsValue() {
        if (this._tag != Tag.EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return externalDriveBackupPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_COMMENTS_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_COMMENTS_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileCommentsChangePolicyDetails() {
        return this._tag == Tag.FILE_COMMENTS_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_COMMENTS_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_COMMENTS_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileCommentsChangePolicyDetails(FileCommentsChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileCommentsChangePolicyDetails(Tag.FILE_COMMENTS_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FILE_COMMENTS_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link FileCommentsChangePolicyDetails} value associated with
     *     this instance if {@link #isFileCommentsChangePolicyDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFileCommentsChangePolicyDetails} is {@code false}.
     */
    public FileCommentsChangePolicyDetails getFileCommentsChangePolicyDetailsValue() {
        if (this._tag != Tag.FILE_COMMENTS_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_COMMENTS_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return fileCommentsChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_LOCKING_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_LOCKING_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileLockingPolicyChangedDetails() {
        return this._tag == Tag.FILE_LOCKING_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_LOCKING_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_LOCKING_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileLockingPolicyChangedDetails(FileLockingPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileLockingPolicyChangedDetails(Tag.FILE_LOCKING_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FILE_LOCKING_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link FileLockingPolicyChangedDetails} value associated with
     *     this instance if {@link #isFileLockingPolicyChangedDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFileLockingPolicyChangedDetails} is {@code false}.
     */
    public FileLockingPolicyChangedDetails getFileLockingPolicyChangedDetailsValue() {
        if (this._tag != Tag.FILE_LOCKING_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_LOCKING_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return fileLockingPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_PROVIDER_MIGRATION_POLICY_CHANGED_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_PROVIDER_MIGRATION_POLICY_CHANGED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isFileProviderMigrationPolicyChangedDetails() {
        return this._tag == Tag.FILE_PROVIDER_MIGRATION_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_PROVIDER_MIGRATION_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_PROVIDER_MIGRATION_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileProviderMigrationPolicyChangedDetails(FileProviderMigrationPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileProviderMigrationPolicyChangedDetails(Tag.FILE_PROVIDER_MIGRATION_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FILE_PROVIDER_MIGRATION_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link FileProviderMigrationPolicyChangedDetails} value
     *     associated with this instance if {@link
     *     #isFileProviderMigrationPolicyChangedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFileProviderMigrationPolicyChangedDetails} is {@code false}.
     */
    public FileProviderMigrationPolicyChangedDetails getFileProviderMigrationPolicyChangedDetailsValue() {
        if (this._tag != Tag.FILE_PROVIDER_MIGRATION_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_PROVIDER_MIGRATION_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return fileProviderMigrationPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_REQUESTS_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_REQUESTS_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileRequestsChangePolicyDetails() {
        return this._tag == Tag.FILE_REQUESTS_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_REQUESTS_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_REQUESTS_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileRequestsChangePolicyDetails(FileRequestsChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileRequestsChangePolicyDetails(Tag.FILE_REQUESTS_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FILE_REQUESTS_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link FileRequestsChangePolicyDetails} value associated with
     *     this instance if {@link #isFileRequestsChangePolicyDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFileRequestsChangePolicyDetails} is {@code false}.
     */
    public FileRequestsChangePolicyDetails getFileRequestsChangePolicyDetailsValue() {
        if (this._tag != Tag.FILE_REQUESTS_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_REQUESTS_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return fileRequestsChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_REQUESTS_EMAILS_ENABLED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_REQUESTS_EMAILS_ENABLED_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileRequestsEmailsEnabledDetails() {
        return this._tag == Tag.FILE_REQUESTS_EMAILS_ENABLED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_REQUESTS_EMAILS_ENABLED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_REQUESTS_EMAILS_ENABLED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileRequestsEmailsEnabledDetails(FileRequestsEmailsEnabledDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileRequestsEmailsEnabledDetails(Tag.FILE_REQUESTS_EMAILS_ENABLED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FILE_REQUESTS_EMAILS_ENABLED_DETAILS}.
     *
     * @return The {@link FileRequestsEmailsEnabledDetails} value associated
     *     with this instance if {@link #isFileRequestsEmailsEnabledDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFileRequestsEmailsEnabledDetails} is {@code false}.
     */
    public FileRequestsEmailsEnabledDetails getFileRequestsEmailsEnabledDetailsValue() {
        if (this._tag != Tag.FILE_REQUESTS_EMAILS_ENABLED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_REQUESTS_EMAILS_ENABLED_DETAILS, but was Tag." + this._tag.name());
        }
        return fileRequestsEmailsEnabledDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY_DETAILS}, {@code
     *     false} otherwise.
     */
    public boolean isFileRequestsEmailsRestrictedToTeamOnlyDetails() {
        return this._tag == Tag.FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileRequestsEmailsRestrictedToTeamOnlyDetails(FileRequestsEmailsRestrictedToTeamOnlyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileRequestsEmailsRestrictedToTeamOnlyDetails(Tag.FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY_DETAILS}.
     *
     * @return The {@link FileRequestsEmailsRestrictedToTeamOnlyDetails} value
     *     associated with this instance if {@link
     *     #isFileRequestsEmailsRestrictedToTeamOnlyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFileRequestsEmailsRestrictedToTeamOnlyDetails} is {@code false}.
     */
    public FileRequestsEmailsRestrictedToTeamOnlyDetails getFileRequestsEmailsRestrictedToTeamOnlyDetailsValue() {
        if (this._tag != Tag.FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY_DETAILS, but was Tag." + this._tag.name());
        }
        return fileRequestsEmailsRestrictedToTeamOnlyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_TRANSFERS_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_TRANSFERS_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     */
    public boolean isFileTransfersPolicyChangedDetails() {
        return this._tag == Tag.FILE_TRANSFERS_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#FILE_TRANSFERS_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#FILE_TRANSFERS_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails fileTransfersPolicyChangedDetails(FileTransfersPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndFileTransfersPolicyChangedDetails(Tag.FILE_TRANSFERS_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#FILE_TRANSFERS_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link FileTransfersPolicyChangedDetails} value associated
     *     with this instance if {@link #isFileTransfersPolicyChangedDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFileTransfersPolicyChangedDetails} is {@code false}.
     */
    public FileTransfersPolicyChangedDetails getFileTransfersPolicyChangedDetailsValue() {
        if (this._tag != Tag.FILE_TRANSFERS_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_TRANSFERS_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return fileTransfersPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOOGLE_SSO_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOOGLE_SSO_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     */
    public boolean isGoogleSsoChangePolicyDetails() {
        return this._tag == Tag.GOOGLE_SSO_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GOOGLE_SSO_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GOOGLE_SSO_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails googleSsoChangePolicyDetails(GoogleSsoChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGoogleSsoChangePolicyDetails(Tag.GOOGLE_SSO_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GOOGLE_SSO_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link GoogleSsoChangePolicyDetails} value associated with
     *     this instance if {@link #isGoogleSsoChangePolicyDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isGoogleSsoChangePolicyDetails}
     *     is {@code false}.
     */
    public GoogleSsoChangePolicyDetails getGoogleSsoChangePolicyDetailsValue() {
        if (this._tag != Tag.GOOGLE_SSO_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GOOGLE_SSO_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return googleSsoChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_USER_MANAGEMENT_CHANGE_POLICY_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_USER_MANAGEMENT_CHANGE_POLICY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isGroupUserManagementChangePolicyDetails() {
        return this._tag == Tag.GROUP_USER_MANAGEMENT_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GROUP_USER_MANAGEMENT_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GROUP_USER_MANAGEMENT_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails groupUserManagementChangePolicyDetails(GroupUserManagementChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGroupUserManagementChangePolicyDetails(Tag.GROUP_USER_MANAGEMENT_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GROUP_USER_MANAGEMENT_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link GroupUserManagementChangePolicyDetails} value
     *     associated with this instance if {@link
     *     #isGroupUserManagementChangePolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGroupUserManagementChangePolicyDetails} is {@code false}.
     */
    public GroupUserManagementChangePolicyDetails getGroupUserManagementChangePolicyDetailsValue() {
        if (this._tag != Tag.GROUP_USER_MANAGEMENT_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_USER_MANAGEMENT_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return groupUserManagementChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#INTEGRATION_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#INTEGRATION_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     */
    public boolean isIntegrationPolicyChangedDetails() {
        return this._tag == Tag.INTEGRATION_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#INTEGRATION_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#INTEGRATION_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails integrationPolicyChangedDetails(IntegrationPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndIntegrationPolicyChangedDetails(Tag.INTEGRATION_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#INTEGRATION_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link IntegrationPolicyChangedDetails} value associated with
     *     this instance if {@link #isIntegrationPolicyChangedDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isIntegrationPolicyChangedDetails} is {@code false}.
     */
    public IntegrationPolicyChangedDetails getIntegrationPolicyChangedDetailsValue() {
        if (this._tag != Tag.INTEGRATION_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.INTEGRATION_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return integrationPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isInviteAcceptanceEmailPolicyChangedDetails() {
        return this._tag == Tag.INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails inviteAcceptanceEmailPolicyChangedDetails(InviteAcceptanceEmailPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndInviteAcceptanceEmailPolicyChangedDetails(Tag.INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link InviteAcceptanceEmailPolicyChangedDetails} value
     *     associated with this instance if {@link
     *     #isInviteAcceptanceEmailPolicyChangedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isInviteAcceptanceEmailPolicyChangedDetails} is {@code false}.
     */
    public InviteAcceptanceEmailPolicyChangedDetails getInviteAcceptanceEmailPolicyChangedDetailsValue() {
        if (this._tag != Tag.INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return inviteAcceptanceEmailPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_REQUESTS_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_REQUESTS_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     */
    public boolean isMemberRequestsChangePolicyDetails() {
        return this._tag == Tag.MEMBER_REQUESTS_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_REQUESTS_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_REQUESTS_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberRequestsChangePolicyDetails(MemberRequestsChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberRequestsChangePolicyDetails(Tag.MEMBER_REQUESTS_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_REQUESTS_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link MemberRequestsChangePolicyDetails} value associated
     *     with this instance if {@link #isMemberRequestsChangePolicyDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberRequestsChangePolicyDetails} is {@code false}.
     */
    public MemberRequestsChangePolicyDetails getMemberRequestsChangePolicyDetailsValue() {
        if (this._tag != Tag.MEMBER_REQUESTS_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_REQUESTS_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return memberRequestsChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SEND_INVITE_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SEND_INVITE_POLICY_CHANGED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isMemberSendInvitePolicyChangedDetails() {
        return this._tag == Tag.MEMBER_SEND_INVITE_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_SEND_INVITE_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_SEND_INVITE_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberSendInvitePolicyChangedDetails(MemberSendInvitePolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberSendInvitePolicyChangedDetails(Tag.MEMBER_SEND_INVITE_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_SEND_INVITE_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link MemberSendInvitePolicyChangedDetails} value associated
     *     with this instance if {@link #isMemberSendInvitePolicyChangedDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberSendInvitePolicyChangedDetails} is {@code false}.
     */
    public MemberSendInvitePolicyChangedDetails getMemberSendInvitePolicyChangedDetailsValue() {
        if (this._tag != Tag.MEMBER_SEND_INVITE_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SEND_INVITE_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return memberSendInvitePolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SPACE_LIMITS_ADD_EXCEPTION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SPACE_LIMITS_ADD_EXCEPTION_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isMemberSpaceLimitsAddExceptionDetails() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_ADD_EXCEPTION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_SPACE_LIMITS_ADD_EXCEPTION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_SPACE_LIMITS_ADD_EXCEPTION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberSpaceLimitsAddExceptionDetails(MemberSpaceLimitsAddExceptionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberSpaceLimitsAddExceptionDetails(Tag.MEMBER_SPACE_LIMITS_ADD_EXCEPTION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_SPACE_LIMITS_ADD_EXCEPTION_DETAILS}.
     *
     * @return The {@link MemberSpaceLimitsAddExceptionDetails} value associated
     *     with this instance if {@link #isMemberSpaceLimitsAddExceptionDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberSpaceLimitsAddExceptionDetails} is {@code false}.
     */
    public MemberSpaceLimitsAddExceptionDetails getMemberSpaceLimitsAddExceptionDetailsValue() {
        if (this._tag != Tag.MEMBER_SPACE_LIMITS_ADD_EXCEPTION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_ADD_EXCEPTION_DETAILS, but was Tag." + this._tag.name());
        }
        return memberSpaceLimitsAddExceptionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY_DETAILS}, {@code
     *     false} otherwise.
     */
    public boolean isMemberSpaceLimitsChangeCapsTypePolicyDetails() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberSpaceLimitsChangeCapsTypePolicyDetails(MemberSpaceLimitsChangeCapsTypePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberSpaceLimitsChangeCapsTypePolicyDetails(Tag.MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY_DETAILS}.
     *
     * @return The {@link MemberSpaceLimitsChangeCapsTypePolicyDetails} value
     *     associated with this instance if {@link
     *     #isMemberSpaceLimitsChangeCapsTypePolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberSpaceLimitsChangeCapsTypePolicyDetails} is {@code false}.
     */
    public MemberSpaceLimitsChangeCapsTypePolicyDetails getMemberSpaceLimitsChangeCapsTypePolicyDetailsValue() {
        if (this._tag != Tag.MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return memberSpaceLimitsChangeCapsTypePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SPACE_LIMITS_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SPACE_LIMITS_CHANGE_POLICY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isMemberSpaceLimitsChangePolicyDetails() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_SPACE_LIMITS_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_SPACE_LIMITS_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberSpaceLimitsChangePolicyDetails(MemberSpaceLimitsChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberSpaceLimitsChangePolicyDetails(Tag.MEMBER_SPACE_LIMITS_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_SPACE_LIMITS_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link MemberSpaceLimitsChangePolicyDetails} value associated
     *     with this instance if {@link #isMemberSpaceLimitsChangePolicyDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberSpaceLimitsChangePolicyDetails} is {@code false}.
     */
    public MemberSpaceLimitsChangePolicyDetails getMemberSpaceLimitsChangePolicyDetailsValue() {
        if (this._tag != Tag.MEMBER_SPACE_LIMITS_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return memberSpaceLimitsChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isMemberSpaceLimitsRemoveExceptionDetails() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberSpaceLimitsRemoveExceptionDetails(MemberSpaceLimitsRemoveExceptionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberSpaceLimitsRemoveExceptionDetails(Tag.MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION_DETAILS}.
     *
     * @return The {@link MemberSpaceLimitsRemoveExceptionDetails} value
     *     associated with this instance if {@link
     *     #isMemberSpaceLimitsRemoveExceptionDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberSpaceLimitsRemoveExceptionDetails} is {@code false}.
     */
    public MemberSpaceLimitsRemoveExceptionDetails getMemberSpaceLimitsRemoveExceptionDetailsValue() {
        if (this._tag != Tag.MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION_DETAILS, but was Tag." + this._tag.name());
        }
        return memberSpaceLimitsRemoveExceptionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SUGGESTIONS_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SUGGESTIONS_CHANGE_POLICY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isMemberSuggestionsChangePolicyDetails() {
        return this._tag == Tag.MEMBER_SUGGESTIONS_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MEMBER_SUGGESTIONS_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MEMBER_SUGGESTIONS_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails memberSuggestionsChangePolicyDetails(MemberSuggestionsChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMemberSuggestionsChangePolicyDetails(Tag.MEMBER_SUGGESTIONS_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MEMBER_SUGGESTIONS_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link MemberSuggestionsChangePolicyDetails} value associated
     *     with this instance if {@link #isMemberSuggestionsChangePolicyDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberSuggestionsChangePolicyDetails} is {@code false}.
     */
    public MemberSuggestionsChangePolicyDetails getMemberSuggestionsChangePolicyDetailsValue() {
        if (this._tag != Tag.MEMBER_SUGGESTIONS_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SUGGESTIONS_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return memberSuggestionsChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isMicrosoftOfficeAddinChangePolicyDetails() {
        return this._tag == Tag.MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails microsoftOfficeAddinChangePolicyDetails(MicrosoftOfficeAddinChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMicrosoftOfficeAddinChangePolicyDetails(Tag.MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link MicrosoftOfficeAddinChangePolicyDetails} value
     *     associated with this instance if {@link
     *     #isMicrosoftOfficeAddinChangePolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMicrosoftOfficeAddinChangePolicyDetails} is {@code false}.
     */
    public MicrosoftOfficeAddinChangePolicyDetails getMicrosoftOfficeAddinChangePolicyDetailsValue() {
        if (this._tag != Tag.MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return microsoftOfficeAddinChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NETWORK_CONTROL_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NETWORK_CONTROL_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     */
    public boolean isNetworkControlChangePolicyDetails() {
        return this._tag == Tag.NETWORK_CONTROL_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#NETWORK_CONTROL_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#NETWORK_CONTROL_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails networkControlChangePolicyDetails(NetworkControlChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndNetworkControlChangePolicyDetails(Tag.NETWORK_CONTROL_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#NETWORK_CONTROL_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link NetworkControlChangePolicyDetails} value associated
     *     with this instance if {@link #isNetworkControlChangePolicyDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isNetworkControlChangePolicyDetails} is {@code false}.
     */
    public NetworkControlChangePolicyDetails getNetworkControlChangePolicyDetailsValue() {
        if (this._tag != Tag.NETWORK_CONTROL_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.NETWORK_CONTROL_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return networkControlChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CHANGE_DEPLOYMENT_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CHANGE_DEPLOYMENT_POLICY_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperChangeDeploymentPolicyDetails() {
        return this._tag == Tag.PAPER_CHANGE_DEPLOYMENT_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_CHANGE_DEPLOYMENT_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_CHANGE_DEPLOYMENT_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperChangeDeploymentPolicyDetails(PaperChangeDeploymentPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperChangeDeploymentPolicyDetails(Tag.PAPER_CHANGE_DEPLOYMENT_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_CHANGE_DEPLOYMENT_POLICY_DETAILS}.
     *
     * @return The {@link PaperChangeDeploymentPolicyDetails} value associated
     *     with this instance if {@link #isPaperChangeDeploymentPolicyDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperChangeDeploymentPolicyDetails} is {@code false}.
     */
    public PaperChangeDeploymentPolicyDetails getPaperChangeDeploymentPolicyDetailsValue() {
        if (this._tag != Tag.PAPER_CHANGE_DEPLOYMENT_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CHANGE_DEPLOYMENT_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return paperChangeDeploymentPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CHANGE_MEMBER_LINK_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CHANGE_MEMBER_LINK_POLICY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isPaperChangeMemberLinkPolicyDetails() {
        return this._tag == Tag.PAPER_CHANGE_MEMBER_LINK_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_CHANGE_MEMBER_LINK_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_CHANGE_MEMBER_LINK_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperChangeMemberLinkPolicyDetails(PaperChangeMemberLinkPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperChangeMemberLinkPolicyDetails(Tag.PAPER_CHANGE_MEMBER_LINK_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_CHANGE_MEMBER_LINK_POLICY_DETAILS}.
     *
     * @return The {@link PaperChangeMemberLinkPolicyDetails} value associated
     *     with this instance if {@link #isPaperChangeMemberLinkPolicyDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperChangeMemberLinkPolicyDetails} is {@code false}.
     */
    public PaperChangeMemberLinkPolicyDetails getPaperChangeMemberLinkPolicyDetailsValue() {
        if (this._tag != Tag.PAPER_CHANGE_MEMBER_LINK_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CHANGE_MEMBER_LINK_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return paperChangeMemberLinkPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CHANGE_MEMBER_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CHANGE_MEMBER_POLICY_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperChangeMemberPolicyDetails() {
        return this._tag == Tag.PAPER_CHANGE_MEMBER_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_CHANGE_MEMBER_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_CHANGE_MEMBER_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperChangeMemberPolicyDetails(PaperChangeMemberPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperChangeMemberPolicyDetails(Tag.PAPER_CHANGE_MEMBER_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_CHANGE_MEMBER_POLICY_DETAILS}.
     *
     * @return The {@link PaperChangeMemberPolicyDetails} value associated with
     *     this instance if {@link #isPaperChangeMemberPolicyDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperChangeMemberPolicyDetails} is {@code false}.
     */
    public PaperChangeMemberPolicyDetails getPaperChangeMemberPolicyDetailsValue() {
        if (this._tag != Tag.PAPER_CHANGE_MEMBER_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CHANGE_MEMBER_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return paperChangeMemberPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperChangePolicyDetails() {
        return this._tag == Tag.PAPER_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperChangePolicyDetails(PaperChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperChangePolicyDetails(Tag.PAPER_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#PAPER_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link PaperChangePolicyDetails} value associated with this
     *     instance if {@link #isPaperChangePolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperChangePolicyDetails} is
     *     {@code false}.
     */
    public PaperChangePolicyDetails getPaperChangePolicyDetailsValue() {
        if (this._tag != Tag.PAPER_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return paperChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DEFAULT_FOLDER_POLICY_CHANGED_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DEFAULT_FOLDER_POLICY_CHANGED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isPaperDefaultFolderPolicyChangedDetails() {
        return this._tag == Tag.PAPER_DEFAULT_FOLDER_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DEFAULT_FOLDER_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DEFAULT_FOLDER_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDefaultFolderPolicyChangedDetails(PaperDefaultFolderPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDefaultFolderPolicyChangedDetails(Tag.PAPER_DEFAULT_FOLDER_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_DEFAULT_FOLDER_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link PaperDefaultFolderPolicyChangedDetails} value
     *     associated with this instance if {@link
     *     #isPaperDefaultFolderPolicyChangedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperDefaultFolderPolicyChangedDetails} is {@code false}.
     */
    public PaperDefaultFolderPolicyChangedDetails getPaperDefaultFolderPolicyChangedDetailsValue() {
        if (this._tag != Tag.PAPER_DEFAULT_FOLDER_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DEFAULT_FOLDER_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDefaultFolderPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DESKTOP_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DESKTOP_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     */
    public boolean isPaperDesktopPolicyChangedDetails() {
        return this._tag == Tag.PAPER_DESKTOP_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_DESKTOP_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_DESKTOP_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperDesktopPolicyChangedDetails(PaperDesktopPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperDesktopPolicyChangedDetails(Tag.PAPER_DESKTOP_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_DESKTOP_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link PaperDesktopPolicyChangedDetails} value associated
     *     with this instance if {@link #isPaperDesktopPolicyChangedDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperDesktopPolicyChangedDetails} is {@code false}.
     */
    public PaperDesktopPolicyChangedDetails getPaperDesktopPolicyChangedDetailsValue() {
        if (this._tag != Tag.PAPER_DESKTOP_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DESKTOP_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return paperDesktopPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_ENABLED_USERS_GROUP_ADDITION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_ENABLED_USERS_GROUP_ADDITION_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isPaperEnabledUsersGroupAdditionDetails() {
        return this._tag == Tag.PAPER_ENABLED_USERS_GROUP_ADDITION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_ENABLED_USERS_GROUP_ADDITION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_ENABLED_USERS_GROUP_ADDITION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperEnabledUsersGroupAdditionDetails(PaperEnabledUsersGroupAdditionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperEnabledUsersGroupAdditionDetails(Tag.PAPER_ENABLED_USERS_GROUP_ADDITION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_ENABLED_USERS_GROUP_ADDITION_DETAILS}.
     *
     * @return The {@link PaperEnabledUsersGroupAdditionDetails} value
     *     associated with this instance if {@link
     *     #isPaperEnabledUsersGroupAdditionDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperEnabledUsersGroupAdditionDetails} is {@code false}.
     */
    public PaperEnabledUsersGroupAdditionDetails getPaperEnabledUsersGroupAdditionDetailsValue() {
        if (this._tag != Tag.PAPER_ENABLED_USERS_GROUP_ADDITION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_ENABLED_USERS_GROUP_ADDITION_DETAILS, but was Tag." + this._tag.name());
        }
        return paperEnabledUsersGroupAdditionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_ENABLED_USERS_GROUP_REMOVAL_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_ENABLED_USERS_GROUP_REMOVAL_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isPaperEnabledUsersGroupRemovalDetails() {
        return this._tag == Tag.PAPER_ENABLED_USERS_GROUP_REMOVAL_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PAPER_ENABLED_USERS_GROUP_REMOVAL_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PAPER_ENABLED_USERS_GROUP_REMOVAL_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails paperEnabledUsersGroupRemovalDetails(PaperEnabledUsersGroupRemovalDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPaperEnabledUsersGroupRemovalDetails(Tag.PAPER_ENABLED_USERS_GROUP_REMOVAL_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PAPER_ENABLED_USERS_GROUP_REMOVAL_DETAILS}.
     *
     * @return The {@link PaperEnabledUsersGroupRemovalDetails} value associated
     *     with this instance if {@link #isPaperEnabledUsersGroupRemovalDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperEnabledUsersGroupRemovalDetails} is {@code false}.
     */
    public PaperEnabledUsersGroupRemovalDetails getPaperEnabledUsersGroupRemovalDetailsValue() {
        if (this._tag != Tag.PAPER_ENABLED_USERS_GROUP_REMOVAL_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_ENABLED_USERS_GROUP_REMOVAL_DETAILS, but was Tag." + this._tag.name());
        }
        return paperEnabledUsersGroupRemovalDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY_DETAILS}, {@code
     *     false} otherwise.
     */
    public boolean isPasswordStrengthRequirementsChangePolicyDetails() {
        return this._tag == Tag.PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails passwordStrengthRequirementsChangePolicyDetails(PasswordStrengthRequirementsChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPasswordStrengthRequirementsChangePolicyDetails(Tag.PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link PasswordStrengthRequirementsChangePolicyDetails} value
     *     associated with this instance if {@link
     *     #isPasswordStrengthRequirementsChangePolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPasswordStrengthRequirementsChangePolicyDetails} is {@code false}.
     */
    public PasswordStrengthRequirementsChangePolicyDetails getPasswordStrengthRequirementsChangePolicyDetailsValue() {
        if (this._tag != Tag.PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return passwordStrengthRequirementsChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PERMANENT_DELETE_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PERMANENT_DELETE_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     */
    public boolean isPermanentDeleteChangePolicyDetails() {
        return this._tag == Tag.PERMANENT_DELETE_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#PERMANENT_DELETE_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#PERMANENT_DELETE_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails permanentDeleteChangePolicyDetails(PermanentDeleteChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndPermanentDeleteChangePolicyDetails(Tag.PERMANENT_DELETE_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#PERMANENT_DELETE_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link PermanentDeleteChangePolicyDetails} value associated
     *     with this instance if {@link #isPermanentDeleteChangePolicyDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPermanentDeleteChangePolicyDetails} is {@code false}.
     */
    public PermanentDeleteChangePolicyDetails getPermanentDeleteChangePolicyDetailsValue() {
        if (this._tag != Tag.PERMANENT_DELETE_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.PERMANENT_DELETE_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return permanentDeleteChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#RESELLER_SUPPORT_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#RESELLER_SUPPORT_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     */
    public boolean isResellerSupportChangePolicyDetails() {
        return this._tag == Tag.RESELLER_SUPPORT_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#RESELLER_SUPPORT_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#RESELLER_SUPPORT_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails resellerSupportChangePolicyDetails(ResellerSupportChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndResellerSupportChangePolicyDetails(Tag.RESELLER_SUPPORT_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#RESELLER_SUPPORT_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link ResellerSupportChangePolicyDetails} value associated
     *     with this instance if {@link #isResellerSupportChangePolicyDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isResellerSupportChangePolicyDetails} is {@code false}.
     */
    public ResellerSupportChangePolicyDetails getResellerSupportChangePolicyDetailsValue() {
        if (this._tag != Tag.RESELLER_SUPPORT_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.RESELLER_SUPPORT_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return resellerSupportChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#REWIND_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#REWIND_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     */
    public boolean isRewindPolicyChangedDetails() {
        return this._tag == Tag.REWIND_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#REWIND_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#REWIND_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails rewindPolicyChangedDetails(RewindPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndRewindPolicyChangedDetails(Tag.REWIND_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#REWIND_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link RewindPolicyChangedDetails} value associated with this
     *     instance if {@link #isRewindPolicyChangedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isRewindPolicyChangedDetails}
     *     is {@code false}.
     */
    public RewindPolicyChangedDetails getRewindPolicyChangedDetailsValue() {
        if (this._tag != Tag.REWIND_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.REWIND_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return rewindPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SEND_FOR_SIGNATURE_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SEND_FOR_SIGNATURE_POLICY_CHANGED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSendForSignaturePolicyChangedDetails() {
        return this._tag == Tag.SEND_FOR_SIGNATURE_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SEND_FOR_SIGNATURE_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SEND_FOR_SIGNATURE_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sendForSignaturePolicyChangedDetails(SendForSignaturePolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSendForSignaturePolicyChangedDetails(Tag.SEND_FOR_SIGNATURE_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SEND_FOR_SIGNATURE_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link SendForSignaturePolicyChangedDetails} value associated
     *     with this instance if {@link #isSendForSignaturePolicyChangedDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSendForSignaturePolicyChangedDetails} is {@code false}.
     */
    public SendForSignaturePolicyChangedDetails getSendForSignaturePolicyChangedDetailsValue() {
        if (this._tag != Tag.SEND_FOR_SIGNATURE_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SEND_FOR_SIGNATURE_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return sendForSignaturePolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARING_CHANGE_FOLDER_JOIN_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARING_CHANGE_FOLDER_JOIN_POLICY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSharingChangeFolderJoinPolicyDetails() {
        return this._tag == Tag.SHARING_CHANGE_FOLDER_JOIN_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARING_CHANGE_FOLDER_JOIN_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARING_CHANGE_FOLDER_JOIN_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharingChangeFolderJoinPolicyDetails(SharingChangeFolderJoinPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharingChangeFolderJoinPolicyDetails(Tag.SHARING_CHANGE_FOLDER_JOIN_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARING_CHANGE_FOLDER_JOIN_POLICY_DETAILS}.
     *
     * @return The {@link SharingChangeFolderJoinPolicyDetails} value associated
     *     with this instance if {@link #isSharingChangeFolderJoinPolicyDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharingChangeFolderJoinPolicyDetails} is {@code false}.
     */
    public SharingChangeFolderJoinPolicyDetails getSharingChangeFolderJoinPolicyDetailsValue() {
        if (this._tag != Tag.SHARING_CHANGE_FOLDER_JOIN_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARING_CHANGE_FOLDER_JOIN_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharingChangeFolderJoinPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY_DETAILS}, {@code
     * false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY_DETAILS},
     *     {@code false} otherwise.
     */
    public boolean isSharingChangeLinkAllowChangeExpirationPolicyDetails() {
        return this._tag == Tag.SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharingChangeLinkAllowChangeExpirationPolicyDetails(SharingChangeLinkAllowChangeExpirationPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharingChangeLinkAllowChangeExpirationPolicyDetails(Tag.SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY_DETAILS}.
     *
     * @return The {@link SharingChangeLinkAllowChangeExpirationPolicyDetails}
     *     value associated with this instance if {@link
     *     #isSharingChangeLinkAllowChangeExpirationPolicyDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharingChangeLinkAllowChangeExpirationPolicyDetails} is {@code
     *     false}.
     */
    public SharingChangeLinkAllowChangeExpirationPolicyDetails getSharingChangeLinkAllowChangeExpirationPolicyDetailsValue() {
        if (this._tag != Tag.SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharingChangeLinkAllowChangeExpirationPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY_DETAILS}, {@code
     *     false} otherwise.
     */
    public boolean isSharingChangeLinkDefaultExpirationPolicyDetails() {
        return this._tag == Tag.SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharingChangeLinkDefaultExpirationPolicyDetails(SharingChangeLinkDefaultExpirationPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharingChangeLinkDefaultExpirationPolicyDetails(Tag.SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY_DETAILS}.
     *
     * @return The {@link SharingChangeLinkDefaultExpirationPolicyDetails} value
     *     associated with this instance if {@link
     *     #isSharingChangeLinkDefaultExpirationPolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharingChangeLinkDefaultExpirationPolicyDetails} is {@code false}.
     */
    public SharingChangeLinkDefaultExpirationPolicyDetails getSharingChangeLinkDefaultExpirationPolicyDetailsValue() {
        if (this._tag != Tag.SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharingChangeLinkDefaultExpirationPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY_DETAILS}, {@code
     *     false} otherwise.
     */
    public boolean isSharingChangeLinkEnforcePasswordPolicyDetails() {
        return this._tag == Tag.SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharingChangeLinkEnforcePasswordPolicyDetails(SharingChangeLinkEnforcePasswordPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharingChangeLinkEnforcePasswordPolicyDetails(Tag.SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY_DETAILS}.
     *
     * @return The {@link SharingChangeLinkEnforcePasswordPolicyDetails} value
     *     associated with this instance if {@link
     *     #isSharingChangeLinkEnforcePasswordPolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharingChangeLinkEnforcePasswordPolicyDetails} is {@code false}.
     */
    public SharingChangeLinkEnforcePasswordPolicyDetails getSharingChangeLinkEnforcePasswordPolicyDetailsValue() {
        if (this._tag != Tag.SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharingChangeLinkEnforcePasswordPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARING_CHANGE_LINK_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARING_CHANGE_LINK_POLICY_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharingChangeLinkPolicyDetails() {
        return this._tag == Tag.SHARING_CHANGE_LINK_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARING_CHANGE_LINK_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARING_CHANGE_LINK_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharingChangeLinkPolicyDetails(SharingChangeLinkPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharingChangeLinkPolicyDetails(Tag.SHARING_CHANGE_LINK_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARING_CHANGE_LINK_POLICY_DETAILS}.
     *
     * @return The {@link SharingChangeLinkPolicyDetails} value associated with
     *     this instance if {@link #isSharingChangeLinkPolicyDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharingChangeLinkPolicyDetails} is {@code false}.
     */
    public SharingChangeLinkPolicyDetails getSharingChangeLinkPolicyDetailsValue() {
        if (this._tag != Tag.SHARING_CHANGE_LINK_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARING_CHANGE_LINK_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharingChangeLinkPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARING_CHANGE_MEMBER_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARING_CHANGE_MEMBER_POLICY_DETAILS}, {@code false} otherwise.
     */
    public boolean isSharingChangeMemberPolicyDetails() {
        return this._tag == Tag.SHARING_CHANGE_MEMBER_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHARING_CHANGE_MEMBER_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHARING_CHANGE_MEMBER_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails sharingChangeMemberPolicyDetails(SharingChangeMemberPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSharingChangeMemberPolicyDetails(Tag.SHARING_CHANGE_MEMBER_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHARING_CHANGE_MEMBER_POLICY_DETAILS}.
     *
     * @return The {@link SharingChangeMemberPolicyDetails} value associated
     *     with this instance if {@link #isSharingChangeMemberPolicyDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharingChangeMemberPolicyDetails} is {@code false}.
     */
    public SharingChangeMemberPolicyDetails getSharingChangeMemberPolicyDetailsValue() {
        if (this._tag != Tag.SHARING_CHANGE_MEMBER_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARING_CHANGE_MEMBER_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return sharingChangeMemberPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_CHANGE_DOWNLOAD_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_CHANGE_DOWNLOAD_POLICY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isShowcaseChangeDownloadPolicyDetails() {
        return this._tag == Tag.SHOWCASE_CHANGE_DOWNLOAD_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_CHANGE_DOWNLOAD_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_CHANGE_DOWNLOAD_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseChangeDownloadPolicyDetails(ShowcaseChangeDownloadPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseChangeDownloadPolicyDetails(Tag.SHOWCASE_CHANGE_DOWNLOAD_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHOWCASE_CHANGE_DOWNLOAD_POLICY_DETAILS}.
     *
     * @return The {@link ShowcaseChangeDownloadPolicyDetails} value associated
     *     with this instance if {@link #isShowcaseChangeDownloadPolicyDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isShowcaseChangeDownloadPolicyDetails} is {@code false}.
     */
    public ShowcaseChangeDownloadPolicyDetails getShowcaseChangeDownloadPolicyDetailsValue() {
        if (this._tag != Tag.SHOWCASE_CHANGE_DOWNLOAD_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_CHANGE_DOWNLOAD_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseChangeDownloadPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_CHANGE_ENABLED_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_CHANGE_ENABLED_POLICY_DETAILS}, {@code false} otherwise.
     */
    public boolean isShowcaseChangeEnabledPolicyDetails() {
        return this._tag == Tag.SHOWCASE_CHANGE_ENABLED_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_CHANGE_ENABLED_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_CHANGE_ENABLED_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseChangeEnabledPolicyDetails(ShowcaseChangeEnabledPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseChangeEnabledPolicyDetails(Tag.SHOWCASE_CHANGE_ENABLED_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHOWCASE_CHANGE_ENABLED_POLICY_DETAILS}.
     *
     * @return The {@link ShowcaseChangeEnabledPolicyDetails} value associated
     *     with this instance if {@link #isShowcaseChangeEnabledPolicyDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isShowcaseChangeEnabledPolicyDetails} is {@code false}.
     */
    public ShowcaseChangeEnabledPolicyDetails getShowcaseChangeEnabledPolicyDetailsValue() {
        if (this._tag != Tag.SHOWCASE_CHANGE_ENABLED_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_CHANGE_ENABLED_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseChangeEnabledPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isShowcaseChangeExternalSharingPolicyDetails() {
        return this._tag == Tag.SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails showcaseChangeExternalSharingPolicyDetails(ShowcaseChangeExternalSharingPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndShowcaseChangeExternalSharingPolicyDetails(Tag.SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY_DETAILS}.
     *
     * @return The {@link ShowcaseChangeExternalSharingPolicyDetails} value
     *     associated with this instance if {@link
     *     #isShowcaseChangeExternalSharingPolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isShowcaseChangeExternalSharingPolicyDetails} is {@code false}.
     */
    public ShowcaseChangeExternalSharingPolicyDetails getShowcaseChangeExternalSharingPolicyDetailsValue() {
        if (this._tag != Tag.SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return showcaseChangeExternalSharingPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SMARTER_SMART_SYNC_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SMARTER_SMART_SYNC_POLICY_CHANGED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isSmarterSmartSyncPolicyChangedDetails() {
        return this._tag == Tag.SMARTER_SMART_SYNC_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SMARTER_SMART_SYNC_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SMARTER_SMART_SYNC_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails smarterSmartSyncPolicyChangedDetails(SmarterSmartSyncPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSmarterSmartSyncPolicyChangedDetails(Tag.SMARTER_SMART_SYNC_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SMARTER_SMART_SYNC_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link SmarterSmartSyncPolicyChangedDetails} value associated
     *     with this instance if {@link #isSmarterSmartSyncPolicyChangedDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSmarterSmartSyncPolicyChangedDetails} is {@code false}.
     */
    public SmarterSmartSyncPolicyChangedDetails getSmarterSmartSyncPolicyChangedDetailsValue() {
        if (this._tag != Tag.SMARTER_SMART_SYNC_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SMARTER_SMART_SYNC_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return smarterSmartSyncPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SMART_SYNC_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SMART_SYNC_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     */
    public boolean isSmartSyncChangePolicyDetails() {
        return this._tag == Tag.SMART_SYNC_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SMART_SYNC_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SMART_SYNC_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails smartSyncChangePolicyDetails(SmartSyncChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSmartSyncChangePolicyDetails(Tag.SMART_SYNC_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SMART_SYNC_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link SmartSyncChangePolicyDetails} value associated with
     *     this instance if {@link #isSmartSyncChangePolicyDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isSmartSyncChangePolicyDetails}
     *     is {@code false}.
     */
    public SmartSyncChangePolicyDetails getSmartSyncChangePolicyDetailsValue() {
        if (this._tag != Tag.SMART_SYNC_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SMART_SYNC_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return smartSyncChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SMART_SYNC_NOT_OPT_OUT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SMART_SYNC_NOT_OPT_OUT_DETAILS}, {@code false} otherwise.
     */
    public boolean isSmartSyncNotOptOutDetails() {
        return this._tag == Tag.SMART_SYNC_NOT_OPT_OUT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SMART_SYNC_NOT_OPT_OUT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SMART_SYNC_NOT_OPT_OUT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails smartSyncNotOptOutDetails(SmartSyncNotOptOutDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSmartSyncNotOptOutDetails(Tag.SMART_SYNC_NOT_OPT_OUT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#SMART_SYNC_NOT_OPT_OUT_DETAILS}.
     *
     * @return The {@link SmartSyncNotOptOutDetails} value associated with this
     *     instance if {@link #isSmartSyncNotOptOutDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSmartSyncNotOptOutDetails} is
     *     {@code false}.
     */
    public SmartSyncNotOptOutDetails getSmartSyncNotOptOutDetailsValue() {
        if (this._tag != Tag.SMART_SYNC_NOT_OPT_OUT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SMART_SYNC_NOT_OPT_OUT_DETAILS, but was Tag." + this._tag.name());
        }
        return smartSyncNotOptOutDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SMART_SYNC_OPT_OUT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SMART_SYNC_OPT_OUT_DETAILS}, {@code false} otherwise.
     */
    public boolean isSmartSyncOptOutDetails() {
        return this._tag == Tag.SMART_SYNC_OPT_OUT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SMART_SYNC_OPT_OUT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SMART_SYNC_OPT_OUT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails smartSyncOptOutDetails(SmartSyncOptOutDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSmartSyncOptOutDetails(Tag.SMART_SYNC_OPT_OUT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SMART_SYNC_OPT_OUT_DETAILS}.
     *
     * @return The {@link SmartSyncOptOutDetails} value associated with this
     *     instance if {@link #isSmartSyncOptOutDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSmartSyncOptOutDetails} is
     *     {@code false}.
     */
    public SmartSyncOptOutDetails getSmartSyncOptOutDetailsValue() {
        if (this._tag != Tag.SMART_SYNC_OPT_OUT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SMART_SYNC_OPT_OUT_DETAILS, but was Tag." + this._tag.name());
        }
        return smartSyncOptOutDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     */
    public boolean isSsoChangePolicyDetails() {
        return this._tag == Tag.SSO_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#SSO_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#SSO_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails ssoChangePolicyDetails(SsoChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndSsoChangePolicyDetails(Tag.SSO_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#SSO_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link SsoChangePolicyDetails} value associated with this
     *     instance if {@link #isSsoChangePolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoChangePolicyDetails} is
     *     {@code false}.
     */
    public SsoChangePolicyDetails getSsoChangePolicyDetailsValue() {
        if (this._tag != Tag.SSO_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return ssoChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_BRANDING_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_BRANDING_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamBrandingPolicyChangedDetails() {
        return this._tag == Tag.TEAM_BRANDING_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_BRANDING_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_BRANDING_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamBrandingPolicyChangedDetails(TeamBrandingPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamBrandingPolicyChangedDetails(Tag.TEAM_BRANDING_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_BRANDING_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link TeamBrandingPolicyChangedDetails} value associated
     *     with this instance if {@link #isTeamBrandingPolicyChangedDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamBrandingPolicyChangedDetails} is {@code false}.
     */
    public TeamBrandingPolicyChangedDetails getTeamBrandingPolicyChangedDetailsValue() {
        if (this._tag != Tag.TEAM_BRANDING_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_BRANDING_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return teamBrandingPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_EXTENSIONS_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_EXTENSIONS_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamExtensionsPolicyChangedDetails() {
        return this._tag == Tag.TEAM_EXTENSIONS_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_EXTENSIONS_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_EXTENSIONS_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamExtensionsPolicyChangedDetails(TeamExtensionsPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamExtensionsPolicyChangedDetails(Tag.TEAM_EXTENSIONS_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_EXTENSIONS_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link TeamExtensionsPolicyChangedDetails} value associated
     *     with this instance if {@link #isTeamExtensionsPolicyChangedDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamExtensionsPolicyChangedDetails} is {@code false}.
     */
    public TeamExtensionsPolicyChangedDetails getTeamExtensionsPolicyChangedDetailsValue() {
        if (this._tag != Tag.TEAM_EXTENSIONS_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_EXTENSIONS_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return teamExtensionsPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_SELECTIVE_SYNC_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_SELECTIVE_SYNC_POLICY_CHANGED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isTeamSelectiveSyncPolicyChangedDetails() {
        return this._tag == Tag.TEAM_SELECTIVE_SYNC_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_SELECTIVE_SYNC_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_SELECTIVE_SYNC_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamSelectiveSyncPolicyChangedDetails(TeamSelectiveSyncPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamSelectiveSyncPolicyChangedDetails(Tag.TEAM_SELECTIVE_SYNC_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_SELECTIVE_SYNC_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link TeamSelectiveSyncPolicyChangedDetails} value
     *     associated with this instance if {@link
     *     #isTeamSelectiveSyncPolicyChangedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamSelectiveSyncPolicyChangedDetails} is {@code false}.
     */
    public TeamSelectiveSyncPolicyChangedDetails getTeamSelectiveSyncPolicyChangedDetailsValue() {
        if (this._tag != Tag.TEAM_SELECTIVE_SYNC_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_SELECTIVE_SYNC_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return teamSelectiveSyncPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isTeamSharingWhitelistSubjectsChangedDetails() {
        return this._tag == Tag.TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamSharingWhitelistSubjectsChangedDetails(TeamSharingWhitelistSubjectsChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamSharingWhitelistSubjectsChangedDetails(Tag.TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED_DETAILS}.
     *
     * @return The {@link TeamSharingWhitelistSubjectsChangedDetails} value
     *     associated with this instance if {@link
     *     #isTeamSharingWhitelistSubjectsChangedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamSharingWhitelistSubjectsChangedDetails} is {@code false}.
     */
    public TeamSharingWhitelistSubjectsChangedDetails getTeamSharingWhitelistSubjectsChangedDetailsValue() {
        if (this._tag != Tag.TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return teamSharingWhitelistSubjectsChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TFA_ADD_EXCEPTION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TFA_ADD_EXCEPTION_DETAILS}, {@code false} otherwise.
     */
    public boolean isTfaAddExceptionDetails() {
        return this._tag == Tag.TFA_ADD_EXCEPTION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TFA_ADD_EXCEPTION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TFA_ADD_EXCEPTION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails tfaAddExceptionDetails(TfaAddExceptionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTfaAddExceptionDetails(Tag.TFA_ADD_EXCEPTION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#TFA_ADD_EXCEPTION_DETAILS}.
     *
     * @return The {@link TfaAddExceptionDetails} value associated with this
     *     instance if {@link #isTfaAddExceptionDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTfaAddExceptionDetails} is
     *     {@code false}.
     */
    public TfaAddExceptionDetails getTfaAddExceptionDetailsValue() {
        if (this._tag != Tag.TFA_ADD_EXCEPTION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TFA_ADD_EXCEPTION_DETAILS, but was Tag." + this._tag.name());
        }
        return tfaAddExceptionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TFA_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TFA_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     */
    public boolean isTfaChangePolicyDetails() {
        return this._tag == Tag.TFA_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TFA_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TFA_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails tfaChangePolicyDetails(TfaChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTfaChangePolicyDetails(Tag.TFA_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#TFA_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link TfaChangePolicyDetails} value associated with this
     *     instance if {@link #isTfaChangePolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTfaChangePolicyDetails} is
     *     {@code false}.
     */
    public TfaChangePolicyDetails getTfaChangePolicyDetailsValue() {
        if (this._tag != Tag.TFA_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TFA_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return tfaChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TFA_REMOVE_EXCEPTION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TFA_REMOVE_EXCEPTION_DETAILS}, {@code false} otherwise.
     */
    public boolean isTfaRemoveExceptionDetails() {
        return this._tag == Tag.TFA_REMOVE_EXCEPTION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TFA_REMOVE_EXCEPTION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TFA_REMOVE_EXCEPTION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails tfaRemoveExceptionDetails(TfaRemoveExceptionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTfaRemoveExceptionDetails(Tag.TFA_REMOVE_EXCEPTION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#TFA_REMOVE_EXCEPTION_DETAILS}.
     *
     * @return The {@link TfaRemoveExceptionDetails} value associated with this
     *     instance if {@link #isTfaRemoveExceptionDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTfaRemoveExceptionDetails} is
     *     {@code false}.
     */
    public TfaRemoveExceptionDetails getTfaRemoveExceptionDetailsValue() {
        if (this._tag != Tag.TFA_REMOVE_EXCEPTION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TFA_REMOVE_EXCEPTION_DETAILS, but was Tag." + this._tag.name());
        }
        return tfaRemoveExceptionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TWO_ACCOUNT_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TWO_ACCOUNT_CHANGE_POLICY_DETAILS}, {@code false} otherwise.
     */
    public boolean isTwoAccountChangePolicyDetails() {
        return this._tag == Tag.TWO_ACCOUNT_CHANGE_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TWO_ACCOUNT_CHANGE_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TWO_ACCOUNT_CHANGE_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails twoAccountChangePolicyDetails(TwoAccountChangePolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTwoAccountChangePolicyDetails(Tag.TWO_ACCOUNT_CHANGE_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TWO_ACCOUNT_CHANGE_POLICY_DETAILS}.
     *
     * @return The {@link TwoAccountChangePolicyDetails} value associated with
     *     this instance if {@link #isTwoAccountChangePolicyDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTwoAccountChangePolicyDetails} is {@code false}.
     */
    public TwoAccountChangePolicyDetails getTwoAccountChangePolicyDetailsValue() {
        if (this._tag != Tag.TWO_ACCOUNT_CHANGE_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TWO_ACCOUNT_CHANGE_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return twoAccountChangePolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#VIEWER_INFO_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#VIEWER_INFO_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     */
    public boolean isViewerInfoPolicyChangedDetails() {
        return this._tag == Tag.VIEWER_INFO_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#VIEWER_INFO_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#VIEWER_INFO_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails viewerInfoPolicyChangedDetails(ViewerInfoPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndViewerInfoPolicyChangedDetails(Tag.VIEWER_INFO_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#VIEWER_INFO_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link ViewerInfoPolicyChangedDetails} value associated with
     *     this instance if {@link #isViewerInfoPolicyChangedDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isViewerInfoPolicyChangedDetails} is {@code false}.
     */
    public ViewerInfoPolicyChangedDetails getViewerInfoPolicyChangedDetailsValue() {
        if (this._tag != Tag.VIEWER_INFO_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.VIEWER_INFO_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return viewerInfoPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#WATERMARKING_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#WATERMARKING_POLICY_CHANGED_DETAILS}, {@code false} otherwise.
     */
    public boolean isWatermarkingPolicyChangedDetails() {
        return this._tag == Tag.WATERMARKING_POLICY_CHANGED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#WATERMARKING_POLICY_CHANGED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#WATERMARKING_POLICY_CHANGED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails watermarkingPolicyChangedDetails(WatermarkingPolicyChangedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndWatermarkingPolicyChangedDetails(Tag.WATERMARKING_POLICY_CHANGED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#WATERMARKING_POLICY_CHANGED_DETAILS}.
     *
     * @return The {@link WatermarkingPolicyChangedDetails} value associated
     *     with this instance if {@link #isWatermarkingPolicyChangedDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isWatermarkingPolicyChangedDetails} is {@code false}.
     */
    public WatermarkingPolicyChangedDetails getWatermarkingPolicyChangedDetailsValue() {
        if (this._tag != Tag.WATERMARKING_POLICY_CHANGED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.WATERMARKING_POLICY_CHANGED_DETAILS, but was Tag." + this._tag.name());
        }
        return watermarkingPolicyChangedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isWebSessionsChangeActiveSessionLimitDetails() {
        return this._tag == Tag.WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails webSessionsChangeActiveSessionLimitDetails(WebSessionsChangeActiveSessionLimitDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndWebSessionsChangeActiveSessionLimitDetails(Tag.WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT_DETAILS}.
     *
     * @return The {@link WebSessionsChangeActiveSessionLimitDetails} value
     *     associated with this instance if {@link
     *     #isWebSessionsChangeActiveSessionLimitDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isWebSessionsChangeActiveSessionLimitDetails} is {@code false}.
     */
    public WebSessionsChangeActiveSessionLimitDetails getWebSessionsChangeActiveSessionLimitDetailsValue() {
        if (this._tag != Tag.WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT_DETAILS, but was Tag." + this._tag.name());
        }
        return webSessionsChangeActiveSessionLimitDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isWebSessionsChangeFixedLengthPolicyDetails() {
        return this._tag == Tag.WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails webSessionsChangeFixedLengthPolicyDetails(WebSessionsChangeFixedLengthPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndWebSessionsChangeFixedLengthPolicyDetails(Tag.WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY_DETAILS}.
     *
     * @return The {@link WebSessionsChangeFixedLengthPolicyDetails} value
     *     associated with this instance if {@link
     *     #isWebSessionsChangeFixedLengthPolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isWebSessionsChangeFixedLengthPolicyDetails} is {@code false}.
     */
    public WebSessionsChangeFixedLengthPolicyDetails getWebSessionsChangeFixedLengthPolicyDetailsValue() {
        if (this._tag != Tag.WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return webSessionsChangeFixedLengthPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isWebSessionsChangeIdleLengthPolicyDetails() {
        return this._tag == Tag.WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails webSessionsChangeIdleLengthPolicyDetails(WebSessionsChangeIdleLengthPolicyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndWebSessionsChangeIdleLengthPolicyDetails(Tag.WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY_DETAILS}.
     *
     * @return The {@link WebSessionsChangeIdleLengthPolicyDetails} value
     *     associated with this instance if {@link
     *     #isWebSessionsChangeIdleLengthPolicyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isWebSessionsChangeIdleLengthPolicyDetails} is {@code false}.
     */
    public WebSessionsChangeIdleLengthPolicyDetails getWebSessionsChangeIdleLengthPolicyDetailsValue() {
        if (this._tag != Tag.WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY_DETAILS, but was Tag." + this._tag.name());
        }
        return webSessionsChangeIdleLengthPolicyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL_DETAILS}, {@code
     *     false} otherwise.
     */
    public boolean isDataResidencyMigrationRequestSuccessfulDetails() {
        return this._tag == Tag.DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails dataResidencyMigrationRequestSuccessfulDetails(DataResidencyMigrationRequestSuccessfulDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDataResidencyMigrationRequestSuccessfulDetails(Tag.DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL_DETAILS}.
     *
     * @return The {@link DataResidencyMigrationRequestSuccessfulDetails} value
     *     associated with this instance if {@link
     *     #isDataResidencyMigrationRequestSuccessfulDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDataResidencyMigrationRequestSuccessfulDetails} is {@code false}.
     */
    public DataResidencyMigrationRequestSuccessfulDetails getDataResidencyMigrationRequestSuccessfulDetailsValue() {
        if (this._tag != Tag.DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL_DETAILS, but was Tag." + this._tag.name());
        }
        return dataResidencyMigrationRequestSuccessfulDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL_DETAILS}, {@code
     *     false} otherwise.
     */
    public boolean isDataResidencyMigrationRequestUnsuccessfulDetails() {
        return this._tag == Tag.DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails dataResidencyMigrationRequestUnsuccessfulDetails(DataResidencyMigrationRequestUnsuccessfulDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndDataResidencyMigrationRequestUnsuccessfulDetails(Tag.DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL_DETAILS}.
     *
     * @return The {@link DataResidencyMigrationRequestUnsuccessfulDetails}
     *     value associated with this instance if {@link
     *     #isDataResidencyMigrationRequestUnsuccessfulDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDataResidencyMigrationRequestUnsuccessfulDetails} is {@code
     *     false}.
     */
    public DataResidencyMigrationRequestUnsuccessfulDetails getDataResidencyMigrationRequestUnsuccessfulDetailsValue() {
        if (this._tag != Tag.DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL_DETAILS, but was Tag." + this._tag.name());
        }
        return dataResidencyMigrationRequestUnsuccessfulDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_FROM_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_FROM_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamMergeFromDetails() {
        return this._tag == Tag.TEAM_MERGE_FROM_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_MERGE_FROM_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_MERGE_FROM_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamMergeFromDetails(TeamMergeFromDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamMergeFromDetails(Tag.TEAM_MERGE_FROM_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#TEAM_MERGE_FROM_DETAILS}.
     *
     * @return The {@link TeamMergeFromDetails} value associated with this
     *     instance if {@link #isTeamMergeFromDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamMergeFromDetails} is
     *     {@code false}.
     */
    public TeamMergeFromDetails getTeamMergeFromDetailsValue() {
        if (this._tag != Tag.TEAM_MERGE_FROM_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_FROM_DETAILS, but was Tag." + this._tag.name());
        }
        return teamMergeFromDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_TO_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_TO_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamMergeToDetails() {
        return this._tag == Tag.TEAM_MERGE_TO_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_MERGE_TO_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_MERGE_TO_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamMergeToDetails(TeamMergeToDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamMergeToDetails(Tag.TEAM_MERGE_TO_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#TEAM_MERGE_TO_DETAILS}.
     *
     * @return The {@link TeamMergeToDetails} value associated with this
     *     instance if {@link #isTeamMergeToDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamMergeToDetails} is {@code
     *     false}.
     */
    public TeamMergeToDetails getTeamMergeToDetailsValue() {
        if (this._tag != Tag.TEAM_MERGE_TO_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_TO_DETAILS, but was Tag." + this._tag.name());
        }
        return teamMergeToDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_PROFILE_ADD_BACKGROUND_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_PROFILE_ADD_BACKGROUND_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamProfileAddBackgroundDetails() {
        return this._tag == Tag.TEAM_PROFILE_ADD_BACKGROUND_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_PROFILE_ADD_BACKGROUND_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_PROFILE_ADD_BACKGROUND_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamProfileAddBackgroundDetails(TeamProfileAddBackgroundDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamProfileAddBackgroundDetails(Tag.TEAM_PROFILE_ADD_BACKGROUND_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_PROFILE_ADD_BACKGROUND_DETAILS}.
     *
     * @return The {@link TeamProfileAddBackgroundDetails} value associated with
     *     this instance if {@link #isTeamProfileAddBackgroundDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamProfileAddBackgroundDetails} is {@code false}.
     */
    public TeamProfileAddBackgroundDetails getTeamProfileAddBackgroundDetailsValue() {
        if (this._tag != Tag.TEAM_PROFILE_ADD_BACKGROUND_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_PROFILE_ADD_BACKGROUND_DETAILS, but was Tag." + this._tag.name());
        }
        return teamProfileAddBackgroundDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_PROFILE_ADD_LOGO_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_PROFILE_ADD_LOGO_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamProfileAddLogoDetails() {
        return this._tag == Tag.TEAM_PROFILE_ADD_LOGO_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_PROFILE_ADD_LOGO_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_PROFILE_ADD_LOGO_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamProfileAddLogoDetails(TeamProfileAddLogoDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamProfileAddLogoDetails(Tag.TEAM_PROFILE_ADD_LOGO_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_PROFILE_ADD_LOGO_DETAILS}.
     *
     * @return The {@link TeamProfileAddLogoDetails} value associated with this
     *     instance if {@link #isTeamProfileAddLogoDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamProfileAddLogoDetails} is
     *     {@code false}.
     */
    public TeamProfileAddLogoDetails getTeamProfileAddLogoDetailsValue() {
        if (this._tag != Tag.TEAM_PROFILE_ADD_LOGO_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_PROFILE_ADD_LOGO_DETAILS, but was Tag." + this._tag.name());
        }
        return teamProfileAddLogoDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_PROFILE_CHANGE_BACKGROUND_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_PROFILE_CHANGE_BACKGROUND_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamProfileChangeBackgroundDetails() {
        return this._tag == Tag.TEAM_PROFILE_CHANGE_BACKGROUND_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_PROFILE_CHANGE_BACKGROUND_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_PROFILE_CHANGE_BACKGROUND_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamProfileChangeBackgroundDetails(TeamProfileChangeBackgroundDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamProfileChangeBackgroundDetails(Tag.TEAM_PROFILE_CHANGE_BACKGROUND_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_PROFILE_CHANGE_BACKGROUND_DETAILS}.
     *
     * @return The {@link TeamProfileChangeBackgroundDetails} value associated
     *     with this instance if {@link #isTeamProfileChangeBackgroundDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamProfileChangeBackgroundDetails} is {@code false}.
     */
    public TeamProfileChangeBackgroundDetails getTeamProfileChangeBackgroundDetailsValue() {
        if (this._tag != Tag.TEAM_PROFILE_CHANGE_BACKGROUND_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_PROFILE_CHANGE_BACKGROUND_DETAILS, but was Tag." + this._tag.name());
        }
        return teamProfileChangeBackgroundDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isTeamProfileChangeDefaultLanguageDetails() {
        return this._tag == Tag.TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamProfileChangeDefaultLanguageDetails(TeamProfileChangeDefaultLanguageDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamProfileChangeDefaultLanguageDetails(Tag.TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE_DETAILS}.
     *
     * @return The {@link TeamProfileChangeDefaultLanguageDetails} value
     *     associated with this instance if {@link
     *     #isTeamProfileChangeDefaultLanguageDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamProfileChangeDefaultLanguageDetails} is {@code false}.
     */
    public TeamProfileChangeDefaultLanguageDetails getTeamProfileChangeDefaultLanguageDetailsValue() {
        if (this._tag != Tag.TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE_DETAILS, but was Tag." + this._tag.name());
        }
        return teamProfileChangeDefaultLanguageDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_PROFILE_CHANGE_LOGO_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_PROFILE_CHANGE_LOGO_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamProfileChangeLogoDetails() {
        return this._tag == Tag.TEAM_PROFILE_CHANGE_LOGO_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_PROFILE_CHANGE_LOGO_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_PROFILE_CHANGE_LOGO_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamProfileChangeLogoDetails(TeamProfileChangeLogoDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamProfileChangeLogoDetails(Tag.TEAM_PROFILE_CHANGE_LOGO_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_PROFILE_CHANGE_LOGO_DETAILS}.
     *
     * @return The {@link TeamProfileChangeLogoDetails} value associated with
     *     this instance if {@link #isTeamProfileChangeLogoDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isTeamProfileChangeLogoDetails}
     *     is {@code false}.
     */
    public TeamProfileChangeLogoDetails getTeamProfileChangeLogoDetailsValue() {
        if (this._tag != Tag.TEAM_PROFILE_CHANGE_LOGO_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_PROFILE_CHANGE_LOGO_DETAILS, but was Tag." + this._tag.name());
        }
        return teamProfileChangeLogoDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_PROFILE_CHANGE_NAME_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_PROFILE_CHANGE_NAME_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamProfileChangeNameDetails() {
        return this._tag == Tag.TEAM_PROFILE_CHANGE_NAME_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_PROFILE_CHANGE_NAME_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_PROFILE_CHANGE_NAME_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamProfileChangeNameDetails(TeamProfileChangeNameDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamProfileChangeNameDetails(Tag.TEAM_PROFILE_CHANGE_NAME_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_PROFILE_CHANGE_NAME_DETAILS}.
     *
     * @return The {@link TeamProfileChangeNameDetails} value associated with
     *     this instance if {@link #isTeamProfileChangeNameDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isTeamProfileChangeNameDetails}
     *     is {@code false}.
     */
    public TeamProfileChangeNameDetails getTeamProfileChangeNameDetailsValue() {
        if (this._tag != Tag.TEAM_PROFILE_CHANGE_NAME_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_PROFILE_CHANGE_NAME_DETAILS, but was Tag." + this._tag.name());
        }
        return teamProfileChangeNameDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_PROFILE_REMOVE_BACKGROUND_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_PROFILE_REMOVE_BACKGROUND_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamProfileRemoveBackgroundDetails() {
        return this._tag == Tag.TEAM_PROFILE_REMOVE_BACKGROUND_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_PROFILE_REMOVE_BACKGROUND_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_PROFILE_REMOVE_BACKGROUND_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamProfileRemoveBackgroundDetails(TeamProfileRemoveBackgroundDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamProfileRemoveBackgroundDetails(Tag.TEAM_PROFILE_REMOVE_BACKGROUND_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_PROFILE_REMOVE_BACKGROUND_DETAILS}.
     *
     * @return The {@link TeamProfileRemoveBackgroundDetails} value associated
     *     with this instance if {@link #isTeamProfileRemoveBackgroundDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamProfileRemoveBackgroundDetails} is {@code false}.
     */
    public TeamProfileRemoveBackgroundDetails getTeamProfileRemoveBackgroundDetailsValue() {
        if (this._tag != Tag.TEAM_PROFILE_REMOVE_BACKGROUND_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_PROFILE_REMOVE_BACKGROUND_DETAILS, but was Tag." + this._tag.name());
        }
        return teamProfileRemoveBackgroundDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_PROFILE_REMOVE_LOGO_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_PROFILE_REMOVE_LOGO_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamProfileRemoveLogoDetails() {
        return this._tag == Tag.TEAM_PROFILE_REMOVE_LOGO_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_PROFILE_REMOVE_LOGO_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_PROFILE_REMOVE_LOGO_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamProfileRemoveLogoDetails(TeamProfileRemoveLogoDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamProfileRemoveLogoDetails(Tag.TEAM_PROFILE_REMOVE_LOGO_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_PROFILE_REMOVE_LOGO_DETAILS}.
     *
     * @return The {@link TeamProfileRemoveLogoDetails} value associated with
     *     this instance if {@link #isTeamProfileRemoveLogoDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isTeamProfileRemoveLogoDetails}
     *     is {@code false}.
     */
    public TeamProfileRemoveLogoDetails getTeamProfileRemoveLogoDetailsValue() {
        if (this._tag != Tag.TEAM_PROFILE_REMOVE_LOGO_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_PROFILE_REMOVE_LOGO_DETAILS, but was Tag." + this._tag.name());
        }
        return teamProfileRemoveLogoDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TFA_ADD_BACKUP_PHONE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TFA_ADD_BACKUP_PHONE_DETAILS}, {@code false} otherwise.
     */
    public boolean isTfaAddBackupPhoneDetails() {
        return this._tag == Tag.TFA_ADD_BACKUP_PHONE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TFA_ADD_BACKUP_PHONE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TFA_ADD_BACKUP_PHONE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails tfaAddBackupPhoneDetails(TfaAddBackupPhoneDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTfaAddBackupPhoneDetails(Tag.TFA_ADD_BACKUP_PHONE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#TFA_ADD_BACKUP_PHONE_DETAILS}.
     *
     * @return The {@link TfaAddBackupPhoneDetails} value associated with this
     *     instance if {@link #isTfaAddBackupPhoneDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTfaAddBackupPhoneDetails} is
     *     {@code false}.
     */
    public TfaAddBackupPhoneDetails getTfaAddBackupPhoneDetailsValue() {
        if (this._tag != Tag.TFA_ADD_BACKUP_PHONE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TFA_ADD_BACKUP_PHONE_DETAILS, but was Tag." + this._tag.name());
        }
        return tfaAddBackupPhoneDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TFA_ADD_SECURITY_KEY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TFA_ADD_SECURITY_KEY_DETAILS}, {@code false} otherwise.
     */
    public boolean isTfaAddSecurityKeyDetails() {
        return this._tag == Tag.TFA_ADD_SECURITY_KEY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TFA_ADD_SECURITY_KEY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TFA_ADD_SECURITY_KEY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails tfaAddSecurityKeyDetails(TfaAddSecurityKeyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTfaAddSecurityKeyDetails(Tag.TFA_ADD_SECURITY_KEY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#TFA_ADD_SECURITY_KEY_DETAILS}.
     *
     * @return The {@link TfaAddSecurityKeyDetails} value associated with this
     *     instance if {@link #isTfaAddSecurityKeyDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTfaAddSecurityKeyDetails} is
     *     {@code false}.
     */
    public TfaAddSecurityKeyDetails getTfaAddSecurityKeyDetailsValue() {
        if (this._tag != Tag.TFA_ADD_SECURITY_KEY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TFA_ADD_SECURITY_KEY_DETAILS, but was Tag." + this._tag.name());
        }
        return tfaAddSecurityKeyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TFA_CHANGE_BACKUP_PHONE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TFA_CHANGE_BACKUP_PHONE_DETAILS}, {@code false} otherwise.
     */
    public boolean isTfaChangeBackupPhoneDetails() {
        return this._tag == Tag.TFA_CHANGE_BACKUP_PHONE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TFA_CHANGE_BACKUP_PHONE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TFA_CHANGE_BACKUP_PHONE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails tfaChangeBackupPhoneDetails(TfaChangeBackupPhoneDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTfaChangeBackupPhoneDetails(Tag.TFA_CHANGE_BACKUP_PHONE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TFA_CHANGE_BACKUP_PHONE_DETAILS}.
     *
     * @return The {@link TfaChangeBackupPhoneDetails} value associated with
     *     this instance if {@link #isTfaChangeBackupPhoneDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isTfaChangeBackupPhoneDetails}
     *     is {@code false}.
     */
    public TfaChangeBackupPhoneDetails getTfaChangeBackupPhoneDetailsValue() {
        if (this._tag != Tag.TFA_CHANGE_BACKUP_PHONE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TFA_CHANGE_BACKUP_PHONE_DETAILS, but was Tag." + this._tag.name());
        }
        return tfaChangeBackupPhoneDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TFA_CHANGE_STATUS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TFA_CHANGE_STATUS_DETAILS}, {@code false} otherwise.
     */
    public boolean isTfaChangeStatusDetails() {
        return this._tag == Tag.TFA_CHANGE_STATUS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TFA_CHANGE_STATUS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TFA_CHANGE_STATUS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails tfaChangeStatusDetails(TfaChangeStatusDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTfaChangeStatusDetails(Tag.TFA_CHANGE_STATUS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#TFA_CHANGE_STATUS_DETAILS}.
     *
     * @return The {@link TfaChangeStatusDetails} value associated with this
     *     instance if {@link #isTfaChangeStatusDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTfaChangeStatusDetails} is
     *     {@code false}.
     */
    public TfaChangeStatusDetails getTfaChangeStatusDetailsValue() {
        if (this._tag != Tag.TFA_CHANGE_STATUS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TFA_CHANGE_STATUS_DETAILS, but was Tag." + this._tag.name());
        }
        return tfaChangeStatusDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TFA_REMOVE_BACKUP_PHONE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TFA_REMOVE_BACKUP_PHONE_DETAILS}, {@code false} otherwise.
     */
    public boolean isTfaRemoveBackupPhoneDetails() {
        return this._tag == Tag.TFA_REMOVE_BACKUP_PHONE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TFA_REMOVE_BACKUP_PHONE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TFA_REMOVE_BACKUP_PHONE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails tfaRemoveBackupPhoneDetails(TfaRemoveBackupPhoneDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTfaRemoveBackupPhoneDetails(Tag.TFA_REMOVE_BACKUP_PHONE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TFA_REMOVE_BACKUP_PHONE_DETAILS}.
     *
     * @return The {@link TfaRemoveBackupPhoneDetails} value associated with
     *     this instance if {@link #isTfaRemoveBackupPhoneDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isTfaRemoveBackupPhoneDetails}
     *     is {@code false}.
     */
    public TfaRemoveBackupPhoneDetails getTfaRemoveBackupPhoneDetailsValue() {
        if (this._tag != Tag.TFA_REMOVE_BACKUP_PHONE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TFA_REMOVE_BACKUP_PHONE_DETAILS, but was Tag." + this._tag.name());
        }
        return tfaRemoveBackupPhoneDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TFA_REMOVE_SECURITY_KEY_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TFA_REMOVE_SECURITY_KEY_DETAILS}, {@code false} otherwise.
     */
    public boolean isTfaRemoveSecurityKeyDetails() {
        return this._tag == Tag.TFA_REMOVE_SECURITY_KEY_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TFA_REMOVE_SECURITY_KEY_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TFA_REMOVE_SECURITY_KEY_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails tfaRemoveSecurityKeyDetails(TfaRemoveSecurityKeyDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTfaRemoveSecurityKeyDetails(Tag.TFA_REMOVE_SECURITY_KEY_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TFA_REMOVE_SECURITY_KEY_DETAILS}.
     *
     * @return The {@link TfaRemoveSecurityKeyDetails} value associated with
     *     this instance if {@link #isTfaRemoveSecurityKeyDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isTfaRemoveSecurityKeyDetails}
     *     is {@code false}.
     */
    public TfaRemoveSecurityKeyDetails getTfaRemoveSecurityKeyDetailsValue() {
        if (this._tag != Tag.TFA_REMOVE_SECURITY_KEY_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TFA_REMOVE_SECURITY_KEY_DETAILS, but was Tag." + this._tag.name());
        }
        return tfaRemoveSecurityKeyDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TFA_RESET_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TFA_RESET_DETAILS}, {@code false} otherwise.
     */
    public boolean isTfaResetDetails() {
        return this._tag == Tag.TFA_RESET_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TFA_RESET_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TFA_RESET_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails tfaResetDetails(TfaResetDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTfaResetDetails(Tag.TFA_RESET_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link Tag#TFA_RESET_DETAILS}.
     *
     * @return The {@link TfaResetDetails} value associated with this instance
     *     if {@link #isTfaResetDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTfaResetDetails} is {@code
     *     false}.
     */
    public TfaResetDetails getTfaResetDetailsValue() {
        if (this._tag != Tag.TFA_RESET_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TFA_RESET_DETAILS, but was Tag." + this._tag.name());
        }
        return tfaResetDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#CHANGED_ENTERPRISE_ADMIN_ROLE_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#CHANGED_ENTERPRISE_ADMIN_ROLE_DETAILS}, {@code false} otherwise.
     */
    public boolean isChangedEnterpriseAdminRoleDetails() {
        return this._tag == Tag.CHANGED_ENTERPRISE_ADMIN_ROLE_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#CHANGED_ENTERPRISE_ADMIN_ROLE_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#CHANGED_ENTERPRISE_ADMIN_ROLE_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails changedEnterpriseAdminRoleDetails(ChangedEnterpriseAdminRoleDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndChangedEnterpriseAdminRoleDetails(Tag.CHANGED_ENTERPRISE_ADMIN_ROLE_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#CHANGED_ENTERPRISE_ADMIN_ROLE_DETAILS}.
     *
     * @return The {@link ChangedEnterpriseAdminRoleDetails} value associated
     *     with this instance if {@link #isChangedEnterpriseAdminRoleDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isChangedEnterpriseAdminRoleDetails} is {@code false}.
     */
    public ChangedEnterpriseAdminRoleDetails getChangedEnterpriseAdminRoleDetailsValue() {
        if (this._tag != Tag.CHANGED_ENTERPRISE_ADMIN_ROLE_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.CHANGED_ENTERPRISE_ADMIN_ROLE_DETAILS, but was Tag." + this._tag.name());
        }
        return changedEnterpriseAdminRoleDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isChangedEnterpriseConnectedTeamStatusDetails() {
        return this._tag == Tag.CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails changedEnterpriseConnectedTeamStatusDetails(ChangedEnterpriseConnectedTeamStatusDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndChangedEnterpriseConnectedTeamStatusDetails(Tag.CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS_DETAILS}.
     *
     * @return The {@link ChangedEnterpriseConnectedTeamStatusDetails} value
     *     associated with this instance if {@link
     *     #isChangedEnterpriseConnectedTeamStatusDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isChangedEnterpriseConnectedTeamStatusDetails} is {@code false}.
     */
    public ChangedEnterpriseConnectedTeamStatusDetails getChangedEnterpriseConnectedTeamStatusDetailsValue() {
        if (this._tag != Tag.CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS_DETAILS, but was Tag." + this._tag.name());
        }
        return changedEnterpriseConnectedTeamStatusDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ENDED_ENTERPRISE_ADMIN_SESSION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ENDED_ENTERPRISE_ADMIN_SESSION_DETAILS}, {@code false} otherwise.
     */
    public boolean isEndedEnterpriseAdminSessionDetails() {
        return this._tag == Tag.ENDED_ENTERPRISE_ADMIN_SESSION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#ENDED_ENTERPRISE_ADMIN_SESSION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#ENDED_ENTERPRISE_ADMIN_SESSION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails endedEnterpriseAdminSessionDetails(EndedEnterpriseAdminSessionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndEndedEnterpriseAdminSessionDetails(Tag.ENDED_ENTERPRISE_ADMIN_SESSION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#ENDED_ENTERPRISE_ADMIN_SESSION_DETAILS}.
     *
     * @return The {@link EndedEnterpriseAdminSessionDetails} value associated
     *     with this instance if {@link #isEndedEnterpriseAdminSessionDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isEndedEnterpriseAdminSessionDetails} is {@code false}.
     */
    public EndedEnterpriseAdminSessionDetails getEndedEnterpriseAdminSessionDetailsValue() {
        if (this._tag != Tag.ENDED_ENTERPRISE_ADMIN_SESSION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.ENDED_ENTERPRISE_ADMIN_SESSION_DETAILS, but was Tag." + this._tag.name());
        }
        return endedEnterpriseAdminSessionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isEndedEnterpriseAdminSessionDeprecatedDetails() {
        return this._tag == Tag.ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails endedEnterpriseAdminSessionDeprecatedDetails(EndedEnterpriseAdminSessionDeprecatedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndEndedEnterpriseAdminSessionDeprecatedDetails(Tag.ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED_DETAILS}.
     *
     * @return The {@link EndedEnterpriseAdminSessionDeprecatedDetails} value
     *     associated with this instance if {@link
     *     #isEndedEnterpriseAdminSessionDeprecatedDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isEndedEnterpriseAdminSessionDeprecatedDetails} is {@code false}.
     */
    public EndedEnterpriseAdminSessionDeprecatedDetails getEndedEnterpriseAdminSessionDeprecatedDetailsValue() {
        if (this._tag != Tag.ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED_DETAILS, but was Tag." + this._tag.name());
        }
        return endedEnterpriseAdminSessionDeprecatedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ENTERPRISE_SETTINGS_LOCKING_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ENTERPRISE_SETTINGS_LOCKING_DETAILS}, {@code false} otherwise.
     */
    public boolean isEnterpriseSettingsLockingDetails() {
        return this._tag == Tag.ENTERPRISE_SETTINGS_LOCKING_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#ENTERPRISE_SETTINGS_LOCKING_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#ENTERPRISE_SETTINGS_LOCKING_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails enterpriseSettingsLockingDetails(EnterpriseSettingsLockingDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndEnterpriseSettingsLockingDetails(Tag.ENTERPRISE_SETTINGS_LOCKING_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#ENTERPRISE_SETTINGS_LOCKING_DETAILS}.
     *
     * @return The {@link EnterpriseSettingsLockingDetails} value associated
     *     with this instance if {@link #isEnterpriseSettingsLockingDetails} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isEnterpriseSettingsLockingDetails} is {@code false}.
     */
    public EnterpriseSettingsLockingDetails getEnterpriseSettingsLockingDetailsValue() {
        if (this._tag != Tag.ENTERPRISE_SETTINGS_LOCKING_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.ENTERPRISE_SETTINGS_LOCKING_DETAILS, but was Tag." + this._tag.name());
        }
        return enterpriseSettingsLockingDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GUEST_ADMIN_CHANGE_STATUS_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GUEST_ADMIN_CHANGE_STATUS_DETAILS}, {@code false} otherwise.
     */
    public boolean isGuestAdminChangeStatusDetails() {
        return this._tag == Tag.GUEST_ADMIN_CHANGE_STATUS_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#GUEST_ADMIN_CHANGE_STATUS_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#GUEST_ADMIN_CHANGE_STATUS_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails guestAdminChangeStatusDetails(GuestAdminChangeStatusDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndGuestAdminChangeStatusDetails(Tag.GUEST_ADMIN_CHANGE_STATUS_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#GUEST_ADMIN_CHANGE_STATUS_DETAILS}.
     *
     * @return The {@link GuestAdminChangeStatusDetails} value associated with
     *     this instance if {@link #isGuestAdminChangeStatusDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGuestAdminChangeStatusDetails} is {@code false}.
     */
    public GuestAdminChangeStatusDetails getGuestAdminChangeStatusDetailsValue() {
        if (this._tag != Tag.GUEST_ADMIN_CHANGE_STATUS_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GUEST_ADMIN_CHANGE_STATUS_DETAILS, but was Tag." + this._tag.name());
        }
        return guestAdminChangeStatusDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#STARTED_ENTERPRISE_ADMIN_SESSION_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#STARTED_ENTERPRISE_ADMIN_SESSION_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isStartedEnterpriseAdminSessionDetails() {
        return this._tag == Tag.STARTED_ENTERPRISE_ADMIN_SESSION_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#STARTED_ENTERPRISE_ADMIN_SESSION_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#STARTED_ENTERPRISE_ADMIN_SESSION_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails startedEnterpriseAdminSessionDetails(StartedEnterpriseAdminSessionDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndStartedEnterpriseAdminSessionDetails(Tag.STARTED_ENTERPRISE_ADMIN_SESSION_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#STARTED_ENTERPRISE_ADMIN_SESSION_DETAILS}.
     *
     * @return The {@link StartedEnterpriseAdminSessionDetails} value associated
     *     with this instance if {@link #isStartedEnterpriseAdminSessionDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isStartedEnterpriseAdminSessionDetails} is {@code false}.
     */
    public StartedEnterpriseAdminSessionDetails getStartedEnterpriseAdminSessionDetailsValue() {
        if (this._tag != Tag.STARTED_ENTERPRISE_ADMIN_SESSION_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.STARTED_ENTERPRISE_ADMIN_SESSION_DETAILS, but was Tag." + this._tag.name());
        }
        return startedEnterpriseAdminSessionDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_ACCEPTED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_ACCEPTED_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamMergeRequestAcceptedDetails() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_ACCEPTED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_MERGE_REQUEST_ACCEPTED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_ACCEPTED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamMergeRequestAcceptedDetails(TeamMergeRequestAcceptedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamMergeRequestAcceptedDetails(Tag.TEAM_MERGE_REQUEST_ACCEPTED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_ACCEPTED_DETAILS}.
     *
     * @return The {@link TeamMergeRequestAcceptedDetails} value associated with
     *     this instance if {@link #isTeamMergeRequestAcceptedDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestAcceptedDetails} is {@code false}.
     */
    public TeamMergeRequestAcceptedDetails getTeamMergeRequestAcceptedDetailsValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_ACCEPTED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_ACCEPTED_DETAILS, but was Tag." + this._tag.name());
        }
        return teamMergeRequestAcceptedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM_DETAILS}, {@code
     * false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM_DETAILS},
     *     {@code false} otherwise.
     */
    public boolean isTeamMergeRequestAcceptedShownToPrimaryTeamDetails() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamMergeRequestAcceptedShownToPrimaryTeamDetails(TeamMergeRequestAcceptedShownToPrimaryTeamDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamMergeRequestAcceptedShownToPrimaryTeamDetails(Tag.TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM_DETAILS}.
     *
     * @return The {@link TeamMergeRequestAcceptedShownToPrimaryTeamDetails}
     *     value associated with this instance if {@link
     *     #isTeamMergeRequestAcceptedShownToPrimaryTeamDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestAcceptedShownToPrimaryTeamDetails} is {@code
     *     false}.
     */
    public TeamMergeRequestAcceptedShownToPrimaryTeamDetails getTeamMergeRequestAcceptedShownToPrimaryTeamDetailsValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM_DETAILS, but was Tag." + this._tag.name());
        }
        return teamMergeRequestAcceptedShownToPrimaryTeamDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM_DETAILS}, {@code
     * false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM_DETAILS},
     *     {@code false} otherwise.
     */
    public boolean isTeamMergeRequestAcceptedShownToSecondaryTeamDetails() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamMergeRequestAcceptedShownToSecondaryTeamDetails(TeamMergeRequestAcceptedShownToSecondaryTeamDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamMergeRequestAcceptedShownToSecondaryTeamDetails(Tag.TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM_DETAILS}.
     *
     * @return The {@link TeamMergeRequestAcceptedShownToSecondaryTeamDetails}
     *     value associated with this instance if {@link
     *     #isTeamMergeRequestAcceptedShownToSecondaryTeamDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestAcceptedShownToSecondaryTeamDetails} is {@code
     *     false}.
     */
    public TeamMergeRequestAcceptedShownToSecondaryTeamDetails getTeamMergeRequestAcceptedShownToSecondaryTeamDetailsValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM_DETAILS, but was Tag." + this._tag.name());
        }
        return teamMergeRequestAcceptedShownToSecondaryTeamDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_AUTO_CANCELED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_AUTO_CANCELED_DETAILS}, {@code false}
     *     otherwise.
     */
    public boolean isTeamMergeRequestAutoCanceledDetails() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_AUTO_CANCELED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_MERGE_REQUEST_AUTO_CANCELED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_AUTO_CANCELED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamMergeRequestAutoCanceledDetails(TeamMergeRequestAutoCanceledDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamMergeRequestAutoCanceledDetails(Tag.TEAM_MERGE_REQUEST_AUTO_CANCELED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_AUTO_CANCELED_DETAILS}.
     *
     * @return The {@link TeamMergeRequestAutoCanceledDetails} value associated
     *     with this instance if {@link #isTeamMergeRequestAutoCanceledDetails}
     *     is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestAutoCanceledDetails} is {@code false}.
     */
    public TeamMergeRequestAutoCanceledDetails getTeamMergeRequestAutoCanceledDetailsValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_AUTO_CANCELED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_AUTO_CANCELED_DETAILS, but was Tag." + this._tag.name());
        }
        return teamMergeRequestAutoCanceledDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_CANCELED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_CANCELED_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamMergeRequestCanceledDetails() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_CANCELED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_MERGE_REQUEST_CANCELED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_CANCELED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamMergeRequestCanceledDetails(TeamMergeRequestCanceledDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamMergeRequestCanceledDetails(Tag.TEAM_MERGE_REQUEST_CANCELED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_CANCELED_DETAILS}.
     *
     * @return The {@link TeamMergeRequestCanceledDetails} value associated with
     *     this instance if {@link #isTeamMergeRequestCanceledDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestCanceledDetails} is {@code false}.
     */
    public TeamMergeRequestCanceledDetails getTeamMergeRequestCanceledDetailsValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_CANCELED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_CANCELED_DETAILS, but was Tag." + this._tag.name());
        }
        return teamMergeRequestCanceledDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM_DETAILS}, {@code
     * false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM_DETAILS},
     *     {@code false} otherwise.
     */
    public boolean isTeamMergeRequestCanceledShownToPrimaryTeamDetails() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamMergeRequestCanceledShownToPrimaryTeamDetails(TeamMergeRequestCanceledShownToPrimaryTeamDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamMergeRequestCanceledShownToPrimaryTeamDetails(Tag.TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM_DETAILS}.
     *
     * @return The {@link TeamMergeRequestCanceledShownToPrimaryTeamDetails}
     *     value associated with this instance if {@link
     *     #isTeamMergeRequestCanceledShownToPrimaryTeamDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestCanceledShownToPrimaryTeamDetails} is {@code
     *     false}.
     */
    public TeamMergeRequestCanceledShownToPrimaryTeamDetails getTeamMergeRequestCanceledShownToPrimaryTeamDetailsValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM_DETAILS, but was Tag." + this._tag.name());
        }
        return teamMergeRequestCanceledShownToPrimaryTeamDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM_DETAILS}, {@code
     * false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM_DETAILS},
     *     {@code false} otherwise.
     */
    public boolean isTeamMergeRequestCanceledShownToSecondaryTeamDetails() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamMergeRequestCanceledShownToSecondaryTeamDetails(TeamMergeRequestCanceledShownToSecondaryTeamDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamMergeRequestCanceledShownToSecondaryTeamDetails(Tag.TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM_DETAILS}.
     *
     * @return The {@link TeamMergeRequestCanceledShownToSecondaryTeamDetails}
     *     value associated with this instance if {@link
     *     #isTeamMergeRequestCanceledShownToSecondaryTeamDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestCanceledShownToSecondaryTeamDetails} is {@code
     *     false}.
     */
    public TeamMergeRequestCanceledShownToSecondaryTeamDetails getTeamMergeRequestCanceledShownToSecondaryTeamDetailsValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM_DETAILS, but was Tag." + this._tag.name());
        }
        return teamMergeRequestCanceledShownToSecondaryTeamDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_EXPIRED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_EXPIRED_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamMergeRequestExpiredDetails() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_EXPIRED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_MERGE_REQUEST_EXPIRED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_EXPIRED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamMergeRequestExpiredDetails(TeamMergeRequestExpiredDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamMergeRequestExpiredDetails(Tag.TEAM_MERGE_REQUEST_EXPIRED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_EXPIRED_DETAILS}.
     *
     * @return The {@link TeamMergeRequestExpiredDetails} value associated with
     *     this instance if {@link #isTeamMergeRequestExpiredDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestExpiredDetails} is {@code false}.
     */
    public TeamMergeRequestExpiredDetails getTeamMergeRequestExpiredDetailsValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_EXPIRED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_EXPIRED_DETAILS, but was Tag." + this._tag.name());
        }
        return teamMergeRequestExpiredDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM_DETAILS}, {@code
     * false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM_DETAILS}, {@code
     *     false} otherwise.
     */
    public boolean isTeamMergeRequestExpiredShownToPrimaryTeamDetails() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamMergeRequestExpiredShownToPrimaryTeamDetails(TeamMergeRequestExpiredShownToPrimaryTeamDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamMergeRequestExpiredShownToPrimaryTeamDetails(Tag.TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM_DETAILS}.
     *
     * @return The {@link TeamMergeRequestExpiredShownToPrimaryTeamDetails}
     *     value associated with this instance if {@link
     *     #isTeamMergeRequestExpiredShownToPrimaryTeamDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestExpiredShownToPrimaryTeamDetails} is {@code
     *     false}.
     */
    public TeamMergeRequestExpiredShownToPrimaryTeamDetails getTeamMergeRequestExpiredShownToPrimaryTeamDetailsValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM_DETAILS, but was Tag." + this._tag.name());
        }
        return teamMergeRequestExpiredShownToPrimaryTeamDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM_DETAILS}, {@code
     * false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM_DETAILS},
     *     {@code false} otherwise.
     */
    public boolean isTeamMergeRequestExpiredShownToSecondaryTeamDetails() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamMergeRequestExpiredShownToSecondaryTeamDetails(TeamMergeRequestExpiredShownToSecondaryTeamDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamMergeRequestExpiredShownToSecondaryTeamDetails(Tag.TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM_DETAILS}.
     *
     * @return The {@link TeamMergeRequestExpiredShownToSecondaryTeamDetails}
     *     value associated with this instance if {@link
     *     #isTeamMergeRequestExpiredShownToSecondaryTeamDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestExpiredShownToSecondaryTeamDetails} is {@code
     *     false}.
     */
    public TeamMergeRequestExpiredShownToSecondaryTeamDetails getTeamMergeRequestExpiredShownToSecondaryTeamDetailsValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM_DETAILS, but was Tag." + this._tag.name());
        }
        return teamMergeRequestExpiredShownToSecondaryTeamDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM_DETAILS}, {@code
     * false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM_DETAILS},
     *     {@code false} otherwise.
     */
    public boolean isTeamMergeRequestRejectedShownToPrimaryTeamDetails() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamMergeRequestRejectedShownToPrimaryTeamDetails(TeamMergeRequestRejectedShownToPrimaryTeamDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamMergeRequestRejectedShownToPrimaryTeamDetails(Tag.TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM_DETAILS}.
     *
     * @return The {@link TeamMergeRequestRejectedShownToPrimaryTeamDetails}
     *     value associated with this instance if {@link
     *     #isTeamMergeRequestRejectedShownToPrimaryTeamDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestRejectedShownToPrimaryTeamDetails} is {@code
     *     false}.
     */
    public TeamMergeRequestRejectedShownToPrimaryTeamDetails getTeamMergeRequestRejectedShownToPrimaryTeamDetailsValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM_DETAILS, but was Tag." + this._tag.name());
        }
        return teamMergeRequestRejectedShownToPrimaryTeamDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM_DETAILS}, {@code
     * false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM_DETAILS},
     *     {@code false} otherwise.
     */
    public boolean isTeamMergeRequestRejectedShownToSecondaryTeamDetails() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamMergeRequestRejectedShownToSecondaryTeamDetails(TeamMergeRequestRejectedShownToSecondaryTeamDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamMergeRequestRejectedShownToSecondaryTeamDetails(Tag.TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM_DETAILS}.
     *
     * @return The {@link TeamMergeRequestRejectedShownToSecondaryTeamDetails}
     *     value associated with this instance if {@link
     *     #isTeamMergeRequestRejectedShownToSecondaryTeamDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestRejectedShownToSecondaryTeamDetails} is {@code
     *     false}.
     */
    public TeamMergeRequestRejectedShownToSecondaryTeamDetails getTeamMergeRequestRejectedShownToSecondaryTeamDetailsValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM_DETAILS, but was Tag." + this._tag.name());
        }
        return teamMergeRequestRejectedShownToSecondaryTeamDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_REMINDER_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_REMINDER_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamMergeRequestReminderDetails() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_REMINDER_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_MERGE_REQUEST_REMINDER_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_REMINDER_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamMergeRequestReminderDetails(TeamMergeRequestReminderDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamMergeRequestReminderDetails(Tag.TEAM_MERGE_REQUEST_REMINDER_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_REMINDER_DETAILS}.
     *
     * @return The {@link TeamMergeRequestReminderDetails} value associated with
     *     this instance if {@link #isTeamMergeRequestReminderDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestReminderDetails} is {@code false}.
     */
    public TeamMergeRequestReminderDetails getTeamMergeRequestReminderDetailsValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_REMINDER_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_REMINDER_DETAILS, but was Tag." + this._tag.name());
        }
        return teamMergeRequestReminderDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM_DETAILS}, {@code
     * false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM_DETAILS},
     *     {@code false} otherwise.
     */
    public boolean isTeamMergeRequestReminderShownToPrimaryTeamDetails() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamMergeRequestReminderShownToPrimaryTeamDetails(TeamMergeRequestReminderShownToPrimaryTeamDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamMergeRequestReminderShownToPrimaryTeamDetails(Tag.TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM_DETAILS}.
     *
     * @return The {@link TeamMergeRequestReminderShownToPrimaryTeamDetails}
     *     value associated with this instance if {@link
     *     #isTeamMergeRequestReminderShownToPrimaryTeamDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestReminderShownToPrimaryTeamDetails} is {@code
     *     false}.
     */
    public TeamMergeRequestReminderShownToPrimaryTeamDetails getTeamMergeRequestReminderShownToPrimaryTeamDetailsValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM_DETAILS, but was Tag." + this._tag.name());
        }
        return teamMergeRequestReminderShownToPrimaryTeamDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM_DETAILS}, {@code
     * false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM_DETAILS},
     *     {@code false} otherwise.
     */
    public boolean isTeamMergeRequestReminderShownToSecondaryTeamDetails() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamMergeRequestReminderShownToSecondaryTeamDetails(TeamMergeRequestReminderShownToSecondaryTeamDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamMergeRequestReminderShownToSecondaryTeamDetails(Tag.TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM_DETAILS}.
     *
     * @return The {@link TeamMergeRequestReminderShownToSecondaryTeamDetails}
     *     value associated with this instance if {@link
     *     #isTeamMergeRequestReminderShownToSecondaryTeamDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestReminderShownToSecondaryTeamDetails} is {@code
     *     false}.
     */
    public TeamMergeRequestReminderShownToSecondaryTeamDetails getTeamMergeRequestReminderShownToSecondaryTeamDetailsValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM_DETAILS, but was Tag." + this._tag.name());
        }
        return teamMergeRequestReminderShownToSecondaryTeamDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_REVOKED_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_REVOKED_DETAILS}, {@code false} otherwise.
     */
    public boolean isTeamMergeRequestRevokedDetails() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_REVOKED_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_MERGE_REQUEST_REVOKED_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_REVOKED_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamMergeRequestRevokedDetails(TeamMergeRequestRevokedDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamMergeRequestRevokedDetails(Tag.TEAM_MERGE_REQUEST_REVOKED_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_REVOKED_DETAILS}.
     *
     * @return The {@link TeamMergeRequestRevokedDetails} value associated with
     *     this instance if {@link #isTeamMergeRequestRevokedDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestRevokedDetails} is {@code false}.
     */
    public TeamMergeRequestRevokedDetails getTeamMergeRequestRevokedDetailsValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_REVOKED_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_REVOKED_DETAILS, but was Tag." + this._tag.name());
        }
        return teamMergeRequestRevokedDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM_DETAILS}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM_DETAILS}, {@code
     *     false} otherwise.
     */
    public boolean isTeamMergeRequestSentShownToPrimaryTeamDetails() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamMergeRequestSentShownToPrimaryTeamDetails(TeamMergeRequestSentShownToPrimaryTeamDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamMergeRequestSentShownToPrimaryTeamDetails(Tag.TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM_DETAILS}.
     *
     * @return The {@link TeamMergeRequestSentShownToPrimaryTeamDetails} value
     *     associated with this instance if {@link
     *     #isTeamMergeRequestSentShownToPrimaryTeamDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestSentShownToPrimaryTeamDetails} is {@code false}.
     */
    public TeamMergeRequestSentShownToPrimaryTeamDetails getTeamMergeRequestSentShownToPrimaryTeamDetailsValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM_DETAILS, but was Tag." + this._tag.name());
        }
        return teamMergeRequestSentShownToPrimaryTeamDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM_DETAILS}, {@code
     * false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM_DETAILS}, {@code
     *     false} otherwise.
     */
    public boolean isTeamMergeRequestSentShownToSecondaryTeamDetails() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM_DETAILS}.
     *
     * <p> None </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails teamMergeRequestSentShownToSecondaryTeamDetails(TeamMergeRequestSentShownToSecondaryTeamDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndTeamMergeRequestSentShownToSecondaryTeamDetails(Tag.TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM_DETAILS, value);
    }

    /**
     * This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM_DETAILS}.
     *
     * @return The {@link TeamMergeRequestSentShownToSecondaryTeamDetails} value
     *     associated with this instance if {@link
     *     #isTeamMergeRequestSentShownToSecondaryTeamDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestSentShownToSecondaryTeamDetails} is {@code false}.
     */
    public TeamMergeRequestSentShownToSecondaryTeamDetails getTeamMergeRequestSentShownToSecondaryTeamDetailsValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM_DETAILS, but was Tag." + this._tag.name());
        }
        return teamMergeRequestSentShownToSecondaryTeamDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MISSING_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MISSING_DETAILS}, {@code false} otherwise.
     */
    public boolean isMissingDetails() {
        return this._tag == Tag.MISSING_DETAILS;
    }

    /**
     * Returns an instance of {@code EventDetails} that has its tag set to
     * {@link Tag#MISSING_DETAILS}.
     *
     * <p> Hints that this event was returned with missing details due to an
     * internal error. </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventDetails} with its tag set to {@link
     *     Tag#MISSING_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventDetails missingDetails(MissingDetails value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventDetails().withTagAndMissingDetails(Tag.MISSING_DETAILS, value);
    }

    /**
     * Hints that this event was returned with missing details due to an
     * internal error.
     *
     * <p> This instance must be tagged as {@link Tag#MISSING_DETAILS}. </p>
     *
     * @return The {@link MissingDetails} value associated with this instance if
     *     {@link #isMissingDetails} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isMissingDetails} is {@code
     *     false}.
     */
    public MissingDetails getMissingDetailsValue() {
        if (this._tag != Tag.MISSING_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.MISSING_DETAILS, but was Tag." + this._tag.name());
        }
        return missingDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link Tag#OTHER},
     * {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link Tag#OTHER},
     *     {@code false} otherwise.
     */
    public boolean isOther() {
        return this._tag == Tag.OTHER;
    }

    @Override
    public int hashCode() {
        int hash = Arrays.hashCode(new Object [] {
            _tag,
            adminAlertingAlertStateChangedDetailsValue,
            adminAlertingChangedAlertConfigDetailsValue,
            adminAlertingTriggeredAlertDetailsValue,
            appBlockedByPermissionsDetailsValue,
            appLinkTeamDetailsValue,
            appLinkUserDetailsValue,
            appUnlinkTeamDetailsValue,
            appUnlinkUserDetailsValue,
            integrationConnectedDetailsValue,
            integrationDisconnectedDetailsValue,
            fileAddCommentDetailsValue,
            fileChangeCommentSubscriptionDetailsValue,
            fileDeleteCommentDetailsValue,
            fileEditCommentDetailsValue,
            fileLikeCommentDetailsValue,
            fileResolveCommentDetailsValue,
            fileUnlikeCommentDetailsValue,
            fileUnresolveCommentDetailsValue,
            governancePolicyAddFoldersDetailsValue,
            governancePolicyAddFolderFailedDetailsValue,
            governancePolicyContentDisposedDetailsValue,
            governancePolicyCreateDetailsValue,
            governancePolicyDeleteDetailsValue,
            governancePolicyEditDetailsDetailsValue,
            governancePolicyEditDurationDetailsValue,
            governancePolicyExportCreatedDetailsValue,
            governancePolicyExportRemovedDetailsValue,
            governancePolicyRemoveFoldersDetailsValue,
            governancePolicyReportCreatedDetailsValue,
            governancePolicyZipPartDownloadedDetailsValue,
            legalHoldsActivateAHoldDetailsValue,
            legalHoldsAddMembersDetailsValue,
            legalHoldsChangeHoldDetailsDetailsValue,
            legalHoldsChangeHoldNameDetailsValue,
            legalHoldsExportAHoldDetailsValue,
            legalHoldsExportCancelledDetailsValue,
            legalHoldsExportDownloadedDetailsValue,
            legalHoldsExportRemovedDetailsValue,
            legalHoldsReleaseAHoldDetailsValue,
            legalHoldsRemoveMembersDetailsValue,
            legalHoldsReportAHoldDetailsValue,
            deviceChangeIpDesktopDetailsValue,
            deviceChangeIpMobileDetailsValue,
            deviceChangeIpWebDetailsValue,
            deviceDeleteOnUnlinkFailDetailsValue,
            deviceDeleteOnUnlinkSuccessDetailsValue,
            deviceLinkFailDetailsValue,
            deviceLinkSuccessDetailsValue,
            deviceManagementDisabledDetailsValue,
            deviceManagementEnabledDetailsValue,
            deviceSyncBackupStatusChangedDetailsValue,
            deviceUnlinkDetailsValue,
            dropboxPasswordsExportedDetailsValue,
            dropboxPasswordsNewDeviceEnrolledDetailsValue,
            emmRefreshAuthTokenDetailsValue,
            externalDriveBackupEligibilityStatusCheckedDetailsValue,
            externalDriveBackupStatusChangedDetailsValue,
            accountCaptureChangeAvailabilityDetailsValue,
            accountCaptureMigrateAccountDetailsValue,
            accountCaptureNotificationEmailsSentDetailsValue,
            accountCaptureRelinquishAccountDetailsValue,
            disabledDomainInvitesDetailsValue,
            domainInvitesApproveRequestToJoinTeamDetailsValue,
            domainInvitesDeclineRequestToJoinTeamDetailsValue,
            domainInvitesEmailExistingUsersDetailsValue,
            domainInvitesRequestToJoinTeamDetailsValue,
            domainInvitesSetInviteNewUserPrefToNoDetailsValue,
            domainInvitesSetInviteNewUserPrefToYesDetailsValue,
            domainVerificationAddDomainFailDetailsValue,
            domainVerificationAddDomainSuccessDetailsValue,
            domainVerificationRemoveDomainDetailsValue,
            enabledDomainInvitesDetailsValue,
            applyNamingConventionDetailsValue,
            createFolderDetailsValue,
            fileAddDetailsValue,
            fileCopyDetailsValue,
            fileDeleteDetailsValue,
            fileDownloadDetailsValue,
            fileEditDetailsValue,
            fileGetCopyReferenceDetailsValue,
            fileLockingLockStatusChangedDetailsValue,
            fileMoveDetailsValue,
            filePermanentlyDeleteDetailsValue,
            filePreviewDetailsValue,
            fileRenameDetailsValue,
            fileRestoreDetailsValue,
            fileRevertDetailsValue,
            fileRollbackChangesDetailsValue,
            fileSaveCopyReferenceDetailsValue,
            folderOverviewDescriptionChangedDetailsValue,
            folderOverviewItemPinnedDetailsValue,
            folderOverviewItemUnpinnedDetailsValue,
            objectLabelAddedDetailsValue,
            objectLabelRemovedDetailsValue,
            objectLabelUpdatedValueDetailsValue,
            organizeFolderWithTidyDetailsValue,
            rewindFolderDetailsValue,
            undoNamingConventionDetailsValue,
            undoOrganizeFolderWithTidyDetailsValue,
            userTagsAddedDetailsValue,
            userTagsRemovedDetailsValue,
            emailIngestReceiveFileDetailsValue,
            fileRequestChangeDetailsValue,
            fileRequestCloseDetailsValue,
            fileRequestCreateDetailsValue,
            fileRequestDeleteDetailsValue,
            fileRequestReceiveFileDetailsValue,
            groupAddExternalIdDetailsValue,
            groupAddMemberDetailsValue,
            groupChangeExternalIdDetailsValue,
            groupChangeManagementTypeDetailsValue,
            groupChangeMemberRoleDetailsValue,
            groupCreateDetailsValue,
            groupDeleteDetailsValue,
            groupDescriptionUpdatedDetailsValue,
            groupJoinPolicyUpdatedDetailsValue,
            groupMovedDetailsValue,
            groupRemoveExternalIdDetailsValue,
            groupRemoveMemberDetailsValue,
            groupRenameDetailsValue,
            accountLockOrUnlockedDetailsValue,
            emmErrorDetailsValue,
            guestAdminSignedInViaTrustedTeamsDetailsValue,
            guestAdminSignedOutViaTrustedTeamsDetailsValue,
            loginFailDetailsValue,
            loginSuccessDetailsValue,
            logoutDetailsValue,
            resellerSupportSessionEndDetailsValue,
            resellerSupportSessionStartDetailsValue,
            signInAsSessionEndDetailsValue,
            signInAsSessionStartDetailsValue,
            ssoErrorDetailsValue,
            createTeamInviteLinkDetailsValue,
            deleteTeamInviteLinkDetailsValue,
            memberAddExternalIdDetailsValue,
            memberAddNameDetailsValue,
            memberChangeAdminRoleDetailsValue,
            memberChangeEmailDetailsValue,
            memberChangeExternalIdDetailsValue,
            memberChangeMembershipTypeDetailsValue,
            memberChangeNameDetailsValue,
            memberChangeResellerRoleDetailsValue,
            memberChangeStatusDetailsValue,
            memberDeleteManualContactsDetailsValue,
            memberDeleteProfilePhotoDetailsValue,
            memberPermanentlyDeleteAccountContentsDetailsValue,
            memberRemoveExternalIdDetailsValue,
            memberSetProfilePhotoDetailsValue,
            memberSpaceLimitsAddCustomQuotaDetailsValue,
            memberSpaceLimitsChangeCustomQuotaDetailsValue,
            memberSpaceLimitsChangeStatusDetailsValue,
            memberSpaceLimitsRemoveCustomQuotaDetailsValue,
            memberSuggestDetailsValue,
            memberTransferAccountContentsDetailsValue,
            pendingSecondaryEmailAddedDetailsValue,
            secondaryEmailDeletedDetailsValue,
            secondaryEmailVerifiedDetailsValue,
            secondaryMailsPolicyChangedDetailsValue,
            binderAddPageDetailsValue,
            binderAddSectionDetailsValue,
            binderRemovePageDetailsValue,
            binderRemoveSectionDetailsValue,
            binderRenamePageDetailsValue,
            binderRenameSectionDetailsValue,
            binderReorderPageDetailsValue,
            binderReorderSectionDetailsValue,
            paperContentAddMemberDetailsValue,
            paperContentAddToFolderDetailsValue,
            paperContentArchiveDetailsValue,
            paperContentCreateDetailsValue,
            paperContentPermanentlyDeleteDetailsValue,
            paperContentRemoveFromFolderDetailsValue,
            paperContentRemoveMemberDetailsValue,
            paperContentRenameDetailsValue,
            paperContentRestoreDetailsValue,
            paperDocAddCommentDetailsValue,
            paperDocChangeMemberRoleDetailsValue,
            paperDocChangeSharingPolicyDetailsValue,
            paperDocChangeSubscriptionDetailsValue,
            paperDocDeletedDetailsValue,
            paperDocDeleteCommentDetailsValue,
            paperDocDownloadDetailsValue,
            paperDocEditDetailsValue,
            paperDocEditCommentDetailsValue,
            paperDocFollowedDetailsValue,
            paperDocMentionDetailsValue,
            paperDocOwnershipChangedDetailsValue,
            paperDocRequestAccessDetailsValue,
            paperDocResolveCommentDetailsValue,
            paperDocRevertDetailsValue,
            paperDocSlackShareDetailsValue,
            paperDocTeamInviteDetailsValue,
            paperDocTrashedDetailsValue,
            paperDocUnresolveCommentDetailsValue,
            paperDocUntrashedDetailsValue,
            paperDocViewDetailsValue,
            paperExternalViewAllowDetailsValue,
            paperExternalViewDefaultTeamDetailsValue,
            paperExternalViewForbidDetailsValue,
            paperFolderChangeSubscriptionDetailsValue,
            paperFolderDeletedDetailsValue,
            paperFolderFollowedDetailsValue,
            paperFolderTeamInviteDetailsValue,
            paperPublishedLinkChangePermissionDetailsValue,
            paperPublishedLinkCreateDetailsValue,
            paperPublishedLinkDisabledDetailsValue,
            paperPublishedLinkViewDetailsValue,
            passwordChangeDetailsValue,
            passwordResetDetailsValue,
            passwordResetAllDetailsValue,
            classificationCreateReportDetailsValue,
            classificationCreateReportFailDetailsValue,
            emmCreateExceptionsReportDetailsValue,
            emmCreateUsageReportDetailsValue,
            exportMembersReportDetailsValue,
            exportMembersReportFailDetailsValue,
            externalSharingCreateReportDetailsValue,
            externalSharingReportFailedDetailsValue,
            noExpirationLinkGenCreateReportDetailsValue,
            noExpirationLinkGenReportFailedDetailsValue,
            noPasswordLinkGenCreateReportDetailsValue,
            noPasswordLinkGenReportFailedDetailsValue,
            noPasswordLinkViewCreateReportDetailsValue,
            noPasswordLinkViewReportFailedDetailsValue,
            outdatedLinkViewCreateReportDetailsValue,
            outdatedLinkViewReportFailedDetailsValue,
            paperAdminExportStartDetailsValue,
            smartSyncCreateAdminPrivilegeReportDetailsValue,
            teamActivityCreateReportDetailsValue,
            teamActivityCreateReportFailDetailsValue,
            collectionShareDetailsValue,
            fileTransfersFileAddDetailsValue,
            fileTransfersTransferDeleteDetailsValue,
            fileTransfersTransferDownloadDetailsValue,
            fileTransfersTransferSendDetailsValue,
            fileTransfersTransferViewDetailsValue,
            noteAclInviteOnlyDetailsValue,
            noteAclLinkDetailsValue,
            noteAclTeamLinkDetailsValue,
            noteSharedDetailsValue,
            noteShareReceiveDetailsValue,
            openNoteSharedDetailsValue,
            sfAddGroupDetailsValue,
            sfAllowNonMembersToViewSharedLinksDetailsValue,
            sfExternalInviteWarnDetailsValue,
            sfFbInviteDetailsValue,
            sfFbInviteChangeRoleDetailsValue,
            sfFbUninviteDetailsValue,
            sfInviteGroupDetailsValue,
            sfTeamGrantAccessDetailsValue,
            sfTeamInviteDetailsValue,
            sfTeamInviteChangeRoleDetailsValue,
            sfTeamJoinDetailsValue,
            sfTeamJoinFromOobLinkDetailsValue,
            sfTeamUninviteDetailsValue,
            sharedContentAddInviteesDetailsValue,
            sharedContentAddLinkExpiryDetailsValue,
            sharedContentAddLinkPasswordDetailsValue,
            sharedContentAddMemberDetailsValue,
            sharedContentChangeDownloadsPolicyDetailsValue,
            sharedContentChangeInviteeRoleDetailsValue,
            sharedContentChangeLinkAudienceDetailsValue,
            sharedContentChangeLinkExpiryDetailsValue,
            sharedContentChangeLinkPasswordDetailsValue,
            sharedContentChangeMemberRoleDetailsValue,
            sharedContentChangeViewerInfoPolicyDetailsValue,
            sharedContentClaimInvitationDetailsValue,
            sharedContentCopyDetailsValue,
            sharedContentDownloadDetailsValue,
            sharedContentRelinquishMembershipDetailsValue,
            sharedContentRemoveInviteesDetailsValue,
            sharedContentRemoveLinkExpiryDetailsValue,
            sharedContentRemoveLinkPasswordDetailsValue,
            sharedContentRemoveMemberDetailsValue,
            sharedContentRequestAccessDetailsValue,
            sharedContentRestoreInviteesDetailsValue,
            sharedContentRestoreMemberDetailsValue,
            sharedContentUnshareDetailsValue,
            sharedContentViewDetailsValue,
            sharedFolderChangeLinkPolicyDetailsValue,
            sharedFolderChangeMembersInheritancePolicyDetailsValue,
            sharedFolderChangeMembersManagementPolicyDetailsValue,
            sharedFolderChangeMembersPolicyDetailsValue,
            sharedFolderCreateDetailsValue,
            sharedFolderDeclineInvitationDetailsValue,
            sharedFolderMountDetailsValue,
            sharedFolderNestDetailsValue,
            sharedFolderTransferOwnershipDetailsValue,
            sharedFolderUnmountDetailsValue,
            sharedLinkAddExpiryDetailsValue,
            sharedLinkChangeExpiryDetailsValue,
            sharedLinkChangeVisibilityDetailsValue,
            sharedLinkCopyDetailsValue,
            sharedLinkCreateDetailsValue,
            sharedLinkDisableDetailsValue,
            sharedLinkDownloadDetailsValue,
            sharedLinkRemoveExpiryDetailsValue,
            sharedLinkSettingsAddExpirationDetailsValue,
            sharedLinkSettingsAddPasswordDetailsValue,
            sharedLinkSettingsAllowDownloadDisabledDetailsValue,
            sharedLinkSettingsAllowDownloadEnabledDetailsValue,
            sharedLinkSettingsChangeAudienceDetailsValue,
            sharedLinkSettingsChangeExpirationDetailsValue,
            sharedLinkSettingsChangePasswordDetailsValue,
            sharedLinkSettingsRemoveExpirationDetailsValue,
            sharedLinkSettingsRemovePasswordDetailsValue,
            sharedLinkShareDetailsValue,
            sharedLinkViewDetailsValue,
            sharedNoteOpenedDetailsValue,
            shmodelDisableDownloadsDetailsValue,
            shmodelEnableDownloadsDetailsValue,
            shmodelGroupShareDetailsValue,
            showcaseAccessGrantedDetailsValue,
            showcaseAddMemberDetailsValue,
            showcaseArchivedDetailsValue,
            showcaseCreatedDetailsValue,
            showcaseDeleteCommentDetailsValue,
            showcaseEditedDetailsValue,
            showcaseEditCommentDetailsValue,
            showcaseFileAddedDetailsValue,
            showcaseFileDownloadDetailsValue,
            showcaseFileRemovedDetailsValue,
            showcaseFileViewDetailsValue,
            showcasePermanentlyDeletedDetailsValue,
            showcasePostCommentDetailsValue,
            showcaseRemoveMemberDetailsValue,
            showcaseRenamedDetailsValue,
            showcaseRequestAccessDetailsValue,
            showcaseResolveCommentDetailsValue,
            showcaseRestoredDetailsValue,
            showcaseTrashedDetailsValue,
            showcaseTrashedDeprecatedDetailsValue,
            showcaseUnresolveCommentDetailsValue,
            showcaseUntrashedDetailsValue,
            showcaseUntrashedDeprecatedDetailsValue,
            showcaseViewDetailsValue,
            ssoAddCertDetailsValue,
            ssoAddLoginUrlDetailsValue,
            ssoAddLogoutUrlDetailsValue,
            ssoChangeCertDetailsValue,
            ssoChangeLoginUrlDetailsValue,
            ssoChangeLogoutUrlDetailsValue,
            ssoChangeSamlIdentityModeDetailsValue,
            ssoRemoveCertDetailsValue,
            ssoRemoveLoginUrlDetailsValue,
            ssoRemoveLogoutUrlDetailsValue,
            teamFolderChangeStatusDetailsValue,
            teamFolderCreateDetailsValue,
            teamFolderDowngradeDetailsValue,
            teamFolderPermanentlyDeleteDetailsValue,
            teamFolderRenameDetailsValue,
            teamSelectiveSyncSettingsChangedDetailsValue,
            accountCaptureChangePolicyDetailsValue,
            adminEmailRemindersChangedDetailsValue,
            allowDownloadDisabledDetailsValue,
            allowDownloadEnabledDetailsValue,
            appPermissionsChangedDetailsValue,
            cameraUploadsPolicyChangedDetailsValue,
            captureTranscriptPolicyChangedDetailsValue,
            classificationChangePolicyDetailsValue,
            computerBackupPolicyChangedDetailsValue,
            contentAdministrationPolicyChangedDetailsValue,
            dataPlacementRestrictionChangePolicyDetailsValue,
            dataPlacementRestrictionSatisfyPolicyDetailsValue,
            deviceApprovalsAddExceptionDetailsValue,
            deviceApprovalsChangeDesktopPolicyDetailsValue,
            deviceApprovalsChangeMobilePolicyDetailsValue,
            deviceApprovalsChangeOverageActionDetailsValue,
            deviceApprovalsChangeUnlinkActionDetailsValue,
            deviceApprovalsRemoveExceptionDetailsValue,
            directoryRestrictionsAddMembersDetailsValue,
            directoryRestrictionsRemoveMembersDetailsValue,
            dropboxPasswordsPolicyChangedDetailsValue,
            emailIngestPolicyChangedDetailsValue,
            emmAddExceptionDetailsValue,
            emmChangePolicyDetailsValue,
            emmRemoveExceptionDetailsValue,
            extendedVersionHistoryChangePolicyDetailsValue,
            externalDriveBackupPolicyChangedDetailsValue,
            fileCommentsChangePolicyDetailsValue,
            fileLockingPolicyChangedDetailsValue,
            fileProviderMigrationPolicyChangedDetailsValue,
            fileRequestsChangePolicyDetailsValue,
            fileRequestsEmailsEnabledDetailsValue,
            fileRequestsEmailsRestrictedToTeamOnlyDetailsValue,
            fileTransfersPolicyChangedDetailsValue,
            googleSsoChangePolicyDetailsValue,
            groupUserManagementChangePolicyDetailsValue,
            integrationPolicyChangedDetailsValue,
            inviteAcceptanceEmailPolicyChangedDetailsValue,
            memberRequestsChangePolicyDetailsValue,
            memberSendInvitePolicyChangedDetailsValue,
            memberSpaceLimitsAddExceptionDetailsValue,
            memberSpaceLimitsChangeCapsTypePolicyDetailsValue,
            memberSpaceLimitsChangePolicyDetailsValue,
            memberSpaceLimitsRemoveExceptionDetailsValue,
            memberSuggestionsChangePolicyDetailsValue,
            microsoftOfficeAddinChangePolicyDetailsValue,
            networkControlChangePolicyDetailsValue,
            paperChangeDeploymentPolicyDetailsValue,
            paperChangeMemberLinkPolicyDetailsValue,
            paperChangeMemberPolicyDetailsValue,
            paperChangePolicyDetailsValue,
            paperDefaultFolderPolicyChangedDetailsValue,
            paperDesktopPolicyChangedDetailsValue,
            paperEnabledUsersGroupAdditionDetailsValue,
            paperEnabledUsersGroupRemovalDetailsValue,
            passwordStrengthRequirementsChangePolicyDetailsValue,
            permanentDeleteChangePolicyDetailsValue,
            resellerSupportChangePolicyDetailsValue,
            rewindPolicyChangedDetailsValue,
            sendForSignaturePolicyChangedDetailsValue,
            sharingChangeFolderJoinPolicyDetailsValue,
            sharingChangeLinkAllowChangeExpirationPolicyDetailsValue,
            sharingChangeLinkDefaultExpirationPolicyDetailsValue,
            sharingChangeLinkEnforcePasswordPolicyDetailsValue,
            sharingChangeLinkPolicyDetailsValue,
            sharingChangeMemberPolicyDetailsValue,
            showcaseChangeDownloadPolicyDetailsValue,
            showcaseChangeEnabledPolicyDetailsValue,
            showcaseChangeExternalSharingPolicyDetailsValue,
            smarterSmartSyncPolicyChangedDetailsValue,
            smartSyncChangePolicyDetailsValue,
            smartSyncNotOptOutDetailsValue,
            smartSyncOptOutDetailsValue,
            ssoChangePolicyDetailsValue,
            teamBrandingPolicyChangedDetailsValue,
            teamExtensionsPolicyChangedDetailsValue,
            teamSelectiveSyncPolicyChangedDetailsValue,
            teamSharingWhitelistSubjectsChangedDetailsValue,
            tfaAddExceptionDetailsValue,
            tfaChangePolicyDetailsValue,
            tfaRemoveExceptionDetailsValue,
            twoAccountChangePolicyDetailsValue,
            viewerInfoPolicyChangedDetailsValue,
            watermarkingPolicyChangedDetailsValue,
            webSessionsChangeActiveSessionLimitDetailsValue,
            webSessionsChangeFixedLengthPolicyDetailsValue,
            webSessionsChangeIdleLengthPolicyDetailsValue,
            dataResidencyMigrationRequestSuccessfulDetailsValue,
            dataResidencyMigrationRequestUnsuccessfulDetailsValue,
            teamMergeFromDetailsValue,
            teamMergeToDetailsValue,
            teamProfileAddBackgroundDetailsValue,
            teamProfileAddLogoDetailsValue,
            teamProfileChangeBackgroundDetailsValue,
            teamProfileChangeDefaultLanguageDetailsValue,
            teamProfileChangeLogoDetailsValue,
            teamProfileChangeNameDetailsValue,
            teamProfileRemoveBackgroundDetailsValue,
            teamProfileRemoveLogoDetailsValue,
            tfaAddBackupPhoneDetailsValue,
            tfaAddSecurityKeyDetailsValue,
            tfaChangeBackupPhoneDetailsValue,
            tfaChangeStatusDetailsValue,
            tfaRemoveBackupPhoneDetailsValue,
            tfaRemoveSecurityKeyDetailsValue,
            tfaResetDetailsValue,
            changedEnterpriseAdminRoleDetailsValue,
            changedEnterpriseConnectedTeamStatusDetailsValue,
            endedEnterpriseAdminSessionDetailsValue,
            endedEnterpriseAdminSessionDeprecatedDetailsValue,
            enterpriseSettingsLockingDetailsValue,
            guestAdminChangeStatusDetailsValue,
            startedEnterpriseAdminSessionDetailsValue,
            teamMergeRequestAcceptedDetailsValue,
            teamMergeRequestAcceptedShownToPrimaryTeamDetailsValue,
            teamMergeRequestAcceptedShownToSecondaryTeamDetailsValue,
            teamMergeRequestAutoCanceledDetailsValue,
            teamMergeRequestCanceledDetailsValue,
            teamMergeRequestCanceledShownToPrimaryTeamDetailsValue,
            teamMergeRequestCanceledShownToSecondaryTeamDetailsValue,
            teamMergeRequestExpiredDetailsValue,
            teamMergeRequestExpiredShownToPrimaryTeamDetailsValue,
            teamMergeRequestExpiredShownToSecondaryTeamDetailsValue,
            teamMergeRequestRejectedShownToPrimaryTeamDetailsValue,
            teamMergeRequestRejectedShownToSecondaryTeamDetailsValue,
            teamMergeRequestReminderDetailsValue,
            teamMergeRequestReminderShownToPrimaryTeamDetailsValue,
            teamMergeRequestReminderShownToSecondaryTeamDetailsValue,
            teamMergeRequestRevokedDetailsValue,
            teamMergeRequestSentShownToPrimaryTeamDetailsValue,
            teamMergeRequestSentShownToSecondaryTeamDetailsValue,
            missingDetailsValue
        });
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        else if (obj instanceof EventDetails) {
            EventDetails other = (EventDetails) obj;
            if (this._tag != other._tag) {
                return false;
            }
            switch (_tag) {
                case ADMIN_ALERTING_ALERT_STATE_CHANGED_DETAILS:
                    return (this.adminAlertingAlertStateChangedDetailsValue == other.adminAlertingAlertStateChangedDetailsValue) || (this.adminAlertingAlertStateChangedDetailsValue.equals(other.adminAlertingAlertStateChangedDetailsValue));
                case ADMIN_ALERTING_CHANGED_ALERT_CONFIG_DETAILS:
                    return (this.adminAlertingChangedAlertConfigDetailsValue == other.adminAlertingChangedAlertConfigDetailsValue) || (this.adminAlertingChangedAlertConfigDetailsValue.equals(other.adminAlertingChangedAlertConfigDetailsValue));
                case ADMIN_ALERTING_TRIGGERED_ALERT_DETAILS:
                    return (this.adminAlertingTriggeredAlertDetailsValue == other.adminAlertingTriggeredAlertDetailsValue) || (this.adminAlertingTriggeredAlertDetailsValue.equals(other.adminAlertingTriggeredAlertDetailsValue));
                case APP_BLOCKED_BY_PERMISSIONS_DETAILS:
                    return (this.appBlockedByPermissionsDetailsValue == other.appBlockedByPermissionsDetailsValue) || (this.appBlockedByPermissionsDetailsValue.equals(other.appBlockedByPermissionsDetailsValue));
                case APP_LINK_TEAM_DETAILS:
                    return (this.appLinkTeamDetailsValue == other.appLinkTeamDetailsValue) || (this.appLinkTeamDetailsValue.equals(other.appLinkTeamDetailsValue));
                case APP_LINK_USER_DETAILS:
                    return (this.appLinkUserDetailsValue == other.appLinkUserDetailsValue) || (this.appLinkUserDetailsValue.equals(other.appLinkUserDetailsValue));
                case APP_UNLINK_TEAM_DETAILS:
                    return (this.appUnlinkTeamDetailsValue == other.appUnlinkTeamDetailsValue) || (this.appUnlinkTeamDetailsValue.equals(other.appUnlinkTeamDetailsValue));
                case APP_UNLINK_USER_DETAILS:
                    return (this.appUnlinkUserDetailsValue == other.appUnlinkUserDetailsValue) || (this.appUnlinkUserDetailsValue.equals(other.appUnlinkUserDetailsValue));
                case INTEGRATION_CONNECTED_DETAILS:
                    return (this.integrationConnectedDetailsValue == other.integrationConnectedDetailsValue) || (this.integrationConnectedDetailsValue.equals(other.integrationConnectedDetailsValue));
                case INTEGRATION_DISCONNECTED_DETAILS:
                    return (this.integrationDisconnectedDetailsValue == other.integrationDisconnectedDetailsValue) || (this.integrationDisconnectedDetailsValue.equals(other.integrationDisconnectedDetailsValue));
                case FILE_ADD_COMMENT_DETAILS:
                    return (this.fileAddCommentDetailsValue == other.fileAddCommentDetailsValue) || (this.fileAddCommentDetailsValue.equals(other.fileAddCommentDetailsValue));
                case FILE_CHANGE_COMMENT_SUBSCRIPTION_DETAILS:
                    return (this.fileChangeCommentSubscriptionDetailsValue == other.fileChangeCommentSubscriptionDetailsValue) || (this.fileChangeCommentSubscriptionDetailsValue.equals(other.fileChangeCommentSubscriptionDetailsValue));
                case FILE_DELETE_COMMENT_DETAILS:
                    return (this.fileDeleteCommentDetailsValue == other.fileDeleteCommentDetailsValue) || (this.fileDeleteCommentDetailsValue.equals(other.fileDeleteCommentDetailsValue));
                case FILE_EDIT_COMMENT_DETAILS:
                    return (this.fileEditCommentDetailsValue == other.fileEditCommentDetailsValue) || (this.fileEditCommentDetailsValue.equals(other.fileEditCommentDetailsValue));
                case FILE_LIKE_COMMENT_DETAILS:
                    return (this.fileLikeCommentDetailsValue == other.fileLikeCommentDetailsValue) || (this.fileLikeCommentDetailsValue.equals(other.fileLikeCommentDetailsValue));
                case FILE_RESOLVE_COMMENT_DETAILS:
                    return (this.fileResolveCommentDetailsValue == other.fileResolveCommentDetailsValue) || (this.fileResolveCommentDetailsValue.equals(other.fileResolveCommentDetailsValue));
                case FILE_UNLIKE_COMMENT_DETAILS:
                    return (this.fileUnlikeCommentDetailsValue == other.fileUnlikeCommentDetailsValue) || (this.fileUnlikeCommentDetailsValue.equals(other.fileUnlikeCommentDetailsValue));
                case FILE_UNRESOLVE_COMMENT_DETAILS:
                    return (this.fileUnresolveCommentDetailsValue == other.fileUnresolveCommentDetailsValue) || (this.fileUnresolveCommentDetailsValue.equals(other.fileUnresolveCommentDetailsValue));
                case GOVERNANCE_POLICY_ADD_FOLDERS_DETAILS:
                    return (this.governancePolicyAddFoldersDetailsValue == other.governancePolicyAddFoldersDetailsValue) || (this.governancePolicyAddFoldersDetailsValue.equals(other.governancePolicyAddFoldersDetailsValue));
                case GOVERNANCE_POLICY_ADD_FOLDER_FAILED_DETAILS:
                    return (this.governancePolicyAddFolderFailedDetailsValue == other.governancePolicyAddFolderFailedDetailsValue) || (this.governancePolicyAddFolderFailedDetailsValue.equals(other.governancePolicyAddFolderFailedDetailsValue));
                case GOVERNANCE_POLICY_CONTENT_DISPOSED_DETAILS:
                    return (this.governancePolicyContentDisposedDetailsValue == other.governancePolicyContentDisposedDetailsValue) || (this.governancePolicyContentDisposedDetailsValue.equals(other.governancePolicyContentDisposedDetailsValue));
                case GOVERNANCE_POLICY_CREATE_DETAILS:
                    return (this.governancePolicyCreateDetailsValue == other.governancePolicyCreateDetailsValue) || (this.governancePolicyCreateDetailsValue.equals(other.governancePolicyCreateDetailsValue));
                case GOVERNANCE_POLICY_DELETE_DETAILS:
                    return (this.governancePolicyDeleteDetailsValue == other.governancePolicyDeleteDetailsValue) || (this.governancePolicyDeleteDetailsValue.equals(other.governancePolicyDeleteDetailsValue));
                case GOVERNANCE_POLICY_EDIT_DETAILS_DETAILS:
                    return (this.governancePolicyEditDetailsDetailsValue == other.governancePolicyEditDetailsDetailsValue) || (this.governancePolicyEditDetailsDetailsValue.equals(other.governancePolicyEditDetailsDetailsValue));
                case GOVERNANCE_POLICY_EDIT_DURATION_DETAILS:
                    return (this.governancePolicyEditDurationDetailsValue == other.governancePolicyEditDurationDetailsValue) || (this.governancePolicyEditDurationDetailsValue.equals(other.governancePolicyEditDurationDetailsValue));
                case GOVERNANCE_POLICY_EXPORT_CREATED_DETAILS:
                    return (this.governancePolicyExportCreatedDetailsValue == other.governancePolicyExportCreatedDetailsValue) || (this.governancePolicyExportCreatedDetailsValue.equals(other.governancePolicyExportCreatedDetailsValue));
                case GOVERNANCE_POLICY_EXPORT_REMOVED_DETAILS:
                    return (this.governancePolicyExportRemovedDetailsValue == other.governancePolicyExportRemovedDetailsValue) || (this.governancePolicyExportRemovedDetailsValue.equals(other.governancePolicyExportRemovedDetailsValue));
                case GOVERNANCE_POLICY_REMOVE_FOLDERS_DETAILS:
                    return (this.governancePolicyRemoveFoldersDetailsValue == other.governancePolicyRemoveFoldersDetailsValue) || (this.governancePolicyRemoveFoldersDetailsValue.equals(other.governancePolicyRemoveFoldersDetailsValue));
                case GOVERNANCE_POLICY_REPORT_CREATED_DETAILS:
                    return (this.governancePolicyReportCreatedDetailsValue == other.governancePolicyReportCreatedDetailsValue) || (this.governancePolicyReportCreatedDetailsValue.equals(other.governancePolicyReportCreatedDetailsValue));
                case GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED_DETAILS:
                    return (this.governancePolicyZipPartDownloadedDetailsValue == other.governancePolicyZipPartDownloadedDetailsValue) || (this.governancePolicyZipPartDownloadedDetailsValue.equals(other.governancePolicyZipPartDownloadedDetailsValue));
                case LEGAL_HOLDS_ACTIVATE_A_HOLD_DETAILS:
                    return (this.legalHoldsActivateAHoldDetailsValue == other.legalHoldsActivateAHoldDetailsValue) || (this.legalHoldsActivateAHoldDetailsValue.equals(other.legalHoldsActivateAHoldDetailsValue));
                case LEGAL_HOLDS_ADD_MEMBERS_DETAILS:
                    return (this.legalHoldsAddMembersDetailsValue == other.legalHoldsAddMembersDetailsValue) || (this.legalHoldsAddMembersDetailsValue.equals(other.legalHoldsAddMembersDetailsValue));
                case LEGAL_HOLDS_CHANGE_HOLD_DETAILS_DETAILS:
                    return (this.legalHoldsChangeHoldDetailsDetailsValue == other.legalHoldsChangeHoldDetailsDetailsValue) || (this.legalHoldsChangeHoldDetailsDetailsValue.equals(other.legalHoldsChangeHoldDetailsDetailsValue));
                case LEGAL_HOLDS_CHANGE_HOLD_NAME_DETAILS:
                    return (this.legalHoldsChangeHoldNameDetailsValue == other.legalHoldsChangeHoldNameDetailsValue) || (this.legalHoldsChangeHoldNameDetailsValue.equals(other.legalHoldsChangeHoldNameDetailsValue));
                case LEGAL_HOLDS_EXPORT_A_HOLD_DETAILS:
                    return (this.legalHoldsExportAHoldDetailsValue == other.legalHoldsExportAHoldDetailsValue) || (this.legalHoldsExportAHoldDetailsValue.equals(other.legalHoldsExportAHoldDetailsValue));
                case LEGAL_HOLDS_EXPORT_CANCELLED_DETAILS:
                    return (this.legalHoldsExportCancelledDetailsValue == other.legalHoldsExportCancelledDetailsValue) || (this.legalHoldsExportCancelledDetailsValue.equals(other.legalHoldsExportCancelledDetailsValue));
                case LEGAL_HOLDS_EXPORT_DOWNLOADED_DETAILS:
                    return (this.legalHoldsExportDownloadedDetailsValue == other.legalHoldsExportDownloadedDetailsValue) || (this.legalHoldsExportDownloadedDetailsValue.equals(other.legalHoldsExportDownloadedDetailsValue));
                case LEGAL_HOLDS_EXPORT_REMOVED_DETAILS:
                    return (this.legalHoldsExportRemovedDetailsValue == other.legalHoldsExportRemovedDetailsValue) || (this.legalHoldsExportRemovedDetailsValue.equals(other.legalHoldsExportRemovedDetailsValue));
                case LEGAL_HOLDS_RELEASE_A_HOLD_DETAILS:
                    return (this.legalHoldsReleaseAHoldDetailsValue == other.legalHoldsReleaseAHoldDetailsValue) || (this.legalHoldsReleaseAHoldDetailsValue.equals(other.legalHoldsReleaseAHoldDetailsValue));
                case LEGAL_HOLDS_REMOVE_MEMBERS_DETAILS:
                    return (this.legalHoldsRemoveMembersDetailsValue == other.legalHoldsRemoveMembersDetailsValue) || (this.legalHoldsRemoveMembersDetailsValue.equals(other.legalHoldsRemoveMembersDetailsValue));
                case LEGAL_HOLDS_REPORT_A_HOLD_DETAILS:
                    return (this.legalHoldsReportAHoldDetailsValue == other.legalHoldsReportAHoldDetailsValue) || (this.legalHoldsReportAHoldDetailsValue.equals(other.legalHoldsReportAHoldDetailsValue));
                case DEVICE_CHANGE_IP_DESKTOP_DETAILS:
                    return (this.deviceChangeIpDesktopDetailsValue == other.deviceChangeIpDesktopDetailsValue) || (this.deviceChangeIpDesktopDetailsValue.equals(other.deviceChangeIpDesktopDetailsValue));
                case DEVICE_CHANGE_IP_MOBILE_DETAILS:
                    return (this.deviceChangeIpMobileDetailsValue == other.deviceChangeIpMobileDetailsValue) || (this.deviceChangeIpMobileDetailsValue.equals(other.deviceChangeIpMobileDetailsValue));
                case DEVICE_CHANGE_IP_WEB_DETAILS:
                    return (this.deviceChangeIpWebDetailsValue == other.deviceChangeIpWebDetailsValue) || (this.deviceChangeIpWebDetailsValue.equals(other.deviceChangeIpWebDetailsValue));
                case DEVICE_DELETE_ON_UNLINK_FAIL_DETAILS:
                    return (this.deviceDeleteOnUnlinkFailDetailsValue == other.deviceDeleteOnUnlinkFailDetailsValue) || (this.deviceDeleteOnUnlinkFailDetailsValue.equals(other.deviceDeleteOnUnlinkFailDetailsValue));
                case DEVICE_DELETE_ON_UNLINK_SUCCESS_DETAILS:
                    return (this.deviceDeleteOnUnlinkSuccessDetailsValue == other.deviceDeleteOnUnlinkSuccessDetailsValue) || (this.deviceDeleteOnUnlinkSuccessDetailsValue.equals(other.deviceDeleteOnUnlinkSuccessDetailsValue));
                case DEVICE_LINK_FAIL_DETAILS:
                    return (this.deviceLinkFailDetailsValue == other.deviceLinkFailDetailsValue) || (this.deviceLinkFailDetailsValue.equals(other.deviceLinkFailDetailsValue));
                case DEVICE_LINK_SUCCESS_DETAILS:
                    return (this.deviceLinkSuccessDetailsValue == other.deviceLinkSuccessDetailsValue) || (this.deviceLinkSuccessDetailsValue.equals(other.deviceLinkSuccessDetailsValue));
                case DEVICE_MANAGEMENT_DISABLED_DETAILS:
                    return (this.deviceManagementDisabledDetailsValue == other.deviceManagementDisabledDetailsValue) || (this.deviceManagementDisabledDetailsValue.equals(other.deviceManagementDisabledDetailsValue));
                case DEVICE_MANAGEMENT_ENABLED_DETAILS:
                    return (this.deviceManagementEnabledDetailsValue == other.deviceManagementEnabledDetailsValue) || (this.deviceManagementEnabledDetailsValue.equals(other.deviceManagementEnabledDetailsValue));
                case DEVICE_SYNC_BACKUP_STATUS_CHANGED_DETAILS:
                    return (this.deviceSyncBackupStatusChangedDetailsValue == other.deviceSyncBackupStatusChangedDetailsValue) || (this.deviceSyncBackupStatusChangedDetailsValue.equals(other.deviceSyncBackupStatusChangedDetailsValue));
                case DEVICE_UNLINK_DETAILS:
                    return (this.deviceUnlinkDetailsValue == other.deviceUnlinkDetailsValue) || (this.deviceUnlinkDetailsValue.equals(other.deviceUnlinkDetailsValue));
                case DROPBOX_PASSWORDS_EXPORTED_DETAILS:
                    return (this.dropboxPasswordsExportedDetailsValue == other.dropboxPasswordsExportedDetailsValue) || (this.dropboxPasswordsExportedDetailsValue.equals(other.dropboxPasswordsExportedDetailsValue));
                case DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED_DETAILS:
                    return (this.dropboxPasswordsNewDeviceEnrolledDetailsValue == other.dropboxPasswordsNewDeviceEnrolledDetailsValue) || (this.dropboxPasswordsNewDeviceEnrolledDetailsValue.equals(other.dropboxPasswordsNewDeviceEnrolledDetailsValue));
                case EMM_REFRESH_AUTH_TOKEN_DETAILS:
                    return (this.emmRefreshAuthTokenDetailsValue == other.emmRefreshAuthTokenDetailsValue) || (this.emmRefreshAuthTokenDetailsValue.equals(other.emmRefreshAuthTokenDetailsValue));
                case EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED_DETAILS:
                    return (this.externalDriveBackupEligibilityStatusCheckedDetailsValue == other.externalDriveBackupEligibilityStatusCheckedDetailsValue) || (this.externalDriveBackupEligibilityStatusCheckedDetailsValue.equals(other.externalDriveBackupEligibilityStatusCheckedDetailsValue));
                case EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED_DETAILS:
                    return (this.externalDriveBackupStatusChangedDetailsValue == other.externalDriveBackupStatusChangedDetailsValue) || (this.externalDriveBackupStatusChangedDetailsValue.equals(other.externalDriveBackupStatusChangedDetailsValue));
                case ACCOUNT_CAPTURE_CHANGE_AVAILABILITY_DETAILS:
                    return (this.accountCaptureChangeAvailabilityDetailsValue == other.accountCaptureChangeAvailabilityDetailsValue) || (this.accountCaptureChangeAvailabilityDetailsValue.equals(other.accountCaptureChangeAvailabilityDetailsValue));
                case ACCOUNT_CAPTURE_MIGRATE_ACCOUNT_DETAILS:
                    return (this.accountCaptureMigrateAccountDetailsValue == other.accountCaptureMigrateAccountDetailsValue) || (this.accountCaptureMigrateAccountDetailsValue.equals(other.accountCaptureMigrateAccountDetailsValue));
                case ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT_DETAILS:
                    return (this.accountCaptureNotificationEmailsSentDetailsValue == other.accountCaptureNotificationEmailsSentDetailsValue) || (this.accountCaptureNotificationEmailsSentDetailsValue.equals(other.accountCaptureNotificationEmailsSentDetailsValue));
                case ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT_DETAILS:
                    return (this.accountCaptureRelinquishAccountDetailsValue == other.accountCaptureRelinquishAccountDetailsValue) || (this.accountCaptureRelinquishAccountDetailsValue.equals(other.accountCaptureRelinquishAccountDetailsValue));
                case DISABLED_DOMAIN_INVITES_DETAILS:
                    return (this.disabledDomainInvitesDetailsValue == other.disabledDomainInvitesDetailsValue) || (this.disabledDomainInvitesDetailsValue.equals(other.disabledDomainInvitesDetailsValue));
                case DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM_DETAILS:
                    return (this.domainInvitesApproveRequestToJoinTeamDetailsValue == other.domainInvitesApproveRequestToJoinTeamDetailsValue) || (this.domainInvitesApproveRequestToJoinTeamDetailsValue.equals(other.domainInvitesApproveRequestToJoinTeamDetailsValue));
                case DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM_DETAILS:
                    return (this.domainInvitesDeclineRequestToJoinTeamDetailsValue == other.domainInvitesDeclineRequestToJoinTeamDetailsValue) || (this.domainInvitesDeclineRequestToJoinTeamDetailsValue.equals(other.domainInvitesDeclineRequestToJoinTeamDetailsValue));
                case DOMAIN_INVITES_EMAIL_EXISTING_USERS_DETAILS:
                    return (this.domainInvitesEmailExistingUsersDetailsValue == other.domainInvitesEmailExistingUsersDetailsValue) || (this.domainInvitesEmailExistingUsersDetailsValue.equals(other.domainInvitesEmailExistingUsersDetailsValue));
                case DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM_DETAILS:
                    return (this.domainInvitesRequestToJoinTeamDetailsValue == other.domainInvitesRequestToJoinTeamDetailsValue) || (this.domainInvitesRequestToJoinTeamDetailsValue.equals(other.domainInvitesRequestToJoinTeamDetailsValue));
                case DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO_DETAILS:
                    return (this.domainInvitesSetInviteNewUserPrefToNoDetailsValue == other.domainInvitesSetInviteNewUserPrefToNoDetailsValue) || (this.domainInvitesSetInviteNewUserPrefToNoDetailsValue.equals(other.domainInvitesSetInviteNewUserPrefToNoDetailsValue));
                case DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES_DETAILS:
                    return (this.domainInvitesSetInviteNewUserPrefToYesDetailsValue == other.domainInvitesSetInviteNewUserPrefToYesDetailsValue) || (this.domainInvitesSetInviteNewUserPrefToYesDetailsValue.equals(other.domainInvitesSetInviteNewUserPrefToYesDetailsValue));
                case DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL_DETAILS:
                    return (this.domainVerificationAddDomainFailDetailsValue == other.domainVerificationAddDomainFailDetailsValue) || (this.domainVerificationAddDomainFailDetailsValue.equals(other.domainVerificationAddDomainFailDetailsValue));
                case DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS_DETAILS:
                    return (this.domainVerificationAddDomainSuccessDetailsValue == other.domainVerificationAddDomainSuccessDetailsValue) || (this.domainVerificationAddDomainSuccessDetailsValue.equals(other.domainVerificationAddDomainSuccessDetailsValue));
                case DOMAIN_VERIFICATION_REMOVE_DOMAIN_DETAILS:
                    return (this.domainVerificationRemoveDomainDetailsValue == other.domainVerificationRemoveDomainDetailsValue) || (this.domainVerificationRemoveDomainDetailsValue.equals(other.domainVerificationRemoveDomainDetailsValue));
                case ENABLED_DOMAIN_INVITES_DETAILS:
                    return (this.enabledDomainInvitesDetailsValue == other.enabledDomainInvitesDetailsValue) || (this.enabledDomainInvitesDetailsValue.equals(other.enabledDomainInvitesDetailsValue));
                case APPLY_NAMING_CONVENTION_DETAILS:
                    return (this.applyNamingConventionDetailsValue == other.applyNamingConventionDetailsValue) || (this.applyNamingConventionDetailsValue.equals(other.applyNamingConventionDetailsValue));
                case CREATE_FOLDER_DETAILS:
                    return (this.createFolderDetailsValue == other.createFolderDetailsValue) || (this.createFolderDetailsValue.equals(other.createFolderDetailsValue));
                case FILE_ADD_DETAILS:
                    return (this.fileAddDetailsValue == other.fileAddDetailsValue) || (this.fileAddDetailsValue.equals(other.fileAddDetailsValue));
                case FILE_COPY_DETAILS:
                    return (this.fileCopyDetailsValue == other.fileCopyDetailsValue) || (this.fileCopyDetailsValue.equals(other.fileCopyDetailsValue));
                case FILE_DELETE_DETAILS:
                    return (this.fileDeleteDetailsValue == other.fileDeleteDetailsValue) || (this.fileDeleteDetailsValue.equals(other.fileDeleteDetailsValue));
                case FILE_DOWNLOAD_DETAILS:
                    return (this.fileDownloadDetailsValue == other.fileDownloadDetailsValue) || (this.fileDownloadDetailsValue.equals(other.fileDownloadDetailsValue));
                case FILE_EDIT_DETAILS:
                    return (this.fileEditDetailsValue == other.fileEditDetailsValue) || (this.fileEditDetailsValue.equals(other.fileEditDetailsValue));
                case FILE_GET_COPY_REFERENCE_DETAILS:
                    return (this.fileGetCopyReferenceDetailsValue == other.fileGetCopyReferenceDetailsValue) || (this.fileGetCopyReferenceDetailsValue.equals(other.fileGetCopyReferenceDetailsValue));
                case FILE_LOCKING_LOCK_STATUS_CHANGED_DETAILS:
                    return (this.fileLockingLockStatusChangedDetailsValue == other.fileLockingLockStatusChangedDetailsValue) || (this.fileLockingLockStatusChangedDetailsValue.equals(other.fileLockingLockStatusChangedDetailsValue));
                case FILE_MOVE_DETAILS:
                    return (this.fileMoveDetailsValue == other.fileMoveDetailsValue) || (this.fileMoveDetailsValue.equals(other.fileMoveDetailsValue));
                case FILE_PERMANENTLY_DELETE_DETAILS:
                    return (this.filePermanentlyDeleteDetailsValue == other.filePermanentlyDeleteDetailsValue) || (this.filePermanentlyDeleteDetailsValue.equals(other.filePermanentlyDeleteDetailsValue));
                case FILE_PREVIEW_DETAILS:
                    return (this.filePreviewDetailsValue == other.filePreviewDetailsValue) || (this.filePreviewDetailsValue.equals(other.filePreviewDetailsValue));
                case FILE_RENAME_DETAILS:
                    return (this.fileRenameDetailsValue == other.fileRenameDetailsValue) || (this.fileRenameDetailsValue.equals(other.fileRenameDetailsValue));
                case FILE_RESTORE_DETAILS:
                    return (this.fileRestoreDetailsValue == other.fileRestoreDetailsValue) || (this.fileRestoreDetailsValue.equals(other.fileRestoreDetailsValue));
                case FILE_REVERT_DETAILS:
                    return (this.fileRevertDetailsValue == other.fileRevertDetailsValue) || (this.fileRevertDetailsValue.equals(other.fileRevertDetailsValue));
                case FILE_ROLLBACK_CHANGES_DETAILS:
                    return (this.fileRollbackChangesDetailsValue == other.fileRollbackChangesDetailsValue) || (this.fileRollbackChangesDetailsValue.equals(other.fileRollbackChangesDetailsValue));
                case FILE_SAVE_COPY_REFERENCE_DETAILS:
                    return (this.fileSaveCopyReferenceDetailsValue == other.fileSaveCopyReferenceDetailsValue) || (this.fileSaveCopyReferenceDetailsValue.equals(other.fileSaveCopyReferenceDetailsValue));
                case FOLDER_OVERVIEW_DESCRIPTION_CHANGED_DETAILS:
                    return (this.folderOverviewDescriptionChangedDetailsValue == other.folderOverviewDescriptionChangedDetailsValue) || (this.folderOverviewDescriptionChangedDetailsValue.equals(other.folderOverviewDescriptionChangedDetailsValue));
                case FOLDER_OVERVIEW_ITEM_PINNED_DETAILS:
                    return (this.folderOverviewItemPinnedDetailsValue == other.folderOverviewItemPinnedDetailsValue) || (this.folderOverviewItemPinnedDetailsValue.equals(other.folderOverviewItemPinnedDetailsValue));
                case FOLDER_OVERVIEW_ITEM_UNPINNED_DETAILS:
                    return (this.folderOverviewItemUnpinnedDetailsValue == other.folderOverviewItemUnpinnedDetailsValue) || (this.folderOverviewItemUnpinnedDetailsValue.equals(other.folderOverviewItemUnpinnedDetailsValue));
                case OBJECT_LABEL_ADDED_DETAILS:
                    return (this.objectLabelAddedDetailsValue == other.objectLabelAddedDetailsValue) || (this.objectLabelAddedDetailsValue.equals(other.objectLabelAddedDetailsValue));
                case OBJECT_LABEL_REMOVED_DETAILS:
                    return (this.objectLabelRemovedDetailsValue == other.objectLabelRemovedDetailsValue) || (this.objectLabelRemovedDetailsValue.equals(other.objectLabelRemovedDetailsValue));
                case OBJECT_LABEL_UPDATED_VALUE_DETAILS:
                    return (this.objectLabelUpdatedValueDetailsValue == other.objectLabelUpdatedValueDetailsValue) || (this.objectLabelUpdatedValueDetailsValue.equals(other.objectLabelUpdatedValueDetailsValue));
                case ORGANIZE_FOLDER_WITH_TIDY_DETAILS:
                    return (this.organizeFolderWithTidyDetailsValue == other.organizeFolderWithTidyDetailsValue) || (this.organizeFolderWithTidyDetailsValue.equals(other.organizeFolderWithTidyDetailsValue));
                case REWIND_FOLDER_DETAILS:
                    return (this.rewindFolderDetailsValue == other.rewindFolderDetailsValue) || (this.rewindFolderDetailsValue.equals(other.rewindFolderDetailsValue));
                case UNDO_NAMING_CONVENTION_DETAILS:
                    return (this.undoNamingConventionDetailsValue == other.undoNamingConventionDetailsValue) || (this.undoNamingConventionDetailsValue.equals(other.undoNamingConventionDetailsValue));
                case UNDO_ORGANIZE_FOLDER_WITH_TIDY_DETAILS:
                    return (this.undoOrganizeFolderWithTidyDetailsValue == other.undoOrganizeFolderWithTidyDetailsValue) || (this.undoOrganizeFolderWithTidyDetailsValue.equals(other.undoOrganizeFolderWithTidyDetailsValue));
                case USER_TAGS_ADDED_DETAILS:
                    return (this.userTagsAddedDetailsValue == other.userTagsAddedDetailsValue) || (this.userTagsAddedDetailsValue.equals(other.userTagsAddedDetailsValue));
                case USER_TAGS_REMOVED_DETAILS:
                    return (this.userTagsRemovedDetailsValue == other.userTagsRemovedDetailsValue) || (this.userTagsRemovedDetailsValue.equals(other.userTagsRemovedDetailsValue));
                case EMAIL_INGEST_RECEIVE_FILE_DETAILS:
                    return (this.emailIngestReceiveFileDetailsValue == other.emailIngestReceiveFileDetailsValue) || (this.emailIngestReceiveFileDetailsValue.equals(other.emailIngestReceiveFileDetailsValue));
                case FILE_REQUEST_CHANGE_DETAILS:
                    return (this.fileRequestChangeDetailsValue == other.fileRequestChangeDetailsValue) || (this.fileRequestChangeDetailsValue.equals(other.fileRequestChangeDetailsValue));
                case FILE_REQUEST_CLOSE_DETAILS:
                    return (this.fileRequestCloseDetailsValue == other.fileRequestCloseDetailsValue) || (this.fileRequestCloseDetailsValue.equals(other.fileRequestCloseDetailsValue));
                case FILE_REQUEST_CREATE_DETAILS:
                    return (this.fileRequestCreateDetailsValue == other.fileRequestCreateDetailsValue) || (this.fileRequestCreateDetailsValue.equals(other.fileRequestCreateDetailsValue));
                case FILE_REQUEST_DELETE_DETAILS:
                    return (this.fileRequestDeleteDetailsValue == other.fileRequestDeleteDetailsValue) || (this.fileRequestDeleteDetailsValue.equals(other.fileRequestDeleteDetailsValue));
                case FILE_REQUEST_RECEIVE_FILE_DETAILS:
                    return (this.fileRequestReceiveFileDetailsValue == other.fileRequestReceiveFileDetailsValue) || (this.fileRequestReceiveFileDetailsValue.equals(other.fileRequestReceiveFileDetailsValue));
                case GROUP_ADD_EXTERNAL_ID_DETAILS:
                    return (this.groupAddExternalIdDetailsValue == other.groupAddExternalIdDetailsValue) || (this.groupAddExternalIdDetailsValue.equals(other.groupAddExternalIdDetailsValue));
                case GROUP_ADD_MEMBER_DETAILS:
                    return (this.groupAddMemberDetailsValue == other.groupAddMemberDetailsValue) || (this.groupAddMemberDetailsValue.equals(other.groupAddMemberDetailsValue));
                case GROUP_CHANGE_EXTERNAL_ID_DETAILS:
                    return (this.groupChangeExternalIdDetailsValue == other.groupChangeExternalIdDetailsValue) || (this.groupChangeExternalIdDetailsValue.equals(other.groupChangeExternalIdDetailsValue));
                case GROUP_CHANGE_MANAGEMENT_TYPE_DETAILS:
                    return (this.groupChangeManagementTypeDetailsValue == other.groupChangeManagementTypeDetailsValue) || (this.groupChangeManagementTypeDetailsValue.equals(other.groupChangeManagementTypeDetailsValue));
                case GROUP_CHANGE_MEMBER_ROLE_DETAILS:
                    return (this.groupChangeMemberRoleDetailsValue == other.groupChangeMemberRoleDetailsValue) || (this.groupChangeMemberRoleDetailsValue.equals(other.groupChangeMemberRoleDetailsValue));
                case GROUP_CREATE_DETAILS:
                    return (this.groupCreateDetailsValue == other.groupCreateDetailsValue) || (this.groupCreateDetailsValue.equals(other.groupCreateDetailsValue));
                case GROUP_DELETE_DETAILS:
                    return (this.groupDeleteDetailsValue == other.groupDeleteDetailsValue) || (this.groupDeleteDetailsValue.equals(other.groupDeleteDetailsValue));
                case GROUP_DESCRIPTION_UPDATED_DETAILS:
                    return (this.groupDescriptionUpdatedDetailsValue == other.groupDescriptionUpdatedDetailsValue) || (this.groupDescriptionUpdatedDetailsValue.equals(other.groupDescriptionUpdatedDetailsValue));
                case GROUP_JOIN_POLICY_UPDATED_DETAILS:
                    return (this.groupJoinPolicyUpdatedDetailsValue == other.groupJoinPolicyUpdatedDetailsValue) || (this.groupJoinPolicyUpdatedDetailsValue.equals(other.groupJoinPolicyUpdatedDetailsValue));
                case GROUP_MOVED_DETAILS:
                    return (this.groupMovedDetailsValue == other.groupMovedDetailsValue) || (this.groupMovedDetailsValue.equals(other.groupMovedDetailsValue));
                case GROUP_REMOVE_EXTERNAL_ID_DETAILS:
                    return (this.groupRemoveExternalIdDetailsValue == other.groupRemoveExternalIdDetailsValue) || (this.groupRemoveExternalIdDetailsValue.equals(other.groupRemoveExternalIdDetailsValue));
                case GROUP_REMOVE_MEMBER_DETAILS:
                    return (this.groupRemoveMemberDetailsValue == other.groupRemoveMemberDetailsValue) || (this.groupRemoveMemberDetailsValue.equals(other.groupRemoveMemberDetailsValue));
                case GROUP_RENAME_DETAILS:
                    return (this.groupRenameDetailsValue == other.groupRenameDetailsValue) || (this.groupRenameDetailsValue.equals(other.groupRenameDetailsValue));
                case ACCOUNT_LOCK_OR_UNLOCKED_DETAILS:
                    return (this.accountLockOrUnlockedDetailsValue == other.accountLockOrUnlockedDetailsValue) || (this.accountLockOrUnlockedDetailsValue.equals(other.accountLockOrUnlockedDetailsValue));
                case EMM_ERROR_DETAILS:
                    return (this.emmErrorDetailsValue == other.emmErrorDetailsValue) || (this.emmErrorDetailsValue.equals(other.emmErrorDetailsValue));
                case GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS_DETAILS:
                    return (this.guestAdminSignedInViaTrustedTeamsDetailsValue == other.guestAdminSignedInViaTrustedTeamsDetailsValue) || (this.guestAdminSignedInViaTrustedTeamsDetailsValue.equals(other.guestAdminSignedInViaTrustedTeamsDetailsValue));
                case GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS_DETAILS:
                    return (this.guestAdminSignedOutViaTrustedTeamsDetailsValue == other.guestAdminSignedOutViaTrustedTeamsDetailsValue) || (this.guestAdminSignedOutViaTrustedTeamsDetailsValue.equals(other.guestAdminSignedOutViaTrustedTeamsDetailsValue));
                case LOGIN_FAIL_DETAILS:
                    return (this.loginFailDetailsValue == other.loginFailDetailsValue) || (this.loginFailDetailsValue.equals(other.loginFailDetailsValue));
                case LOGIN_SUCCESS_DETAILS:
                    return (this.loginSuccessDetailsValue == other.loginSuccessDetailsValue) || (this.loginSuccessDetailsValue.equals(other.loginSuccessDetailsValue));
                case LOGOUT_DETAILS:
                    return (this.logoutDetailsValue == other.logoutDetailsValue) || (this.logoutDetailsValue.equals(other.logoutDetailsValue));
                case RESELLER_SUPPORT_SESSION_END_DETAILS:
                    return (this.resellerSupportSessionEndDetailsValue == other.resellerSupportSessionEndDetailsValue) || (this.resellerSupportSessionEndDetailsValue.equals(other.resellerSupportSessionEndDetailsValue));
                case RESELLER_SUPPORT_SESSION_START_DETAILS:
                    return (this.resellerSupportSessionStartDetailsValue == other.resellerSupportSessionStartDetailsValue) || (this.resellerSupportSessionStartDetailsValue.equals(other.resellerSupportSessionStartDetailsValue));
                case SIGN_IN_AS_SESSION_END_DETAILS:
                    return (this.signInAsSessionEndDetailsValue == other.signInAsSessionEndDetailsValue) || (this.signInAsSessionEndDetailsValue.equals(other.signInAsSessionEndDetailsValue));
                case SIGN_IN_AS_SESSION_START_DETAILS:
                    return (this.signInAsSessionStartDetailsValue == other.signInAsSessionStartDetailsValue) || (this.signInAsSessionStartDetailsValue.equals(other.signInAsSessionStartDetailsValue));
                case SSO_ERROR_DETAILS:
                    return (this.ssoErrorDetailsValue == other.ssoErrorDetailsValue) || (this.ssoErrorDetailsValue.equals(other.ssoErrorDetailsValue));
                case CREATE_TEAM_INVITE_LINK_DETAILS:
                    return (this.createTeamInviteLinkDetailsValue == other.createTeamInviteLinkDetailsValue) || (this.createTeamInviteLinkDetailsValue.equals(other.createTeamInviteLinkDetailsValue));
                case DELETE_TEAM_INVITE_LINK_DETAILS:
                    return (this.deleteTeamInviteLinkDetailsValue == other.deleteTeamInviteLinkDetailsValue) || (this.deleteTeamInviteLinkDetailsValue.equals(other.deleteTeamInviteLinkDetailsValue));
                case MEMBER_ADD_EXTERNAL_ID_DETAILS:
                    return (this.memberAddExternalIdDetailsValue == other.memberAddExternalIdDetailsValue) || (this.memberAddExternalIdDetailsValue.equals(other.memberAddExternalIdDetailsValue));
                case MEMBER_ADD_NAME_DETAILS:
                    return (this.memberAddNameDetailsValue == other.memberAddNameDetailsValue) || (this.memberAddNameDetailsValue.equals(other.memberAddNameDetailsValue));
                case MEMBER_CHANGE_ADMIN_ROLE_DETAILS:
                    return (this.memberChangeAdminRoleDetailsValue == other.memberChangeAdminRoleDetailsValue) || (this.memberChangeAdminRoleDetailsValue.equals(other.memberChangeAdminRoleDetailsValue));
                case MEMBER_CHANGE_EMAIL_DETAILS:
                    return (this.memberChangeEmailDetailsValue == other.memberChangeEmailDetailsValue) || (this.memberChangeEmailDetailsValue.equals(other.memberChangeEmailDetailsValue));
                case MEMBER_CHANGE_EXTERNAL_ID_DETAILS:
                    return (this.memberChangeExternalIdDetailsValue == other.memberChangeExternalIdDetailsValue) || (this.memberChangeExternalIdDetailsValue.equals(other.memberChangeExternalIdDetailsValue));
                case MEMBER_CHANGE_MEMBERSHIP_TYPE_DETAILS:
                    return (this.memberChangeMembershipTypeDetailsValue == other.memberChangeMembershipTypeDetailsValue) || (this.memberChangeMembershipTypeDetailsValue.equals(other.memberChangeMembershipTypeDetailsValue));
                case MEMBER_CHANGE_NAME_DETAILS:
                    return (this.memberChangeNameDetailsValue == other.memberChangeNameDetailsValue) || (this.memberChangeNameDetailsValue.equals(other.memberChangeNameDetailsValue));
                case MEMBER_CHANGE_RESELLER_ROLE_DETAILS:
                    return (this.memberChangeResellerRoleDetailsValue == other.memberChangeResellerRoleDetailsValue) || (this.memberChangeResellerRoleDetailsValue.equals(other.memberChangeResellerRoleDetailsValue));
                case MEMBER_CHANGE_STATUS_DETAILS:
                    return (this.memberChangeStatusDetailsValue == other.memberChangeStatusDetailsValue) || (this.memberChangeStatusDetailsValue.equals(other.memberChangeStatusDetailsValue));
                case MEMBER_DELETE_MANUAL_CONTACTS_DETAILS:
                    return (this.memberDeleteManualContactsDetailsValue == other.memberDeleteManualContactsDetailsValue) || (this.memberDeleteManualContactsDetailsValue.equals(other.memberDeleteManualContactsDetailsValue));
                case MEMBER_DELETE_PROFILE_PHOTO_DETAILS:
                    return (this.memberDeleteProfilePhotoDetailsValue == other.memberDeleteProfilePhotoDetailsValue) || (this.memberDeleteProfilePhotoDetailsValue.equals(other.memberDeleteProfilePhotoDetailsValue));
                case MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS_DETAILS:
                    return (this.memberPermanentlyDeleteAccountContentsDetailsValue == other.memberPermanentlyDeleteAccountContentsDetailsValue) || (this.memberPermanentlyDeleteAccountContentsDetailsValue.equals(other.memberPermanentlyDeleteAccountContentsDetailsValue));
                case MEMBER_REMOVE_EXTERNAL_ID_DETAILS:
                    return (this.memberRemoveExternalIdDetailsValue == other.memberRemoveExternalIdDetailsValue) || (this.memberRemoveExternalIdDetailsValue.equals(other.memberRemoveExternalIdDetailsValue));
                case MEMBER_SET_PROFILE_PHOTO_DETAILS:
                    return (this.memberSetProfilePhotoDetailsValue == other.memberSetProfilePhotoDetailsValue) || (this.memberSetProfilePhotoDetailsValue.equals(other.memberSetProfilePhotoDetailsValue));
                case MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA_DETAILS:
                    return (this.memberSpaceLimitsAddCustomQuotaDetailsValue == other.memberSpaceLimitsAddCustomQuotaDetailsValue) || (this.memberSpaceLimitsAddCustomQuotaDetailsValue.equals(other.memberSpaceLimitsAddCustomQuotaDetailsValue));
                case MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA_DETAILS:
                    return (this.memberSpaceLimitsChangeCustomQuotaDetailsValue == other.memberSpaceLimitsChangeCustomQuotaDetailsValue) || (this.memberSpaceLimitsChangeCustomQuotaDetailsValue.equals(other.memberSpaceLimitsChangeCustomQuotaDetailsValue));
                case MEMBER_SPACE_LIMITS_CHANGE_STATUS_DETAILS:
                    return (this.memberSpaceLimitsChangeStatusDetailsValue == other.memberSpaceLimitsChangeStatusDetailsValue) || (this.memberSpaceLimitsChangeStatusDetailsValue.equals(other.memberSpaceLimitsChangeStatusDetailsValue));
                case MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA_DETAILS:
                    return (this.memberSpaceLimitsRemoveCustomQuotaDetailsValue == other.memberSpaceLimitsRemoveCustomQuotaDetailsValue) || (this.memberSpaceLimitsRemoveCustomQuotaDetailsValue.equals(other.memberSpaceLimitsRemoveCustomQuotaDetailsValue));
                case MEMBER_SUGGEST_DETAILS:
                    return (this.memberSuggestDetailsValue == other.memberSuggestDetailsValue) || (this.memberSuggestDetailsValue.equals(other.memberSuggestDetailsValue));
                case MEMBER_TRANSFER_ACCOUNT_CONTENTS_DETAILS:
                    return (this.memberTransferAccountContentsDetailsValue == other.memberTransferAccountContentsDetailsValue) || (this.memberTransferAccountContentsDetailsValue.equals(other.memberTransferAccountContentsDetailsValue));
                case PENDING_SECONDARY_EMAIL_ADDED_DETAILS:
                    return (this.pendingSecondaryEmailAddedDetailsValue == other.pendingSecondaryEmailAddedDetailsValue) || (this.pendingSecondaryEmailAddedDetailsValue.equals(other.pendingSecondaryEmailAddedDetailsValue));
                case SECONDARY_EMAIL_DELETED_DETAILS:
                    return (this.secondaryEmailDeletedDetailsValue == other.secondaryEmailDeletedDetailsValue) || (this.secondaryEmailDeletedDetailsValue.equals(other.secondaryEmailDeletedDetailsValue));
                case SECONDARY_EMAIL_VERIFIED_DETAILS:
                    return (this.secondaryEmailVerifiedDetailsValue == other.secondaryEmailVerifiedDetailsValue) || (this.secondaryEmailVerifiedDetailsValue.equals(other.secondaryEmailVerifiedDetailsValue));
                case SECONDARY_MAILS_POLICY_CHANGED_DETAILS:
                    return (this.secondaryMailsPolicyChangedDetailsValue == other.secondaryMailsPolicyChangedDetailsValue) || (this.secondaryMailsPolicyChangedDetailsValue.equals(other.secondaryMailsPolicyChangedDetailsValue));
                case BINDER_ADD_PAGE_DETAILS:
                    return (this.binderAddPageDetailsValue == other.binderAddPageDetailsValue) || (this.binderAddPageDetailsValue.equals(other.binderAddPageDetailsValue));
                case BINDER_ADD_SECTION_DETAILS:
                    return (this.binderAddSectionDetailsValue == other.binderAddSectionDetailsValue) || (this.binderAddSectionDetailsValue.equals(other.binderAddSectionDetailsValue));
                case BINDER_REMOVE_PAGE_DETAILS:
                    return (this.binderRemovePageDetailsValue == other.binderRemovePageDetailsValue) || (this.binderRemovePageDetailsValue.equals(other.binderRemovePageDetailsValue));
                case BINDER_REMOVE_SECTION_DETAILS:
                    return (this.binderRemoveSectionDetailsValue == other.binderRemoveSectionDetailsValue) || (this.binderRemoveSectionDetailsValue.equals(other.binderRemoveSectionDetailsValue));
                case BINDER_RENAME_PAGE_DETAILS:
                    return (this.binderRenamePageDetailsValue == other.binderRenamePageDetailsValue) || (this.binderRenamePageDetailsValue.equals(other.binderRenamePageDetailsValue));
                case BINDER_RENAME_SECTION_DETAILS:
                    return (this.binderRenameSectionDetailsValue == other.binderRenameSectionDetailsValue) || (this.binderRenameSectionDetailsValue.equals(other.binderRenameSectionDetailsValue));
                case BINDER_REORDER_PAGE_DETAILS:
                    return (this.binderReorderPageDetailsValue == other.binderReorderPageDetailsValue) || (this.binderReorderPageDetailsValue.equals(other.binderReorderPageDetailsValue));
                case BINDER_REORDER_SECTION_DETAILS:
                    return (this.binderReorderSectionDetailsValue == other.binderReorderSectionDetailsValue) || (this.binderReorderSectionDetailsValue.equals(other.binderReorderSectionDetailsValue));
                case PAPER_CONTENT_ADD_MEMBER_DETAILS:
                    return (this.paperContentAddMemberDetailsValue == other.paperContentAddMemberDetailsValue) || (this.paperContentAddMemberDetailsValue.equals(other.paperContentAddMemberDetailsValue));
                case PAPER_CONTENT_ADD_TO_FOLDER_DETAILS:
                    return (this.paperContentAddToFolderDetailsValue == other.paperContentAddToFolderDetailsValue) || (this.paperContentAddToFolderDetailsValue.equals(other.paperContentAddToFolderDetailsValue));
                case PAPER_CONTENT_ARCHIVE_DETAILS:
                    return (this.paperContentArchiveDetailsValue == other.paperContentArchiveDetailsValue) || (this.paperContentArchiveDetailsValue.equals(other.paperContentArchiveDetailsValue));
                case PAPER_CONTENT_CREATE_DETAILS:
                    return (this.paperContentCreateDetailsValue == other.paperContentCreateDetailsValue) || (this.paperContentCreateDetailsValue.equals(other.paperContentCreateDetailsValue));
                case PAPER_CONTENT_PERMANENTLY_DELETE_DETAILS:
                    return (this.paperContentPermanentlyDeleteDetailsValue == other.paperContentPermanentlyDeleteDetailsValue) || (this.paperContentPermanentlyDeleteDetailsValue.equals(other.paperContentPermanentlyDeleteDetailsValue));
                case PAPER_CONTENT_REMOVE_FROM_FOLDER_DETAILS:
                    return (this.paperContentRemoveFromFolderDetailsValue == other.paperContentRemoveFromFolderDetailsValue) || (this.paperContentRemoveFromFolderDetailsValue.equals(other.paperContentRemoveFromFolderDetailsValue));
                case PAPER_CONTENT_REMOVE_MEMBER_DETAILS:
                    return (this.paperContentRemoveMemberDetailsValue == other.paperContentRemoveMemberDetailsValue) || (this.paperContentRemoveMemberDetailsValue.equals(other.paperContentRemoveMemberDetailsValue));
                case PAPER_CONTENT_RENAME_DETAILS:
                    return (this.paperContentRenameDetailsValue == other.paperContentRenameDetailsValue) || (this.paperContentRenameDetailsValue.equals(other.paperContentRenameDetailsValue));
                case PAPER_CONTENT_RESTORE_DETAILS:
                    return (this.paperContentRestoreDetailsValue == other.paperContentRestoreDetailsValue) || (this.paperContentRestoreDetailsValue.equals(other.paperContentRestoreDetailsValue));
                case PAPER_DOC_ADD_COMMENT_DETAILS:
                    return (this.paperDocAddCommentDetailsValue == other.paperDocAddCommentDetailsValue) || (this.paperDocAddCommentDetailsValue.equals(other.paperDocAddCommentDetailsValue));
                case PAPER_DOC_CHANGE_MEMBER_ROLE_DETAILS:
                    return (this.paperDocChangeMemberRoleDetailsValue == other.paperDocChangeMemberRoleDetailsValue) || (this.paperDocChangeMemberRoleDetailsValue.equals(other.paperDocChangeMemberRoleDetailsValue));
                case PAPER_DOC_CHANGE_SHARING_POLICY_DETAILS:
                    return (this.paperDocChangeSharingPolicyDetailsValue == other.paperDocChangeSharingPolicyDetailsValue) || (this.paperDocChangeSharingPolicyDetailsValue.equals(other.paperDocChangeSharingPolicyDetailsValue));
                case PAPER_DOC_CHANGE_SUBSCRIPTION_DETAILS:
                    return (this.paperDocChangeSubscriptionDetailsValue == other.paperDocChangeSubscriptionDetailsValue) || (this.paperDocChangeSubscriptionDetailsValue.equals(other.paperDocChangeSubscriptionDetailsValue));
                case PAPER_DOC_DELETED_DETAILS:
                    return (this.paperDocDeletedDetailsValue == other.paperDocDeletedDetailsValue) || (this.paperDocDeletedDetailsValue.equals(other.paperDocDeletedDetailsValue));
                case PAPER_DOC_DELETE_COMMENT_DETAILS:
                    return (this.paperDocDeleteCommentDetailsValue == other.paperDocDeleteCommentDetailsValue) || (this.paperDocDeleteCommentDetailsValue.equals(other.paperDocDeleteCommentDetailsValue));
                case PAPER_DOC_DOWNLOAD_DETAILS:
                    return (this.paperDocDownloadDetailsValue == other.paperDocDownloadDetailsValue) || (this.paperDocDownloadDetailsValue.equals(other.paperDocDownloadDetailsValue));
                case PAPER_DOC_EDIT_DETAILS:
                    return (this.paperDocEditDetailsValue == other.paperDocEditDetailsValue) || (this.paperDocEditDetailsValue.equals(other.paperDocEditDetailsValue));
                case PAPER_DOC_EDIT_COMMENT_DETAILS:
                    return (this.paperDocEditCommentDetailsValue == other.paperDocEditCommentDetailsValue) || (this.paperDocEditCommentDetailsValue.equals(other.paperDocEditCommentDetailsValue));
                case PAPER_DOC_FOLLOWED_DETAILS:
                    return (this.paperDocFollowedDetailsValue == other.paperDocFollowedDetailsValue) || (this.paperDocFollowedDetailsValue.equals(other.paperDocFollowedDetailsValue));
                case PAPER_DOC_MENTION_DETAILS:
                    return (this.paperDocMentionDetailsValue == other.paperDocMentionDetailsValue) || (this.paperDocMentionDetailsValue.equals(other.paperDocMentionDetailsValue));
                case PAPER_DOC_OWNERSHIP_CHANGED_DETAILS:
                    return (this.paperDocOwnershipChangedDetailsValue == other.paperDocOwnershipChangedDetailsValue) || (this.paperDocOwnershipChangedDetailsValue.equals(other.paperDocOwnershipChangedDetailsValue));
                case PAPER_DOC_REQUEST_ACCESS_DETAILS:
                    return (this.paperDocRequestAccessDetailsValue == other.paperDocRequestAccessDetailsValue) || (this.paperDocRequestAccessDetailsValue.equals(other.paperDocRequestAccessDetailsValue));
                case PAPER_DOC_RESOLVE_COMMENT_DETAILS:
                    return (this.paperDocResolveCommentDetailsValue == other.paperDocResolveCommentDetailsValue) || (this.paperDocResolveCommentDetailsValue.equals(other.paperDocResolveCommentDetailsValue));
                case PAPER_DOC_REVERT_DETAILS:
                    return (this.paperDocRevertDetailsValue == other.paperDocRevertDetailsValue) || (this.paperDocRevertDetailsValue.equals(other.paperDocRevertDetailsValue));
                case PAPER_DOC_SLACK_SHARE_DETAILS:
                    return (this.paperDocSlackShareDetailsValue == other.paperDocSlackShareDetailsValue) || (this.paperDocSlackShareDetailsValue.equals(other.paperDocSlackShareDetailsValue));
                case PAPER_DOC_TEAM_INVITE_DETAILS:
                    return (this.paperDocTeamInviteDetailsValue == other.paperDocTeamInviteDetailsValue) || (this.paperDocTeamInviteDetailsValue.equals(other.paperDocTeamInviteDetailsValue));
                case PAPER_DOC_TRASHED_DETAILS:
                    return (this.paperDocTrashedDetailsValue == other.paperDocTrashedDetailsValue) || (this.paperDocTrashedDetailsValue.equals(other.paperDocTrashedDetailsValue));
                case PAPER_DOC_UNRESOLVE_COMMENT_DETAILS:
                    return (this.paperDocUnresolveCommentDetailsValue == other.paperDocUnresolveCommentDetailsValue) || (this.paperDocUnresolveCommentDetailsValue.equals(other.paperDocUnresolveCommentDetailsValue));
                case PAPER_DOC_UNTRASHED_DETAILS:
                    return (this.paperDocUntrashedDetailsValue == other.paperDocUntrashedDetailsValue) || (this.paperDocUntrashedDetailsValue.equals(other.paperDocUntrashedDetailsValue));
                case PAPER_DOC_VIEW_DETAILS:
                    return (this.paperDocViewDetailsValue == other.paperDocViewDetailsValue) || (this.paperDocViewDetailsValue.equals(other.paperDocViewDetailsValue));
                case PAPER_EXTERNAL_VIEW_ALLOW_DETAILS:
                    return (this.paperExternalViewAllowDetailsValue == other.paperExternalViewAllowDetailsValue) || (this.paperExternalViewAllowDetailsValue.equals(other.paperExternalViewAllowDetailsValue));
                case PAPER_EXTERNAL_VIEW_DEFAULT_TEAM_DETAILS:
                    return (this.paperExternalViewDefaultTeamDetailsValue == other.paperExternalViewDefaultTeamDetailsValue) || (this.paperExternalViewDefaultTeamDetailsValue.equals(other.paperExternalViewDefaultTeamDetailsValue));
                case PAPER_EXTERNAL_VIEW_FORBID_DETAILS:
                    return (this.paperExternalViewForbidDetailsValue == other.paperExternalViewForbidDetailsValue) || (this.paperExternalViewForbidDetailsValue.equals(other.paperExternalViewForbidDetailsValue));
                case PAPER_FOLDER_CHANGE_SUBSCRIPTION_DETAILS:
                    return (this.paperFolderChangeSubscriptionDetailsValue == other.paperFolderChangeSubscriptionDetailsValue) || (this.paperFolderChangeSubscriptionDetailsValue.equals(other.paperFolderChangeSubscriptionDetailsValue));
                case PAPER_FOLDER_DELETED_DETAILS:
                    return (this.paperFolderDeletedDetailsValue == other.paperFolderDeletedDetailsValue) || (this.paperFolderDeletedDetailsValue.equals(other.paperFolderDeletedDetailsValue));
                case PAPER_FOLDER_FOLLOWED_DETAILS:
                    return (this.paperFolderFollowedDetailsValue == other.paperFolderFollowedDetailsValue) || (this.paperFolderFollowedDetailsValue.equals(other.paperFolderFollowedDetailsValue));
                case PAPER_FOLDER_TEAM_INVITE_DETAILS:
                    return (this.paperFolderTeamInviteDetailsValue == other.paperFolderTeamInviteDetailsValue) || (this.paperFolderTeamInviteDetailsValue.equals(other.paperFolderTeamInviteDetailsValue));
                case PAPER_PUBLISHED_LINK_CHANGE_PERMISSION_DETAILS:
                    return (this.paperPublishedLinkChangePermissionDetailsValue == other.paperPublishedLinkChangePermissionDetailsValue) || (this.paperPublishedLinkChangePermissionDetailsValue.equals(other.paperPublishedLinkChangePermissionDetailsValue));
                case PAPER_PUBLISHED_LINK_CREATE_DETAILS:
                    return (this.paperPublishedLinkCreateDetailsValue == other.paperPublishedLinkCreateDetailsValue) || (this.paperPublishedLinkCreateDetailsValue.equals(other.paperPublishedLinkCreateDetailsValue));
                case PAPER_PUBLISHED_LINK_DISABLED_DETAILS:
                    return (this.paperPublishedLinkDisabledDetailsValue == other.paperPublishedLinkDisabledDetailsValue) || (this.paperPublishedLinkDisabledDetailsValue.equals(other.paperPublishedLinkDisabledDetailsValue));
                case PAPER_PUBLISHED_LINK_VIEW_DETAILS:
                    return (this.paperPublishedLinkViewDetailsValue == other.paperPublishedLinkViewDetailsValue) || (this.paperPublishedLinkViewDetailsValue.equals(other.paperPublishedLinkViewDetailsValue));
                case PASSWORD_CHANGE_DETAILS:
                    return (this.passwordChangeDetailsValue == other.passwordChangeDetailsValue) || (this.passwordChangeDetailsValue.equals(other.passwordChangeDetailsValue));
                case PASSWORD_RESET_DETAILS:
                    return (this.passwordResetDetailsValue == other.passwordResetDetailsValue) || (this.passwordResetDetailsValue.equals(other.passwordResetDetailsValue));
                case PASSWORD_RESET_ALL_DETAILS:
                    return (this.passwordResetAllDetailsValue == other.passwordResetAllDetailsValue) || (this.passwordResetAllDetailsValue.equals(other.passwordResetAllDetailsValue));
                case CLASSIFICATION_CREATE_REPORT_DETAILS:
                    return (this.classificationCreateReportDetailsValue == other.classificationCreateReportDetailsValue) || (this.classificationCreateReportDetailsValue.equals(other.classificationCreateReportDetailsValue));
                case CLASSIFICATION_CREATE_REPORT_FAIL_DETAILS:
                    return (this.classificationCreateReportFailDetailsValue == other.classificationCreateReportFailDetailsValue) || (this.classificationCreateReportFailDetailsValue.equals(other.classificationCreateReportFailDetailsValue));
                case EMM_CREATE_EXCEPTIONS_REPORT_DETAILS:
                    return (this.emmCreateExceptionsReportDetailsValue == other.emmCreateExceptionsReportDetailsValue) || (this.emmCreateExceptionsReportDetailsValue.equals(other.emmCreateExceptionsReportDetailsValue));
                case EMM_CREATE_USAGE_REPORT_DETAILS:
                    return (this.emmCreateUsageReportDetailsValue == other.emmCreateUsageReportDetailsValue) || (this.emmCreateUsageReportDetailsValue.equals(other.emmCreateUsageReportDetailsValue));
                case EXPORT_MEMBERS_REPORT_DETAILS:
                    return (this.exportMembersReportDetailsValue == other.exportMembersReportDetailsValue) || (this.exportMembersReportDetailsValue.equals(other.exportMembersReportDetailsValue));
                case EXPORT_MEMBERS_REPORT_FAIL_DETAILS:
                    return (this.exportMembersReportFailDetailsValue == other.exportMembersReportFailDetailsValue) || (this.exportMembersReportFailDetailsValue.equals(other.exportMembersReportFailDetailsValue));
                case EXTERNAL_SHARING_CREATE_REPORT_DETAILS:
                    return (this.externalSharingCreateReportDetailsValue == other.externalSharingCreateReportDetailsValue) || (this.externalSharingCreateReportDetailsValue.equals(other.externalSharingCreateReportDetailsValue));
                case EXTERNAL_SHARING_REPORT_FAILED_DETAILS:
                    return (this.externalSharingReportFailedDetailsValue == other.externalSharingReportFailedDetailsValue) || (this.externalSharingReportFailedDetailsValue.equals(other.externalSharingReportFailedDetailsValue));
                case NO_EXPIRATION_LINK_GEN_CREATE_REPORT_DETAILS:
                    return (this.noExpirationLinkGenCreateReportDetailsValue == other.noExpirationLinkGenCreateReportDetailsValue) || (this.noExpirationLinkGenCreateReportDetailsValue.equals(other.noExpirationLinkGenCreateReportDetailsValue));
                case NO_EXPIRATION_LINK_GEN_REPORT_FAILED_DETAILS:
                    return (this.noExpirationLinkGenReportFailedDetailsValue == other.noExpirationLinkGenReportFailedDetailsValue) || (this.noExpirationLinkGenReportFailedDetailsValue.equals(other.noExpirationLinkGenReportFailedDetailsValue));
                case NO_PASSWORD_LINK_GEN_CREATE_REPORT_DETAILS:
                    return (this.noPasswordLinkGenCreateReportDetailsValue == other.noPasswordLinkGenCreateReportDetailsValue) || (this.noPasswordLinkGenCreateReportDetailsValue.equals(other.noPasswordLinkGenCreateReportDetailsValue));
                case NO_PASSWORD_LINK_GEN_REPORT_FAILED_DETAILS:
                    return (this.noPasswordLinkGenReportFailedDetailsValue == other.noPasswordLinkGenReportFailedDetailsValue) || (this.noPasswordLinkGenReportFailedDetailsValue.equals(other.noPasswordLinkGenReportFailedDetailsValue));
                case NO_PASSWORD_LINK_VIEW_CREATE_REPORT_DETAILS:
                    return (this.noPasswordLinkViewCreateReportDetailsValue == other.noPasswordLinkViewCreateReportDetailsValue) || (this.noPasswordLinkViewCreateReportDetailsValue.equals(other.noPasswordLinkViewCreateReportDetailsValue));
                case NO_PASSWORD_LINK_VIEW_REPORT_FAILED_DETAILS:
                    return (this.noPasswordLinkViewReportFailedDetailsValue == other.noPasswordLinkViewReportFailedDetailsValue) || (this.noPasswordLinkViewReportFailedDetailsValue.equals(other.noPasswordLinkViewReportFailedDetailsValue));
                case OUTDATED_LINK_VIEW_CREATE_REPORT_DETAILS:
                    return (this.outdatedLinkViewCreateReportDetailsValue == other.outdatedLinkViewCreateReportDetailsValue) || (this.outdatedLinkViewCreateReportDetailsValue.equals(other.outdatedLinkViewCreateReportDetailsValue));
                case OUTDATED_LINK_VIEW_REPORT_FAILED_DETAILS:
                    return (this.outdatedLinkViewReportFailedDetailsValue == other.outdatedLinkViewReportFailedDetailsValue) || (this.outdatedLinkViewReportFailedDetailsValue.equals(other.outdatedLinkViewReportFailedDetailsValue));
                case PAPER_ADMIN_EXPORT_START_DETAILS:
                    return (this.paperAdminExportStartDetailsValue == other.paperAdminExportStartDetailsValue) || (this.paperAdminExportStartDetailsValue.equals(other.paperAdminExportStartDetailsValue));
                case SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT_DETAILS:
                    return (this.smartSyncCreateAdminPrivilegeReportDetailsValue == other.smartSyncCreateAdminPrivilegeReportDetailsValue) || (this.smartSyncCreateAdminPrivilegeReportDetailsValue.equals(other.smartSyncCreateAdminPrivilegeReportDetailsValue));
                case TEAM_ACTIVITY_CREATE_REPORT_DETAILS:
                    return (this.teamActivityCreateReportDetailsValue == other.teamActivityCreateReportDetailsValue) || (this.teamActivityCreateReportDetailsValue.equals(other.teamActivityCreateReportDetailsValue));
                case TEAM_ACTIVITY_CREATE_REPORT_FAIL_DETAILS:
                    return (this.teamActivityCreateReportFailDetailsValue == other.teamActivityCreateReportFailDetailsValue) || (this.teamActivityCreateReportFailDetailsValue.equals(other.teamActivityCreateReportFailDetailsValue));
                case COLLECTION_SHARE_DETAILS:
                    return (this.collectionShareDetailsValue == other.collectionShareDetailsValue) || (this.collectionShareDetailsValue.equals(other.collectionShareDetailsValue));
                case FILE_TRANSFERS_FILE_ADD_DETAILS:
                    return (this.fileTransfersFileAddDetailsValue == other.fileTransfersFileAddDetailsValue) || (this.fileTransfersFileAddDetailsValue.equals(other.fileTransfersFileAddDetailsValue));
                case FILE_TRANSFERS_TRANSFER_DELETE_DETAILS:
                    return (this.fileTransfersTransferDeleteDetailsValue == other.fileTransfersTransferDeleteDetailsValue) || (this.fileTransfersTransferDeleteDetailsValue.equals(other.fileTransfersTransferDeleteDetailsValue));
                case FILE_TRANSFERS_TRANSFER_DOWNLOAD_DETAILS:
                    return (this.fileTransfersTransferDownloadDetailsValue == other.fileTransfersTransferDownloadDetailsValue) || (this.fileTransfersTransferDownloadDetailsValue.equals(other.fileTransfersTransferDownloadDetailsValue));
                case FILE_TRANSFERS_TRANSFER_SEND_DETAILS:
                    return (this.fileTransfersTransferSendDetailsValue == other.fileTransfersTransferSendDetailsValue) || (this.fileTransfersTransferSendDetailsValue.equals(other.fileTransfersTransferSendDetailsValue));
                case FILE_TRANSFERS_TRANSFER_VIEW_DETAILS:
                    return (this.fileTransfersTransferViewDetailsValue == other.fileTransfersTransferViewDetailsValue) || (this.fileTransfersTransferViewDetailsValue.equals(other.fileTransfersTransferViewDetailsValue));
                case NOTE_ACL_INVITE_ONLY_DETAILS:
                    return (this.noteAclInviteOnlyDetailsValue == other.noteAclInviteOnlyDetailsValue) || (this.noteAclInviteOnlyDetailsValue.equals(other.noteAclInviteOnlyDetailsValue));
                case NOTE_ACL_LINK_DETAILS:
                    return (this.noteAclLinkDetailsValue == other.noteAclLinkDetailsValue) || (this.noteAclLinkDetailsValue.equals(other.noteAclLinkDetailsValue));
                case NOTE_ACL_TEAM_LINK_DETAILS:
                    return (this.noteAclTeamLinkDetailsValue == other.noteAclTeamLinkDetailsValue) || (this.noteAclTeamLinkDetailsValue.equals(other.noteAclTeamLinkDetailsValue));
                case NOTE_SHARED_DETAILS:
                    return (this.noteSharedDetailsValue == other.noteSharedDetailsValue) || (this.noteSharedDetailsValue.equals(other.noteSharedDetailsValue));
                case NOTE_SHARE_RECEIVE_DETAILS:
                    return (this.noteShareReceiveDetailsValue == other.noteShareReceiveDetailsValue) || (this.noteShareReceiveDetailsValue.equals(other.noteShareReceiveDetailsValue));
                case OPEN_NOTE_SHARED_DETAILS:
                    return (this.openNoteSharedDetailsValue == other.openNoteSharedDetailsValue) || (this.openNoteSharedDetailsValue.equals(other.openNoteSharedDetailsValue));
                case SF_ADD_GROUP_DETAILS:
                    return (this.sfAddGroupDetailsValue == other.sfAddGroupDetailsValue) || (this.sfAddGroupDetailsValue.equals(other.sfAddGroupDetailsValue));
                case SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS_DETAILS:
                    return (this.sfAllowNonMembersToViewSharedLinksDetailsValue == other.sfAllowNonMembersToViewSharedLinksDetailsValue) || (this.sfAllowNonMembersToViewSharedLinksDetailsValue.equals(other.sfAllowNonMembersToViewSharedLinksDetailsValue));
                case SF_EXTERNAL_INVITE_WARN_DETAILS:
                    return (this.sfExternalInviteWarnDetailsValue == other.sfExternalInviteWarnDetailsValue) || (this.sfExternalInviteWarnDetailsValue.equals(other.sfExternalInviteWarnDetailsValue));
                case SF_FB_INVITE_DETAILS:
                    return (this.sfFbInviteDetailsValue == other.sfFbInviteDetailsValue) || (this.sfFbInviteDetailsValue.equals(other.sfFbInviteDetailsValue));
                case SF_FB_INVITE_CHANGE_ROLE_DETAILS:
                    return (this.sfFbInviteChangeRoleDetailsValue == other.sfFbInviteChangeRoleDetailsValue) || (this.sfFbInviteChangeRoleDetailsValue.equals(other.sfFbInviteChangeRoleDetailsValue));
                case SF_FB_UNINVITE_DETAILS:
                    return (this.sfFbUninviteDetailsValue == other.sfFbUninviteDetailsValue) || (this.sfFbUninviteDetailsValue.equals(other.sfFbUninviteDetailsValue));
                case SF_INVITE_GROUP_DETAILS:
                    return (this.sfInviteGroupDetailsValue == other.sfInviteGroupDetailsValue) || (this.sfInviteGroupDetailsValue.equals(other.sfInviteGroupDetailsValue));
                case SF_TEAM_GRANT_ACCESS_DETAILS:
                    return (this.sfTeamGrantAccessDetailsValue == other.sfTeamGrantAccessDetailsValue) || (this.sfTeamGrantAccessDetailsValue.equals(other.sfTeamGrantAccessDetailsValue));
                case SF_TEAM_INVITE_DETAILS:
                    return (this.sfTeamInviteDetailsValue == other.sfTeamInviteDetailsValue) || (this.sfTeamInviteDetailsValue.equals(other.sfTeamInviteDetailsValue));
                case SF_TEAM_INVITE_CHANGE_ROLE_DETAILS:
                    return (this.sfTeamInviteChangeRoleDetailsValue == other.sfTeamInviteChangeRoleDetailsValue) || (this.sfTeamInviteChangeRoleDetailsValue.equals(other.sfTeamInviteChangeRoleDetailsValue));
                case SF_TEAM_JOIN_DETAILS:
                    return (this.sfTeamJoinDetailsValue == other.sfTeamJoinDetailsValue) || (this.sfTeamJoinDetailsValue.equals(other.sfTeamJoinDetailsValue));
                case SF_TEAM_JOIN_FROM_OOB_LINK_DETAILS:
                    return (this.sfTeamJoinFromOobLinkDetailsValue == other.sfTeamJoinFromOobLinkDetailsValue) || (this.sfTeamJoinFromOobLinkDetailsValue.equals(other.sfTeamJoinFromOobLinkDetailsValue));
                case SF_TEAM_UNINVITE_DETAILS:
                    return (this.sfTeamUninviteDetailsValue == other.sfTeamUninviteDetailsValue) || (this.sfTeamUninviteDetailsValue.equals(other.sfTeamUninviteDetailsValue));
                case SHARED_CONTENT_ADD_INVITEES_DETAILS:
                    return (this.sharedContentAddInviteesDetailsValue == other.sharedContentAddInviteesDetailsValue) || (this.sharedContentAddInviteesDetailsValue.equals(other.sharedContentAddInviteesDetailsValue));
                case SHARED_CONTENT_ADD_LINK_EXPIRY_DETAILS:
                    return (this.sharedContentAddLinkExpiryDetailsValue == other.sharedContentAddLinkExpiryDetailsValue) || (this.sharedContentAddLinkExpiryDetailsValue.equals(other.sharedContentAddLinkExpiryDetailsValue));
                case SHARED_CONTENT_ADD_LINK_PASSWORD_DETAILS:
                    return (this.sharedContentAddLinkPasswordDetailsValue == other.sharedContentAddLinkPasswordDetailsValue) || (this.sharedContentAddLinkPasswordDetailsValue.equals(other.sharedContentAddLinkPasswordDetailsValue));
                case SHARED_CONTENT_ADD_MEMBER_DETAILS:
                    return (this.sharedContentAddMemberDetailsValue == other.sharedContentAddMemberDetailsValue) || (this.sharedContentAddMemberDetailsValue.equals(other.sharedContentAddMemberDetailsValue));
                case SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY_DETAILS:
                    return (this.sharedContentChangeDownloadsPolicyDetailsValue == other.sharedContentChangeDownloadsPolicyDetailsValue) || (this.sharedContentChangeDownloadsPolicyDetailsValue.equals(other.sharedContentChangeDownloadsPolicyDetailsValue));
                case SHARED_CONTENT_CHANGE_INVITEE_ROLE_DETAILS:
                    return (this.sharedContentChangeInviteeRoleDetailsValue == other.sharedContentChangeInviteeRoleDetailsValue) || (this.sharedContentChangeInviteeRoleDetailsValue.equals(other.sharedContentChangeInviteeRoleDetailsValue));
                case SHARED_CONTENT_CHANGE_LINK_AUDIENCE_DETAILS:
                    return (this.sharedContentChangeLinkAudienceDetailsValue == other.sharedContentChangeLinkAudienceDetailsValue) || (this.sharedContentChangeLinkAudienceDetailsValue.equals(other.sharedContentChangeLinkAudienceDetailsValue));
                case SHARED_CONTENT_CHANGE_LINK_EXPIRY_DETAILS:
                    return (this.sharedContentChangeLinkExpiryDetailsValue == other.sharedContentChangeLinkExpiryDetailsValue) || (this.sharedContentChangeLinkExpiryDetailsValue.equals(other.sharedContentChangeLinkExpiryDetailsValue));
                case SHARED_CONTENT_CHANGE_LINK_PASSWORD_DETAILS:
                    return (this.sharedContentChangeLinkPasswordDetailsValue == other.sharedContentChangeLinkPasswordDetailsValue) || (this.sharedContentChangeLinkPasswordDetailsValue.equals(other.sharedContentChangeLinkPasswordDetailsValue));
                case SHARED_CONTENT_CHANGE_MEMBER_ROLE_DETAILS:
                    return (this.sharedContentChangeMemberRoleDetailsValue == other.sharedContentChangeMemberRoleDetailsValue) || (this.sharedContentChangeMemberRoleDetailsValue.equals(other.sharedContentChangeMemberRoleDetailsValue));
                case SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY_DETAILS:
                    return (this.sharedContentChangeViewerInfoPolicyDetailsValue == other.sharedContentChangeViewerInfoPolicyDetailsValue) || (this.sharedContentChangeViewerInfoPolicyDetailsValue.equals(other.sharedContentChangeViewerInfoPolicyDetailsValue));
                case SHARED_CONTENT_CLAIM_INVITATION_DETAILS:
                    return (this.sharedContentClaimInvitationDetailsValue == other.sharedContentClaimInvitationDetailsValue) || (this.sharedContentClaimInvitationDetailsValue.equals(other.sharedContentClaimInvitationDetailsValue));
                case SHARED_CONTENT_COPY_DETAILS:
                    return (this.sharedContentCopyDetailsValue == other.sharedContentCopyDetailsValue) || (this.sharedContentCopyDetailsValue.equals(other.sharedContentCopyDetailsValue));
                case SHARED_CONTENT_DOWNLOAD_DETAILS:
                    return (this.sharedContentDownloadDetailsValue == other.sharedContentDownloadDetailsValue) || (this.sharedContentDownloadDetailsValue.equals(other.sharedContentDownloadDetailsValue));
                case SHARED_CONTENT_RELINQUISH_MEMBERSHIP_DETAILS:
                    return (this.sharedContentRelinquishMembershipDetailsValue == other.sharedContentRelinquishMembershipDetailsValue) || (this.sharedContentRelinquishMembershipDetailsValue.equals(other.sharedContentRelinquishMembershipDetailsValue));
                case SHARED_CONTENT_REMOVE_INVITEES_DETAILS:
                    return (this.sharedContentRemoveInviteesDetailsValue == other.sharedContentRemoveInviteesDetailsValue) || (this.sharedContentRemoveInviteesDetailsValue.equals(other.sharedContentRemoveInviteesDetailsValue));
                case SHARED_CONTENT_REMOVE_LINK_EXPIRY_DETAILS:
                    return (this.sharedContentRemoveLinkExpiryDetailsValue == other.sharedContentRemoveLinkExpiryDetailsValue) || (this.sharedContentRemoveLinkExpiryDetailsValue.equals(other.sharedContentRemoveLinkExpiryDetailsValue));
                case SHARED_CONTENT_REMOVE_LINK_PASSWORD_DETAILS:
                    return (this.sharedContentRemoveLinkPasswordDetailsValue == other.sharedContentRemoveLinkPasswordDetailsValue) || (this.sharedContentRemoveLinkPasswordDetailsValue.equals(other.sharedContentRemoveLinkPasswordDetailsValue));
                case SHARED_CONTENT_REMOVE_MEMBER_DETAILS:
                    return (this.sharedContentRemoveMemberDetailsValue == other.sharedContentRemoveMemberDetailsValue) || (this.sharedContentRemoveMemberDetailsValue.equals(other.sharedContentRemoveMemberDetailsValue));
                case SHARED_CONTENT_REQUEST_ACCESS_DETAILS:
                    return (this.sharedContentRequestAccessDetailsValue == other.sharedContentRequestAccessDetailsValue) || (this.sharedContentRequestAccessDetailsValue.equals(other.sharedContentRequestAccessDetailsValue));
                case SHARED_CONTENT_RESTORE_INVITEES_DETAILS:
                    return (this.sharedContentRestoreInviteesDetailsValue == other.sharedContentRestoreInviteesDetailsValue) || (this.sharedContentRestoreInviteesDetailsValue.equals(other.sharedContentRestoreInviteesDetailsValue));
                case SHARED_CONTENT_RESTORE_MEMBER_DETAILS:
                    return (this.sharedContentRestoreMemberDetailsValue == other.sharedContentRestoreMemberDetailsValue) || (this.sharedContentRestoreMemberDetailsValue.equals(other.sharedContentRestoreMemberDetailsValue));
                case SHARED_CONTENT_UNSHARE_DETAILS:
                    return (this.sharedContentUnshareDetailsValue == other.sharedContentUnshareDetailsValue) || (this.sharedContentUnshareDetailsValue.equals(other.sharedContentUnshareDetailsValue));
                case SHARED_CONTENT_VIEW_DETAILS:
                    return (this.sharedContentViewDetailsValue == other.sharedContentViewDetailsValue) || (this.sharedContentViewDetailsValue.equals(other.sharedContentViewDetailsValue));
                case SHARED_FOLDER_CHANGE_LINK_POLICY_DETAILS:
                    return (this.sharedFolderChangeLinkPolicyDetailsValue == other.sharedFolderChangeLinkPolicyDetailsValue) || (this.sharedFolderChangeLinkPolicyDetailsValue.equals(other.sharedFolderChangeLinkPolicyDetailsValue));
                case SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY_DETAILS:
                    return (this.sharedFolderChangeMembersInheritancePolicyDetailsValue == other.sharedFolderChangeMembersInheritancePolicyDetailsValue) || (this.sharedFolderChangeMembersInheritancePolicyDetailsValue.equals(other.sharedFolderChangeMembersInheritancePolicyDetailsValue));
                case SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY_DETAILS:
                    return (this.sharedFolderChangeMembersManagementPolicyDetailsValue == other.sharedFolderChangeMembersManagementPolicyDetailsValue) || (this.sharedFolderChangeMembersManagementPolicyDetailsValue.equals(other.sharedFolderChangeMembersManagementPolicyDetailsValue));
                case SHARED_FOLDER_CHANGE_MEMBERS_POLICY_DETAILS:
                    return (this.sharedFolderChangeMembersPolicyDetailsValue == other.sharedFolderChangeMembersPolicyDetailsValue) || (this.sharedFolderChangeMembersPolicyDetailsValue.equals(other.sharedFolderChangeMembersPolicyDetailsValue));
                case SHARED_FOLDER_CREATE_DETAILS:
                    return (this.sharedFolderCreateDetailsValue == other.sharedFolderCreateDetailsValue) || (this.sharedFolderCreateDetailsValue.equals(other.sharedFolderCreateDetailsValue));
                case SHARED_FOLDER_DECLINE_INVITATION_DETAILS:
                    return (this.sharedFolderDeclineInvitationDetailsValue == other.sharedFolderDeclineInvitationDetailsValue) || (this.sharedFolderDeclineInvitationDetailsValue.equals(other.sharedFolderDeclineInvitationDetailsValue));
                case SHARED_FOLDER_MOUNT_DETAILS:
                    return (this.sharedFolderMountDetailsValue == other.sharedFolderMountDetailsValue) || (this.sharedFolderMountDetailsValue.equals(other.sharedFolderMountDetailsValue));
                case SHARED_FOLDER_NEST_DETAILS:
                    return (this.sharedFolderNestDetailsValue == other.sharedFolderNestDetailsValue) || (this.sharedFolderNestDetailsValue.equals(other.sharedFolderNestDetailsValue));
                case SHARED_FOLDER_TRANSFER_OWNERSHIP_DETAILS:
                    return (this.sharedFolderTransferOwnershipDetailsValue == other.sharedFolderTransferOwnershipDetailsValue) || (this.sharedFolderTransferOwnershipDetailsValue.equals(other.sharedFolderTransferOwnershipDetailsValue));
                case SHARED_FOLDER_UNMOUNT_DETAILS:
                    return (this.sharedFolderUnmountDetailsValue == other.sharedFolderUnmountDetailsValue) || (this.sharedFolderUnmountDetailsValue.equals(other.sharedFolderUnmountDetailsValue));
                case SHARED_LINK_ADD_EXPIRY_DETAILS:
                    return (this.sharedLinkAddExpiryDetailsValue == other.sharedLinkAddExpiryDetailsValue) || (this.sharedLinkAddExpiryDetailsValue.equals(other.sharedLinkAddExpiryDetailsValue));
                case SHARED_LINK_CHANGE_EXPIRY_DETAILS:
                    return (this.sharedLinkChangeExpiryDetailsValue == other.sharedLinkChangeExpiryDetailsValue) || (this.sharedLinkChangeExpiryDetailsValue.equals(other.sharedLinkChangeExpiryDetailsValue));
                case SHARED_LINK_CHANGE_VISIBILITY_DETAILS:
                    return (this.sharedLinkChangeVisibilityDetailsValue == other.sharedLinkChangeVisibilityDetailsValue) || (this.sharedLinkChangeVisibilityDetailsValue.equals(other.sharedLinkChangeVisibilityDetailsValue));
                case SHARED_LINK_COPY_DETAILS:
                    return (this.sharedLinkCopyDetailsValue == other.sharedLinkCopyDetailsValue) || (this.sharedLinkCopyDetailsValue.equals(other.sharedLinkCopyDetailsValue));
                case SHARED_LINK_CREATE_DETAILS:
                    return (this.sharedLinkCreateDetailsValue == other.sharedLinkCreateDetailsValue) || (this.sharedLinkCreateDetailsValue.equals(other.sharedLinkCreateDetailsValue));
                case SHARED_LINK_DISABLE_DETAILS:
                    return (this.sharedLinkDisableDetailsValue == other.sharedLinkDisableDetailsValue) || (this.sharedLinkDisableDetailsValue.equals(other.sharedLinkDisableDetailsValue));
                case SHARED_LINK_DOWNLOAD_DETAILS:
                    return (this.sharedLinkDownloadDetailsValue == other.sharedLinkDownloadDetailsValue) || (this.sharedLinkDownloadDetailsValue.equals(other.sharedLinkDownloadDetailsValue));
                case SHARED_LINK_REMOVE_EXPIRY_DETAILS:
                    return (this.sharedLinkRemoveExpiryDetailsValue == other.sharedLinkRemoveExpiryDetailsValue) || (this.sharedLinkRemoveExpiryDetailsValue.equals(other.sharedLinkRemoveExpiryDetailsValue));
                case SHARED_LINK_SETTINGS_ADD_EXPIRATION_DETAILS:
                    return (this.sharedLinkSettingsAddExpirationDetailsValue == other.sharedLinkSettingsAddExpirationDetailsValue) || (this.sharedLinkSettingsAddExpirationDetailsValue.equals(other.sharedLinkSettingsAddExpirationDetailsValue));
                case SHARED_LINK_SETTINGS_ADD_PASSWORD_DETAILS:
                    return (this.sharedLinkSettingsAddPasswordDetailsValue == other.sharedLinkSettingsAddPasswordDetailsValue) || (this.sharedLinkSettingsAddPasswordDetailsValue.equals(other.sharedLinkSettingsAddPasswordDetailsValue));
                case SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED_DETAILS:
                    return (this.sharedLinkSettingsAllowDownloadDisabledDetailsValue == other.sharedLinkSettingsAllowDownloadDisabledDetailsValue) || (this.sharedLinkSettingsAllowDownloadDisabledDetailsValue.equals(other.sharedLinkSettingsAllowDownloadDisabledDetailsValue));
                case SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED_DETAILS:
                    return (this.sharedLinkSettingsAllowDownloadEnabledDetailsValue == other.sharedLinkSettingsAllowDownloadEnabledDetailsValue) || (this.sharedLinkSettingsAllowDownloadEnabledDetailsValue.equals(other.sharedLinkSettingsAllowDownloadEnabledDetailsValue));
                case SHARED_LINK_SETTINGS_CHANGE_AUDIENCE_DETAILS:
                    return (this.sharedLinkSettingsChangeAudienceDetailsValue == other.sharedLinkSettingsChangeAudienceDetailsValue) || (this.sharedLinkSettingsChangeAudienceDetailsValue.equals(other.sharedLinkSettingsChangeAudienceDetailsValue));
                case SHARED_LINK_SETTINGS_CHANGE_EXPIRATION_DETAILS:
                    return (this.sharedLinkSettingsChangeExpirationDetailsValue == other.sharedLinkSettingsChangeExpirationDetailsValue) || (this.sharedLinkSettingsChangeExpirationDetailsValue.equals(other.sharedLinkSettingsChangeExpirationDetailsValue));
                case SHARED_LINK_SETTINGS_CHANGE_PASSWORD_DETAILS:
                    return (this.sharedLinkSettingsChangePasswordDetailsValue == other.sharedLinkSettingsChangePasswordDetailsValue) || (this.sharedLinkSettingsChangePasswordDetailsValue.equals(other.sharedLinkSettingsChangePasswordDetailsValue));
                case SHARED_LINK_SETTINGS_REMOVE_EXPIRATION_DETAILS:
                    return (this.sharedLinkSettingsRemoveExpirationDetailsValue == other.sharedLinkSettingsRemoveExpirationDetailsValue) || (this.sharedLinkSettingsRemoveExpirationDetailsValue.equals(other.sharedLinkSettingsRemoveExpirationDetailsValue));
                case SHARED_LINK_SETTINGS_REMOVE_PASSWORD_DETAILS:
                    return (this.sharedLinkSettingsRemovePasswordDetailsValue == other.sharedLinkSettingsRemovePasswordDetailsValue) || (this.sharedLinkSettingsRemovePasswordDetailsValue.equals(other.sharedLinkSettingsRemovePasswordDetailsValue));
                case SHARED_LINK_SHARE_DETAILS:
                    return (this.sharedLinkShareDetailsValue == other.sharedLinkShareDetailsValue) || (this.sharedLinkShareDetailsValue.equals(other.sharedLinkShareDetailsValue));
                case SHARED_LINK_VIEW_DETAILS:
                    return (this.sharedLinkViewDetailsValue == other.sharedLinkViewDetailsValue) || (this.sharedLinkViewDetailsValue.equals(other.sharedLinkViewDetailsValue));
                case SHARED_NOTE_OPENED_DETAILS:
                    return (this.sharedNoteOpenedDetailsValue == other.sharedNoteOpenedDetailsValue) || (this.sharedNoteOpenedDetailsValue.equals(other.sharedNoteOpenedDetailsValue));
                case SHMODEL_DISABLE_DOWNLOADS_DETAILS:
                    return (this.shmodelDisableDownloadsDetailsValue == other.shmodelDisableDownloadsDetailsValue) || (this.shmodelDisableDownloadsDetailsValue.equals(other.shmodelDisableDownloadsDetailsValue));
                case SHMODEL_ENABLE_DOWNLOADS_DETAILS:
                    return (this.shmodelEnableDownloadsDetailsValue == other.shmodelEnableDownloadsDetailsValue) || (this.shmodelEnableDownloadsDetailsValue.equals(other.shmodelEnableDownloadsDetailsValue));
                case SHMODEL_GROUP_SHARE_DETAILS:
                    return (this.shmodelGroupShareDetailsValue == other.shmodelGroupShareDetailsValue) || (this.shmodelGroupShareDetailsValue.equals(other.shmodelGroupShareDetailsValue));
                case SHOWCASE_ACCESS_GRANTED_DETAILS:
                    return (this.showcaseAccessGrantedDetailsValue == other.showcaseAccessGrantedDetailsValue) || (this.showcaseAccessGrantedDetailsValue.equals(other.showcaseAccessGrantedDetailsValue));
                case SHOWCASE_ADD_MEMBER_DETAILS:
                    return (this.showcaseAddMemberDetailsValue == other.showcaseAddMemberDetailsValue) || (this.showcaseAddMemberDetailsValue.equals(other.showcaseAddMemberDetailsValue));
                case SHOWCASE_ARCHIVED_DETAILS:
                    return (this.showcaseArchivedDetailsValue == other.showcaseArchivedDetailsValue) || (this.showcaseArchivedDetailsValue.equals(other.showcaseArchivedDetailsValue));
                case SHOWCASE_CREATED_DETAILS:
                    return (this.showcaseCreatedDetailsValue == other.showcaseCreatedDetailsValue) || (this.showcaseCreatedDetailsValue.equals(other.showcaseCreatedDetailsValue));
                case SHOWCASE_DELETE_COMMENT_DETAILS:
                    return (this.showcaseDeleteCommentDetailsValue == other.showcaseDeleteCommentDetailsValue) || (this.showcaseDeleteCommentDetailsValue.equals(other.showcaseDeleteCommentDetailsValue));
                case SHOWCASE_EDITED_DETAILS:
                    return (this.showcaseEditedDetailsValue == other.showcaseEditedDetailsValue) || (this.showcaseEditedDetailsValue.equals(other.showcaseEditedDetailsValue));
                case SHOWCASE_EDIT_COMMENT_DETAILS:
                    return (this.showcaseEditCommentDetailsValue == other.showcaseEditCommentDetailsValue) || (this.showcaseEditCommentDetailsValue.equals(other.showcaseEditCommentDetailsValue));
                case SHOWCASE_FILE_ADDED_DETAILS:
                    return (this.showcaseFileAddedDetailsValue == other.showcaseFileAddedDetailsValue) || (this.showcaseFileAddedDetailsValue.equals(other.showcaseFileAddedDetailsValue));
                case SHOWCASE_FILE_DOWNLOAD_DETAILS:
                    return (this.showcaseFileDownloadDetailsValue == other.showcaseFileDownloadDetailsValue) || (this.showcaseFileDownloadDetailsValue.equals(other.showcaseFileDownloadDetailsValue));
                case SHOWCASE_FILE_REMOVED_DETAILS:
                    return (this.showcaseFileRemovedDetailsValue == other.showcaseFileRemovedDetailsValue) || (this.showcaseFileRemovedDetailsValue.equals(other.showcaseFileRemovedDetailsValue));
                case SHOWCASE_FILE_VIEW_DETAILS:
                    return (this.showcaseFileViewDetailsValue == other.showcaseFileViewDetailsValue) || (this.showcaseFileViewDetailsValue.equals(other.showcaseFileViewDetailsValue));
                case SHOWCASE_PERMANENTLY_DELETED_DETAILS:
                    return (this.showcasePermanentlyDeletedDetailsValue == other.showcasePermanentlyDeletedDetailsValue) || (this.showcasePermanentlyDeletedDetailsValue.equals(other.showcasePermanentlyDeletedDetailsValue));
                case SHOWCASE_POST_COMMENT_DETAILS:
                    return (this.showcasePostCommentDetailsValue == other.showcasePostCommentDetailsValue) || (this.showcasePostCommentDetailsValue.equals(other.showcasePostCommentDetailsValue));
                case SHOWCASE_REMOVE_MEMBER_DETAILS:
                    return (this.showcaseRemoveMemberDetailsValue == other.showcaseRemoveMemberDetailsValue) || (this.showcaseRemoveMemberDetailsValue.equals(other.showcaseRemoveMemberDetailsValue));
                case SHOWCASE_RENAMED_DETAILS:
                    return (this.showcaseRenamedDetailsValue == other.showcaseRenamedDetailsValue) || (this.showcaseRenamedDetailsValue.equals(other.showcaseRenamedDetailsValue));
                case SHOWCASE_REQUEST_ACCESS_DETAILS:
                    return (this.showcaseRequestAccessDetailsValue == other.showcaseRequestAccessDetailsValue) || (this.showcaseRequestAccessDetailsValue.equals(other.showcaseRequestAccessDetailsValue));
                case SHOWCASE_RESOLVE_COMMENT_DETAILS:
                    return (this.showcaseResolveCommentDetailsValue == other.showcaseResolveCommentDetailsValue) || (this.showcaseResolveCommentDetailsValue.equals(other.showcaseResolveCommentDetailsValue));
                case SHOWCASE_RESTORED_DETAILS:
                    return (this.showcaseRestoredDetailsValue == other.showcaseRestoredDetailsValue) || (this.showcaseRestoredDetailsValue.equals(other.showcaseRestoredDetailsValue));
                case SHOWCASE_TRASHED_DETAILS:
                    return (this.showcaseTrashedDetailsValue == other.showcaseTrashedDetailsValue) || (this.showcaseTrashedDetailsValue.equals(other.showcaseTrashedDetailsValue));
                case SHOWCASE_TRASHED_DEPRECATED_DETAILS:
                    return (this.showcaseTrashedDeprecatedDetailsValue == other.showcaseTrashedDeprecatedDetailsValue) || (this.showcaseTrashedDeprecatedDetailsValue.equals(other.showcaseTrashedDeprecatedDetailsValue));
                case SHOWCASE_UNRESOLVE_COMMENT_DETAILS:
                    return (this.showcaseUnresolveCommentDetailsValue == other.showcaseUnresolveCommentDetailsValue) || (this.showcaseUnresolveCommentDetailsValue.equals(other.showcaseUnresolveCommentDetailsValue));
                case SHOWCASE_UNTRASHED_DETAILS:
                    return (this.showcaseUntrashedDetailsValue == other.showcaseUntrashedDetailsValue) || (this.showcaseUntrashedDetailsValue.equals(other.showcaseUntrashedDetailsValue));
                case SHOWCASE_UNTRASHED_DEPRECATED_DETAILS:
                    return (this.showcaseUntrashedDeprecatedDetailsValue == other.showcaseUntrashedDeprecatedDetailsValue) || (this.showcaseUntrashedDeprecatedDetailsValue.equals(other.showcaseUntrashedDeprecatedDetailsValue));
                case SHOWCASE_VIEW_DETAILS:
                    return (this.showcaseViewDetailsValue == other.showcaseViewDetailsValue) || (this.showcaseViewDetailsValue.equals(other.showcaseViewDetailsValue));
                case SSO_ADD_CERT_DETAILS:
                    return (this.ssoAddCertDetailsValue == other.ssoAddCertDetailsValue) || (this.ssoAddCertDetailsValue.equals(other.ssoAddCertDetailsValue));
                case SSO_ADD_LOGIN_URL_DETAILS:
                    return (this.ssoAddLoginUrlDetailsValue == other.ssoAddLoginUrlDetailsValue) || (this.ssoAddLoginUrlDetailsValue.equals(other.ssoAddLoginUrlDetailsValue));
                case SSO_ADD_LOGOUT_URL_DETAILS:
                    return (this.ssoAddLogoutUrlDetailsValue == other.ssoAddLogoutUrlDetailsValue) || (this.ssoAddLogoutUrlDetailsValue.equals(other.ssoAddLogoutUrlDetailsValue));
                case SSO_CHANGE_CERT_DETAILS:
                    return (this.ssoChangeCertDetailsValue == other.ssoChangeCertDetailsValue) || (this.ssoChangeCertDetailsValue.equals(other.ssoChangeCertDetailsValue));
                case SSO_CHANGE_LOGIN_URL_DETAILS:
                    return (this.ssoChangeLoginUrlDetailsValue == other.ssoChangeLoginUrlDetailsValue) || (this.ssoChangeLoginUrlDetailsValue.equals(other.ssoChangeLoginUrlDetailsValue));
                case SSO_CHANGE_LOGOUT_URL_DETAILS:
                    return (this.ssoChangeLogoutUrlDetailsValue == other.ssoChangeLogoutUrlDetailsValue) || (this.ssoChangeLogoutUrlDetailsValue.equals(other.ssoChangeLogoutUrlDetailsValue));
                case SSO_CHANGE_SAML_IDENTITY_MODE_DETAILS:
                    return (this.ssoChangeSamlIdentityModeDetailsValue == other.ssoChangeSamlIdentityModeDetailsValue) || (this.ssoChangeSamlIdentityModeDetailsValue.equals(other.ssoChangeSamlIdentityModeDetailsValue));
                case SSO_REMOVE_CERT_DETAILS:
                    return (this.ssoRemoveCertDetailsValue == other.ssoRemoveCertDetailsValue) || (this.ssoRemoveCertDetailsValue.equals(other.ssoRemoveCertDetailsValue));
                case SSO_REMOVE_LOGIN_URL_DETAILS:
                    return (this.ssoRemoveLoginUrlDetailsValue == other.ssoRemoveLoginUrlDetailsValue) || (this.ssoRemoveLoginUrlDetailsValue.equals(other.ssoRemoveLoginUrlDetailsValue));
                case SSO_REMOVE_LOGOUT_URL_DETAILS:
                    return (this.ssoRemoveLogoutUrlDetailsValue == other.ssoRemoveLogoutUrlDetailsValue) || (this.ssoRemoveLogoutUrlDetailsValue.equals(other.ssoRemoveLogoutUrlDetailsValue));
                case TEAM_FOLDER_CHANGE_STATUS_DETAILS:
                    return (this.teamFolderChangeStatusDetailsValue == other.teamFolderChangeStatusDetailsValue) || (this.teamFolderChangeStatusDetailsValue.equals(other.teamFolderChangeStatusDetailsValue));
                case TEAM_FOLDER_CREATE_DETAILS:
                    return (this.teamFolderCreateDetailsValue == other.teamFolderCreateDetailsValue) || (this.teamFolderCreateDetailsValue.equals(other.teamFolderCreateDetailsValue));
                case TEAM_FOLDER_DOWNGRADE_DETAILS:
                    return (this.teamFolderDowngradeDetailsValue == other.teamFolderDowngradeDetailsValue) || (this.teamFolderDowngradeDetailsValue.equals(other.teamFolderDowngradeDetailsValue));
                case TEAM_FOLDER_PERMANENTLY_DELETE_DETAILS:
                    return (this.teamFolderPermanentlyDeleteDetailsValue == other.teamFolderPermanentlyDeleteDetailsValue) || (this.teamFolderPermanentlyDeleteDetailsValue.equals(other.teamFolderPermanentlyDeleteDetailsValue));
                case TEAM_FOLDER_RENAME_DETAILS:
                    return (this.teamFolderRenameDetailsValue == other.teamFolderRenameDetailsValue) || (this.teamFolderRenameDetailsValue.equals(other.teamFolderRenameDetailsValue));
                case TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED_DETAILS:
                    return (this.teamSelectiveSyncSettingsChangedDetailsValue == other.teamSelectiveSyncSettingsChangedDetailsValue) || (this.teamSelectiveSyncSettingsChangedDetailsValue.equals(other.teamSelectiveSyncSettingsChangedDetailsValue));
                case ACCOUNT_CAPTURE_CHANGE_POLICY_DETAILS:
                    return (this.accountCaptureChangePolicyDetailsValue == other.accountCaptureChangePolicyDetailsValue) || (this.accountCaptureChangePolicyDetailsValue.equals(other.accountCaptureChangePolicyDetailsValue));
                case ADMIN_EMAIL_REMINDERS_CHANGED_DETAILS:
                    return (this.adminEmailRemindersChangedDetailsValue == other.adminEmailRemindersChangedDetailsValue) || (this.adminEmailRemindersChangedDetailsValue.equals(other.adminEmailRemindersChangedDetailsValue));
                case ALLOW_DOWNLOAD_DISABLED_DETAILS:
                    return (this.allowDownloadDisabledDetailsValue == other.allowDownloadDisabledDetailsValue) || (this.allowDownloadDisabledDetailsValue.equals(other.allowDownloadDisabledDetailsValue));
                case ALLOW_DOWNLOAD_ENABLED_DETAILS:
                    return (this.allowDownloadEnabledDetailsValue == other.allowDownloadEnabledDetailsValue) || (this.allowDownloadEnabledDetailsValue.equals(other.allowDownloadEnabledDetailsValue));
                case APP_PERMISSIONS_CHANGED_DETAILS:
                    return (this.appPermissionsChangedDetailsValue == other.appPermissionsChangedDetailsValue) || (this.appPermissionsChangedDetailsValue.equals(other.appPermissionsChangedDetailsValue));
                case CAMERA_UPLOADS_POLICY_CHANGED_DETAILS:
                    return (this.cameraUploadsPolicyChangedDetailsValue == other.cameraUploadsPolicyChangedDetailsValue) || (this.cameraUploadsPolicyChangedDetailsValue.equals(other.cameraUploadsPolicyChangedDetailsValue));
                case CAPTURE_TRANSCRIPT_POLICY_CHANGED_DETAILS:
                    return (this.captureTranscriptPolicyChangedDetailsValue == other.captureTranscriptPolicyChangedDetailsValue) || (this.captureTranscriptPolicyChangedDetailsValue.equals(other.captureTranscriptPolicyChangedDetailsValue));
                case CLASSIFICATION_CHANGE_POLICY_DETAILS:
                    return (this.classificationChangePolicyDetailsValue == other.classificationChangePolicyDetailsValue) || (this.classificationChangePolicyDetailsValue.equals(other.classificationChangePolicyDetailsValue));
                case COMPUTER_BACKUP_POLICY_CHANGED_DETAILS:
                    return (this.computerBackupPolicyChangedDetailsValue == other.computerBackupPolicyChangedDetailsValue) || (this.computerBackupPolicyChangedDetailsValue.equals(other.computerBackupPolicyChangedDetailsValue));
                case CONTENT_ADMINISTRATION_POLICY_CHANGED_DETAILS:
                    return (this.contentAdministrationPolicyChangedDetailsValue == other.contentAdministrationPolicyChangedDetailsValue) || (this.contentAdministrationPolicyChangedDetailsValue.equals(other.contentAdministrationPolicyChangedDetailsValue));
                case DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY_DETAILS:
                    return (this.dataPlacementRestrictionChangePolicyDetailsValue == other.dataPlacementRestrictionChangePolicyDetailsValue) || (this.dataPlacementRestrictionChangePolicyDetailsValue.equals(other.dataPlacementRestrictionChangePolicyDetailsValue));
                case DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY_DETAILS:
                    return (this.dataPlacementRestrictionSatisfyPolicyDetailsValue == other.dataPlacementRestrictionSatisfyPolicyDetailsValue) || (this.dataPlacementRestrictionSatisfyPolicyDetailsValue.equals(other.dataPlacementRestrictionSatisfyPolicyDetailsValue));
                case DEVICE_APPROVALS_ADD_EXCEPTION_DETAILS:
                    return (this.deviceApprovalsAddExceptionDetailsValue == other.deviceApprovalsAddExceptionDetailsValue) || (this.deviceApprovalsAddExceptionDetailsValue.equals(other.deviceApprovalsAddExceptionDetailsValue));
                case DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY_DETAILS:
                    return (this.deviceApprovalsChangeDesktopPolicyDetailsValue == other.deviceApprovalsChangeDesktopPolicyDetailsValue) || (this.deviceApprovalsChangeDesktopPolicyDetailsValue.equals(other.deviceApprovalsChangeDesktopPolicyDetailsValue));
                case DEVICE_APPROVALS_CHANGE_MOBILE_POLICY_DETAILS:
                    return (this.deviceApprovalsChangeMobilePolicyDetailsValue == other.deviceApprovalsChangeMobilePolicyDetailsValue) || (this.deviceApprovalsChangeMobilePolicyDetailsValue.equals(other.deviceApprovalsChangeMobilePolicyDetailsValue));
                case DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION_DETAILS:
                    return (this.deviceApprovalsChangeOverageActionDetailsValue == other.deviceApprovalsChangeOverageActionDetailsValue) || (this.deviceApprovalsChangeOverageActionDetailsValue.equals(other.deviceApprovalsChangeOverageActionDetailsValue));
                case DEVICE_APPROVALS_CHANGE_UNLINK_ACTION_DETAILS:
                    return (this.deviceApprovalsChangeUnlinkActionDetailsValue == other.deviceApprovalsChangeUnlinkActionDetailsValue) || (this.deviceApprovalsChangeUnlinkActionDetailsValue.equals(other.deviceApprovalsChangeUnlinkActionDetailsValue));
                case DEVICE_APPROVALS_REMOVE_EXCEPTION_DETAILS:
                    return (this.deviceApprovalsRemoveExceptionDetailsValue == other.deviceApprovalsRemoveExceptionDetailsValue) || (this.deviceApprovalsRemoveExceptionDetailsValue.equals(other.deviceApprovalsRemoveExceptionDetailsValue));
                case DIRECTORY_RESTRICTIONS_ADD_MEMBERS_DETAILS:
                    return (this.directoryRestrictionsAddMembersDetailsValue == other.directoryRestrictionsAddMembersDetailsValue) || (this.directoryRestrictionsAddMembersDetailsValue.equals(other.directoryRestrictionsAddMembersDetailsValue));
                case DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS_DETAILS:
                    return (this.directoryRestrictionsRemoveMembersDetailsValue == other.directoryRestrictionsRemoveMembersDetailsValue) || (this.directoryRestrictionsRemoveMembersDetailsValue.equals(other.directoryRestrictionsRemoveMembersDetailsValue));
                case DROPBOX_PASSWORDS_POLICY_CHANGED_DETAILS:
                    return (this.dropboxPasswordsPolicyChangedDetailsValue == other.dropboxPasswordsPolicyChangedDetailsValue) || (this.dropboxPasswordsPolicyChangedDetailsValue.equals(other.dropboxPasswordsPolicyChangedDetailsValue));
                case EMAIL_INGEST_POLICY_CHANGED_DETAILS:
                    return (this.emailIngestPolicyChangedDetailsValue == other.emailIngestPolicyChangedDetailsValue) || (this.emailIngestPolicyChangedDetailsValue.equals(other.emailIngestPolicyChangedDetailsValue));
                case EMM_ADD_EXCEPTION_DETAILS:
                    return (this.emmAddExceptionDetailsValue == other.emmAddExceptionDetailsValue) || (this.emmAddExceptionDetailsValue.equals(other.emmAddExceptionDetailsValue));
                case EMM_CHANGE_POLICY_DETAILS:
                    return (this.emmChangePolicyDetailsValue == other.emmChangePolicyDetailsValue) || (this.emmChangePolicyDetailsValue.equals(other.emmChangePolicyDetailsValue));
                case EMM_REMOVE_EXCEPTION_DETAILS:
                    return (this.emmRemoveExceptionDetailsValue == other.emmRemoveExceptionDetailsValue) || (this.emmRemoveExceptionDetailsValue.equals(other.emmRemoveExceptionDetailsValue));
                case EXTENDED_VERSION_HISTORY_CHANGE_POLICY_DETAILS:
                    return (this.extendedVersionHistoryChangePolicyDetailsValue == other.extendedVersionHistoryChangePolicyDetailsValue) || (this.extendedVersionHistoryChangePolicyDetailsValue.equals(other.extendedVersionHistoryChangePolicyDetailsValue));
                case EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED_DETAILS:
                    return (this.externalDriveBackupPolicyChangedDetailsValue == other.externalDriveBackupPolicyChangedDetailsValue) || (this.externalDriveBackupPolicyChangedDetailsValue.equals(other.externalDriveBackupPolicyChangedDetailsValue));
                case FILE_COMMENTS_CHANGE_POLICY_DETAILS:
                    return (this.fileCommentsChangePolicyDetailsValue == other.fileCommentsChangePolicyDetailsValue) || (this.fileCommentsChangePolicyDetailsValue.equals(other.fileCommentsChangePolicyDetailsValue));
                case FILE_LOCKING_POLICY_CHANGED_DETAILS:
                    return (this.fileLockingPolicyChangedDetailsValue == other.fileLockingPolicyChangedDetailsValue) || (this.fileLockingPolicyChangedDetailsValue.equals(other.fileLockingPolicyChangedDetailsValue));
                case FILE_PROVIDER_MIGRATION_POLICY_CHANGED_DETAILS:
                    return (this.fileProviderMigrationPolicyChangedDetailsValue == other.fileProviderMigrationPolicyChangedDetailsValue) || (this.fileProviderMigrationPolicyChangedDetailsValue.equals(other.fileProviderMigrationPolicyChangedDetailsValue));
                case FILE_REQUESTS_CHANGE_POLICY_DETAILS:
                    return (this.fileRequestsChangePolicyDetailsValue == other.fileRequestsChangePolicyDetailsValue) || (this.fileRequestsChangePolicyDetailsValue.equals(other.fileRequestsChangePolicyDetailsValue));
                case FILE_REQUESTS_EMAILS_ENABLED_DETAILS:
                    return (this.fileRequestsEmailsEnabledDetailsValue == other.fileRequestsEmailsEnabledDetailsValue) || (this.fileRequestsEmailsEnabledDetailsValue.equals(other.fileRequestsEmailsEnabledDetailsValue));
                case FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY_DETAILS:
                    return (this.fileRequestsEmailsRestrictedToTeamOnlyDetailsValue == other.fileRequestsEmailsRestrictedToTeamOnlyDetailsValue) || (this.fileRequestsEmailsRestrictedToTeamOnlyDetailsValue.equals(other.fileRequestsEmailsRestrictedToTeamOnlyDetailsValue));
                case FILE_TRANSFERS_POLICY_CHANGED_DETAILS:
                    return (this.fileTransfersPolicyChangedDetailsValue == other.fileTransfersPolicyChangedDetailsValue) || (this.fileTransfersPolicyChangedDetailsValue.equals(other.fileTransfersPolicyChangedDetailsValue));
                case GOOGLE_SSO_CHANGE_POLICY_DETAILS:
                    return (this.googleSsoChangePolicyDetailsValue == other.googleSsoChangePolicyDetailsValue) || (this.googleSsoChangePolicyDetailsValue.equals(other.googleSsoChangePolicyDetailsValue));
                case GROUP_USER_MANAGEMENT_CHANGE_POLICY_DETAILS:
                    return (this.groupUserManagementChangePolicyDetailsValue == other.groupUserManagementChangePolicyDetailsValue) || (this.groupUserManagementChangePolicyDetailsValue.equals(other.groupUserManagementChangePolicyDetailsValue));
                case INTEGRATION_POLICY_CHANGED_DETAILS:
                    return (this.integrationPolicyChangedDetailsValue == other.integrationPolicyChangedDetailsValue) || (this.integrationPolicyChangedDetailsValue.equals(other.integrationPolicyChangedDetailsValue));
                case INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED_DETAILS:
                    return (this.inviteAcceptanceEmailPolicyChangedDetailsValue == other.inviteAcceptanceEmailPolicyChangedDetailsValue) || (this.inviteAcceptanceEmailPolicyChangedDetailsValue.equals(other.inviteAcceptanceEmailPolicyChangedDetailsValue));
                case MEMBER_REQUESTS_CHANGE_POLICY_DETAILS:
                    return (this.memberRequestsChangePolicyDetailsValue == other.memberRequestsChangePolicyDetailsValue) || (this.memberRequestsChangePolicyDetailsValue.equals(other.memberRequestsChangePolicyDetailsValue));
                case MEMBER_SEND_INVITE_POLICY_CHANGED_DETAILS:
                    return (this.memberSendInvitePolicyChangedDetailsValue == other.memberSendInvitePolicyChangedDetailsValue) || (this.memberSendInvitePolicyChangedDetailsValue.equals(other.memberSendInvitePolicyChangedDetailsValue));
                case MEMBER_SPACE_LIMITS_ADD_EXCEPTION_DETAILS:
                    return (this.memberSpaceLimitsAddExceptionDetailsValue == other.memberSpaceLimitsAddExceptionDetailsValue) || (this.memberSpaceLimitsAddExceptionDetailsValue.equals(other.memberSpaceLimitsAddExceptionDetailsValue));
                case MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY_DETAILS:
                    return (this.memberSpaceLimitsChangeCapsTypePolicyDetailsValue == other.memberSpaceLimitsChangeCapsTypePolicyDetailsValue) || (this.memberSpaceLimitsChangeCapsTypePolicyDetailsValue.equals(other.memberSpaceLimitsChangeCapsTypePolicyDetailsValue));
                case MEMBER_SPACE_LIMITS_CHANGE_POLICY_DETAILS:
                    return (this.memberSpaceLimitsChangePolicyDetailsValue == other.memberSpaceLimitsChangePolicyDetailsValue) || (this.memberSpaceLimitsChangePolicyDetailsValue.equals(other.memberSpaceLimitsChangePolicyDetailsValue));
                case MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION_DETAILS:
                    return (this.memberSpaceLimitsRemoveExceptionDetailsValue == other.memberSpaceLimitsRemoveExceptionDetailsValue) || (this.memberSpaceLimitsRemoveExceptionDetailsValue.equals(other.memberSpaceLimitsRemoveExceptionDetailsValue));
                case MEMBER_SUGGESTIONS_CHANGE_POLICY_DETAILS:
                    return (this.memberSuggestionsChangePolicyDetailsValue == other.memberSuggestionsChangePolicyDetailsValue) || (this.memberSuggestionsChangePolicyDetailsValue.equals(other.memberSuggestionsChangePolicyDetailsValue));
                case MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY_DETAILS:
                    return (this.microsoftOfficeAddinChangePolicyDetailsValue == other.microsoftOfficeAddinChangePolicyDetailsValue) || (this.microsoftOfficeAddinChangePolicyDetailsValue.equals(other.microsoftOfficeAddinChangePolicyDetailsValue));
                case NETWORK_CONTROL_CHANGE_POLICY_DETAILS:
                    return (this.networkControlChangePolicyDetailsValue == other.networkControlChangePolicyDetailsValue) || (this.networkControlChangePolicyDetailsValue.equals(other.networkControlChangePolicyDetailsValue));
                case PAPER_CHANGE_DEPLOYMENT_POLICY_DETAILS:
                    return (this.paperChangeDeploymentPolicyDetailsValue == other.paperChangeDeploymentPolicyDetailsValue) || (this.paperChangeDeploymentPolicyDetailsValue.equals(other.paperChangeDeploymentPolicyDetailsValue));
                case PAPER_CHANGE_MEMBER_LINK_POLICY_DETAILS:
                    return (this.paperChangeMemberLinkPolicyDetailsValue == other.paperChangeMemberLinkPolicyDetailsValue) || (this.paperChangeMemberLinkPolicyDetailsValue.equals(other.paperChangeMemberLinkPolicyDetailsValue));
                case PAPER_CHANGE_MEMBER_POLICY_DETAILS:
                    return (this.paperChangeMemberPolicyDetailsValue == other.paperChangeMemberPolicyDetailsValue) || (this.paperChangeMemberPolicyDetailsValue.equals(other.paperChangeMemberPolicyDetailsValue));
                case PAPER_CHANGE_POLICY_DETAILS:
                    return (this.paperChangePolicyDetailsValue == other.paperChangePolicyDetailsValue) || (this.paperChangePolicyDetailsValue.equals(other.paperChangePolicyDetailsValue));
                case PAPER_DEFAULT_FOLDER_POLICY_CHANGED_DETAILS:
                    return (this.paperDefaultFolderPolicyChangedDetailsValue == other.paperDefaultFolderPolicyChangedDetailsValue) || (this.paperDefaultFolderPolicyChangedDetailsValue.equals(other.paperDefaultFolderPolicyChangedDetailsValue));
                case PAPER_DESKTOP_POLICY_CHANGED_DETAILS:
                    return (this.paperDesktopPolicyChangedDetailsValue == other.paperDesktopPolicyChangedDetailsValue) || (this.paperDesktopPolicyChangedDetailsValue.equals(other.paperDesktopPolicyChangedDetailsValue));
                case PAPER_ENABLED_USERS_GROUP_ADDITION_DETAILS:
                    return (this.paperEnabledUsersGroupAdditionDetailsValue == other.paperEnabledUsersGroupAdditionDetailsValue) || (this.paperEnabledUsersGroupAdditionDetailsValue.equals(other.paperEnabledUsersGroupAdditionDetailsValue));
                case PAPER_ENABLED_USERS_GROUP_REMOVAL_DETAILS:
                    return (this.paperEnabledUsersGroupRemovalDetailsValue == other.paperEnabledUsersGroupRemovalDetailsValue) || (this.paperEnabledUsersGroupRemovalDetailsValue.equals(other.paperEnabledUsersGroupRemovalDetailsValue));
                case PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY_DETAILS:
                    return (this.passwordStrengthRequirementsChangePolicyDetailsValue == other.passwordStrengthRequirementsChangePolicyDetailsValue) || (this.passwordStrengthRequirementsChangePolicyDetailsValue.equals(other.passwordStrengthRequirementsChangePolicyDetailsValue));
                case PERMANENT_DELETE_CHANGE_POLICY_DETAILS:
                    return (this.permanentDeleteChangePolicyDetailsValue == other.permanentDeleteChangePolicyDetailsValue) || (this.permanentDeleteChangePolicyDetailsValue.equals(other.permanentDeleteChangePolicyDetailsValue));
                case RESELLER_SUPPORT_CHANGE_POLICY_DETAILS:
                    return (this.resellerSupportChangePolicyDetailsValue == other.resellerSupportChangePolicyDetailsValue) || (this.resellerSupportChangePolicyDetailsValue.equals(other.resellerSupportChangePolicyDetailsValue));
                case REWIND_POLICY_CHANGED_DETAILS:
                    return (this.rewindPolicyChangedDetailsValue == other.rewindPolicyChangedDetailsValue) || (this.rewindPolicyChangedDetailsValue.equals(other.rewindPolicyChangedDetailsValue));
                case SEND_FOR_SIGNATURE_POLICY_CHANGED_DETAILS:
                    return (this.sendForSignaturePolicyChangedDetailsValue == other.sendForSignaturePolicyChangedDetailsValue) || (this.sendForSignaturePolicyChangedDetailsValue.equals(other.sendForSignaturePolicyChangedDetailsValue));
                case SHARING_CHANGE_FOLDER_JOIN_POLICY_DETAILS:
                    return (this.sharingChangeFolderJoinPolicyDetailsValue == other.sharingChangeFolderJoinPolicyDetailsValue) || (this.sharingChangeFolderJoinPolicyDetailsValue.equals(other.sharingChangeFolderJoinPolicyDetailsValue));
                case SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY_DETAILS:
                    return (this.sharingChangeLinkAllowChangeExpirationPolicyDetailsValue == other.sharingChangeLinkAllowChangeExpirationPolicyDetailsValue) || (this.sharingChangeLinkAllowChangeExpirationPolicyDetailsValue.equals(other.sharingChangeLinkAllowChangeExpirationPolicyDetailsValue));
                case SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY_DETAILS:
                    return (this.sharingChangeLinkDefaultExpirationPolicyDetailsValue == other.sharingChangeLinkDefaultExpirationPolicyDetailsValue) || (this.sharingChangeLinkDefaultExpirationPolicyDetailsValue.equals(other.sharingChangeLinkDefaultExpirationPolicyDetailsValue));
                case SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY_DETAILS:
                    return (this.sharingChangeLinkEnforcePasswordPolicyDetailsValue == other.sharingChangeLinkEnforcePasswordPolicyDetailsValue) || (this.sharingChangeLinkEnforcePasswordPolicyDetailsValue.equals(other.sharingChangeLinkEnforcePasswordPolicyDetailsValue));
                case SHARING_CHANGE_LINK_POLICY_DETAILS:
                    return (this.sharingChangeLinkPolicyDetailsValue == other.sharingChangeLinkPolicyDetailsValue) || (this.sharingChangeLinkPolicyDetailsValue.equals(other.sharingChangeLinkPolicyDetailsValue));
                case SHARING_CHANGE_MEMBER_POLICY_DETAILS:
                    return (this.sharingChangeMemberPolicyDetailsValue == other.sharingChangeMemberPolicyDetailsValue) || (this.sharingChangeMemberPolicyDetailsValue.equals(other.sharingChangeMemberPolicyDetailsValue));
                case SHOWCASE_CHANGE_DOWNLOAD_POLICY_DETAILS:
                    return (this.showcaseChangeDownloadPolicyDetailsValue == other.showcaseChangeDownloadPolicyDetailsValue) || (this.showcaseChangeDownloadPolicyDetailsValue.equals(other.showcaseChangeDownloadPolicyDetailsValue));
                case SHOWCASE_CHANGE_ENABLED_POLICY_DETAILS:
                    return (this.showcaseChangeEnabledPolicyDetailsValue == other.showcaseChangeEnabledPolicyDetailsValue) || (this.showcaseChangeEnabledPolicyDetailsValue.equals(other.showcaseChangeEnabledPolicyDetailsValue));
                case SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY_DETAILS:
                    return (this.showcaseChangeExternalSharingPolicyDetailsValue == other.showcaseChangeExternalSharingPolicyDetailsValue) || (this.showcaseChangeExternalSharingPolicyDetailsValue.equals(other.showcaseChangeExternalSharingPolicyDetailsValue));
                case SMARTER_SMART_SYNC_POLICY_CHANGED_DETAILS:
                    return (this.smarterSmartSyncPolicyChangedDetailsValue == other.smarterSmartSyncPolicyChangedDetailsValue) || (this.smarterSmartSyncPolicyChangedDetailsValue.equals(other.smarterSmartSyncPolicyChangedDetailsValue));
                case SMART_SYNC_CHANGE_POLICY_DETAILS:
                    return (this.smartSyncChangePolicyDetailsValue == other.smartSyncChangePolicyDetailsValue) || (this.smartSyncChangePolicyDetailsValue.equals(other.smartSyncChangePolicyDetailsValue));
                case SMART_SYNC_NOT_OPT_OUT_DETAILS:
                    return (this.smartSyncNotOptOutDetailsValue == other.smartSyncNotOptOutDetailsValue) || (this.smartSyncNotOptOutDetailsValue.equals(other.smartSyncNotOptOutDetailsValue));
                case SMART_SYNC_OPT_OUT_DETAILS:
                    return (this.smartSyncOptOutDetailsValue == other.smartSyncOptOutDetailsValue) || (this.smartSyncOptOutDetailsValue.equals(other.smartSyncOptOutDetailsValue));
                case SSO_CHANGE_POLICY_DETAILS:
                    return (this.ssoChangePolicyDetailsValue == other.ssoChangePolicyDetailsValue) || (this.ssoChangePolicyDetailsValue.equals(other.ssoChangePolicyDetailsValue));
                case TEAM_BRANDING_POLICY_CHANGED_DETAILS:
                    return (this.teamBrandingPolicyChangedDetailsValue == other.teamBrandingPolicyChangedDetailsValue) || (this.teamBrandingPolicyChangedDetailsValue.equals(other.teamBrandingPolicyChangedDetailsValue));
                case TEAM_EXTENSIONS_POLICY_CHANGED_DETAILS:
                    return (this.teamExtensionsPolicyChangedDetailsValue == other.teamExtensionsPolicyChangedDetailsValue) || (this.teamExtensionsPolicyChangedDetailsValue.equals(other.teamExtensionsPolicyChangedDetailsValue));
                case TEAM_SELECTIVE_SYNC_POLICY_CHANGED_DETAILS:
                    return (this.teamSelectiveSyncPolicyChangedDetailsValue == other.teamSelectiveSyncPolicyChangedDetailsValue) || (this.teamSelectiveSyncPolicyChangedDetailsValue.equals(other.teamSelectiveSyncPolicyChangedDetailsValue));
                case TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED_DETAILS:
                    return (this.teamSharingWhitelistSubjectsChangedDetailsValue == other.teamSharingWhitelistSubjectsChangedDetailsValue) || (this.teamSharingWhitelistSubjectsChangedDetailsValue.equals(other.teamSharingWhitelistSubjectsChangedDetailsValue));
                case TFA_ADD_EXCEPTION_DETAILS:
                    return (this.tfaAddExceptionDetailsValue == other.tfaAddExceptionDetailsValue) || (this.tfaAddExceptionDetailsValue.equals(other.tfaAddExceptionDetailsValue));
                case TFA_CHANGE_POLICY_DETAILS:
                    return (this.tfaChangePolicyDetailsValue == other.tfaChangePolicyDetailsValue) || (this.tfaChangePolicyDetailsValue.equals(other.tfaChangePolicyDetailsValue));
                case TFA_REMOVE_EXCEPTION_DETAILS:
                    return (this.tfaRemoveExceptionDetailsValue == other.tfaRemoveExceptionDetailsValue) || (this.tfaRemoveExceptionDetailsValue.equals(other.tfaRemoveExceptionDetailsValue));
                case TWO_ACCOUNT_CHANGE_POLICY_DETAILS:
                    return (this.twoAccountChangePolicyDetailsValue == other.twoAccountChangePolicyDetailsValue) || (this.twoAccountChangePolicyDetailsValue.equals(other.twoAccountChangePolicyDetailsValue));
                case VIEWER_INFO_POLICY_CHANGED_DETAILS:
                    return (this.viewerInfoPolicyChangedDetailsValue == other.viewerInfoPolicyChangedDetailsValue) || (this.viewerInfoPolicyChangedDetailsValue.equals(other.viewerInfoPolicyChangedDetailsValue));
                case WATERMARKING_POLICY_CHANGED_DETAILS:
                    return (this.watermarkingPolicyChangedDetailsValue == other.watermarkingPolicyChangedDetailsValue) || (this.watermarkingPolicyChangedDetailsValue.equals(other.watermarkingPolicyChangedDetailsValue));
                case WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT_DETAILS:
                    return (this.webSessionsChangeActiveSessionLimitDetailsValue == other.webSessionsChangeActiveSessionLimitDetailsValue) || (this.webSessionsChangeActiveSessionLimitDetailsValue.equals(other.webSessionsChangeActiveSessionLimitDetailsValue));
                case WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY_DETAILS:
                    return (this.webSessionsChangeFixedLengthPolicyDetailsValue == other.webSessionsChangeFixedLengthPolicyDetailsValue) || (this.webSessionsChangeFixedLengthPolicyDetailsValue.equals(other.webSessionsChangeFixedLengthPolicyDetailsValue));
                case WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY_DETAILS:
                    return (this.webSessionsChangeIdleLengthPolicyDetailsValue == other.webSessionsChangeIdleLengthPolicyDetailsValue) || (this.webSessionsChangeIdleLengthPolicyDetailsValue.equals(other.webSessionsChangeIdleLengthPolicyDetailsValue));
                case DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL_DETAILS:
                    return (this.dataResidencyMigrationRequestSuccessfulDetailsValue == other.dataResidencyMigrationRequestSuccessfulDetailsValue) || (this.dataResidencyMigrationRequestSuccessfulDetailsValue.equals(other.dataResidencyMigrationRequestSuccessfulDetailsValue));
                case DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL_DETAILS:
                    return (this.dataResidencyMigrationRequestUnsuccessfulDetailsValue == other.dataResidencyMigrationRequestUnsuccessfulDetailsValue) || (this.dataResidencyMigrationRequestUnsuccessfulDetailsValue.equals(other.dataResidencyMigrationRequestUnsuccessfulDetailsValue));
                case TEAM_MERGE_FROM_DETAILS:
                    return (this.teamMergeFromDetailsValue == other.teamMergeFromDetailsValue) || (this.teamMergeFromDetailsValue.equals(other.teamMergeFromDetailsValue));
                case TEAM_MERGE_TO_DETAILS:
                    return (this.teamMergeToDetailsValue == other.teamMergeToDetailsValue) || (this.teamMergeToDetailsValue.equals(other.teamMergeToDetailsValue));
                case TEAM_PROFILE_ADD_BACKGROUND_DETAILS:
                    return (this.teamProfileAddBackgroundDetailsValue == other.teamProfileAddBackgroundDetailsValue) || (this.teamProfileAddBackgroundDetailsValue.equals(other.teamProfileAddBackgroundDetailsValue));
                case TEAM_PROFILE_ADD_LOGO_DETAILS:
                    return (this.teamProfileAddLogoDetailsValue == other.teamProfileAddLogoDetailsValue) || (this.teamProfileAddLogoDetailsValue.equals(other.teamProfileAddLogoDetailsValue));
                case TEAM_PROFILE_CHANGE_BACKGROUND_DETAILS:
                    return (this.teamProfileChangeBackgroundDetailsValue == other.teamProfileChangeBackgroundDetailsValue) || (this.teamProfileChangeBackgroundDetailsValue.equals(other.teamProfileChangeBackgroundDetailsValue));
                case TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE_DETAILS:
                    return (this.teamProfileChangeDefaultLanguageDetailsValue == other.teamProfileChangeDefaultLanguageDetailsValue) || (this.teamProfileChangeDefaultLanguageDetailsValue.equals(other.teamProfileChangeDefaultLanguageDetailsValue));
                case TEAM_PROFILE_CHANGE_LOGO_DETAILS:
                    return (this.teamProfileChangeLogoDetailsValue == other.teamProfileChangeLogoDetailsValue) || (this.teamProfileChangeLogoDetailsValue.equals(other.teamProfileChangeLogoDetailsValue));
                case TEAM_PROFILE_CHANGE_NAME_DETAILS:
                    return (this.teamProfileChangeNameDetailsValue == other.teamProfileChangeNameDetailsValue) || (this.teamProfileChangeNameDetailsValue.equals(other.teamProfileChangeNameDetailsValue));
                case TEAM_PROFILE_REMOVE_BACKGROUND_DETAILS:
                    return (this.teamProfileRemoveBackgroundDetailsValue == other.teamProfileRemoveBackgroundDetailsValue) || (this.teamProfileRemoveBackgroundDetailsValue.equals(other.teamProfileRemoveBackgroundDetailsValue));
                case TEAM_PROFILE_REMOVE_LOGO_DETAILS:
                    return (this.teamProfileRemoveLogoDetailsValue == other.teamProfileRemoveLogoDetailsValue) || (this.teamProfileRemoveLogoDetailsValue.equals(other.teamProfileRemoveLogoDetailsValue));
                case TFA_ADD_BACKUP_PHONE_DETAILS:
                    return (this.tfaAddBackupPhoneDetailsValue == other.tfaAddBackupPhoneDetailsValue) || (this.tfaAddBackupPhoneDetailsValue.equals(other.tfaAddBackupPhoneDetailsValue));
                case TFA_ADD_SECURITY_KEY_DETAILS:
                    return (this.tfaAddSecurityKeyDetailsValue == other.tfaAddSecurityKeyDetailsValue) || (this.tfaAddSecurityKeyDetailsValue.equals(other.tfaAddSecurityKeyDetailsValue));
                case TFA_CHANGE_BACKUP_PHONE_DETAILS:
                    return (this.tfaChangeBackupPhoneDetailsValue == other.tfaChangeBackupPhoneDetailsValue) || (this.tfaChangeBackupPhoneDetailsValue.equals(other.tfaChangeBackupPhoneDetailsValue));
                case TFA_CHANGE_STATUS_DETAILS:
                    return (this.tfaChangeStatusDetailsValue == other.tfaChangeStatusDetailsValue) || (this.tfaChangeStatusDetailsValue.equals(other.tfaChangeStatusDetailsValue));
                case TFA_REMOVE_BACKUP_PHONE_DETAILS:
                    return (this.tfaRemoveBackupPhoneDetailsValue == other.tfaRemoveBackupPhoneDetailsValue) || (this.tfaRemoveBackupPhoneDetailsValue.equals(other.tfaRemoveBackupPhoneDetailsValue));
                case TFA_REMOVE_SECURITY_KEY_DETAILS:
                    return (this.tfaRemoveSecurityKeyDetailsValue == other.tfaRemoveSecurityKeyDetailsValue) || (this.tfaRemoveSecurityKeyDetailsValue.equals(other.tfaRemoveSecurityKeyDetailsValue));
                case TFA_RESET_DETAILS:
                    return (this.tfaResetDetailsValue == other.tfaResetDetailsValue) || (this.tfaResetDetailsValue.equals(other.tfaResetDetailsValue));
                case CHANGED_ENTERPRISE_ADMIN_ROLE_DETAILS:
                    return (this.changedEnterpriseAdminRoleDetailsValue == other.changedEnterpriseAdminRoleDetailsValue) || (this.changedEnterpriseAdminRoleDetailsValue.equals(other.changedEnterpriseAdminRoleDetailsValue));
                case CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS_DETAILS:
                    return (this.changedEnterpriseConnectedTeamStatusDetailsValue == other.changedEnterpriseConnectedTeamStatusDetailsValue) || (this.changedEnterpriseConnectedTeamStatusDetailsValue.equals(other.changedEnterpriseConnectedTeamStatusDetailsValue));
                case ENDED_ENTERPRISE_ADMIN_SESSION_DETAILS:
                    return (this.endedEnterpriseAdminSessionDetailsValue == other.endedEnterpriseAdminSessionDetailsValue) || (this.endedEnterpriseAdminSessionDetailsValue.equals(other.endedEnterpriseAdminSessionDetailsValue));
                case ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED_DETAILS:
                    return (this.endedEnterpriseAdminSessionDeprecatedDetailsValue == other.endedEnterpriseAdminSessionDeprecatedDetailsValue) || (this.endedEnterpriseAdminSessionDeprecatedDetailsValue.equals(other.endedEnterpriseAdminSessionDeprecatedDetailsValue));
                case ENTERPRISE_SETTINGS_LOCKING_DETAILS:
                    return (this.enterpriseSettingsLockingDetailsValue == other.enterpriseSettingsLockingDetailsValue) || (this.enterpriseSettingsLockingDetailsValue.equals(other.enterpriseSettingsLockingDetailsValue));
                case GUEST_ADMIN_CHANGE_STATUS_DETAILS:
                    return (this.guestAdminChangeStatusDetailsValue == other.guestAdminChangeStatusDetailsValue) || (this.guestAdminChangeStatusDetailsValue.equals(other.guestAdminChangeStatusDetailsValue));
                case STARTED_ENTERPRISE_ADMIN_SESSION_DETAILS:
                    return (this.startedEnterpriseAdminSessionDetailsValue == other.startedEnterpriseAdminSessionDetailsValue) || (this.startedEnterpriseAdminSessionDetailsValue.equals(other.startedEnterpriseAdminSessionDetailsValue));
                case TEAM_MERGE_REQUEST_ACCEPTED_DETAILS:
                    return (this.teamMergeRequestAcceptedDetailsValue == other.teamMergeRequestAcceptedDetailsValue) || (this.teamMergeRequestAcceptedDetailsValue.equals(other.teamMergeRequestAcceptedDetailsValue));
                case TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM_DETAILS:
                    return (this.teamMergeRequestAcceptedShownToPrimaryTeamDetailsValue == other.teamMergeRequestAcceptedShownToPrimaryTeamDetailsValue) || (this.teamMergeRequestAcceptedShownToPrimaryTeamDetailsValue.equals(other.teamMergeRequestAcceptedShownToPrimaryTeamDetailsValue));
                case TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM_DETAILS:
                    return (this.teamMergeRequestAcceptedShownToSecondaryTeamDetailsValue == other.teamMergeRequestAcceptedShownToSecondaryTeamDetailsValue) || (this.teamMergeRequestAcceptedShownToSecondaryTeamDetailsValue.equals(other.teamMergeRequestAcceptedShownToSecondaryTeamDetailsValue));
                case TEAM_MERGE_REQUEST_AUTO_CANCELED_DETAILS:
                    return (this.teamMergeRequestAutoCanceledDetailsValue == other.teamMergeRequestAutoCanceledDetailsValue) || (this.teamMergeRequestAutoCanceledDetailsValue.equals(other.teamMergeRequestAutoCanceledDetailsValue));
                case TEAM_MERGE_REQUEST_CANCELED_DETAILS:
                    return (this.teamMergeRequestCanceledDetailsValue == other.teamMergeRequestCanceledDetailsValue) || (this.teamMergeRequestCanceledDetailsValue.equals(other.teamMergeRequestCanceledDetailsValue));
                case TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM_DETAILS:
                    return (this.teamMergeRequestCanceledShownToPrimaryTeamDetailsValue == other.teamMergeRequestCanceledShownToPrimaryTeamDetailsValue) || (this.teamMergeRequestCanceledShownToPrimaryTeamDetailsValue.equals(other.teamMergeRequestCanceledShownToPrimaryTeamDetailsValue));
                case TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM_DETAILS:
                    return (this.teamMergeRequestCanceledShownToSecondaryTeamDetailsValue == other.teamMergeRequestCanceledShownToSecondaryTeamDetailsValue) || (this.teamMergeRequestCanceledShownToSecondaryTeamDetailsValue.equals(other.teamMergeRequestCanceledShownToSecondaryTeamDetailsValue));
                case TEAM_MERGE_REQUEST_EXPIRED_DETAILS:
                    return (this.teamMergeRequestExpiredDetailsValue == other.teamMergeRequestExpiredDetailsValue) || (this.teamMergeRequestExpiredDetailsValue.equals(other.teamMergeRequestExpiredDetailsValue));
                case TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM_DETAILS:
                    return (this.teamMergeRequestExpiredShownToPrimaryTeamDetailsValue == other.teamMergeRequestExpiredShownToPrimaryTeamDetailsValue) || (this.teamMergeRequestExpiredShownToPrimaryTeamDetailsValue.equals(other.teamMergeRequestExpiredShownToPrimaryTeamDetailsValue));
                case TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM_DETAILS:
                    return (this.teamMergeRequestExpiredShownToSecondaryTeamDetailsValue == other.teamMergeRequestExpiredShownToSecondaryTeamDetailsValue) || (this.teamMergeRequestExpiredShownToSecondaryTeamDetailsValue.equals(other.teamMergeRequestExpiredShownToSecondaryTeamDetailsValue));
                case TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM_DETAILS:
                    return (this.teamMergeRequestRejectedShownToPrimaryTeamDetailsValue == other.teamMergeRequestRejectedShownToPrimaryTeamDetailsValue) || (this.teamMergeRequestRejectedShownToPrimaryTeamDetailsValue.equals(other.teamMergeRequestRejectedShownToPrimaryTeamDetailsValue));
                case TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM_DETAILS:
                    return (this.teamMergeRequestRejectedShownToSecondaryTeamDetailsValue == other.teamMergeRequestRejectedShownToSecondaryTeamDetailsValue) || (this.teamMergeRequestRejectedShownToSecondaryTeamDetailsValue.equals(other.teamMergeRequestRejectedShownToSecondaryTeamDetailsValue));
                case TEAM_MERGE_REQUEST_REMINDER_DETAILS:
                    return (this.teamMergeRequestReminderDetailsValue == other.teamMergeRequestReminderDetailsValue) || (this.teamMergeRequestReminderDetailsValue.equals(other.teamMergeRequestReminderDetailsValue));
                case TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM_DETAILS:
                    return (this.teamMergeRequestReminderShownToPrimaryTeamDetailsValue == other.teamMergeRequestReminderShownToPrimaryTeamDetailsValue) || (this.teamMergeRequestReminderShownToPrimaryTeamDetailsValue.equals(other.teamMergeRequestReminderShownToPrimaryTeamDetailsValue));
                case TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM_DETAILS:
                    return (this.teamMergeRequestReminderShownToSecondaryTeamDetailsValue == other.teamMergeRequestReminderShownToSecondaryTeamDetailsValue) || (this.teamMergeRequestReminderShownToSecondaryTeamDetailsValue.equals(other.teamMergeRequestReminderShownToSecondaryTeamDetailsValue));
                case TEAM_MERGE_REQUEST_REVOKED_DETAILS:
                    return (this.teamMergeRequestRevokedDetailsValue == other.teamMergeRequestRevokedDetailsValue) || (this.teamMergeRequestRevokedDetailsValue.equals(other.teamMergeRequestRevokedDetailsValue));
                case TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM_DETAILS:
                    return (this.teamMergeRequestSentShownToPrimaryTeamDetailsValue == other.teamMergeRequestSentShownToPrimaryTeamDetailsValue) || (this.teamMergeRequestSentShownToPrimaryTeamDetailsValue.equals(other.teamMergeRequestSentShownToPrimaryTeamDetailsValue));
                case TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM_DETAILS:
                    return (this.teamMergeRequestSentShownToSecondaryTeamDetailsValue == other.teamMergeRequestSentShownToSecondaryTeamDetailsValue) || (this.teamMergeRequestSentShownToSecondaryTeamDetailsValue.equals(other.teamMergeRequestSentShownToSecondaryTeamDetailsValue));
                case MISSING_DETAILS:
                    return (this.missingDetailsValue == other.missingDetailsValue) || (this.missingDetailsValue.equals(other.missingDetailsValue));
                case OTHER:
                    return true;
                default:
                    return false;
            }
        }
        else {
            return false;
        }
    }

    @Override
    public String toString() {
        return Serializer.INSTANCE.serialize(this, false);
    }

    /**
     * Returns a String representation of this object formatted for easier
     * readability.
     *
     * <p> The returned String may contain newlines. </p>
     *
     * @return Formatted, multiline String representation of this object
     */
    public String toStringMultiline() {
        return Serializer.INSTANCE.serialize(this, true);
    }

    /**
     * For internal use only.
     */
    static class Serializer extends UnionSerializer<EventDetails> {
        public static final Serializer INSTANCE = new Serializer();

        @Override
        public void serialize(EventDetails value, JsonGenerator g) throws IOException, JsonGenerationException {
            switch (value.tag()) {
                case ADMIN_ALERTING_ALERT_STATE_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("admin_alerting_alert_state_changed_details", g);
                    AdminAlertingAlertStateChangedDetails.Serializer.INSTANCE.serialize(value.adminAlertingAlertStateChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ADMIN_ALERTING_CHANGED_ALERT_CONFIG_DETAILS: {
                    g.writeStartObject();
                    writeTag("admin_alerting_changed_alert_config_details", g);
                    AdminAlertingChangedAlertConfigDetails.Serializer.INSTANCE.serialize(value.adminAlertingChangedAlertConfigDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ADMIN_ALERTING_TRIGGERED_ALERT_DETAILS: {
                    g.writeStartObject();
                    writeTag("admin_alerting_triggered_alert_details", g);
                    AdminAlertingTriggeredAlertDetails.Serializer.INSTANCE.serialize(value.adminAlertingTriggeredAlertDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case APP_BLOCKED_BY_PERMISSIONS_DETAILS: {
                    g.writeStartObject();
                    writeTag("app_blocked_by_permissions_details", g);
                    AppBlockedByPermissionsDetails.Serializer.INSTANCE.serialize(value.appBlockedByPermissionsDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case APP_LINK_TEAM_DETAILS: {
                    g.writeStartObject();
                    writeTag("app_link_team_details", g);
                    AppLinkTeamDetails.Serializer.INSTANCE.serialize(value.appLinkTeamDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case APP_LINK_USER_DETAILS: {
                    g.writeStartObject();
                    writeTag("app_link_user_details", g);
                    AppLinkUserDetails.Serializer.INSTANCE.serialize(value.appLinkUserDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case APP_UNLINK_TEAM_DETAILS: {
                    g.writeStartObject();
                    writeTag("app_unlink_team_details", g);
                    AppUnlinkTeamDetails.Serializer.INSTANCE.serialize(value.appUnlinkTeamDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case APP_UNLINK_USER_DETAILS: {
                    g.writeStartObject();
                    writeTag("app_unlink_user_details", g);
                    AppUnlinkUserDetails.Serializer.INSTANCE.serialize(value.appUnlinkUserDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case INTEGRATION_CONNECTED_DETAILS: {
                    g.writeStartObject();
                    writeTag("integration_connected_details", g);
                    IntegrationConnectedDetails.Serializer.INSTANCE.serialize(value.integrationConnectedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case INTEGRATION_DISCONNECTED_DETAILS: {
                    g.writeStartObject();
                    writeTag("integration_disconnected_details", g);
                    IntegrationDisconnectedDetails.Serializer.INSTANCE.serialize(value.integrationDisconnectedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_ADD_COMMENT_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_add_comment_details", g);
                    FileAddCommentDetails.Serializer.INSTANCE.serialize(value.fileAddCommentDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_CHANGE_COMMENT_SUBSCRIPTION_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_change_comment_subscription_details", g);
                    FileChangeCommentSubscriptionDetails.Serializer.INSTANCE.serialize(value.fileChangeCommentSubscriptionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_DELETE_COMMENT_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_delete_comment_details", g);
                    FileDeleteCommentDetails.Serializer.INSTANCE.serialize(value.fileDeleteCommentDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_EDIT_COMMENT_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_edit_comment_details", g);
                    FileEditCommentDetails.Serializer.INSTANCE.serialize(value.fileEditCommentDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_LIKE_COMMENT_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_like_comment_details", g);
                    FileLikeCommentDetails.Serializer.INSTANCE.serialize(value.fileLikeCommentDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_RESOLVE_COMMENT_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_resolve_comment_details", g);
                    FileResolveCommentDetails.Serializer.INSTANCE.serialize(value.fileResolveCommentDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_UNLIKE_COMMENT_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_unlike_comment_details", g);
                    FileUnlikeCommentDetails.Serializer.INSTANCE.serialize(value.fileUnlikeCommentDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_UNRESOLVE_COMMENT_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_unresolve_comment_details", g);
                    FileUnresolveCommentDetails.Serializer.INSTANCE.serialize(value.fileUnresolveCommentDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_ADD_FOLDERS_DETAILS: {
                    g.writeStartObject();
                    writeTag("governance_policy_add_folders_details", g);
                    GovernancePolicyAddFoldersDetails.Serializer.INSTANCE.serialize(value.governancePolicyAddFoldersDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_ADD_FOLDER_FAILED_DETAILS: {
                    g.writeStartObject();
                    writeTag("governance_policy_add_folder_failed_details", g);
                    GovernancePolicyAddFolderFailedDetails.Serializer.INSTANCE.serialize(value.governancePolicyAddFolderFailedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_CONTENT_DISPOSED_DETAILS: {
                    g.writeStartObject();
                    writeTag("governance_policy_content_disposed_details", g);
                    GovernancePolicyContentDisposedDetails.Serializer.INSTANCE.serialize(value.governancePolicyContentDisposedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_CREATE_DETAILS: {
                    g.writeStartObject();
                    writeTag("governance_policy_create_details", g);
                    GovernancePolicyCreateDetails.Serializer.INSTANCE.serialize(value.governancePolicyCreateDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_DELETE_DETAILS: {
                    g.writeStartObject();
                    writeTag("governance_policy_delete_details", g);
                    GovernancePolicyDeleteDetails.Serializer.INSTANCE.serialize(value.governancePolicyDeleteDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_EDIT_DETAILS_DETAILS: {
                    g.writeStartObject();
                    writeTag("governance_policy_edit_details_details", g);
                    GovernancePolicyEditDetailsDetails.Serializer.INSTANCE.serialize(value.governancePolicyEditDetailsDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_EDIT_DURATION_DETAILS: {
                    g.writeStartObject();
                    writeTag("governance_policy_edit_duration_details", g);
                    GovernancePolicyEditDurationDetails.Serializer.INSTANCE.serialize(value.governancePolicyEditDurationDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_EXPORT_CREATED_DETAILS: {
                    g.writeStartObject();
                    writeTag("governance_policy_export_created_details", g);
                    GovernancePolicyExportCreatedDetails.Serializer.INSTANCE.serialize(value.governancePolicyExportCreatedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_EXPORT_REMOVED_DETAILS: {
                    g.writeStartObject();
                    writeTag("governance_policy_export_removed_details", g);
                    GovernancePolicyExportRemovedDetails.Serializer.INSTANCE.serialize(value.governancePolicyExportRemovedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_REMOVE_FOLDERS_DETAILS: {
                    g.writeStartObject();
                    writeTag("governance_policy_remove_folders_details", g);
                    GovernancePolicyRemoveFoldersDetails.Serializer.INSTANCE.serialize(value.governancePolicyRemoveFoldersDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_REPORT_CREATED_DETAILS: {
                    g.writeStartObject();
                    writeTag("governance_policy_report_created_details", g);
                    GovernancePolicyReportCreatedDetails.Serializer.INSTANCE.serialize(value.governancePolicyReportCreatedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED_DETAILS: {
                    g.writeStartObject();
                    writeTag("governance_policy_zip_part_downloaded_details", g);
                    GovernancePolicyZipPartDownloadedDetails.Serializer.INSTANCE.serialize(value.governancePolicyZipPartDownloadedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_ACTIVATE_A_HOLD_DETAILS: {
                    g.writeStartObject();
                    writeTag("legal_holds_activate_a_hold_details", g);
                    LegalHoldsActivateAHoldDetails.Serializer.INSTANCE.serialize(value.legalHoldsActivateAHoldDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_ADD_MEMBERS_DETAILS: {
                    g.writeStartObject();
                    writeTag("legal_holds_add_members_details", g);
                    LegalHoldsAddMembersDetails.Serializer.INSTANCE.serialize(value.legalHoldsAddMembersDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_CHANGE_HOLD_DETAILS_DETAILS: {
                    g.writeStartObject();
                    writeTag("legal_holds_change_hold_details_details", g);
                    LegalHoldsChangeHoldDetailsDetails.Serializer.INSTANCE.serialize(value.legalHoldsChangeHoldDetailsDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_CHANGE_HOLD_NAME_DETAILS: {
                    g.writeStartObject();
                    writeTag("legal_holds_change_hold_name_details", g);
                    LegalHoldsChangeHoldNameDetails.Serializer.INSTANCE.serialize(value.legalHoldsChangeHoldNameDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_EXPORT_A_HOLD_DETAILS: {
                    g.writeStartObject();
                    writeTag("legal_holds_export_a_hold_details", g);
                    LegalHoldsExportAHoldDetails.Serializer.INSTANCE.serialize(value.legalHoldsExportAHoldDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_EXPORT_CANCELLED_DETAILS: {
                    g.writeStartObject();
                    writeTag("legal_holds_export_cancelled_details", g);
                    LegalHoldsExportCancelledDetails.Serializer.INSTANCE.serialize(value.legalHoldsExportCancelledDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_EXPORT_DOWNLOADED_DETAILS: {
                    g.writeStartObject();
                    writeTag("legal_holds_export_downloaded_details", g);
                    LegalHoldsExportDownloadedDetails.Serializer.INSTANCE.serialize(value.legalHoldsExportDownloadedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_EXPORT_REMOVED_DETAILS: {
                    g.writeStartObject();
                    writeTag("legal_holds_export_removed_details", g);
                    LegalHoldsExportRemovedDetails.Serializer.INSTANCE.serialize(value.legalHoldsExportRemovedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_RELEASE_A_HOLD_DETAILS: {
                    g.writeStartObject();
                    writeTag("legal_holds_release_a_hold_details", g);
                    LegalHoldsReleaseAHoldDetails.Serializer.INSTANCE.serialize(value.legalHoldsReleaseAHoldDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_REMOVE_MEMBERS_DETAILS: {
                    g.writeStartObject();
                    writeTag("legal_holds_remove_members_details", g);
                    LegalHoldsRemoveMembersDetails.Serializer.INSTANCE.serialize(value.legalHoldsRemoveMembersDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_REPORT_A_HOLD_DETAILS: {
                    g.writeStartObject();
                    writeTag("legal_holds_report_a_hold_details", g);
                    LegalHoldsReportAHoldDetails.Serializer.INSTANCE.serialize(value.legalHoldsReportAHoldDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_CHANGE_IP_DESKTOP_DETAILS: {
                    g.writeStartObject();
                    writeTag("device_change_ip_desktop_details", g);
                    DeviceChangeIpDesktopDetails.Serializer.INSTANCE.serialize(value.deviceChangeIpDesktopDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_CHANGE_IP_MOBILE_DETAILS: {
                    g.writeStartObject();
                    writeTag("device_change_ip_mobile_details", g);
                    DeviceChangeIpMobileDetails.Serializer.INSTANCE.serialize(value.deviceChangeIpMobileDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_CHANGE_IP_WEB_DETAILS: {
                    g.writeStartObject();
                    writeTag("device_change_ip_web_details", g);
                    DeviceChangeIpWebDetails.Serializer.INSTANCE.serialize(value.deviceChangeIpWebDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_DELETE_ON_UNLINK_FAIL_DETAILS: {
                    g.writeStartObject();
                    writeTag("device_delete_on_unlink_fail_details", g);
                    DeviceDeleteOnUnlinkFailDetails.Serializer.INSTANCE.serialize(value.deviceDeleteOnUnlinkFailDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_DELETE_ON_UNLINK_SUCCESS_DETAILS: {
                    g.writeStartObject();
                    writeTag("device_delete_on_unlink_success_details", g);
                    DeviceDeleteOnUnlinkSuccessDetails.Serializer.INSTANCE.serialize(value.deviceDeleteOnUnlinkSuccessDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_LINK_FAIL_DETAILS: {
                    g.writeStartObject();
                    writeTag("device_link_fail_details", g);
                    DeviceLinkFailDetails.Serializer.INSTANCE.serialize(value.deviceLinkFailDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_LINK_SUCCESS_DETAILS: {
                    g.writeStartObject();
                    writeTag("device_link_success_details", g);
                    DeviceLinkSuccessDetails.Serializer.INSTANCE.serialize(value.deviceLinkSuccessDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_MANAGEMENT_DISABLED_DETAILS: {
                    g.writeStartObject();
                    writeTag("device_management_disabled_details", g);
                    DeviceManagementDisabledDetails.Serializer.INSTANCE.serialize(value.deviceManagementDisabledDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_MANAGEMENT_ENABLED_DETAILS: {
                    g.writeStartObject();
                    writeTag("device_management_enabled_details", g);
                    DeviceManagementEnabledDetails.Serializer.INSTANCE.serialize(value.deviceManagementEnabledDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_SYNC_BACKUP_STATUS_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("device_sync_backup_status_changed_details", g);
                    DeviceSyncBackupStatusChangedDetails.Serializer.INSTANCE.serialize(value.deviceSyncBackupStatusChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_UNLINK_DETAILS: {
                    g.writeStartObject();
                    writeTag("device_unlink_details", g);
                    DeviceUnlinkDetails.Serializer.INSTANCE.serialize(value.deviceUnlinkDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DROPBOX_PASSWORDS_EXPORTED_DETAILS: {
                    g.writeStartObject();
                    writeTag("dropbox_passwords_exported_details", g);
                    DropboxPasswordsExportedDetails.Serializer.INSTANCE.serialize(value.dropboxPasswordsExportedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED_DETAILS: {
                    g.writeStartObject();
                    writeTag("dropbox_passwords_new_device_enrolled_details", g);
                    DropboxPasswordsNewDeviceEnrolledDetails.Serializer.INSTANCE.serialize(value.dropboxPasswordsNewDeviceEnrolledDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EMM_REFRESH_AUTH_TOKEN_DETAILS: {
                    g.writeStartObject();
                    writeTag("emm_refresh_auth_token_details", g);
                    EmmRefreshAuthTokenDetails.Serializer.INSTANCE.serialize(value.emmRefreshAuthTokenDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED_DETAILS: {
                    g.writeStartObject();
                    writeTag("external_drive_backup_eligibility_status_checked_details", g);
                    ExternalDriveBackupEligibilityStatusCheckedDetails.Serializer.INSTANCE.serialize(value.externalDriveBackupEligibilityStatusCheckedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("external_drive_backup_status_changed_details", g);
                    ExternalDriveBackupStatusChangedDetails.Serializer.INSTANCE.serialize(value.externalDriveBackupStatusChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ACCOUNT_CAPTURE_CHANGE_AVAILABILITY_DETAILS: {
                    g.writeStartObject();
                    writeTag("account_capture_change_availability_details", g);
                    AccountCaptureChangeAvailabilityDetails.Serializer.INSTANCE.serialize(value.accountCaptureChangeAvailabilityDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ACCOUNT_CAPTURE_MIGRATE_ACCOUNT_DETAILS: {
                    g.writeStartObject();
                    writeTag("account_capture_migrate_account_details", g);
                    AccountCaptureMigrateAccountDetails.Serializer.INSTANCE.serialize(value.accountCaptureMigrateAccountDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT_DETAILS: {
                    g.writeStartObject();
                    writeTag("account_capture_notification_emails_sent_details", g);
                    AccountCaptureNotificationEmailsSentDetails.Serializer.INSTANCE.serialize(value.accountCaptureNotificationEmailsSentDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT_DETAILS: {
                    g.writeStartObject();
                    writeTag("account_capture_relinquish_account_details", g);
                    AccountCaptureRelinquishAccountDetails.Serializer.INSTANCE.serialize(value.accountCaptureRelinquishAccountDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DISABLED_DOMAIN_INVITES_DETAILS: {
                    g.writeStartObject();
                    writeTag("disabled_domain_invites_details", g);
                    DisabledDomainInvitesDetails.Serializer.INSTANCE.serialize(value.disabledDomainInvitesDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM_DETAILS: {
                    g.writeStartObject();
                    writeTag("domain_invites_approve_request_to_join_team_details", g);
                    DomainInvitesApproveRequestToJoinTeamDetails.Serializer.INSTANCE.serialize(value.domainInvitesApproveRequestToJoinTeamDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM_DETAILS: {
                    g.writeStartObject();
                    writeTag("domain_invites_decline_request_to_join_team_details", g);
                    DomainInvitesDeclineRequestToJoinTeamDetails.Serializer.INSTANCE.serialize(value.domainInvitesDeclineRequestToJoinTeamDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DOMAIN_INVITES_EMAIL_EXISTING_USERS_DETAILS: {
                    g.writeStartObject();
                    writeTag("domain_invites_email_existing_users_details", g);
                    DomainInvitesEmailExistingUsersDetails.Serializer.INSTANCE.serialize(value.domainInvitesEmailExistingUsersDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM_DETAILS: {
                    g.writeStartObject();
                    writeTag("domain_invites_request_to_join_team_details", g);
                    DomainInvitesRequestToJoinTeamDetails.Serializer.INSTANCE.serialize(value.domainInvitesRequestToJoinTeamDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO_DETAILS: {
                    g.writeStartObject();
                    writeTag("domain_invites_set_invite_new_user_pref_to_no_details", g);
                    DomainInvitesSetInviteNewUserPrefToNoDetails.Serializer.INSTANCE.serialize(value.domainInvitesSetInviteNewUserPrefToNoDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES_DETAILS: {
                    g.writeStartObject();
                    writeTag("domain_invites_set_invite_new_user_pref_to_yes_details", g);
                    DomainInvitesSetInviteNewUserPrefToYesDetails.Serializer.INSTANCE.serialize(value.domainInvitesSetInviteNewUserPrefToYesDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL_DETAILS: {
                    g.writeStartObject();
                    writeTag("domain_verification_add_domain_fail_details", g);
                    DomainVerificationAddDomainFailDetails.Serializer.INSTANCE.serialize(value.domainVerificationAddDomainFailDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS_DETAILS: {
                    g.writeStartObject();
                    writeTag("domain_verification_add_domain_success_details", g);
                    DomainVerificationAddDomainSuccessDetails.Serializer.INSTANCE.serialize(value.domainVerificationAddDomainSuccessDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DOMAIN_VERIFICATION_REMOVE_DOMAIN_DETAILS: {
                    g.writeStartObject();
                    writeTag("domain_verification_remove_domain_details", g);
                    DomainVerificationRemoveDomainDetails.Serializer.INSTANCE.serialize(value.domainVerificationRemoveDomainDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ENABLED_DOMAIN_INVITES_DETAILS: {
                    g.writeStartObject();
                    writeTag("enabled_domain_invites_details", g);
                    EnabledDomainInvitesDetails.Serializer.INSTANCE.serialize(value.enabledDomainInvitesDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case APPLY_NAMING_CONVENTION_DETAILS: {
                    g.writeStartObject();
                    writeTag("apply_naming_convention_details", g);
                    ApplyNamingConventionDetails.Serializer.INSTANCE.serialize(value.applyNamingConventionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case CREATE_FOLDER_DETAILS: {
                    g.writeStartObject();
                    writeTag("create_folder_details", g);
                    CreateFolderDetails.Serializer.INSTANCE.serialize(value.createFolderDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_ADD_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_add_details", g);
                    FileAddDetails.Serializer.INSTANCE.serialize(value.fileAddDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_COPY_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_copy_details", g);
                    FileCopyDetails.Serializer.INSTANCE.serialize(value.fileCopyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_DELETE_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_delete_details", g);
                    FileDeleteDetails.Serializer.INSTANCE.serialize(value.fileDeleteDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_DOWNLOAD_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_download_details", g);
                    FileDownloadDetails.Serializer.INSTANCE.serialize(value.fileDownloadDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_EDIT_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_edit_details", g);
                    FileEditDetails.Serializer.INSTANCE.serialize(value.fileEditDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_GET_COPY_REFERENCE_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_get_copy_reference_details", g);
                    FileGetCopyReferenceDetails.Serializer.INSTANCE.serialize(value.fileGetCopyReferenceDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_LOCKING_LOCK_STATUS_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_locking_lock_status_changed_details", g);
                    FileLockingLockStatusChangedDetails.Serializer.INSTANCE.serialize(value.fileLockingLockStatusChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_MOVE_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_move_details", g);
                    FileMoveDetails.Serializer.INSTANCE.serialize(value.fileMoveDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_PERMANENTLY_DELETE_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_permanently_delete_details", g);
                    FilePermanentlyDeleteDetails.Serializer.INSTANCE.serialize(value.filePermanentlyDeleteDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_PREVIEW_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_preview_details", g);
                    FilePreviewDetails.Serializer.INSTANCE.serialize(value.filePreviewDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_RENAME_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_rename_details", g);
                    FileRenameDetails.Serializer.INSTANCE.serialize(value.fileRenameDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_RESTORE_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_restore_details", g);
                    FileRestoreDetails.Serializer.INSTANCE.serialize(value.fileRestoreDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_REVERT_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_revert_details", g);
                    FileRevertDetails.Serializer.INSTANCE.serialize(value.fileRevertDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_ROLLBACK_CHANGES_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_rollback_changes_details", g);
                    FileRollbackChangesDetails.Serializer.INSTANCE.serialize(value.fileRollbackChangesDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_SAVE_COPY_REFERENCE_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_save_copy_reference_details", g);
                    FileSaveCopyReferenceDetails.Serializer.INSTANCE.serialize(value.fileSaveCopyReferenceDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FOLDER_OVERVIEW_DESCRIPTION_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("folder_overview_description_changed_details", g);
                    FolderOverviewDescriptionChangedDetails.Serializer.INSTANCE.serialize(value.folderOverviewDescriptionChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FOLDER_OVERVIEW_ITEM_PINNED_DETAILS: {
                    g.writeStartObject();
                    writeTag("folder_overview_item_pinned_details", g);
                    FolderOverviewItemPinnedDetails.Serializer.INSTANCE.serialize(value.folderOverviewItemPinnedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FOLDER_OVERVIEW_ITEM_UNPINNED_DETAILS: {
                    g.writeStartObject();
                    writeTag("folder_overview_item_unpinned_details", g);
                    FolderOverviewItemUnpinnedDetails.Serializer.INSTANCE.serialize(value.folderOverviewItemUnpinnedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case OBJECT_LABEL_ADDED_DETAILS: {
                    g.writeStartObject();
                    writeTag("object_label_added_details", g);
                    ObjectLabelAddedDetails.Serializer.INSTANCE.serialize(value.objectLabelAddedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case OBJECT_LABEL_REMOVED_DETAILS: {
                    g.writeStartObject();
                    writeTag("object_label_removed_details", g);
                    ObjectLabelRemovedDetails.Serializer.INSTANCE.serialize(value.objectLabelRemovedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case OBJECT_LABEL_UPDATED_VALUE_DETAILS: {
                    g.writeStartObject();
                    writeTag("object_label_updated_value_details", g);
                    ObjectLabelUpdatedValueDetails.Serializer.INSTANCE.serialize(value.objectLabelUpdatedValueDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ORGANIZE_FOLDER_WITH_TIDY_DETAILS: {
                    g.writeStartObject();
                    writeTag("organize_folder_with_tidy_details", g);
                    OrganizeFolderWithTidyDetails.Serializer.INSTANCE.serialize(value.organizeFolderWithTidyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case REWIND_FOLDER_DETAILS: {
                    g.writeStartObject();
                    writeTag("rewind_folder_details", g);
                    RewindFolderDetails.Serializer.INSTANCE.serialize(value.rewindFolderDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case UNDO_NAMING_CONVENTION_DETAILS: {
                    g.writeStartObject();
                    writeTag("undo_naming_convention_details", g);
                    UndoNamingConventionDetails.Serializer.INSTANCE.serialize(value.undoNamingConventionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case UNDO_ORGANIZE_FOLDER_WITH_TIDY_DETAILS: {
                    g.writeStartObject();
                    writeTag("undo_organize_folder_with_tidy_details", g);
                    UndoOrganizeFolderWithTidyDetails.Serializer.INSTANCE.serialize(value.undoOrganizeFolderWithTidyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case USER_TAGS_ADDED_DETAILS: {
                    g.writeStartObject();
                    writeTag("user_tags_added_details", g);
                    UserTagsAddedDetails.Serializer.INSTANCE.serialize(value.userTagsAddedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case USER_TAGS_REMOVED_DETAILS: {
                    g.writeStartObject();
                    writeTag("user_tags_removed_details", g);
                    UserTagsRemovedDetails.Serializer.INSTANCE.serialize(value.userTagsRemovedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EMAIL_INGEST_RECEIVE_FILE_DETAILS: {
                    g.writeStartObject();
                    writeTag("email_ingest_receive_file_details", g);
                    EmailIngestReceiveFileDetails.Serializer.INSTANCE.serialize(value.emailIngestReceiveFileDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_REQUEST_CHANGE_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_request_change_details", g);
                    FileRequestChangeDetails.Serializer.INSTANCE.serialize(value.fileRequestChangeDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_REQUEST_CLOSE_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_request_close_details", g);
                    FileRequestCloseDetails.Serializer.INSTANCE.serialize(value.fileRequestCloseDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_REQUEST_CREATE_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_request_create_details", g);
                    FileRequestCreateDetails.Serializer.INSTANCE.serialize(value.fileRequestCreateDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_REQUEST_DELETE_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_request_delete_details", g);
                    FileRequestDeleteDetails.Serializer.INSTANCE.serialize(value.fileRequestDeleteDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_REQUEST_RECEIVE_FILE_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_request_receive_file_details", g);
                    FileRequestReceiveFileDetails.Serializer.INSTANCE.serialize(value.fileRequestReceiveFileDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_ADD_EXTERNAL_ID_DETAILS: {
                    g.writeStartObject();
                    writeTag("group_add_external_id_details", g);
                    GroupAddExternalIdDetails.Serializer.INSTANCE.serialize(value.groupAddExternalIdDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_ADD_MEMBER_DETAILS: {
                    g.writeStartObject();
                    writeTag("group_add_member_details", g);
                    GroupAddMemberDetails.Serializer.INSTANCE.serialize(value.groupAddMemberDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_CHANGE_EXTERNAL_ID_DETAILS: {
                    g.writeStartObject();
                    writeTag("group_change_external_id_details", g);
                    GroupChangeExternalIdDetails.Serializer.INSTANCE.serialize(value.groupChangeExternalIdDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_CHANGE_MANAGEMENT_TYPE_DETAILS: {
                    g.writeStartObject();
                    writeTag("group_change_management_type_details", g);
                    GroupChangeManagementTypeDetails.Serializer.INSTANCE.serialize(value.groupChangeManagementTypeDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_CHANGE_MEMBER_ROLE_DETAILS: {
                    g.writeStartObject();
                    writeTag("group_change_member_role_details", g);
                    GroupChangeMemberRoleDetails.Serializer.INSTANCE.serialize(value.groupChangeMemberRoleDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_CREATE_DETAILS: {
                    g.writeStartObject();
                    writeTag("group_create_details", g);
                    GroupCreateDetails.Serializer.INSTANCE.serialize(value.groupCreateDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_DELETE_DETAILS: {
                    g.writeStartObject();
                    writeTag("group_delete_details", g);
                    GroupDeleteDetails.Serializer.INSTANCE.serialize(value.groupDeleteDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_DESCRIPTION_UPDATED_DETAILS: {
                    g.writeStartObject();
                    writeTag("group_description_updated_details", g);
                    GroupDescriptionUpdatedDetails.Serializer.INSTANCE.serialize(value.groupDescriptionUpdatedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_JOIN_POLICY_UPDATED_DETAILS: {
                    g.writeStartObject();
                    writeTag("group_join_policy_updated_details", g);
                    GroupJoinPolicyUpdatedDetails.Serializer.INSTANCE.serialize(value.groupJoinPolicyUpdatedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_MOVED_DETAILS: {
                    g.writeStartObject();
                    writeTag("group_moved_details", g);
                    GroupMovedDetails.Serializer.INSTANCE.serialize(value.groupMovedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_REMOVE_EXTERNAL_ID_DETAILS: {
                    g.writeStartObject();
                    writeTag("group_remove_external_id_details", g);
                    GroupRemoveExternalIdDetails.Serializer.INSTANCE.serialize(value.groupRemoveExternalIdDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_REMOVE_MEMBER_DETAILS: {
                    g.writeStartObject();
                    writeTag("group_remove_member_details", g);
                    GroupRemoveMemberDetails.Serializer.INSTANCE.serialize(value.groupRemoveMemberDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_RENAME_DETAILS: {
                    g.writeStartObject();
                    writeTag("group_rename_details", g);
                    GroupRenameDetails.Serializer.INSTANCE.serialize(value.groupRenameDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ACCOUNT_LOCK_OR_UNLOCKED_DETAILS: {
                    g.writeStartObject();
                    writeTag("account_lock_or_unlocked_details", g);
                    AccountLockOrUnlockedDetails.Serializer.INSTANCE.serialize(value.accountLockOrUnlockedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EMM_ERROR_DETAILS: {
                    g.writeStartObject();
                    writeTag("emm_error_details", g);
                    EmmErrorDetails.Serializer.INSTANCE.serialize(value.emmErrorDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS_DETAILS: {
                    g.writeStartObject();
                    writeTag("guest_admin_signed_in_via_trusted_teams_details", g);
                    GuestAdminSignedInViaTrustedTeamsDetails.Serializer.INSTANCE.serialize(value.guestAdminSignedInViaTrustedTeamsDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS_DETAILS: {
                    g.writeStartObject();
                    writeTag("guest_admin_signed_out_via_trusted_teams_details", g);
                    GuestAdminSignedOutViaTrustedTeamsDetails.Serializer.INSTANCE.serialize(value.guestAdminSignedOutViaTrustedTeamsDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LOGIN_FAIL_DETAILS: {
                    g.writeStartObject();
                    writeTag("login_fail_details", g);
                    LoginFailDetails.Serializer.INSTANCE.serialize(value.loginFailDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LOGIN_SUCCESS_DETAILS: {
                    g.writeStartObject();
                    writeTag("login_success_details", g);
                    LoginSuccessDetails.Serializer.INSTANCE.serialize(value.loginSuccessDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LOGOUT_DETAILS: {
                    g.writeStartObject();
                    writeTag("logout_details", g);
                    LogoutDetails.Serializer.INSTANCE.serialize(value.logoutDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case RESELLER_SUPPORT_SESSION_END_DETAILS: {
                    g.writeStartObject();
                    writeTag("reseller_support_session_end_details", g);
                    ResellerSupportSessionEndDetails.Serializer.INSTANCE.serialize(value.resellerSupportSessionEndDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case RESELLER_SUPPORT_SESSION_START_DETAILS: {
                    g.writeStartObject();
                    writeTag("reseller_support_session_start_details", g);
                    ResellerSupportSessionStartDetails.Serializer.INSTANCE.serialize(value.resellerSupportSessionStartDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SIGN_IN_AS_SESSION_END_DETAILS: {
                    g.writeStartObject();
                    writeTag("sign_in_as_session_end_details", g);
                    SignInAsSessionEndDetails.Serializer.INSTANCE.serialize(value.signInAsSessionEndDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SIGN_IN_AS_SESSION_START_DETAILS: {
                    g.writeStartObject();
                    writeTag("sign_in_as_session_start_details", g);
                    SignInAsSessionStartDetails.Serializer.INSTANCE.serialize(value.signInAsSessionStartDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_ERROR_DETAILS: {
                    g.writeStartObject();
                    writeTag("sso_error_details", g);
                    SsoErrorDetails.Serializer.INSTANCE.serialize(value.ssoErrorDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case CREATE_TEAM_INVITE_LINK_DETAILS: {
                    g.writeStartObject();
                    writeTag("create_team_invite_link_details", g);
                    CreateTeamInviteLinkDetails.Serializer.INSTANCE.serialize(value.createTeamInviteLinkDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DELETE_TEAM_INVITE_LINK_DETAILS: {
                    g.writeStartObject();
                    writeTag("delete_team_invite_link_details", g);
                    DeleteTeamInviteLinkDetails.Serializer.INSTANCE.serialize(value.deleteTeamInviteLinkDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_ADD_EXTERNAL_ID_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_add_external_id_details", g);
                    MemberAddExternalIdDetails.Serializer.INSTANCE.serialize(value.memberAddExternalIdDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_ADD_NAME_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_add_name_details", g);
                    MemberAddNameDetails.Serializer.INSTANCE.serialize(value.memberAddNameDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_CHANGE_ADMIN_ROLE_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_change_admin_role_details", g);
                    MemberChangeAdminRoleDetails.Serializer.INSTANCE.serialize(value.memberChangeAdminRoleDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_CHANGE_EMAIL_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_change_email_details", g);
                    MemberChangeEmailDetails.Serializer.INSTANCE.serialize(value.memberChangeEmailDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_CHANGE_EXTERNAL_ID_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_change_external_id_details", g);
                    MemberChangeExternalIdDetails.Serializer.INSTANCE.serialize(value.memberChangeExternalIdDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_CHANGE_MEMBERSHIP_TYPE_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_change_membership_type_details", g);
                    MemberChangeMembershipTypeDetails.Serializer.INSTANCE.serialize(value.memberChangeMembershipTypeDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_CHANGE_NAME_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_change_name_details", g);
                    MemberChangeNameDetails.Serializer.INSTANCE.serialize(value.memberChangeNameDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_CHANGE_RESELLER_ROLE_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_change_reseller_role_details", g);
                    MemberChangeResellerRoleDetails.Serializer.INSTANCE.serialize(value.memberChangeResellerRoleDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_CHANGE_STATUS_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_change_status_details", g);
                    MemberChangeStatusDetails.Serializer.INSTANCE.serialize(value.memberChangeStatusDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_DELETE_MANUAL_CONTACTS_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_delete_manual_contacts_details", g);
                    MemberDeleteManualContactsDetails.Serializer.INSTANCE.serialize(value.memberDeleteManualContactsDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_DELETE_PROFILE_PHOTO_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_delete_profile_photo_details", g);
                    MemberDeleteProfilePhotoDetails.Serializer.INSTANCE.serialize(value.memberDeleteProfilePhotoDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_permanently_delete_account_contents_details", g);
                    MemberPermanentlyDeleteAccountContentsDetails.Serializer.INSTANCE.serialize(value.memberPermanentlyDeleteAccountContentsDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_REMOVE_EXTERNAL_ID_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_remove_external_id_details", g);
                    MemberRemoveExternalIdDetails.Serializer.INSTANCE.serialize(value.memberRemoveExternalIdDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SET_PROFILE_PHOTO_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_set_profile_photo_details", g);
                    MemberSetProfilePhotoDetails.Serializer.INSTANCE.serialize(value.memberSetProfilePhotoDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_space_limits_add_custom_quota_details", g);
                    MemberSpaceLimitsAddCustomQuotaDetails.Serializer.INSTANCE.serialize(value.memberSpaceLimitsAddCustomQuotaDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_space_limits_change_custom_quota_details", g);
                    MemberSpaceLimitsChangeCustomQuotaDetails.Serializer.INSTANCE.serialize(value.memberSpaceLimitsChangeCustomQuotaDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SPACE_LIMITS_CHANGE_STATUS_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_space_limits_change_status_details", g);
                    MemberSpaceLimitsChangeStatusDetails.Serializer.INSTANCE.serialize(value.memberSpaceLimitsChangeStatusDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_space_limits_remove_custom_quota_details", g);
                    MemberSpaceLimitsRemoveCustomQuotaDetails.Serializer.INSTANCE.serialize(value.memberSpaceLimitsRemoveCustomQuotaDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SUGGEST_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_suggest_details", g);
                    MemberSuggestDetails.Serializer.INSTANCE.serialize(value.memberSuggestDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_TRANSFER_ACCOUNT_CONTENTS_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_transfer_account_contents_details", g);
                    MemberTransferAccountContentsDetails.Serializer.INSTANCE.serialize(value.memberTransferAccountContentsDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PENDING_SECONDARY_EMAIL_ADDED_DETAILS: {
                    g.writeStartObject();
                    writeTag("pending_secondary_email_added_details", g);
                    PendingSecondaryEmailAddedDetails.Serializer.INSTANCE.serialize(value.pendingSecondaryEmailAddedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SECONDARY_EMAIL_DELETED_DETAILS: {
                    g.writeStartObject();
                    writeTag("secondary_email_deleted_details", g);
                    SecondaryEmailDeletedDetails.Serializer.INSTANCE.serialize(value.secondaryEmailDeletedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SECONDARY_EMAIL_VERIFIED_DETAILS: {
                    g.writeStartObject();
                    writeTag("secondary_email_verified_details", g);
                    SecondaryEmailVerifiedDetails.Serializer.INSTANCE.serialize(value.secondaryEmailVerifiedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SECONDARY_MAILS_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("secondary_mails_policy_changed_details", g);
                    SecondaryMailsPolicyChangedDetails.Serializer.INSTANCE.serialize(value.secondaryMailsPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case BINDER_ADD_PAGE_DETAILS: {
                    g.writeStartObject();
                    writeTag("binder_add_page_details", g);
                    BinderAddPageDetails.Serializer.INSTANCE.serialize(value.binderAddPageDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case BINDER_ADD_SECTION_DETAILS: {
                    g.writeStartObject();
                    writeTag("binder_add_section_details", g);
                    BinderAddSectionDetails.Serializer.INSTANCE.serialize(value.binderAddSectionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case BINDER_REMOVE_PAGE_DETAILS: {
                    g.writeStartObject();
                    writeTag("binder_remove_page_details", g);
                    BinderRemovePageDetails.Serializer.INSTANCE.serialize(value.binderRemovePageDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case BINDER_REMOVE_SECTION_DETAILS: {
                    g.writeStartObject();
                    writeTag("binder_remove_section_details", g);
                    BinderRemoveSectionDetails.Serializer.INSTANCE.serialize(value.binderRemoveSectionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case BINDER_RENAME_PAGE_DETAILS: {
                    g.writeStartObject();
                    writeTag("binder_rename_page_details", g);
                    BinderRenamePageDetails.Serializer.INSTANCE.serialize(value.binderRenamePageDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case BINDER_RENAME_SECTION_DETAILS: {
                    g.writeStartObject();
                    writeTag("binder_rename_section_details", g);
                    BinderRenameSectionDetails.Serializer.INSTANCE.serialize(value.binderRenameSectionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case BINDER_REORDER_PAGE_DETAILS: {
                    g.writeStartObject();
                    writeTag("binder_reorder_page_details", g);
                    BinderReorderPageDetails.Serializer.INSTANCE.serialize(value.binderReorderPageDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case BINDER_REORDER_SECTION_DETAILS: {
                    g.writeStartObject();
                    writeTag("binder_reorder_section_details", g);
                    BinderReorderSectionDetails.Serializer.INSTANCE.serialize(value.binderReorderSectionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CONTENT_ADD_MEMBER_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_content_add_member_details", g);
                    PaperContentAddMemberDetails.Serializer.INSTANCE.serialize(value.paperContentAddMemberDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CONTENT_ADD_TO_FOLDER_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_content_add_to_folder_details", g);
                    PaperContentAddToFolderDetails.Serializer.INSTANCE.serialize(value.paperContentAddToFolderDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CONTENT_ARCHIVE_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_content_archive_details", g);
                    PaperContentArchiveDetails.Serializer.INSTANCE.serialize(value.paperContentArchiveDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CONTENT_CREATE_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_content_create_details", g);
                    PaperContentCreateDetails.Serializer.INSTANCE.serialize(value.paperContentCreateDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CONTENT_PERMANENTLY_DELETE_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_content_permanently_delete_details", g);
                    PaperContentPermanentlyDeleteDetails.Serializer.INSTANCE.serialize(value.paperContentPermanentlyDeleteDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CONTENT_REMOVE_FROM_FOLDER_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_content_remove_from_folder_details", g);
                    PaperContentRemoveFromFolderDetails.Serializer.INSTANCE.serialize(value.paperContentRemoveFromFolderDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CONTENT_REMOVE_MEMBER_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_content_remove_member_details", g);
                    PaperContentRemoveMemberDetails.Serializer.INSTANCE.serialize(value.paperContentRemoveMemberDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CONTENT_RENAME_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_content_rename_details", g);
                    PaperContentRenameDetails.Serializer.INSTANCE.serialize(value.paperContentRenameDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CONTENT_RESTORE_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_content_restore_details", g);
                    PaperContentRestoreDetails.Serializer.INSTANCE.serialize(value.paperContentRestoreDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_ADD_COMMENT_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_add_comment_details", g);
                    PaperDocAddCommentDetails.Serializer.INSTANCE.serialize(value.paperDocAddCommentDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_CHANGE_MEMBER_ROLE_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_change_member_role_details", g);
                    PaperDocChangeMemberRoleDetails.Serializer.INSTANCE.serialize(value.paperDocChangeMemberRoleDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_CHANGE_SHARING_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_change_sharing_policy_details", g);
                    PaperDocChangeSharingPolicyDetails.Serializer.INSTANCE.serialize(value.paperDocChangeSharingPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_CHANGE_SUBSCRIPTION_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_change_subscription_details", g);
                    PaperDocChangeSubscriptionDetails.Serializer.INSTANCE.serialize(value.paperDocChangeSubscriptionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_DELETED_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_deleted_details", g);
                    PaperDocDeletedDetails.Serializer.INSTANCE.serialize(value.paperDocDeletedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_DELETE_COMMENT_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_delete_comment_details", g);
                    PaperDocDeleteCommentDetails.Serializer.INSTANCE.serialize(value.paperDocDeleteCommentDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_DOWNLOAD_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_download_details", g);
                    PaperDocDownloadDetails.Serializer.INSTANCE.serialize(value.paperDocDownloadDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_EDIT_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_edit_details", g);
                    PaperDocEditDetails.Serializer.INSTANCE.serialize(value.paperDocEditDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_EDIT_COMMENT_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_edit_comment_details", g);
                    PaperDocEditCommentDetails.Serializer.INSTANCE.serialize(value.paperDocEditCommentDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_FOLLOWED_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_followed_details", g);
                    PaperDocFollowedDetails.Serializer.INSTANCE.serialize(value.paperDocFollowedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_MENTION_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_mention_details", g);
                    PaperDocMentionDetails.Serializer.INSTANCE.serialize(value.paperDocMentionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_OWNERSHIP_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_ownership_changed_details", g);
                    PaperDocOwnershipChangedDetails.Serializer.INSTANCE.serialize(value.paperDocOwnershipChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_REQUEST_ACCESS_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_request_access_details", g);
                    PaperDocRequestAccessDetails.Serializer.INSTANCE.serialize(value.paperDocRequestAccessDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_RESOLVE_COMMENT_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_resolve_comment_details", g);
                    PaperDocResolveCommentDetails.Serializer.INSTANCE.serialize(value.paperDocResolveCommentDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_REVERT_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_revert_details", g);
                    PaperDocRevertDetails.Serializer.INSTANCE.serialize(value.paperDocRevertDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_SLACK_SHARE_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_slack_share_details", g);
                    PaperDocSlackShareDetails.Serializer.INSTANCE.serialize(value.paperDocSlackShareDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_TEAM_INVITE_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_team_invite_details", g);
                    PaperDocTeamInviteDetails.Serializer.INSTANCE.serialize(value.paperDocTeamInviteDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_TRASHED_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_trashed_details", g);
                    PaperDocTrashedDetails.Serializer.INSTANCE.serialize(value.paperDocTrashedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_UNRESOLVE_COMMENT_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_unresolve_comment_details", g);
                    PaperDocUnresolveCommentDetails.Serializer.INSTANCE.serialize(value.paperDocUnresolveCommentDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_UNTRASHED_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_untrashed_details", g);
                    PaperDocUntrashedDetails.Serializer.INSTANCE.serialize(value.paperDocUntrashedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_VIEW_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_doc_view_details", g);
                    PaperDocViewDetails.Serializer.INSTANCE.serialize(value.paperDocViewDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_EXTERNAL_VIEW_ALLOW_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_external_view_allow_details", g);
                    PaperExternalViewAllowDetails.Serializer.INSTANCE.serialize(value.paperExternalViewAllowDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_EXTERNAL_VIEW_DEFAULT_TEAM_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_external_view_default_team_details", g);
                    PaperExternalViewDefaultTeamDetails.Serializer.INSTANCE.serialize(value.paperExternalViewDefaultTeamDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_EXTERNAL_VIEW_FORBID_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_external_view_forbid_details", g);
                    PaperExternalViewForbidDetails.Serializer.INSTANCE.serialize(value.paperExternalViewForbidDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_FOLDER_CHANGE_SUBSCRIPTION_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_folder_change_subscription_details", g);
                    PaperFolderChangeSubscriptionDetails.Serializer.INSTANCE.serialize(value.paperFolderChangeSubscriptionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_FOLDER_DELETED_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_folder_deleted_details", g);
                    PaperFolderDeletedDetails.Serializer.INSTANCE.serialize(value.paperFolderDeletedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_FOLDER_FOLLOWED_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_folder_followed_details", g);
                    PaperFolderFollowedDetails.Serializer.INSTANCE.serialize(value.paperFolderFollowedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_FOLDER_TEAM_INVITE_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_folder_team_invite_details", g);
                    PaperFolderTeamInviteDetails.Serializer.INSTANCE.serialize(value.paperFolderTeamInviteDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_PUBLISHED_LINK_CHANGE_PERMISSION_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_published_link_change_permission_details", g);
                    PaperPublishedLinkChangePermissionDetails.Serializer.INSTANCE.serialize(value.paperPublishedLinkChangePermissionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_PUBLISHED_LINK_CREATE_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_published_link_create_details", g);
                    PaperPublishedLinkCreateDetails.Serializer.INSTANCE.serialize(value.paperPublishedLinkCreateDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_PUBLISHED_LINK_DISABLED_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_published_link_disabled_details", g);
                    PaperPublishedLinkDisabledDetails.Serializer.INSTANCE.serialize(value.paperPublishedLinkDisabledDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_PUBLISHED_LINK_VIEW_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_published_link_view_details", g);
                    PaperPublishedLinkViewDetails.Serializer.INSTANCE.serialize(value.paperPublishedLinkViewDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PASSWORD_CHANGE_DETAILS: {
                    g.writeStartObject();
                    writeTag("password_change_details", g);
                    PasswordChangeDetails.Serializer.INSTANCE.serialize(value.passwordChangeDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PASSWORD_RESET_DETAILS: {
                    g.writeStartObject();
                    writeTag("password_reset_details", g);
                    PasswordResetDetails.Serializer.INSTANCE.serialize(value.passwordResetDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PASSWORD_RESET_ALL_DETAILS: {
                    g.writeStartObject();
                    writeTag("password_reset_all_details", g);
                    PasswordResetAllDetails.Serializer.INSTANCE.serialize(value.passwordResetAllDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case CLASSIFICATION_CREATE_REPORT_DETAILS: {
                    g.writeStartObject();
                    writeTag("classification_create_report_details", g);
                    ClassificationCreateReportDetails.Serializer.INSTANCE.serialize(value.classificationCreateReportDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case CLASSIFICATION_CREATE_REPORT_FAIL_DETAILS: {
                    g.writeStartObject();
                    writeTag("classification_create_report_fail_details", g);
                    ClassificationCreateReportFailDetails.Serializer.INSTANCE.serialize(value.classificationCreateReportFailDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EMM_CREATE_EXCEPTIONS_REPORT_DETAILS: {
                    g.writeStartObject();
                    writeTag("emm_create_exceptions_report_details", g);
                    EmmCreateExceptionsReportDetails.Serializer.INSTANCE.serialize(value.emmCreateExceptionsReportDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EMM_CREATE_USAGE_REPORT_DETAILS: {
                    g.writeStartObject();
                    writeTag("emm_create_usage_report_details", g);
                    EmmCreateUsageReportDetails.Serializer.INSTANCE.serialize(value.emmCreateUsageReportDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EXPORT_MEMBERS_REPORT_DETAILS: {
                    g.writeStartObject();
                    writeTag("export_members_report_details", g);
                    ExportMembersReportDetails.Serializer.INSTANCE.serialize(value.exportMembersReportDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EXPORT_MEMBERS_REPORT_FAIL_DETAILS: {
                    g.writeStartObject();
                    writeTag("export_members_report_fail_details", g);
                    ExportMembersReportFailDetails.Serializer.INSTANCE.serialize(value.exportMembersReportFailDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EXTERNAL_SHARING_CREATE_REPORT_DETAILS: {
                    g.writeStartObject();
                    writeTag("external_sharing_create_report_details", g);
                    ExternalSharingCreateReportDetails.Serializer.INSTANCE.serialize(value.externalSharingCreateReportDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EXTERNAL_SHARING_REPORT_FAILED_DETAILS: {
                    g.writeStartObject();
                    writeTag("external_sharing_report_failed_details", g);
                    ExternalSharingReportFailedDetails.Serializer.INSTANCE.serialize(value.externalSharingReportFailedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NO_EXPIRATION_LINK_GEN_CREATE_REPORT_DETAILS: {
                    g.writeStartObject();
                    writeTag("no_expiration_link_gen_create_report_details", g);
                    NoExpirationLinkGenCreateReportDetails.Serializer.INSTANCE.serialize(value.noExpirationLinkGenCreateReportDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NO_EXPIRATION_LINK_GEN_REPORT_FAILED_DETAILS: {
                    g.writeStartObject();
                    writeTag("no_expiration_link_gen_report_failed_details", g);
                    NoExpirationLinkGenReportFailedDetails.Serializer.INSTANCE.serialize(value.noExpirationLinkGenReportFailedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NO_PASSWORD_LINK_GEN_CREATE_REPORT_DETAILS: {
                    g.writeStartObject();
                    writeTag("no_password_link_gen_create_report_details", g);
                    NoPasswordLinkGenCreateReportDetails.Serializer.INSTANCE.serialize(value.noPasswordLinkGenCreateReportDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NO_PASSWORD_LINK_GEN_REPORT_FAILED_DETAILS: {
                    g.writeStartObject();
                    writeTag("no_password_link_gen_report_failed_details", g);
                    NoPasswordLinkGenReportFailedDetails.Serializer.INSTANCE.serialize(value.noPasswordLinkGenReportFailedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NO_PASSWORD_LINK_VIEW_CREATE_REPORT_DETAILS: {
                    g.writeStartObject();
                    writeTag("no_password_link_view_create_report_details", g);
                    NoPasswordLinkViewCreateReportDetails.Serializer.INSTANCE.serialize(value.noPasswordLinkViewCreateReportDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NO_PASSWORD_LINK_VIEW_REPORT_FAILED_DETAILS: {
                    g.writeStartObject();
                    writeTag("no_password_link_view_report_failed_details", g);
                    NoPasswordLinkViewReportFailedDetails.Serializer.INSTANCE.serialize(value.noPasswordLinkViewReportFailedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case OUTDATED_LINK_VIEW_CREATE_REPORT_DETAILS: {
                    g.writeStartObject();
                    writeTag("outdated_link_view_create_report_details", g);
                    OutdatedLinkViewCreateReportDetails.Serializer.INSTANCE.serialize(value.outdatedLinkViewCreateReportDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case OUTDATED_LINK_VIEW_REPORT_FAILED_DETAILS: {
                    g.writeStartObject();
                    writeTag("outdated_link_view_report_failed_details", g);
                    OutdatedLinkViewReportFailedDetails.Serializer.INSTANCE.serialize(value.outdatedLinkViewReportFailedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_ADMIN_EXPORT_START_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_admin_export_start_details", g);
                    PaperAdminExportStartDetails.Serializer.INSTANCE.serialize(value.paperAdminExportStartDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT_DETAILS: {
                    g.writeStartObject();
                    writeTag("smart_sync_create_admin_privilege_report_details", g);
                    SmartSyncCreateAdminPrivilegeReportDetails.Serializer.INSTANCE.serialize(value.smartSyncCreateAdminPrivilegeReportDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_ACTIVITY_CREATE_REPORT_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_activity_create_report_details", g);
                    TeamActivityCreateReportDetails.Serializer.INSTANCE.serialize(value.teamActivityCreateReportDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_ACTIVITY_CREATE_REPORT_FAIL_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_activity_create_report_fail_details", g);
                    TeamActivityCreateReportFailDetails.Serializer.INSTANCE.serialize(value.teamActivityCreateReportFailDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case COLLECTION_SHARE_DETAILS: {
                    g.writeStartObject();
                    writeTag("collection_share_details", g);
                    CollectionShareDetails.Serializer.INSTANCE.serialize(value.collectionShareDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_TRANSFERS_FILE_ADD_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_transfers_file_add_details", g);
                    FileTransfersFileAddDetails.Serializer.INSTANCE.serialize(value.fileTransfersFileAddDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_TRANSFERS_TRANSFER_DELETE_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_transfers_transfer_delete_details", g);
                    FileTransfersTransferDeleteDetails.Serializer.INSTANCE.serialize(value.fileTransfersTransferDeleteDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_TRANSFERS_TRANSFER_DOWNLOAD_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_transfers_transfer_download_details", g);
                    FileTransfersTransferDownloadDetails.Serializer.INSTANCE.serialize(value.fileTransfersTransferDownloadDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_TRANSFERS_TRANSFER_SEND_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_transfers_transfer_send_details", g);
                    FileTransfersTransferSendDetails.Serializer.INSTANCE.serialize(value.fileTransfersTransferSendDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_TRANSFERS_TRANSFER_VIEW_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_transfers_transfer_view_details", g);
                    FileTransfersTransferViewDetails.Serializer.INSTANCE.serialize(value.fileTransfersTransferViewDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NOTE_ACL_INVITE_ONLY_DETAILS: {
                    g.writeStartObject();
                    writeTag("note_acl_invite_only_details", g);
                    NoteAclInviteOnlyDetails.Serializer.INSTANCE.serialize(value.noteAclInviteOnlyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NOTE_ACL_LINK_DETAILS: {
                    g.writeStartObject();
                    writeTag("note_acl_link_details", g);
                    NoteAclLinkDetails.Serializer.INSTANCE.serialize(value.noteAclLinkDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NOTE_ACL_TEAM_LINK_DETAILS: {
                    g.writeStartObject();
                    writeTag("note_acl_team_link_details", g);
                    NoteAclTeamLinkDetails.Serializer.INSTANCE.serialize(value.noteAclTeamLinkDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NOTE_SHARED_DETAILS: {
                    g.writeStartObject();
                    writeTag("note_shared_details", g);
                    NoteSharedDetails.Serializer.INSTANCE.serialize(value.noteSharedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NOTE_SHARE_RECEIVE_DETAILS: {
                    g.writeStartObject();
                    writeTag("note_share_receive_details", g);
                    NoteShareReceiveDetails.Serializer.INSTANCE.serialize(value.noteShareReceiveDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case OPEN_NOTE_SHARED_DETAILS: {
                    g.writeStartObject();
                    writeTag("open_note_shared_details", g);
                    OpenNoteSharedDetails.Serializer.INSTANCE.serialize(value.openNoteSharedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_ADD_GROUP_DETAILS: {
                    g.writeStartObject();
                    writeTag("sf_add_group_details", g);
                    SfAddGroupDetails.Serializer.INSTANCE.serialize(value.sfAddGroupDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS_DETAILS: {
                    g.writeStartObject();
                    writeTag("sf_allow_non_members_to_view_shared_links_details", g);
                    SfAllowNonMembersToViewSharedLinksDetails.Serializer.INSTANCE.serialize(value.sfAllowNonMembersToViewSharedLinksDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_EXTERNAL_INVITE_WARN_DETAILS: {
                    g.writeStartObject();
                    writeTag("sf_external_invite_warn_details", g);
                    SfExternalInviteWarnDetails.Serializer.INSTANCE.serialize(value.sfExternalInviteWarnDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_FB_INVITE_DETAILS: {
                    g.writeStartObject();
                    writeTag("sf_fb_invite_details", g);
                    SfFbInviteDetails.Serializer.INSTANCE.serialize(value.sfFbInviteDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_FB_INVITE_CHANGE_ROLE_DETAILS: {
                    g.writeStartObject();
                    writeTag("sf_fb_invite_change_role_details", g);
                    SfFbInviteChangeRoleDetails.Serializer.INSTANCE.serialize(value.sfFbInviteChangeRoleDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_FB_UNINVITE_DETAILS: {
                    g.writeStartObject();
                    writeTag("sf_fb_uninvite_details", g);
                    SfFbUninviteDetails.Serializer.INSTANCE.serialize(value.sfFbUninviteDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_INVITE_GROUP_DETAILS: {
                    g.writeStartObject();
                    writeTag("sf_invite_group_details", g);
                    SfInviteGroupDetails.Serializer.INSTANCE.serialize(value.sfInviteGroupDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_TEAM_GRANT_ACCESS_DETAILS: {
                    g.writeStartObject();
                    writeTag("sf_team_grant_access_details", g);
                    SfTeamGrantAccessDetails.Serializer.INSTANCE.serialize(value.sfTeamGrantAccessDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_TEAM_INVITE_DETAILS: {
                    g.writeStartObject();
                    writeTag("sf_team_invite_details", g);
                    SfTeamInviteDetails.Serializer.INSTANCE.serialize(value.sfTeamInviteDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_TEAM_INVITE_CHANGE_ROLE_DETAILS: {
                    g.writeStartObject();
                    writeTag("sf_team_invite_change_role_details", g);
                    SfTeamInviteChangeRoleDetails.Serializer.INSTANCE.serialize(value.sfTeamInviteChangeRoleDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_TEAM_JOIN_DETAILS: {
                    g.writeStartObject();
                    writeTag("sf_team_join_details", g);
                    SfTeamJoinDetails.Serializer.INSTANCE.serialize(value.sfTeamJoinDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_TEAM_JOIN_FROM_OOB_LINK_DETAILS: {
                    g.writeStartObject();
                    writeTag("sf_team_join_from_oob_link_details", g);
                    SfTeamJoinFromOobLinkDetails.Serializer.INSTANCE.serialize(value.sfTeamJoinFromOobLinkDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_TEAM_UNINVITE_DETAILS: {
                    g.writeStartObject();
                    writeTag("sf_team_uninvite_details", g);
                    SfTeamUninviteDetails.Serializer.INSTANCE.serialize(value.sfTeamUninviteDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_ADD_INVITEES_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_add_invitees_details", g);
                    SharedContentAddInviteesDetails.Serializer.INSTANCE.serialize(value.sharedContentAddInviteesDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_ADD_LINK_EXPIRY_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_add_link_expiry_details", g);
                    SharedContentAddLinkExpiryDetails.Serializer.INSTANCE.serialize(value.sharedContentAddLinkExpiryDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_ADD_LINK_PASSWORD_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_add_link_password_details", g);
                    SharedContentAddLinkPasswordDetails.Serializer.INSTANCE.serialize(value.sharedContentAddLinkPasswordDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_ADD_MEMBER_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_add_member_details", g);
                    SharedContentAddMemberDetails.Serializer.INSTANCE.serialize(value.sharedContentAddMemberDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_change_downloads_policy_details", g);
                    SharedContentChangeDownloadsPolicyDetails.Serializer.INSTANCE.serialize(value.sharedContentChangeDownloadsPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_CHANGE_INVITEE_ROLE_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_change_invitee_role_details", g);
                    SharedContentChangeInviteeRoleDetails.Serializer.INSTANCE.serialize(value.sharedContentChangeInviteeRoleDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_CHANGE_LINK_AUDIENCE_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_change_link_audience_details", g);
                    SharedContentChangeLinkAudienceDetails.Serializer.INSTANCE.serialize(value.sharedContentChangeLinkAudienceDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_CHANGE_LINK_EXPIRY_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_change_link_expiry_details", g);
                    SharedContentChangeLinkExpiryDetails.Serializer.INSTANCE.serialize(value.sharedContentChangeLinkExpiryDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_CHANGE_LINK_PASSWORD_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_change_link_password_details", g);
                    SharedContentChangeLinkPasswordDetails.Serializer.INSTANCE.serialize(value.sharedContentChangeLinkPasswordDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_CHANGE_MEMBER_ROLE_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_change_member_role_details", g);
                    SharedContentChangeMemberRoleDetails.Serializer.INSTANCE.serialize(value.sharedContentChangeMemberRoleDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_change_viewer_info_policy_details", g);
                    SharedContentChangeViewerInfoPolicyDetails.Serializer.INSTANCE.serialize(value.sharedContentChangeViewerInfoPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_CLAIM_INVITATION_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_claim_invitation_details", g);
                    SharedContentClaimInvitationDetails.Serializer.INSTANCE.serialize(value.sharedContentClaimInvitationDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_COPY_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_copy_details", g);
                    SharedContentCopyDetails.Serializer.INSTANCE.serialize(value.sharedContentCopyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_DOWNLOAD_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_download_details", g);
                    SharedContentDownloadDetails.Serializer.INSTANCE.serialize(value.sharedContentDownloadDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_RELINQUISH_MEMBERSHIP_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_relinquish_membership_details", g);
                    SharedContentRelinquishMembershipDetails.Serializer.INSTANCE.serialize(value.sharedContentRelinquishMembershipDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_REMOVE_INVITEES_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_remove_invitees_details", g);
                    SharedContentRemoveInviteesDetails.Serializer.INSTANCE.serialize(value.sharedContentRemoveInviteesDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_REMOVE_LINK_EXPIRY_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_remove_link_expiry_details", g);
                    SharedContentRemoveLinkExpiryDetails.Serializer.INSTANCE.serialize(value.sharedContentRemoveLinkExpiryDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_REMOVE_LINK_PASSWORD_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_remove_link_password_details", g);
                    SharedContentRemoveLinkPasswordDetails.Serializer.INSTANCE.serialize(value.sharedContentRemoveLinkPasswordDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_REMOVE_MEMBER_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_remove_member_details", g);
                    SharedContentRemoveMemberDetails.Serializer.INSTANCE.serialize(value.sharedContentRemoveMemberDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_REQUEST_ACCESS_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_request_access_details", g);
                    SharedContentRequestAccessDetails.Serializer.INSTANCE.serialize(value.sharedContentRequestAccessDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_RESTORE_INVITEES_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_restore_invitees_details", g);
                    SharedContentRestoreInviteesDetails.Serializer.INSTANCE.serialize(value.sharedContentRestoreInviteesDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_RESTORE_MEMBER_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_restore_member_details", g);
                    SharedContentRestoreMemberDetails.Serializer.INSTANCE.serialize(value.sharedContentRestoreMemberDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_UNSHARE_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_unshare_details", g);
                    SharedContentUnshareDetails.Serializer.INSTANCE.serialize(value.sharedContentUnshareDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_VIEW_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_content_view_details", g);
                    SharedContentViewDetails.Serializer.INSTANCE.serialize(value.sharedContentViewDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_FOLDER_CHANGE_LINK_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_folder_change_link_policy_details", g);
                    SharedFolderChangeLinkPolicyDetails.Serializer.INSTANCE.serialize(value.sharedFolderChangeLinkPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_folder_change_members_inheritance_policy_details", g);
                    SharedFolderChangeMembersInheritancePolicyDetails.Serializer.INSTANCE.serialize(value.sharedFolderChangeMembersInheritancePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_folder_change_members_management_policy_details", g);
                    SharedFolderChangeMembersManagementPolicyDetails.Serializer.INSTANCE.serialize(value.sharedFolderChangeMembersManagementPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_FOLDER_CHANGE_MEMBERS_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_folder_change_members_policy_details", g);
                    SharedFolderChangeMembersPolicyDetails.Serializer.INSTANCE.serialize(value.sharedFolderChangeMembersPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_FOLDER_CREATE_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_folder_create_details", g);
                    SharedFolderCreateDetails.Serializer.INSTANCE.serialize(value.sharedFolderCreateDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_FOLDER_DECLINE_INVITATION_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_folder_decline_invitation_details", g);
                    SharedFolderDeclineInvitationDetails.Serializer.INSTANCE.serialize(value.sharedFolderDeclineInvitationDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_FOLDER_MOUNT_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_folder_mount_details", g);
                    SharedFolderMountDetails.Serializer.INSTANCE.serialize(value.sharedFolderMountDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_FOLDER_NEST_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_folder_nest_details", g);
                    SharedFolderNestDetails.Serializer.INSTANCE.serialize(value.sharedFolderNestDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_FOLDER_TRANSFER_OWNERSHIP_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_folder_transfer_ownership_details", g);
                    SharedFolderTransferOwnershipDetails.Serializer.INSTANCE.serialize(value.sharedFolderTransferOwnershipDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_FOLDER_UNMOUNT_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_folder_unmount_details", g);
                    SharedFolderUnmountDetails.Serializer.INSTANCE.serialize(value.sharedFolderUnmountDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_ADD_EXPIRY_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_link_add_expiry_details", g);
                    SharedLinkAddExpiryDetails.Serializer.INSTANCE.serialize(value.sharedLinkAddExpiryDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_CHANGE_EXPIRY_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_link_change_expiry_details", g);
                    SharedLinkChangeExpiryDetails.Serializer.INSTANCE.serialize(value.sharedLinkChangeExpiryDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_CHANGE_VISIBILITY_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_link_change_visibility_details", g);
                    SharedLinkChangeVisibilityDetails.Serializer.INSTANCE.serialize(value.sharedLinkChangeVisibilityDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_COPY_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_link_copy_details", g);
                    SharedLinkCopyDetails.Serializer.INSTANCE.serialize(value.sharedLinkCopyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_CREATE_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_link_create_details", g);
                    SharedLinkCreateDetails.Serializer.INSTANCE.serialize(value.sharedLinkCreateDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_DISABLE_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_link_disable_details", g);
                    SharedLinkDisableDetails.Serializer.INSTANCE.serialize(value.sharedLinkDisableDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_DOWNLOAD_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_link_download_details", g);
                    SharedLinkDownloadDetails.Serializer.INSTANCE.serialize(value.sharedLinkDownloadDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_REMOVE_EXPIRY_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_link_remove_expiry_details", g);
                    SharedLinkRemoveExpiryDetails.Serializer.INSTANCE.serialize(value.sharedLinkRemoveExpiryDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_SETTINGS_ADD_EXPIRATION_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_link_settings_add_expiration_details", g);
                    SharedLinkSettingsAddExpirationDetails.Serializer.INSTANCE.serialize(value.sharedLinkSettingsAddExpirationDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_SETTINGS_ADD_PASSWORD_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_link_settings_add_password_details", g);
                    SharedLinkSettingsAddPasswordDetails.Serializer.INSTANCE.serialize(value.sharedLinkSettingsAddPasswordDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_link_settings_allow_download_disabled_details", g);
                    SharedLinkSettingsAllowDownloadDisabledDetails.Serializer.INSTANCE.serialize(value.sharedLinkSettingsAllowDownloadDisabledDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_link_settings_allow_download_enabled_details", g);
                    SharedLinkSettingsAllowDownloadEnabledDetails.Serializer.INSTANCE.serialize(value.sharedLinkSettingsAllowDownloadEnabledDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_SETTINGS_CHANGE_AUDIENCE_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_link_settings_change_audience_details", g);
                    SharedLinkSettingsChangeAudienceDetails.Serializer.INSTANCE.serialize(value.sharedLinkSettingsChangeAudienceDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_SETTINGS_CHANGE_EXPIRATION_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_link_settings_change_expiration_details", g);
                    SharedLinkSettingsChangeExpirationDetails.Serializer.INSTANCE.serialize(value.sharedLinkSettingsChangeExpirationDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_SETTINGS_CHANGE_PASSWORD_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_link_settings_change_password_details", g);
                    SharedLinkSettingsChangePasswordDetails.Serializer.INSTANCE.serialize(value.sharedLinkSettingsChangePasswordDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_SETTINGS_REMOVE_EXPIRATION_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_link_settings_remove_expiration_details", g);
                    SharedLinkSettingsRemoveExpirationDetails.Serializer.INSTANCE.serialize(value.sharedLinkSettingsRemoveExpirationDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_SETTINGS_REMOVE_PASSWORD_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_link_settings_remove_password_details", g);
                    SharedLinkSettingsRemovePasswordDetails.Serializer.INSTANCE.serialize(value.sharedLinkSettingsRemovePasswordDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_SHARE_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_link_share_details", g);
                    SharedLinkShareDetails.Serializer.INSTANCE.serialize(value.sharedLinkShareDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_VIEW_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_link_view_details", g);
                    SharedLinkViewDetails.Serializer.INSTANCE.serialize(value.sharedLinkViewDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_NOTE_OPENED_DETAILS: {
                    g.writeStartObject();
                    writeTag("shared_note_opened_details", g);
                    SharedNoteOpenedDetails.Serializer.INSTANCE.serialize(value.sharedNoteOpenedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHMODEL_DISABLE_DOWNLOADS_DETAILS: {
                    g.writeStartObject();
                    writeTag("shmodel_disable_downloads_details", g);
                    ShmodelDisableDownloadsDetails.Serializer.INSTANCE.serialize(value.shmodelDisableDownloadsDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHMODEL_ENABLE_DOWNLOADS_DETAILS: {
                    g.writeStartObject();
                    writeTag("shmodel_enable_downloads_details", g);
                    ShmodelEnableDownloadsDetails.Serializer.INSTANCE.serialize(value.shmodelEnableDownloadsDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHMODEL_GROUP_SHARE_DETAILS: {
                    g.writeStartObject();
                    writeTag("shmodel_group_share_details", g);
                    ShmodelGroupShareDetails.Serializer.INSTANCE.serialize(value.shmodelGroupShareDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_ACCESS_GRANTED_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_access_granted_details", g);
                    ShowcaseAccessGrantedDetails.Serializer.INSTANCE.serialize(value.showcaseAccessGrantedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_ADD_MEMBER_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_add_member_details", g);
                    ShowcaseAddMemberDetails.Serializer.INSTANCE.serialize(value.showcaseAddMemberDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_ARCHIVED_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_archived_details", g);
                    ShowcaseArchivedDetails.Serializer.INSTANCE.serialize(value.showcaseArchivedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_CREATED_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_created_details", g);
                    ShowcaseCreatedDetails.Serializer.INSTANCE.serialize(value.showcaseCreatedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_DELETE_COMMENT_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_delete_comment_details", g);
                    ShowcaseDeleteCommentDetails.Serializer.INSTANCE.serialize(value.showcaseDeleteCommentDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_EDITED_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_edited_details", g);
                    ShowcaseEditedDetails.Serializer.INSTANCE.serialize(value.showcaseEditedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_EDIT_COMMENT_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_edit_comment_details", g);
                    ShowcaseEditCommentDetails.Serializer.INSTANCE.serialize(value.showcaseEditCommentDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_FILE_ADDED_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_file_added_details", g);
                    ShowcaseFileAddedDetails.Serializer.INSTANCE.serialize(value.showcaseFileAddedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_FILE_DOWNLOAD_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_file_download_details", g);
                    ShowcaseFileDownloadDetails.Serializer.INSTANCE.serialize(value.showcaseFileDownloadDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_FILE_REMOVED_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_file_removed_details", g);
                    ShowcaseFileRemovedDetails.Serializer.INSTANCE.serialize(value.showcaseFileRemovedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_FILE_VIEW_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_file_view_details", g);
                    ShowcaseFileViewDetails.Serializer.INSTANCE.serialize(value.showcaseFileViewDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_PERMANENTLY_DELETED_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_permanently_deleted_details", g);
                    ShowcasePermanentlyDeletedDetails.Serializer.INSTANCE.serialize(value.showcasePermanentlyDeletedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_POST_COMMENT_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_post_comment_details", g);
                    ShowcasePostCommentDetails.Serializer.INSTANCE.serialize(value.showcasePostCommentDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_REMOVE_MEMBER_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_remove_member_details", g);
                    ShowcaseRemoveMemberDetails.Serializer.INSTANCE.serialize(value.showcaseRemoveMemberDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_RENAMED_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_renamed_details", g);
                    ShowcaseRenamedDetails.Serializer.INSTANCE.serialize(value.showcaseRenamedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_REQUEST_ACCESS_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_request_access_details", g);
                    ShowcaseRequestAccessDetails.Serializer.INSTANCE.serialize(value.showcaseRequestAccessDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_RESOLVE_COMMENT_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_resolve_comment_details", g);
                    ShowcaseResolveCommentDetails.Serializer.INSTANCE.serialize(value.showcaseResolveCommentDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_RESTORED_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_restored_details", g);
                    ShowcaseRestoredDetails.Serializer.INSTANCE.serialize(value.showcaseRestoredDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_TRASHED_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_trashed_details", g);
                    ShowcaseTrashedDetails.Serializer.INSTANCE.serialize(value.showcaseTrashedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_TRASHED_DEPRECATED_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_trashed_deprecated_details", g);
                    ShowcaseTrashedDeprecatedDetails.Serializer.INSTANCE.serialize(value.showcaseTrashedDeprecatedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_UNRESOLVE_COMMENT_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_unresolve_comment_details", g);
                    ShowcaseUnresolveCommentDetails.Serializer.INSTANCE.serialize(value.showcaseUnresolveCommentDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_UNTRASHED_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_untrashed_details", g);
                    ShowcaseUntrashedDetails.Serializer.INSTANCE.serialize(value.showcaseUntrashedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_UNTRASHED_DEPRECATED_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_untrashed_deprecated_details", g);
                    ShowcaseUntrashedDeprecatedDetails.Serializer.INSTANCE.serialize(value.showcaseUntrashedDeprecatedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_VIEW_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_view_details", g);
                    ShowcaseViewDetails.Serializer.INSTANCE.serialize(value.showcaseViewDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_ADD_CERT_DETAILS: {
                    g.writeStartObject();
                    writeTag("sso_add_cert_details", g);
                    SsoAddCertDetails.Serializer.INSTANCE.serialize(value.ssoAddCertDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_ADD_LOGIN_URL_DETAILS: {
                    g.writeStartObject();
                    writeTag("sso_add_login_url_details", g);
                    SsoAddLoginUrlDetails.Serializer.INSTANCE.serialize(value.ssoAddLoginUrlDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_ADD_LOGOUT_URL_DETAILS: {
                    g.writeStartObject();
                    writeTag("sso_add_logout_url_details", g);
                    SsoAddLogoutUrlDetails.Serializer.INSTANCE.serialize(value.ssoAddLogoutUrlDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_CHANGE_CERT_DETAILS: {
                    g.writeStartObject();
                    writeTag("sso_change_cert_details", g);
                    SsoChangeCertDetails.Serializer.INSTANCE.serialize(value.ssoChangeCertDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_CHANGE_LOGIN_URL_DETAILS: {
                    g.writeStartObject();
                    writeTag("sso_change_login_url_details", g);
                    SsoChangeLoginUrlDetails.Serializer.INSTANCE.serialize(value.ssoChangeLoginUrlDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_CHANGE_LOGOUT_URL_DETAILS: {
                    g.writeStartObject();
                    writeTag("sso_change_logout_url_details", g);
                    SsoChangeLogoutUrlDetails.Serializer.INSTANCE.serialize(value.ssoChangeLogoutUrlDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_CHANGE_SAML_IDENTITY_MODE_DETAILS: {
                    g.writeStartObject();
                    writeTag("sso_change_saml_identity_mode_details", g);
                    SsoChangeSamlIdentityModeDetails.Serializer.INSTANCE.serialize(value.ssoChangeSamlIdentityModeDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_REMOVE_CERT_DETAILS: {
                    g.writeStartObject();
                    writeTag("sso_remove_cert_details", g);
                    SsoRemoveCertDetails.Serializer.INSTANCE.serialize(value.ssoRemoveCertDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_REMOVE_LOGIN_URL_DETAILS: {
                    g.writeStartObject();
                    writeTag("sso_remove_login_url_details", g);
                    SsoRemoveLoginUrlDetails.Serializer.INSTANCE.serialize(value.ssoRemoveLoginUrlDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_REMOVE_LOGOUT_URL_DETAILS: {
                    g.writeStartObject();
                    writeTag("sso_remove_logout_url_details", g);
                    SsoRemoveLogoutUrlDetails.Serializer.INSTANCE.serialize(value.ssoRemoveLogoutUrlDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_FOLDER_CHANGE_STATUS_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_folder_change_status_details", g);
                    TeamFolderChangeStatusDetails.Serializer.INSTANCE.serialize(value.teamFolderChangeStatusDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_FOLDER_CREATE_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_folder_create_details", g);
                    TeamFolderCreateDetails.Serializer.INSTANCE.serialize(value.teamFolderCreateDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_FOLDER_DOWNGRADE_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_folder_downgrade_details", g);
                    TeamFolderDowngradeDetails.Serializer.INSTANCE.serialize(value.teamFolderDowngradeDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_FOLDER_PERMANENTLY_DELETE_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_folder_permanently_delete_details", g);
                    TeamFolderPermanentlyDeleteDetails.Serializer.INSTANCE.serialize(value.teamFolderPermanentlyDeleteDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_FOLDER_RENAME_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_folder_rename_details", g);
                    TeamFolderRenameDetails.Serializer.INSTANCE.serialize(value.teamFolderRenameDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_selective_sync_settings_changed_details", g);
                    TeamSelectiveSyncSettingsChangedDetails.Serializer.INSTANCE.serialize(value.teamSelectiveSyncSettingsChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ACCOUNT_CAPTURE_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("account_capture_change_policy_details", g);
                    AccountCaptureChangePolicyDetails.Serializer.INSTANCE.serialize(value.accountCaptureChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ADMIN_EMAIL_REMINDERS_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("admin_email_reminders_changed_details", g);
                    AdminEmailRemindersChangedDetails.Serializer.INSTANCE.serialize(value.adminEmailRemindersChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ALLOW_DOWNLOAD_DISABLED_DETAILS: {
                    g.writeStartObject();
                    writeTag("allow_download_disabled_details", g);
                    AllowDownloadDisabledDetails.Serializer.INSTANCE.serialize(value.allowDownloadDisabledDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ALLOW_DOWNLOAD_ENABLED_DETAILS: {
                    g.writeStartObject();
                    writeTag("allow_download_enabled_details", g);
                    AllowDownloadEnabledDetails.Serializer.INSTANCE.serialize(value.allowDownloadEnabledDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case APP_PERMISSIONS_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("app_permissions_changed_details", g);
                    AppPermissionsChangedDetails.Serializer.INSTANCE.serialize(value.appPermissionsChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case CAMERA_UPLOADS_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("camera_uploads_policy_changed_details", g);
                    CameraUploadsPolicyChangedDetails.Serializer.INSTANCE.serialize(value.cameraUploadsPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case CAPTURE_TRANSCRIPT_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("capture_transcript_policy_changed_details", g);
                    CaptureTranscriptPolicyChangedDetails.Serializer.INSTANCE.serialize(value.captureTranscriptPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case CLASSIFICATION_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("classification_change_policy_details", g);
                    ClassificationChangePolicyDetails.Serializer.INSTANCE.serialize(value.classificationChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case COMPUTER_BACKUP_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("computer_backup_policy_changed_details", g);
                    ComputerBackupPolicyChangedDetails.Serializer.INSTANCE.serialize(value.computerBackupPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case CONTENT_ADMINISTRATION_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("content_administration_policy_changed_details", g);
                    ContentAdministrationPolicyChangedDetails.Serializer.INSTANCE.serialize(value.contentAdministrationPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("data_placement_restriction_change_policy_details", g);
                    DataPlacementRestrictionChangePolicyDetails.Serializer.INSTANCE.serialize(value.dataPlacementRestrictionChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("data_placement_restriction_satisfy_policy_details", g);
                    DataPlacementRestrictionSatisfyPolicyDetails.Serializer.INSTANCE.serialize(value.dataPlacementRestrictionSatisfyPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_APPROVALS_ADD_EXCEPTION_DETAILS: {
                    g.writeStartObject();
                    writeTag("device_approvals_add_exception_details", g);
                    DeviceApprovalsAddExceptionDetails.Serializer.INSTANCE.serialize(value.deviceApprovalsAddExceptionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("device_approvals_change_desktop_policy_details", g);
                    DeviceApprovalsChangeDesktopPolicyDetails.Serializer.INSTANCE.serialize(value.deviceApprovalsChangeDesktopPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_APPROVALS_CHANGE_MOBILE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("device_approvals_change_mobile_policy_details", g);
                    DeviceApprovalsChangeMobilePolicyDetails.Serializer.INSTANCE.serialize(value.deviceApprovalsChangeMobilePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION_DETAILS: {
                    g.writeStartObject();
                    writeTag("device_approvals_change_overage_action_details", g);
                    DeviceApprovalsChangeOverageActionDetails.Serializer.INSTANCE.serialize(value.deviceApprovalsChangeOverageActionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_APPROVALS_CHANGE_UNLINK_ACTION_DETAILS: {
                    g.writeStartObject();
                    writeTag("device_approvals_change_unlink_action_details", g);
                    DeviceApprovalsChangeUnlinkActionDetails.Serializer.INSTANCE.serialize(value.deviceApprovalsChangeUnlinkActionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_APPROVALS_REMOVE_EXCEPTION_DETAILS: {
                    g.writeStartObject();
                    writeTag("device_approvals_remove_exception_details", g);
                    DeviceApprovalsRemoveExceptionDetails.Serializer.INSTANCE.serialize(value.deviceApprovalsRemoveExceptionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DIRECTORY_RESTRICTIONS_ADD_MEMBERS_DETAILS: {
                    g.writeStartObject();
                    writeTag("directory_restrictions_add_members_details", g);
                    DirectoryRestrictionsAddMembersDetails.Serializer.INSTANCE.serialize(value.directoryRestrictionsAddMembersDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS_DETAILS: {
                    g.writeStartObject();
                    writeTag("directory_restrictions_remove_members_details", g);
                    DirectoryRestrictionsRemoveMembersDetails.Serializer.INSTANCE.serialize(value.directoryRestrictionsRemoveMembersDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DROPBOX_PASSWORDS_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("dropbox_passwords_policy_changed_details", g);
                    DropboxPasswordsPolicyChangedDetails.Serializer.INSTANCE.serialize(value.dropboxPasswordsPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EMAIL_INGEST_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("email_ingest_policy_changed_details", g);
                    EmailIngestPolicyChangedDetails.Serializer.INSTANCE.serialize(value.emailIngestPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EMM_ADD_EXCEPTION_DETAILS: {
                    g.writeStartObject();
                    writeTag("emm_add_exception_details", g);
                    EmmAddExceptionDetails.Serializer.INSTANCE.serialize(value.emmAddExceptionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EMM_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("emm_change_policy_details", g);
                    EmmChangePolicyDetails.Serializer.INSTANCE.serialize(value.emmChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EMM_REMOVE_EXCEPTION_DETAILS: {
                    g.writeStartObject();
                    writeTag("emm_remove_exception_details", g);
                    EmmRemoveExceptionDetails.Serializer.INSTANCE.serialize(value.emmRemoveExceptionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EXTENDED_VERSION_HISTORY_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("extended_version_history_change_policy_details", g);
                    ExtendedVersionHistoryChangePolicyDetails.Serializer.INSTANCE.serialize(value.extendedVersionHistoryChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("external_drive_backup_policy_changed_details", g);
                    ExternalDriveBackupPolicyChangedDetails.Serializer.INSTANCE.serialize(value.externalDriveBackupPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_COMMENTS_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_comments_change_policy_details", g);
                    FileCommentsChangePolicyDetails.Serializer.INSTANCE.serialize(value.fileCommentsChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_LOCKING_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_locking_policy_changed_details", g);
                    FileLockingPolicyChangedDetails.Serializer.INSTANCE.serialize(value.fileLockingPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_PROVIDER_MIGRATION_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_provider_migration_policy_changed_details", g);
                    FileProviderMigrationPolicyChangedDetails.Serializer.INSTANCE.serialize(value.fileProviderMigrationPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_REQUESTS_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_requests_change_policy_details", g);
                    FileRequestsChangePolicyDetails.Serializer.INSTANCE.serialize(value.fileRequestsChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_REQUESTS_EMAILS_ENABLED_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_requests_emails_enabled_details", g);
                    FileRequestsEmailsEnabledDetails.Serializer.INSTANCE.serialize(value.fileRequestsEmailsEnabledDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_requests_emails_restricted_to_team_only_details", g);
                    FileRequestsEmailsRestrictedToTeamOnlyDetails.Serializer.INSTANCE.serialize(value.fileRequestsEmailsRestrictedToTeamOnlyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_TRANSFERS_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("file_transfers_policy_changed_details", g);
                    FileTransfersPolicyChangedDetails.Serializer.INSTANCE.serialize(value.fileTransfersPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOOGLE_SSO_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("google_sso_change_policy_details", g);
                    GoogleSsoChangePolicyDetails.Serializer.INSTANCE.serialize(value.googleSsoChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_USER_MANAGEMENT_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("group_user_management_change_policy_details", g);
                    GroupUserManagementChangePolicyDetails.Serializer.INSTANCE.serialize(value.groupUserManagementChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case INTEGRATION_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("integration_policy_changed_details", g);
                    IntegrationPolicyChangedDetails.Serializer.INSTANCE.serialize(value.integrationPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("invite_acceptance_email_policy_changed_details", g);
                    InviteAcceptanceEmailPolicyChangedDetails.Serializer.INSTANCE.serialize(value.inviteAcceptanceEmailPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_REQUESTS_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_requests_change_policy_details", g);
                    MemberRequestsChangePolicyDetails.Serializer.INSTANCE.serialize(value.memberRequestsChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SEND_INVITE_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_send_invite_policy_changed_details", g);
                    MemberSendInvitePolicyChangedDetails.Serializer.INSTANCE.serialize(value.memberSendInvitePolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SPACE_LIMITS_ADD_EXCEPTION_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_space_limits_add_exception_details", g);
                    MemberSpaceLimitsAddExceptionDetails.Serializer.INSTANCE.serialize(value.memberSpaceLimitsAddExceptionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_space_limits_change_caps_type_policy_details", g);
                    MemberSpaceLimitsChangeCapsTypePolicyDetails.Serializer.INSTANCE.serialize(value.memberSpaceLimitsChangeCapsTypePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SPACE_LIMITS_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_space_limits_change_policy_details", g);
                    MemberSpaceLimitsChangePolicyDetails.Serializer.INSTANCE.serialize(value.memberSpaceLimitsChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_space_limits_remove_exception_details", g);
                    MemberSpaceLimitsRemoveExceptionDetails.Serializer.INSTANCE.serialize(value.memberSpaceLimitsRemoveExceptionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SUGGESTIONS_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("member_suggestions_change_policy_details", g);
                    MemberSuggestionsChangePolicyDetails.Serializer.INSTANCE.serialize(value.memberSuggestionsChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("microsoft_office_addin_change_policy_details", g);
                    MicrosoftOfficeAddinChangePolicyDetails.Serializer.INSTANCE.serialize(value.microsoftOfficeAddinChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NETWORK_CONTROL_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("network_control_change_policy_details", g);
                    NetworkControlChangePolicyDetails.Serializer.INSTANCE.serialize(value.networkControlChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CHANGE_DEPLOYMENT_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_change_deployment_policy_details", g);
                    PaperChangeDeploymentPolicyDetails.Serializer.INSTANCE.serialize(value.paperChangeDeploymentPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CHANGE_MEMBER_LINK_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_change_member_link_policy_details", g);
                    PaperChangeMemberLinkPolicyDetails.Serializer.INSTANCE.serialize(value.paperChangeMemberLinkPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CHANGE_MEMBER_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_change_member_policy_details", g);
                    PaperChangeMemberPolicyDetails.Serializer.INSTANCE.serialize(value.paperChangeMemberPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_change_policy_details", g);
                    PaperChangePolicyDetails.Serializer.INSTANCE.serialize(value.paperChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DEFAULT_FOLDER_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_default_folder_policy_changed_details", g);
                    PaperDefaultFolderPolicyChangedDetails.Serializer.INSTANCE.serialize(value.paperDefaultFolderPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DESKTOP_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_desktop_policy_changed_details", g);
                    PaperDesktopPolicyChangedDetails.Serializer.INSTANCE.serialize(value.paperDesktopPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_ENABLED_USERS_GROUP_ADDITION_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_enabled_users_group_addition_details", g);
                    PaperEnabledUsersGroupAdditionDetails.Serializer.INSTANCE.serialize(value.paperEnabledUsersGroupAdditionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_ENABLED_USERS_GROUP_REMOVAL_DETAILS: {
                    g.writeStartObject();
                    writeTag("paper_enabled_users_group_removal_details", g);
                    PaperEnabledUsersGroupRemovalDetails.Serializer.INSTANCE.serialize(value.paperEnabledUsersGroupRemovalDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("password_strength_requirements_change_policy_details", g);
                    PasswordStrengthRequirementsChangePolicyDetails.Serializer.INSTANCE.serialize(value.passwordStrengthRequirementsChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PERMANENT_DELETE_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("permanent_delete_change_policy_details", g);
                    PermanentDeleteChangePolicyDetails.Serializer.INSTANCE.serialize(value.permanentDeleteChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case RESELLER_SUPPORT_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("reseller_support_change_policy_details", g);
                    ResellerSupportChangePolicyDetails.Serializer.INSTANCE.serialize(value.resellerSupportChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case REWIND_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("rewind_policy_changed_details", g);
                    RewindPolicyChangedDetails.Serializer.INSTANCE.serialize(value.rewindPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SEND_FOR_SIGNATURE_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("send_for_signature_policy_changed_details", g);
                    SendForSignaturePolicyChangedDetails.Serializer.INSTANCE.serialize(value.sendForSignaturePolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARING_CHANGE_FOLDER_JOIN_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("sharing_change_folder_join_policy_details", g);
                    SharingChangeFolderJoinPolicyDetails.Serializer.INSTANCE.serialize(value.sharingChangeFolderJoinPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("sharing_change_link_allow_change_expiration_policy_details", g);
                    SharingChangeLinkAllowChangeExpirationPolicyDetails.Serializer.INSTANCE.serialize(value.sharingChangeLinkAllowChangeExpirationPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("sharing_change_link_default_expiration_policy_details", g);
                    SharingChangeLinkDefaultExpirationPolicyDetails.Serializer.INSTANCE.serialize(value.sharingChangeLinkDefaultExpirationPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("sharing_change_link_enforce_password_policy_details", g);
                    SharingChangeLinkEnforcePasswordPolicyDetails.Serializer.INSTANCE.serialize(value.sharingChangeLinkEnforcePasswordPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARING_CHANGE_LINK_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("sharing_change_link_policy_details", g);
                    SharingChangeLinkPolicyDetails.Serializer.INSTANCE.serialize(value.sharingChangeLinkPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARING_CHANGE_MEMBER_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("sharing_change_member_policy_details", g);
                    SharingChangeMemberPolicyDetails.Serializer.INSTANCE.serialize(value.sharingChangeMemberPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_CHANGE_DOWNLOAD_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_change_download_policy_details", g);
                    ShowcaseChangeDownloadPolicyDetails.Serializer.INSTANCE.serialize(value.showcaseChangeDownloadPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_CHANGE_ENABLED_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_change_enabled_policy_details", g);
                    ShowcaseChangeEnabledPolicyDetails.Serializer.INSTANCE.serialize(value.showcaseChangeEnabledPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("showcase_change_external_sharing_policy_details", g);
                    ShowcaseChangeExternalSharingPolicyDetails.Serializer.INSTANCE.serialize(value.showcaseChangeExternalSharingPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SMARTER_SMART_SYNC_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("smarter_smart_sync_policy_changed_details", g);
                    SmarterSmartSyncPolicyChangedDetails.Serializer.INSTANCE.serialize(value.smarterSmartSyncPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SMART_SYNC_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("smart_sync_change_policy_details", g);
                    SmartSyncChangePolicyDetails.Serializer.INSTANCE.serialize(value.smartSyncChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SMART_SYNC_NOT_OPT_OUT_DETAILS: {
                    g.writeStartObject();
                    writeTag("smart_sync_not_opt_out_details", g);
                    SmartSyncNotOptOutDetails.Serializer.INSTANCE.serialize(value.smartSyncNotOptOutDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SMART_SYNC_OPT_OUT_DETAILS: {
                    g.writeStartObject();
                    writeTag("smart_sync_opt_out_details", g);
                    SmartSyncOptOutDetails.Serializer.INSTANCE.serialize(value.smartSyncOptOutDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("sso_change_policy_details", g);
                    SsoChangePolicyDetails.Serializer.INSTANCE.serialize(value.ssoChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_BRANDING_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_branding_policy_changed_details", g);
                    TeamBrandingPolicyChangedDetails.Serializer.INSTANCE.serialize(value.teamBrandingPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_EXTENSIONS_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_extensions_policy_changed_details", g);
                    TeamExtensionsPolicyChangedDetails.Serializer.INSTANCE.serialize(value.teamExtensionsPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_SELECTIVE_SYNC_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_selective_sync_policy_changed_details", g);
                    TeamSelectiveSyncPolicyChangedDetails.Serializer.INSTANCE.serialize(value.teamSelectiveSyncPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_sharing_whitelist_subjects_changed_details", g);
                    TeamSharingWhitelistSubjectsChangedDetails.Serializer.INSTANCE.serialize(value.teamSharingWhitelistSubjectsChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TFA_ADD_EXCEPTION_DETAILS: {
                    g.writeStartObject();
                    writeTag("tfa_add_exception_details", g);
                    TfaAddExceptionDetails.Serializer.INSTANCE.serialize(value.tfaAddExceptionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TFA_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("tfa_change_policy_details", g);
                    TfaChangePolicyDetails.Serializer.INSTANCE.serialize(value.tfaChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TFA_REMOVE_EXCEPTION_DETAILS: {
                    g.writeStartObject();
                    writeTag("tfa_remove_exception_details", g);
                    TfaRemoveExceptionDetails.Serializer.INSTANCE.serialize(value.tfaRemoveExceptionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TWO_ACCOUNT_CHANGE_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("two_account_change_policy_details", g);
                    TwoAccountChangePolicyDetails.Serializer.INSTANCE.serialize(value.twoAccountChangePolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case VIEWER_INFO_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("viewer_info_policy_changed_details", g);
                    ViewerInfoPolicyChangedDetails.Serializer.INSTANCE.serialize(value.viewerInfoPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case WATERMARKING_POLICY_CHANGED_DETAILS: {
                    g.writeStartObject();
                    writeTag("watermarking_policy_changed_details", g);
                    WatermarkingPolicyChangedDetails.Serializer.INSTANCE.serialize(value.watermarkingPolicyChangedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT_DETAILS: {
                    g.writeStartObject();
                    writeTag("web_sessions_change_active_session_limit_details", g);
                    WebSessionsChangeActiveSessionLimitDetails.Serializer.INSTANCE.serialize(value.webSessionsChangeActiveSessionLimitDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("web_sessions_change_fixed_length_policy_details", g);
                    WebSessionsChangeFixedLengthPolicyDetails.Serializer.INSTANCE.serialize(value.webSessionsChangeFixedLengthPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY_DETAILS: {
                    g.writeStartObject();
                    writeTag("web_sessions_change_idle_length_policy_details", g);
                    WebSessionsChangeIdleLengthPolicyDetails.Serializer.INSTANCE.serialize(value.webSessionsChangeIdleLengthPolicyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL_DETAILS: {
                    g.writeStartObject();
                    writeTag("data_residency_migration_request_successful_details", g);
                    DataResidencyMigrationRequestSuccessfulDetails.Serializer.INSTANCE.serialize(value.dataResidencyMigrationRequestSuccessfulDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL_DETAILS: {
                    g.writeStartObject();
                    writeTag("data_residency_migration_request_unsuccessful_details", g);
                    DataResidencyMigrationRequestUnsuccessfulDetails.Serializer.INSTANCE.serialize(value.dataResidencyMigrationRequestUnsuccessfulDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_FROM_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_merge_from_details", g);
                    TeamMergeFromDetails.Serializer.INSTANCE.serialize(value.teamMergeFromDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_TO_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_merge_to_details", g);
                    TeamMergeToDetails.Serializer.INSTANCE.serialize(value.teamMergeToDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_PROFILE_ADD_BACKGROUND_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_profile_add_background_details", g);
                    TeamProfileAddBackgroundDetails.Serializer.INSTANCE.serialize(value.teamProfileAddBackgroundDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_PROFILE_ADD_LOGO_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_profile_add_logo_details", g);
                    TeamProfileAddLogoDetails.Serializer.INSTANCE.serialize(value.teamProfileAddLogoDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_PROFILE_CHANGE_BACKGROUND_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_profile_change_background_details", g);
                    TeamProfileChangeBackgroundDetails.Serializer.INSTANCE.serialize(value.teamProfileChangeBackgroundDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_profile_change_default_language_details", g);
                    TeamProfileChangeDefaultLanguageDetails.Serializer.INSTANCE.serialize(value.teamProfileChangeDefaultLanguageDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_PROFILE_CHANGE_LOGO_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_profile_change_logo_details", g);
                    TeamProfileChangeLogoDetails.Serializer.INSTANCE.serialize(value.teamProfileChangeLogoDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_PROFILE_CHANGE_NAME_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_profile_change_name_details", g);
                    TeamProfileChangeNameDetails.Serializer.INSTANCE.serialize(value.teamProfileChangeNameDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_PROFILE_REMOVE_BACKGROUND_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_profile_remove_background_details", g);
                    TeamProfileRemoveBackgroundDetails.Serializer.INSTANCE.serialize(value.teamProfileRemoveBackgroundDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_PROFILE_REMOVE_LOGO_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_profile_remove_logo_details", g);
                    TeamProfileRemoveLogoDetails.Serializer.INSTANCE.serialize(value.teamProfileRemoveLogoDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TFA_ADD_BACKUP_PHONE_DETAILS: {
                    g.writeStartObject();
                    writeTag("tfa_add_backup_phone_details", g);
                    TfaAddBackupPhoneDetails.Serializer.INSTANCE.serialize(value.tfaAddBackupPhoneDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TFA_ADD_SECURITY_KEY_DETAILS: {
                    g.writeStartObject();
                    writeTag("tfa_add_security_key_details", g);
                    TfaAddSecurityKeyDetails.Serializer.INSTANCE.serialize(value.tfaAddSecurityKeyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TFA_CHANGE_BACKUP_PHONE_DETAILS: {
                    g.writeStartObject();
                    writeTag("tfa_change_backup_phone_details", g);
                    TfaChangeBackupPhoneDetails.Serializer.INSTANCE.serialize(value.tfaChangeBackupPhoneDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TFA_CHANGE_STATUS_DETAILS: {
                    g.writeStartObject();
                    writeTag("tfa_change_status_details", g);
                    TfaChangeStatusDetails.Serializer.INSTANCE.serialize(value.tfaChangeStatusDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TFA_REMOVE_BACKUP_PHONE_DETAILS: {
                    g.writeStartObject();
                    writeTag("tfa_remove_backup_phone_details", g);
                    TfaRemoveBackupPhoneDetails.Serializer.INSTANCE.serialize(value.tfaRemoveBackupPhoneDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TFA_REMOVE_SECURITY_KEY_DETAILS: {
                    g.writeStartObject();
                    writeTag("tfa_remove_security_key_details", g);
                    TfaRemoveSecurityKeyDetails.Serializer.INSTANCE.serialize(value.tfaRemoveSecurityKeyDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TFA_RESET_DETAILS: {
                    g.writeStartObject();
                    writeTag("tfa_reset_details", g);
                    TfaResetDetails.Serializer.INSTANCE.serialize(value.tfaResetDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case CHANGED_ENTERPRISE_ADMIN_ROLE_DETAILS: {
                    g.writeStartObject();
                    writeTag("changed_enterprise_admin_role_details", g);
                    ChangedEnterpriseAdminRoleDetails.Serializer.INSTANCE.serialize(value.changedEnterpriseAdminRoleDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS_DETAILS: {
                    g.writeStartObject();
                    writeTag("changed_enterprise_connected_team_status_details", g);
                    ChangedEnterpriseConnectedTeamStatusDetails.Serializer.INSTANCE.serialize(value.changedEnterpriseConnectedTeamStatusDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ENDED_ENTERPRISE_ADMIN_SESSION_DETAILS: {
                    g.writeStartObject();
                    writeTag("ended_enterprise_admin_session_details", g);
                    EndedEnterpriseAdminSessionDetails.Serializer.INSTANCE.serialize(value.endedEnterpriseAdminSessionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED_DETAILS: {
                    g.writeStartObject();
                    writeTag("ended_enterprise_admin_session_deprecated_details", g);
                    EndedEnterpriseAdminSessionDeprecatedDetails.Serializer.INSTANCE.serialize(value.endedEnterpriseAdminSessionDeprecatedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ENTERPRISE_SETTINGS_LOCKING_DETAILS: {
                    g.writeStartObject();
                    writeTag("enterprise_settings_locking_details", g);
                    EnterpriseSettingsLockingDetails.Serializer.INSTANCE.serialize(value.enterpriseSettingsLockingDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GUEST_ADMIN_CHANGE_STATUS_DETAILS: {
                    g.writeStartObject();
                    writeTag("guest_admin_change_status_details", g);
                    GuestAdminChangeStatusDetails.Serializer.INSTANCE.serialize(value.guestAdminChangeStatusDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case STARTED_ENTERPRISE_ADMIN_SESSION_DETAILS: {
                    g.writeStartObject();
                    writeTag("started_enterprise_admin_session_details", g);
                    StartedEnterpriseAdminSessionDetails.Serializer.INSTANCE.serialize(value.startedEnterpriseAdminSessionDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_ACCEPTED_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_merge_request_accepted_details", g);
                    TeamMergeRequestAcceptedDetails.Serializer.INSTANCE.serialize(value.teamMergeRequestAcceptedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_merge_request_accepted_shown_to_primary_team_details", g);
                    TeamMergeRequestAcceptedShownToPrimaryTeamDetails.Serializer.INSTANCE.serialize(value.teamMergeRequestAcceptedShownToPrimaryTeamDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_merge_request_accepted_shown_to_secondary_team_details", g);
                    TeamMergeRequestAcceptedShownToSecondaryTeamDetails.Serializer.INSTANCE.serialize(value.teamMergeRequestAcceptedShownToSecondaryTeamDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_AUTO_CANCELED_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_merge_request_auto_canceled_details", g);
                    TeamMergeRequestAutoCanceledDetails.Serializer.INSTANCE.serialize(value.teamMergeRequestAutoCanceledDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_CANCELED_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_merge_request_canceled_details", g);
                    TeamMergeRequestCanceledDetails.Serializer.INSTANCE.serialize(value.teamMergeRequestCanceledDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_merge_request_canceled_shown_to_primary_team_details", g);
                    TeamMergeRequestCanceledShownToPrimaryTeamDetails.Serializer.INSTANCE.serialize(value.teamMergeRequestCanceledShownToPrimaryTeamDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_merge_request_canceled_shown_to_secondary_team_details", g);
                    TeamMergeRequestCanceledShownToSecondaryTeamDetails.Serializer.INSTANCE.serialize(value.teamMergeRequestCanceledShownToSecondaryTeamDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_EXPIRED_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_merge_request_expired_details", g);
                    TeamMergeRequestExpiredDetails.Serializer.INSTANCE.serialize(value.teamMergeRequestExpiredDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_merge_request_expired_shown_to_primary_team_details", g);
                    TeamMergeRequestExpiredShownToPrimaryTeamDetails.Serializer.INSTANCE.serialize(value.teamMergeRequestExpiredShownToPrimaryTeamDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_merge_request_expired_shown_to_secondary_team_details", g);
                    TeamMergeRequestExpiredShownToSecondaryTeamDetails.Serializer.INSTANCE.serialize(value.teamMergeRequestExpiredShownToSecondaryTeamDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_merge_request_rejected_shown_to_primary_team_details", g);
                    TeamMergeRequestRejectedShownToPrimaryTeamDetails.Serializer.INSTANCE.serialize(value.teamMergeRequestRejectedShownToPrimaryTeamDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_merge_request_rejected_shown_to_secondary_team_details", g);
                    TeamMergeRequestRejectedShownToSecondaryTeamDetails.Serializer.INSTANCE.serialize(value.teamMergeRequestRejectedShownToSecondaryTeamDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_REMINDER_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_merge_request_reminder_details", g);
                    TeamMergeRequestReminderDetails.Serializer.INSTANCE.serialize(value.teamMergeRequestReminderDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_merge_request_reminder_shown_to_primary_team_details", g);
                    TeamMergeRequestReminderShownToPrimaryTeamDetails.Serializer.INSTANCE.serialize(value.teamMergeRequestReminderShownToPrimaryTeamDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_merge_request_reminder_shown_to_secondary_team_details", g);
                    TeamMergeRequestReminderShownToSecondaryTeamDetails.Serializer.INSTANCE.serialize(value.teamMergeRequestReminderShownToSecondaryTeamDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_REVOKED_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_merge_request_revoked_details", g);
                    TeamMergeRequestRevokedDetails.Serializer.INSTANCE.serialize(value.teamMergeRequestRevokedDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_merge_request_sent_shown_to_primary_team_details", g);
                    TeamMergeRequestSentShownToPrimaryTeamDetails.Serializer.INSTANCE.serialize(value.teamMergeRequestSentShownToPrimaryTeamDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM_DETAILS: {
                    g.writeStartObject();
                    writeTag("team_merge_request_sent_shown_to_secondary_team_details", g);
                    TeamMergeRequestSentShownToSecondaryTeamDetails.Serializer.INSTANCE.serialize(value.teamMergeRequestSentShownToSecondaryTeamDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MISSING_DETAILS: {
                    g.writeStartObject();
                    writeTag("missing_details", g);
                    MissingDetails.Serializer.INSTANCE.serialize(value.missingDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                default: {
                    g.writeString("other");
                }
            }
        }

        @Override
        public EventDetails deserialize(JsonParser p) throws IOException, JsonParseException {
            EventDetails value;
            boolean collapsed;
            String tag;
            if (p.getCurrentToken() == JsonToken.VALUE_STRING) {
                collapsed = true;
                tag = getStringValue(p);
                p.nextToken();
            }
            else {
                collapsed = false;
                expectStartObject(p);
                tag = readTag(p);
            }
            if (tag == null) {
                throw new JsonParseException(p, "Required field missing: " + TAG_FIELD);
            }
            else if ("admin_alerting_alert_state_changed_details".equals(tag)) {
                AdminAlertingAlertStateChangedDetails fieldValue = null;
                fieldValue = AdminAlertingAlertStateChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.adminAlertingAlertStateChangedDetails(fieldValue);
            }
            else if ("admin_alerting_changed_alert_config_details".equals(tag)) {
                AdminAlertingChangedAlertConfigDetails fieldValue = null;
                fieldValue = AdminAlertingChangedAlertConfigDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.adminAlertingChangedAlertConfigDetails(fieldValue);
            }
            else if ("admin_alerting_triggered_alert_details".equals(tag)) {
                AdminAlertingTriggeredAlertDetails fieldValue = null;
                fieldValue = AdminAlertingTriggeredAlertDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.adminAlertingTriggeredAlertDetails(fieldValue);
            }
            else if ("app_blocked_by_permissions_details".equals(tag)) {
                AppBlockedByPermissionsDetails fieldValue = null;
                fieldValue = AppBlockedByPermissionsDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.appBlockedByPermissionsDetails(fieldValue);
            }
            else if ("app_link_team_details".equals(tag)) {
                AppLinkTeamDetails fieldValue = null;
                fieldValue = AppLinkTeamDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.appLinkTeamDetails(fieldValue);
            }
            else if ("app_link_user_details".equals(tag)) {
                AppLinkUserDetails fieldValue = null;
                fieldValue = AppLinkUserDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.appLinkUserDetails(fieldValue);
            }
            else if ("app_unlink_team_details".equals(tag)) {
                AppUnlinkTeamDetails fieldValue = null;
                fieldValue = AppUnlinkTeamDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.appUnlinkTeamDetails(fieldValue);
            }
            else if ("app_unlink_user_details".equals(tag)) {
                AppUnlinkUserDetails fieldValue = null;
                fieldValue = AppUnlinkUserDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.appUnlinkUserDetails(fieldValue);
            }
            else if ("integration_connected_details".equals(tag)) {
                IntegrationConnectedDetails fieldValue = null;
                fieldValue = IntegrationConnectedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.integrationConnectedDetails(fieldValue);
            }
            else if ("integration_disconnected_details".equals(tag)) {
                IntegrationDisconnectedDetails fieldValue = null;
                fieldValue = IntegrationDisconnectedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.integrationDisconnectedDetails(fieldValue);
            }
            else if ("file_add_comment_details".equals(tag)) {
                FileAddCommentDetails fieldValue = null;
                fieldValue = FileAddCommentDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileAddCommentDetails(fieldValue);
            }
            else if ("file_change_comment_subscription_details".equals(tag)) {
                FileChangeCommentSubscriptionDetails fieldValue = null;
                fieldValue = FileChangeCommentSubscriptionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileChangeCommentSubscriptionDetails(fieldValue);
            }
            else if ("file_delete_comment_details".equals(tag)) {
                FileDeleteCommentDetails fieldValue = null;
                fieldValue = FileDeleteCommentDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileDeleteCommentDetails(fieldValue);
            }
            else if ("file_edit_comment_details".equals(tag)) {
                FileEditCommentDetails fieldValue = null;
                fieldValue = FileEditCommentDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileEditCommentDetails(fieldValue);
            }
            else if ("file_like_comment_details".equals(tag)) {
                FileLikeCommentDetails fieldValue = null;
                fieldValue = FileLikeCommentDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileLikeCommentDetails(fieldValue);
            }
            else if ("file_resolve_comment_details".equals(tag)) {
                FileResolveCommentDetails fieldValue = null;
                fieldValue = FileResolveCommentDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileResolveCommentDetails(fieldValue);
            }
            else if ("file_unlike_comment_details".equals(tag)) {
                FileUnlikeCommentDetails fieldValue = null;
                fieldValue = FileUnlikeCommentDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileUnlikeCommentDetails(fieldValue);
            }
            else if ("file_unresolve_comment_details".equals(tag)) {
                FileUnresolveCommentDetails fieldValue = null;
                fieldValue = FileUnresolveCommentDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileUnresolveCommentDetails(fieldValue);
            }
            else if ("governance_policy_add_folders_details".equals(tag)) {
                GovernancePolicyAddFoldersDetails fieldValue = null;
                fieldValue = GovernancePolicyAddFoldersDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.governancePolicyAddFoldersDetails(fieldValue);
            }
            else if ("governance_policy_add_folder_failed_details".equals(tag)) {
                GovernancePolicyAddFolderFailedDetails fieldValue = null;
                fieldValue = GovernancePolicyAddFolderFailedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.governancePolicyAddFolderFailedDetails(fieldValue);
            }
            else if ("governance_policy_content_disposed_details".equals(tag)) {
                GovernancePolicyContentDisposedDetails fieldValue = null;
                fieldValue = GovernancePolicyContentDisposedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.governancePolicyContentDisposedDetails(fieldValue);
            }
            else if ("governance_policy_create_details".equals(tag)) {
                GovernancePolicyCreateDetails fieldValue = null;
                fieldValue = GovernancePolicyCreateDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.governancePolicyCreateDetails(fieldValue);
            }
            else if ("governance_policy_delete_details".equals(tag)) {
                GovernancePolicyDeleteDetails fieldValue = null;
                fieldValue = GovernancePolicyDeleteDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.governancePolicyDeleteDetails(fieldValue);
            }
            else if ("governance_policy_edit_details_details".equals(tag)) {
                GovernancePolicyEditDetailsDetails fieldValue = null;
                fieldValue = GovernancePolicyEditDetailsDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.governancePolicyEditDetailsDetails(fieldValue);
            }
            else if ("governance_policy_edit_duration_details".equals(tag)) {
                GovernancePolicyEditDurationDetails fieldValue = null;
                fieldValue = GovernancePolicyEditDurationDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.governancePolicyEditDurationDetails(fieldValue);
            }
            else if ("governance_policy_export_created_details".equals(tag)) {
                GovernancePolicyExportCreatedDetails fieldValue = null;
                fieldValue = GovernancePolicyExportCreatedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.governancePolicyExportCreatedDetails(fieldValue);
            }
            else if ("governance_policy_export_removed_details".equals(tag)) {
                GovernancePolicyExportRemovedDetails fieldValue = null;
                fieldValue = GovernancePolicyExportRemovedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.governancePolicyExportRemovedDetails(fieldValue);
            }
            else if ("governance_policy_remove_folders_details".equals(tag)) {
                GovernancePolicyRemoveFoldersDetails fieldValue = null;
                fieldValue = GovernancePolicyRemoveFoldersDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.governancePolicyRemoveFoldersDetails(fieldValue);
            }
            else if ("governance_policy_report_created_details".equals(tag)) {
                GovernancePolicyReportCreatedDetails fieldValue = null;
                fieldValue = GovernancePolicyReportCreatedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.governancePolicyReportCreatedDetails(fieldValue);
            }
            else if ("governance_policy_zip_part_downloaded_details".equals(tag)) {
                GovernancePolicyZipPartDownloadedDetails fieldValue = null;
                fieldValue = GovernancePolicyZipPartDownloadedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.governancePolicyZipPartDownloadedDetails(fieldValue);
            }
            else if ("legal_holds_activate_a_hold_details".equals(tag)) {
                LegalHoldsActivateAHoldDetails fieldValue = null;
                fieldValue = LegalHoldsActivateAHoldDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.legalHoldsActivateAHoldDetails(fieldValue);
            }
            else if ("legal_holds_add_members_details".equals(tag)) {
                LegalHoldsAddMembersDetails fieldValue = null;
                fieldValue = LegalHoldsAddMembersDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.legalHoldsAddMembersDetails(fieldValue);
            }
            else if ("legal_holds_change_hold_details_details".equals(tag)) {
                LegalHoldsChangeHoldDetailsDetails fieldValue = null;
                fieldValue = LegalHoldsChangeHoldDetailsDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.legalHoldsChangeHoldDetailsDetails(fieldValue);
            }
            else if ("legal_holds_change_hold_name_details".equals(tag)) {
                LegalHoldsChangeHoldNameDetails fieldValue = null;
                fieldValue = LegalHoldsChangeHoldNameDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.legalHoldsChangeHoldNameDetails(fieldValue);
            }
            else if ("legal_holds_export_a_hold_details".equals(tag)) {
                LegalHoldsExportAHoldDetails fieldValue = null;
                fieldValue = LegalHoldsExportAHoldDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.legalHoldsExportAHoldDetails(fieldValue);
            }
            else if ("legal_holds_export_cancelled_details".equals(tag)) {
                LegalHoldsExportCancelledDetails fieldValue = null;
                fieldValue = LegalHoldsExportCancelledDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.legalHoldsExportCancelledDetails(fieldValue);
            }
            else if ("legal_holds_export_downloaded_details".equals(tag)) {
                LegalHoldsExportDownloadedDetails fieldValue = null;
                fieldValue = LegalHoldsExportDownloadedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.legalHoldsExportDownloadedDetails(fieldValue);
            }
            else if ("legal_holds_export_removed_details".equals(tag)) {
                LegalHoldsExportRemovedDetails fieldValue = null;
                fieldValue = LegalHoldsExportRemovedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.legalHoldsExportRemovedDetails(fieldValue);
            }
            else if ("legal_holds_release_a_hold_details".equals(tag)) {
                LegalHoldsReleaseAHoldDetails fieldValue = null;
                fieldValue = LegalHoldsReleaseAHoldDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.legalHoldsReleaseAHoldDetails(fieldValue);
            }
            else if ("legal_holds_remove_members_details".equals(tag)) {
                LegalHoldsRemoveMembersDetails fieldValue = null;
                fieldValue = LegalHoldsRemoveMembersDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.legalHoldsRemoveMembersDetails(fieldValue);
            }
            else if ("legal_holds_report_a_hold_details".equals(tag)) {
                LegalHoldsReportAHoldDetails fieldValue = null;
                fieldValue = LegalHoldsReportAHoldDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.legalHoldsReportAHoldDetails(fieldValue);
            }
            else if ("device_change_ip_desktop_details".equals(tag)) {
                DeviceChangeIpDesktopDetails fieldValue = null;
                fieldValue = DeviceChangeIpDesktopDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.deviceChangeIpDesktopDetails(fieldValue);
            }
            else if ("device_change_ip_mobile_details".equals(tag)) {
                DeviceChangeIpMobileDetails fieldValue = null;
                fieldValue = DeviceChangeIpMobileDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.deviceChangeIpMobileDetails(fieldValue);
            }
            else if ("device_change_ip_web_details".equals(tag)) {
                DeviceChangeIpWebDetails fieldValue = null;
                fieldValue = DeviceChangeIpWebDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.deviceChangeIpWebDetails(fieldValue);
            }
            else if ("device_delete_on_unlink_fail_details".equals(tag)) {
                DeviceDeleteOnUnlinkFailDetails fieldValue = null;
                fieldValue = DeviceDeleteOnUnlinkFailDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.deviceDeleteOnUnlinkFailDetails(fieldValue);
            }
            else if ("device_delete_on_unlink_success_details".equals(tag)) {
                DeviceDeleteOnUnlinkSuccessDetails fieldValue = null;
                fieldValue = DeviceDeleteOnUnlinkSuccessDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.deviceDeleteOnUnlinkSuccessDetails(fieldValue);
            }
            else if ("device_link_fail_details".equals(tag)) {
                DeviceLinkFailDetails fieldValue = null;
                fieldValue = DeviceLinkFailDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.deviceLinkFailDetails(fieldValue);
            }
            else if ("device_link_success_details".equals(tag)) {
                DeviceLinkSuccessDetails fieldValue = null;
                fieldValue = DeviceLinkSuccessDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.deviceLinkSuccessDetails(fieldValue);
            }
            else if ("device_management_disabled_details".equals(tag)) {
                DeviceManagementDisabledDetails fieldValue = null;
                fieldValue = DeviceManagementDisabledDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.deviceManagementDisabledDetails(fieldValue);
            }
            else if ("device_management_enabled_details".equals(tag)) {
                DeviceManagementEnabledDetails fieldValue = null;
                fieldValue = DeviceManagementEnabledDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.deviceManagementEnabledDetails(fieldValue);
            }
            else if ("device_sync_backup_status_changed_details".equals(tag)) {
                DeviceSyncBackupStatusChangedDetails fieldValue = null;
                fieldValue = DeviceSyncBackupStatusChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.deviceSyncBackupStatusChangedDetails(fieldValue);
            }
            else if ("device_unlink_details".equals(tag)) {
                DeviceUnlinkDetails fieldValue = null;
                fieldValue = DeviceUnlinkDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.deviceUnlinkDetails(fieldValue);
            }
            else if ("dropbox_passwords_exported_details".equals(tag)) {
                DropboxPasswordsExportedDetails fieldValue = null;
                fieldValue = DropboxPasswordsExportedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.dropboxPasswordsExportedDetails(fieldValue);
            }
            else if ("dropbox_passwords_new_device_enrolled_details".equals(tag)) {
                DropboxPasswordsNewDeviceEnrolledDetails fieldValue = null;
                fieldValue = DropboxPasswordsNewDeviceEnrolledDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.dropboxPasswordsNewDeviceEnrolledDetails(fieldValue);
            }
            else if ("emm_refresh_auth_token_details".equals(tag)) {
                EmmRefreshAuthTokenDetails fieldValue = null;
                fieldValue = EmmRefreshAuthTokenDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.emmRefreshAuthTokenDetails(fieldValue);
            }
            else if ("external_drive_backup_eligibility_status_checked_details".equals(tag)) {
                ExternalDriveBackupEligibilityStatusCheckedDetails fieldValue = null;
                fieldValue = ExternalDriveBackupEligibilityStatusCheckedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.externalDriveBackupEligibilityStatusCheckedDetails(fieldValue);
            }
            else if ("external_drive_backup_status_changed_details".equals(tag)) {
                ExternalDriveBackupStatusChangedDetails fieldValue = null;
                fieldValue = ExternalDriveBackupStatusChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.externalDriveBackupStatusChangedDetails(fieldValue);
            }
            else if ("account_capture_change_availability_details".equals(tag)) {
                AccountCaptureChangeAvailabilityDetails fieldValue = null;
                fieldValue = AccountCaptureChangeAvailabilityDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.accountCaptureChangeAvailabilityDetails(fieldValue);
            }
            else if ("account_capture_migrate_account_details".equals(tag)) {
                AccountCaptureMigrateAccountDetails fieldValue = null;
                fieldValue = AccountCaptureMigrateAccountDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.accountCaptureMigrateAccountDetails(fieldValue);
            }
            else if ("account_capture_notification_emails_sent_details".equals(tag)) {
                AccountCaptureNotificationEmailsSentDetails fieldValue = null;
                fieldValue = AccountCaptureNotificationEmailsSentDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.accountCaptureNotificationEmailsSentDetails(fieldValue);
            }
            else if ("account_capture_relinquish_account_details".equals(tag)) {
                AccountCaptureRelinquishAccountDetails fieldValue = null;
                fieldValue = AccountCaptureRelinquishAccountDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.accountCaptureRelinquishAccountDetails(fieldValue);
            }
            else if ("disabled_domain_invites_details".equals(tag)) {
                DisabledDomainInvitesDetails fieldValue = null;
                fieldValue = DisabledDomainInvitesDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.disabledDomainInvitesDetails(fieldValue);
            }
            else if ("domain_invites_approve_request_to_join_team_details".equals(tag)) {
                DomainInvitesApproveRequestToJoinTeamDetails fieldValue = null;
                fieldValue = DomainInvitesApproveRequestToJoinTeamDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.domainInvitesApproveRequestToJoinTeamDetails(fieldValue);
            }
            else if ("domain_invites_decline_request_to_join_team_details".equals(tag)) {
                DomainInvitesDeclineRequestToJoinTeamDetails fieldValue = null;
                fieldValue = DomainInvitesDeclineRequestToJoinTeamDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.domainInvitesDeclineRequestToJoinTeamDetails(fieldValue);
            }
            else if ("domain_invites_email_existing_users_details".equals(tag)) {
                DomainInvitesEmailExistingUsersDetails fieldValue = null;
                fieldValue = DomainInvitesEmailExistingUsersDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.domainInvitesEmailExistingUsersDetails(fieldValue);
            }
            else if ("domain_invites_request_to_join_team_details".equals(tag)) {
                DomainInvitesRequestToJoinTeamDetails fieldValue = null;
                fieldValue = DomainInvitesRequestToJoinTeamDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.domainInvitesRequestToJoinTeamDetails(fieldValue);
            }
            else if ("domain_invites_set_invite_new_user_pref_to_no_details".equals(tag)) {
                DomainInvitesSetInviteNewUserPrefToNoDetails fieldValue = null;
                fieldValue = DomainInvitesSetInviteNewUserPrefToNoDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.domainInvitesSetInviteNewUserPrefToNoDetails(fieldValue);
            }
            else if ("domain_invites_set_invite_new_user_pref_to_yes_details".equals(tag)) {
                DomainInvitesSetInviteNewUserPrefToYesDetails fieldValue = null;
                fieldValue = DomainInvitesSetInviteNewUserPrefToYesDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.domainInvitesSetInviteNewUserPrefToYesDetails(fieldValue);
            }
            else if ("domain_verification_add_domain_fail_details".equals(tag)) {
                DomainVerificationAddDomainFailDetails fieldValue = null;
                fieldValue = DomainVerificationAddDomainFailDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.domainVerificationAddDomainFailDetails(fieldValue);
            }
            else if ("domain_verification_add_domain_success_details".equals(tag)) {
                DomainVerificationAddDomainSuccessDetails fieldValue = null;
                fieldValue = DomainVerificationAddDomainSuccessDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.domainVerificationAddDomainSuccessDetails(fieldValue);
            }
            else if ("domain_verification_remove_domain_details".equals(tag)) {
                DomainVerificationRemoveDomainDetails fieldValue = null;
                fieldValue = DomainVerificationRemoveDomainDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.domainVerificationRemoveDomainDetails(fieldValue);
            }
            else if ("enabled_domain_invites_details".equals(tag)) {
                EnabledDomainInvitesDetails fieldValue = null;
                fieldValue = EnabledDomainInvitesDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.enabledDomainInvitesDetails(fieldValue);
            }
            else if ("apply_naming_convention_details".equals(tag)) {
                ApplyNamingConventionDetails fieldValue = null;
                fieldValue = ApplyNamingConventionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.applyNamingConventionDetails(fieldValue);
            }
            else if ("create_folder_details".equals(tag)) {
                CreateFolderDetails fieldValue = null;
                fieldValue = CreateFolderDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.createFolderDetails(fieldValue);
            }
            else if ("file_add_details".equals(tag)) {
                FileAddDetails fieldValue = null;
                fieldValue = FileAddDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileAddDetails(fieldValue);
            }
            else if ("file_copy_details".equals(tag)) {
                FileCopyDetails fieldValue = null;
                fieldValue = FileCopyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileCopyDetails(fieldValue);
            }
            else if ("file_delete_details".equals(tag)) {
                FileDeleteDetails fieldValue = null;
                fieldValue = FileDeleteDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileDeleteDetails(fieldValue);
            }
            else if ("file_download_details".equals(tag)) {
                FileDownloadDetails fieldValue = null;
                fieldValue = FileDownloadDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileDownloadDetails(fieldValue);
            }
            else if ("file_edit_details".equals(tag)) {
                FileEditDetails fieldValue = null;
                fieldValue = FileEditDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileEditDetails(fieldValue);
            }
            else if ("file_get_copy_reference_details".equals(tag)) {
                FileGetCopyReferenceDetails fieldValue = null;
                fieldValue = FileGetCopyReferenceDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileGetCopyReferenceDetails(fieldValue);
            }
            else if ("file_locking_lock_status_changed_details".equals(tag)) {
                FileLockingLockStatusChangedDetails fieldValue = null;
                fieldValue = FileLockingLockStatusChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileLockingLockStatusChangedDetails(fieldValue);
            }
            else if ("file_move_details".equals(tag)) {
                FileMoveDetails fieldValue = null;
                fieldValue = FileMoveDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileMoveDetails(fieldValue);
            }
            else if ("file_permanently_delete_details".equals(tag)) {
                FilePermanentlyDeleteDetails fieldValue = null;
                fieldValue = FilePermanentlyDeleteDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.filePermanentlyDeleteDetails(fieldValue);
            }
            else if ("file_preview_details".equals(tag)) {
                FilePreviewDetails fieldValue = null;
                fieldValue = FilePreviewDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.filePreviewDetails(fieldValue);
            }
            else if ("file_rename_details".equals(tag)) {
                FileRenameDetails fieldValue = null;
                fieldValue = FileRenameDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileRenameDetails(fieldValue);
            }
            else if ("file_restore_details".equals(tag)) {
                FileRestoreDetails fieldValue = null;
                fieldValue = FileRestoreDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileRestoreDetails(fieldValue);
            }
            else if ("file_revert_details".equals(tag)) {
                FileRevertDetails fieldValue = null;
                fieldValue = FileRevertDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileRevertDetails(fieldValue);
            }
            else if ("file_rollback_changes_details".equals(tag)) {
                FileRollbackChangesDetails fieldValue = null;
                fieldValue = FileRollbackChangesDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileRollbackChangesDetails(fieldValue);
            }
            else if ("file_save_copy_reference_details".equals(tag)) {
                FileSaveCopyReferenceDetails fieldValue = null;
                fieldValue = FileSaveCopyReferenceDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileSaveCopyReferenceDetails(fieldValue);
            }
            else if ("folder_overview_description_changed_details".equals(tag)) {
                FolderOverviewDescriptionChangedDetails fieldValue = null;
                fieldValue = FolderOverviewDescriptionChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.folderOverviewDescriptionChangedDetails(fieldValue);
            }
            else if ("folder_overview_item_pinned_details".equals(tag)) {
                FolderOverviewItemPinnedDetails fieldValue = null;
                fieldValue = FolderOverviewItemPinnedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.folderOverviewItemPinnedDetails(fieldValue);
            }
            else if ("folder_overview_item_unpinned_details".equals(tag)) {
                FolderOverviewItemUnpinnedDetails fieldValue = null;
                fieldValue = FolderOverviewItemUnpinnedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.folderOverviewItemUnpinnedDetails(fieldValue);
            }
            else if ("object_label_added_details".equals(tag)) {
                ObjectLabelAddedDetails fieldValue = null;
                fieldValue = ObjectLabelAddedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.objectLabelAddedDetails(fieldValue);
            }
            else if ("object_label_removed_details".equals(tag)) {
                ObjectLabelRemovedDetails fieldValue = null;
                fieldValue = ObjectLabelRemovedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.objectLabelRemovedDetails(fieldValue);
            }
            else if ("object_label_updated_value_details".equals(tag)) {
                ObjectLabelUpdatedValueDetails fieldValue = null;
                fieldValue = ObjectLabelUpdatedValueDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.objectLabelUpdatedValueDetails(fieldValue);
            }
            else if ("organize_folder_with_tidy_details".equals(tag)) {
                OrganizeFolderWithTidyDetails fieldValue = null;
                fieldValue = OrganizeFolderWithTidyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.organizeFolderWithTidyDetails(fieldValue);
            }
            else if ("rewind_folder_details".equals(tag)) {
                RewindFolderDetails fieldValue = null;
                fieldValue = RewindFolderDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.rewindFolderDetails(fieldValue);
            }
            else if ("undo_naming_convention_details".equals(tag)) {
                UndoNamingConventionDetails fieldValue = null;
                fieldValue = UndoNamingConventionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.undoNamingConventionDetails(fieldValue);
            }
            else if ("undo_organize_folder_with_tidy_details".equals(tag)) {
                UndoOrganizeFolderWithTidyDetails fieldValue = null;
                fieldValue = UndoOrganizeFolderWithTidyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.undoOrganizeFolderWithTidyDetails(fieldValue);
            }
            else if ("user_tags_added_details".equals(tag)) {
                UserTagsAddedDetails fieldValue = null;
                fieldValue = UserTagsAddedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.userTagsAddedDetails(fieldValue);
            }
            else if ("user_tags_removed_details".equals(tag)) {
                UserTagsRemovedDetails fieldValue = null;
                fieldValue = UserTagsRemovedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.userTagsRemovedDetails(fieldValue);
            }
            else if ("email_ingest_receive_file_details".equals(tag)) {
                EmailIngestReceiveFileDetails fieldValue = null;
                fieldValue = EmailIngestReceiveFileDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.emailIngestReceiveFileDetails(fieldValue);
            }
            else if ("file_request_change_details".equals(tag)) {
                FileRequestChangeDetails fieldValue = null;
                fieldValue = FileRequestChangeDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileRequestChangeDetails(fieldValue);
            }
            else if ("file_request_close_details".equals(tag)) {
                FileRequestCloseDetails fieldValue = null;
                fieldValue = FileRequestCloseDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileRequestCloseDetails(fieldValue);
            }
            else if ("file_request_create_details".equals(tag)) {
                FileRequestCreateDetails fieldValue = null;
                fieldValue = FileRequestCreateDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileRequestCreateDetails(fieldValue);
            }
            else if ("file_request_delete_details".equals(tag)) {
                FileRequestDeleteDetails fieldValue = null;
                fieldValue = FileRequestDeleteDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileRequestDeleteDetails(fieldValue);
            }
            else if ("file_request_receive_file_details".equals(tag)) {
                FileRequestReceiveFileDetails fieldValue = null;
                fieldValue = FileRequestReceiveFileDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileRequestReceiveFileDetails(fieldValue);
            }
            else if ("group_add_external_id_details".equals(tag)) {
                GroupAddExternalIdDetails fieldValue = null;
                fieldValue = GroupAddExternalIdDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.groupAddExternalIdDetails(fieldValue);
            }
            else if ("group_add_member_details".equals(tag)) {
                GroupAddMemberDetails fieldValue = null;
                fieldValue = GroupAddMemberDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.groupAddMemberDetails(fieldValue);
            }
            else if ("group_change_external_id_details".equals(tag)) {
                GroupChangeExternalIdDetails fieldValue = null;
                fieldValue = GroupChangeExternalIdDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.groupChangeExternalIdDetails(fieldValue);
            }
            else if ("group_change_management_type_details".equals(tag)) {
                GroupChangeManagementTypeDetails fieldValue = null;
                fieldValue = GroupChangeManagementTypeDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.groupChangeManagementTypeDetails(fieldValue);
            }
            else if ("group_change_member_role_details".equals(tag)) {
                GroupChangeMemberRoleDetails fieldValue = null;
                fieldValue = GroupChangeMemberRoleDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.groupChangeMemberRoleDetails(fieldValue);
            }
            else if ("group_create_details".equals(tag)) {
                GroupCreateDetails fieldValue = null;
                fieldValue = GroupCreateDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.groupCreateDetails(fieldValue);
            }
            else if ("group_delete_details".equals(tag)) {
                GroupDeleteDetails fieldValue = null;
                fieldValue = GroupDeleteDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.groupDeleteDetails(fieldValue);
            }
            else if ("group_description_updated_details".equals(tag)) {
                GroupDescriptionUpdatedDetails fieldValue = null;
                fieldValue = GroupDescriptionUpdatedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.groupDescriptionUpdatedDetails(fieldValue);
            }
            else if ("group_join_policy_updated_details".equals(tag)) {
                GroupJoinPolicyUpdatedDetails fieldValue = null;
                fieldValue = GroupJoinPolicyUpdatedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.groupJoinPolicyUpdatedDetails(fieldValue);
            }
            else if ("group_moved_details".equals(tag)) {
                GroupMovedDetails fieldValue = null;
                fieldValue = GroupMovedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.groupMovedDetails(fieldValue);
            }
            else if ("group_remove_external_id_details".equals(tag)) {
                GroupRemoveExternalIdDetails fieldValue = null;
                fieldValue = GroupRemoveExternalIdDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.groupRemoveExternalIdDetails(fieldValue);
            }
            else if ("group_remove_member_details".equals(tag)) {
                GroupRemoveMemberDetails fieldValue = null;
                fieldValue = GroupRemoveMemberDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.groupRemoveMemberDetails(fieldValue);
            }
            else if ("group_rename_details".equals(tag)) {
                GroupRenameDetails fieldValue = null;
                fieldValue = GroupRenameDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.groupRenameDetails(fieldValue);
            }
            else if ("account_lock_or_unlocked_details".equals(tag)) {
                AccountLockOrUnlockedDetails fieldValue = null;
                fieldValue = AccountLockOrUnlockedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.accountLockOrUnlockedDetails(fieldValue);
            }
            else if ("emm_error_details".equals(tag)) {
                EmmErrorDetails fieldValue = null;
                fieldValue = EmmErrorDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.emmErrorDetails(fieldValue);
            }
            else if ("guest_admin_signed_in_via_trusted_teams_details".equals(tag)) {
                GuestAdminSignedInViaTrustedTeamsDetails fieldValue = null;
                fieldValue = GuestAdminSignedInViaTrustedTeamsDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.guestAdminSignedInViaTrustedTeamsDetails(fieldValue);
            }
            else if ("guest_admin_signed_out_via_trusted_teams_details".equals(tag)) {
                GuestAdminSignedOutViaTrustedTeamsDetails fieldValue = null;
                fieldValue = GuestAdminSignedOutViaTrustedTeamsDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.guestAdminSignedOutViaTrustedTeamsDetails(fieldValue);
            }
            else if ("login_fail_details".equals(tag)) {
                LoginFailDetails fieldValue = null;
                fieldValue = LoginFailDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.loginFailDetails(fieldValue);
            }
            else if ("login_success_details".equals(tag)) {
                LoginSuccessDetails fieldValue = null;
                fieldValue = LoginSuccessDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.loginSuccessDetails(fieldValue);
            }
            else if ("logout_details".equals(tag)) {
                LogoutDetails fieldValue = null;
                fieldValue = LogoutDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.logoutDetails(fieldValue);
            }
            else if ("reseller_support_session_end_details".equals(tag)) {
                ResellerSupportSessionEndDetails fieldValue = null;
                fieldValue = ResellerSupportSessionEndDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.resellerSupportSessionEndDetails(fieldValue);
            }
            else if ("reseller_support_session_start_details".equals(tag)) {
                ResellerSupportSessionStartDetails fieldValue = null;
                fieldValue = ResellerSupportSessionStartDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.resellerSupportSessionStartDetails(fieldValue);
            }
            else if ("sign_in_as_session_end_details".equals(tag)) {
                SignInAsSessionEndDetails fieldValue = null;
                fieldValue = SignInAsSessionEndDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.signInAsSessionEndDetails(fieldValue);
            }
            else if ("sign_in_as_session_start_details".equals(tag)) {
                SignInAsSessionStartDetails fieldValue = null;
                fieldValue = SignInAsSessionStartDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.signInAsSessionStartDetails(fieldValue);
            }
            else if ("sso_error_details".equals(tag)) {
                SsoErrorDetails fieldValue = null;
                fieldValue = SsoErrorDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.ssoErrorDetails(fieldValue);
            }
            else if ("create_team_invite_link_details".equals(tag)) {
                CreateTeamInviteLinkDetails fieldValue = null;
                fieldValue = CreateTeamInviteLinkDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.createTeamInviteLinkDetails(fieldValue);
            }
            else if ("delete_team_invite_link_details".equals(tag)) {
                DeleteTeamInviteLinkDetails fieldValue = null;
                fieldValue = DeleteTeamInviteLinkDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.deleteTeamInviteLinkDetails(fieldValue);
            }
            else if ("member_add_external_id_details".equals(tag)) {
                MemberAddExternalIdDetails fieldValue = null;
                fieldValue = MemberAddExternalIdDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberAddExternalIdDetails(fieldValue);
            }
            else if ("member_add_name_details".equals(tag)) {
                MemberAddNameDetails fieldValue = null;
                fieldValue = MemberAddNameDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberAddNameDetails(fieldValue);
            }
            else if ("member_change_admin_role_details".equals(tag)) {
                MemberChangeAdminRoleDetails fieldValue = null;
                fieldValue = MemberChangeAdminRoleDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberChangeAdminRoleDetails(fieldValue);
            }
            else if ("member_change_email_details".equals(tag)) {
                MemberChangeEmailDetails fieldValue = null;
                fieldValue = MemberChangeEmailDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberChangeEmailDetails(fieldValue);
            }
            else if ("member_change_external_id_details".equals(tag)) {
                MemberChangeExternalIdDetails fieldValue = null;
                fieldValue = MemberChangeExternalIdDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberChangeExternalIdDetails(fieldValue);
            }
            else if ("member_change_membership_type_details".equals(tag)) {
                MemberChangeMembershipTypeDetails fieldValue = null;
                fieldValue = MemberChangeMembershipTypeDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberChangeMembershipTypeDetails(fieldValue);
            }
            else if ("member_change_name_details".equals(tag)) {
                MemberChangeNameDetails fieldValue = null;
                fieldValue = MemberChangeNameDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberChangeNameDetails(fieldValue);
            }
            else if ("member_change_reseller_role_details".equals(tag)) {
                MemberChangeResellerRoleDetails fieldValue = null;
                fieldValue = MemberChangeResellerRoleDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberChangeResellerRoleDetails(fieldValue);
            }
            else if ("member_change_status_details".equals(tag)) {
                MemberChangeStatusDetails fieldValue = null;
                fieldValue = MemberChangeStatusDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberChangeStatusDetails(fieldValue);
            }
            else if ("member_delete_manual_contacts_details".equals(tag)) {
                MemberDeleteManualContactsDetails fieldValue = null;
                fieldValue = MemberDeleteManualContactsDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberDeleteManualContactsDetails(fieldValue);
            }
            else if ("member_delete_profile_photo_details".equals(tag)) {
                MemberDeleteProfilePhotoDetails fieldValue = null;
                fieldValue = MemberDeleteProfilePhotoDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberDeleteProfilePhotoDetails(fieldValue);
            }
            else if ("member_permanently_delete_account_contents_details".equals(tag)) {
                MemberPermanentlyDeleteAccountContentsDetails fieldValue = null;
                fieldValue = MemberPermanentlyDeleteAccountContentsDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberPermanentlyDeleteAccountContentsDetails(fieldValue);
            }
            else if ("member_remove_external_id_details".equals(tag)) {
                MemberRemoveExternalIdDetails fieldValue = null;
                fieldValue = MemberRemoveExternalIdDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberRemoveExternalIdDetails(fieldValue);
            }
            else if ("member_set_profile_photo_details".equals(tag)) {
                MemberSetProfilePhotoDetails fieldValue = null;
                fieldValue = MemberSetProfilePhotoDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberSetProfilePhotoDetails(fieldValue);
            }
            else if ("member_space_limits_add_custom_quota_details".equals(tag)) {
                MemberSpaceLimitsAddCustomQuotaDetails fieldValue = null;
                fieldValue = MemberSpaceLimitsAddCustomQuotaDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberSpaceLimitsAddCustomQuotaDetails(fieldValue);
            }
            else if ("member_space_limits_change_custom_quota_details".equals(tag)) {
                MemberSpaceLimitsChangeCustomQuotaDetails fieldValue = null;
                fieldValue = MemberSpaceLimitsChangeCustomQuotaDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberSpaceLimitsChangeCustomQuotaDetails(fieldValue);
            }
            else if ("member_space_limits_change_status_details".equals(tag)) {
                MemberSpaceLimitsChangeStatusDetails fieldValue = null;
                fieldValue = MemberSpaceLimitsChangeStatusDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberSpaceLimitsChangeStatusDetails(fieldValue);
            }
            else if ("member_space_limits_remove_custom_quota_details".equals(tag)) {
                MemberSpaceLimitsRemoveCustomQuotaDetails fieldValue = null;
                fieldValue = MemberSpaceLimitsRemoveCustomQuotaDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberSpaceLimitsRemoveCustomQuotaDetails(fieldValue);
            }
            else if ("member_suggest_details".equals(tag)) {
                MemberSuggestDetails fieldValue = null;
                fieldValue = MemberSuggestDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberSuggestDetails(fieldValue);
            }
            else if ("member_transfer_account_contents_details".equals(tag)) {
                MemberTransferAccountContentsDetails fieldValue = null;
                fieldValue = MemberTransferAccountContentsDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberTransferAccountContentsDetails(fieldValue);
            }
            else if ("pending_secondary_email_added_details".equals(tag)) {
                PendingSecondaryEmailAddedDetails fieldValue = null;
                fieldValue = PendingSecondaryEmailAddedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.pendingSecondaryEmailAddedDetails(fieldValue);
            }
            else if ("secondary_email_deleted_details".equals(tag)) {
                SecondaryEmailDeletedDetails fieldValue = null;
                fieldValue = SecondaryEmailDeletedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.secondaryEmailDeletedDetails(fieldValue);
            }
            else if ("secondary_email_verified_details".equals(tag)) {
                SecondaryEmailVerifiedDetails fieldValue = null;
                fieldValue = SecondaryEmailVerifiedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.secondaryEmailVerifiedDetails(fieldValue);
            }
            else if ("secondary_mails_policy_changed_details".equals(tag)) {
                SecondaryMailsPolicyChangedDetails fieldValue = null;
                fieldValue = SecondaryMailsPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.secondaryMailsPolicyChangedDetails(fieldValue);
            }
            else if ("binder_add_page_details".equals(tag)) {
                BinderAddPageDetails fieldValue = null;
                fieldValue = BinderAddPageDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.binderAddPageDetails(fieldValue);
            }
            else if ("binder_add_section_details".equals(tag)) {
                BinderAddSectionDetails fieldValue = null;
                fieldValue = BinderAddSectionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.binderAddSectionDetails(fieldValue);
            }
            else if ("binder_remove_page_details".equals(tag)) {
                BinderRemovePageDetails fieldValue = null;
                fieldValue = BinderRemovePageDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.binderRemovePageDetails(fieldValue);
            }
            else if ("binder_remove_section_details".equals(tag)) {
                BinderRemoveSectionDetails fieldValue = null;
                fieldValue = BinderRemoveSectionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.binderRemoveSectionDetails(fieldValue);
            }
            else if ("binder_rename_page_details".equals(tag)) {
                BinderRenamePageDetails fieldValue = null;
                fieldValue = BinderRenamePageDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.binderRenamePageDetails(fieldValue);
            }
            else if ("binder_rename_section_details".equals(tag)) {
                BinderRenameSectionDetails fieldValue = null;
                fieldValue = BinderRenameSectionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.binderRenameSectionDetails(fieldValue);
            }
            else if ("binder_reorder_page_details".equals(tag)) {
                BinderReorderPageDetails fieldValue = null;
                fieldValue = BinderReorderPageDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.binderReorderPageDetails(fieldValue);
            }
            else if ("binder_reorder_section_details".equals(tag)) {
                BinderReorderSectionDetails fieldValue = null;
                fieldValue = BinderReorderSectionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.binderReorderSectionDetails(fieldValue);
            }
            else if ("paper_content_add_member_details".equals(tag)) {
                PaperContentAddMemberDetails fieldValue = null;
                fieldValue = PaperContentAddMemberDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperContentAddMemberDetails(fieldValue);
            }
            else if ("paper_content_add_to_folder_details".equals(tag)) {
                PaperContentAddToFolderDetails fieldValue = null;
                fieldValue = PaperContentAddToFolderDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperContentAddToFolderDetails(fieldValue);
            }
            else if ("paper_content_archive_details".equals(tag)) {
                PaperContentArchiveDetails fieldValue = null;
                fieldValue = PaperContentArchiveDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperContentArchiveDetails(fieldValue);
            }
            else if ("paper_content_create_details".equals(tag)) {
                PaperContentCreateDetails fieldValue = null;
                fieldValue = PaperContentCreateDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperContentCreateDetails(fieldValue);
            }
            else if ("paper_content_permanently_delete_details".equals(tag)) {
                PaperContentPermanentlyDeleteDetails fieldValue = null;
                fieldValue = PaperContentPermanentlyDeleteDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperContentPermanentlyDeleteDetails(fieldValue);
            }
            else if ("paper_content_remove_from_folder_details".equals(tag)) {
                PaperContentRemoveFromFolderDetails fieldValue = null;
                fieldValue = PaperContentRemoveFromFolderDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperContentRemoveFromFolderDetails(fieldValue);
            }
            else if ("paper_content_remove_member_details".equals(tag)) {
                PaperContentRemoveMemberDetails fieldValue = null;
                fieldValue = PaperContentRemoveMemberDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperContentRemoveMemberDetails(fieldValue);
            }
            else if ("paper_content_rename_details".equals(tag)) {
                PaperContentRenameDetails fieldValue = null;
                fieldValue = PaperContentRenameDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperContentRenameDetails(fieldValue);
            }
            else if ("paper_content_restore_details".equals(tag)) {
                PaperContentRestoreDetails fieldValue = null;
                fieldValue = PaperContentRestoreDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperContentRestoreDetails(fieldValue);
            }
            else if ("paper_doc_add_comment_details".equals(tag)) {
                PaperDocAddCommentDetails fieldValue = null;
                fieldValue = PaperDocAddCommentDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocAddCommentDetails(fieldValue);
            }
            else if ("paper_doc_change_member_role_details".equals(tag)) {
                PaperDocChangeMemberRoleDetails fieldValue = null;
                fieldValue = PaperDocChangeMemberRoleDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocChangeMemberRoleDetails(fieldValue);
            }
            else if ("paper_doc_change_sharing_policy_details".equals(tag)) {
                PaperDocChangeSharingPolicyDetails fieldValue = null;
                fieldValue = PaperDocChangeSharingPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocChangeSharingPolicyDetails(fieldValue);
            }
            else if ("paper_doc_change_subscription_details".equals(tag)) {
                PaperDocChangeSubscriptionDetails fieldValue = null;
                fieldValue = PaperDocChangeSubscriptionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocChangeSubscriptionDetails(fieldValue);
            }
            else if ("paper_doc_deleted_details".equals(tag)) {
                PaperDocDeletedDetails fieldValue = null;
                fieldValue = PaperDocDeletedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocDeletedDetails(fieldValue);
            }
            else if ("paper_doc_delete_comment_details".equals(tag)) {
                PaperDocDeleteCommentDetails fieldValue = null;
                fieldValue = PaperDocDeleteCommentDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocDeleteCommentDetails(fieldValue);
            }
            else if ("paper_doc_download_details".equals(tag)) {
                PaperDocDownloadDetails fieldValue = null;
                fieldValue = PaperDocDownloadDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocDownloadDetails(fieldValue);
            }
            else if ("paper_doc_edit_details".equals(tag)) {
                PaperDocEditDetails fieldValue = null;
                fieldValue = PaperDocEditDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocEditDetails(fieldValue);
            }
            else if ("paper_doc_edit_comment_details".equals(tag)) {
                PaperDocEditCommentDetails fieldValue = null;
                fieldValue = PaperDocEditCommentDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocEditCommentDetails(fieldValue);
            }
            else if ("paper_doc_followed_details".equals(tag)) {
                PaperDocFollowedDetails fieldValue = null;
                fieldValue = PaperDocFollowedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocFollowedDetails(fieldValue);
            }
            else if ("paper_doc_mention_details".equals(tag)) {
                PaperDocMentionDetails fieldValue = null;
                fieldValue = PaperDocMentionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocMentionDetails(fieldValue);
            }
            else if ("paper_doc_ownership_changed_details".equals(tag)) {
                PaperDocOwnershipChangedDetails fieldValue = null;
                fieldValue = PaperDocOwnershipChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocOwnershipChangedDetails(fieldValue);
            }
            else if ("paper_doc_request_access_details".equals(tag)) {
                PaperDocRequestAccessDetails fieldValue = null;
                fieldValue = PaperDocRequestAccessDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocRequestAccessDetails(fieldValue);
            }
            else if ("paper_doc_resolve_comment_details".equals(tag)) {
                PaperDocResolveCommentDetails fieldValue = null;
                fieldValue = PaperDocResolveCommentDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocResolveCommentDetails(fieldValue);
            }
            else if ("paper_doc_revert_details".equals(tag)) {
                PaperDocRevertDetails fieldValue = null;
                fieldValue = PaperDocRevertDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocRevertDetails(fieldValue);
            }
            else if ("paper_doc_slack_share_details".equals(tag)) {
                PaperDocSlackShareDetails fieldValue = null;
                fieldValue = PaperDocSlackShareDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocSlackShareDetails(fieldValue);
            }
            else if ("paper_doc_team_invite_details".equals(tag)) {
                PaperDocTeamInviteDetails fieldValue = null;
                fieldValue = PaperDocTeamInviteDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocTeamInviteDetails(fieldValue);
            }
            else if ("paper_doc_trashed_details".equals(tag)) {
                PaperDocTrashedDetails fieldValue = null;
                fieldValue = PaperDocTrashedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocTrashedDetails(fieldValue);
            }
            else if ("paper_doc_unresolve_comment_details".equals(tag)) {
                PaperDocUnresolveCommentDetails fieldValue = null;
                fieldValue = PaperDocUnresolveCommentDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocUnresolveCommentDetails(fieldValue);
            }
            else if ("paper_doc_untrashed_details".equals(tag)) {
                PaperDocUntrashedDetails fieldValue = null;
                fieldValue = PaperDocUntrashedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocUntrashedDetails(fieldValue);
            }
            else if ("paper_doc_view_details".equals(tag)) {
                PaperDocViewDetails fieldValue = null;
                fieldValue = PaperDocViewDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDocViewDetails(fieldValue);
            }
            else if ("paper_external_view_allow_details".equals(tag)) {
                PaperExternalViewAllowDetails fieldValue = null;
                fieldValue = PaperExternalViewAllowDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperExternalViewAllowDetails(fieldValue);
            }
            else if ("paper_external_view_default_team_details".equals(tag)) {
                PaperExternalViewDefaultTeamDetails fieldValue = null;
                fieldValue = PaperExternalViewDefaultTeamDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperExternalViewDefaultTeamDetails(fieldValue);
            }
            else if ("paper_external_view_forbid_details".equals(tag)) {
                PaperExternalViewForbidDetails fieldValue = null;
                fieldValue = PaperExternalViewForbidDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperExternalViewForbidDetails(fieldValue);
            }
            else if ("paper_folder_change_subscription_details".equals(tag)) {
                PaperFolderChangeSubscriptionDetails fieldValue = null;
                fieldValue = PaperFolderChangeSubscriptionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperFolderChangeSubscriptionDetails(fieldValue);
            }
            else if ("paper_folder_deleted_details".equals(tag)) {
                PaperFolderDeletedDetails fieldValue = null;
                fieldValue = PaperFolderDeletedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperFolderDeletedDetails(fieldValue);
            }
            else if ("paper_folder_followed_details".equals(tag)) {
                PaperFolderFollowedDetails fieldValue = null;
                fieldValue = PaperFolderFollowedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperFolderFollowedDetails(fieldValue);
            }
            else if ("paper_folder_team_invite_details".equals(tag)) {
                PaperFolderTeamInviteDetails fieldValue = null;
                fieldValue = PaperFolderTeamInviteDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperFolderTeamInviteDetails(fieldValue);
            }
            else if ("paper_published_link_change_permission_details".equals(tag)) {
                PaperPublishedLinkChangePermissionDetails fieldValue = null;
                fieldValue = PaperPublishedLinkChangePermissionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperPublishedLinkChangePermissionDetails(fieldValue);
            }
            else if ("paper_published_link_create_details".equals(tag)) {
                PaperPublishedLinkCreateDetails fieldValue = null;
                fieldValue = PaperPublishedLinkCreateDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperPublishedLinkCreateDetails(fieldValue);
            }
            else if ("paper_published_link_disabled_details".equals(tag)) {
                PaperPublishedLinkDisabledDetails fieldValue = null;
                fieldValue = PaperPublishedLinkDisabledDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperPublishedLinkDisabledDetails(fieldValue);
            }
            else if ("paper_published_link_view_details".equals(tag)) {
                PaperPublishedLinkViewDetails fieldValue = null;
                fieldValue = PaperPublishedLinkViewDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperPublishedLinkViewDetails(fieldValue);
            }
            else if ("password_change_details".equals(tag)) {
                PasswordChangeDetails fieldValue = null;
                fieldValue = PasswordChangeDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.passwordChangeDetails(fieldValue);
            }
            else if ("password_reset_details".equals(tag)) {
                PasswordResetDetails fieldValue = null;
                fieldValue = PasswordResetDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.passwordResetDetails(fieldValue);
            }
            else if ("password_reset_all_details".equals(tag)) {
                PasswordResetAllDetails fieldValue = null;
                fieldValue = PasswordResetAllDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.passwordResetAllDetails(fieldValue);
            }
            else if ("classification_create_report_details".equals(tag)) {
                ClassificationCreateReportDetails fieldValue = null;
                fieldValue = ClassificationCreateReportDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.classificationCreateReportDetails(fieldValue);
            }
            else if ("classification_create_report_fail_details".equals(tag)) {
                ClassificationCreateReportFailDetails fieldValue = null;
                fieldValue = ClassificationCreateReportFailDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.classificationCreateReportFailDetails(fieldValue);
            }
            else if ("emm_create_exceptions_report_details".equals(tag)) {
                EmmCreateExceptionsReportDetails fieldValue = null;
                fieldValue = EmmCreateExceptionsReportDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.emmCreateExceptionsReportDetails(fieldValue);
            }
            else if ("emm_create_usage_report_details".equals(tag)) {
                EmmCreateUsageReportDetails fieldValue = null;
                fieldValue = EmmCreateUsageReportDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.emmCreateUsageReportDetails(fieldValue);
            }
            else if ("export_members_report_details".equals(tag)) {
                ExportMembersReportDetails fieldValue = null;
                fieldValue = ExportMembersReportDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.exportMembersReportDetails(fieldValue);
            }
            else if ("export_members_report_fail_details".equals(tag)) {
                ExportMembersReportFailDetails fieldValue = null;
                fieldValue = ExportMembersReportFailDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.exportMembersReportFailDetails(fieldValue);
            }
            else if ("external_sharing_create_report_details".equals(tag)) {
                ExternalSharingCreateReportDetails fieldValue = null;
                fieldValue = ExternalSharingCreateReportDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.externalSharingCreateReportDetails(fieldValue);
            }
            else if ("external_sharing_report_failed_details".equals(tag)) {
                ExternalSharingReportFailedDetails fieldValue = null;
                fieldValue = ExternalSharingReportFailedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.externalSharingReportFailedDetails(fieldValue);
            }
            else if ("no_expiration_link_gen_create_report_details".equals(tag)) {
                NoExpirationLinkGenCreateReportDetails fieldValue = null;
                fieldValue = NoExpirationLinkGenCreateReportDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.noExpirationLinkGenCreateReportDetails(fieldValue);
            }
            else if ("no_expiration_link_gen_report_failed_details".equals(tag)) {
                NoExpirationLinkGenReportFailedDetails fieldValue = null;
                fieldValue = NoExpirationLinkGenReportFailedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.noExpirationLinkGenReportFailedDetails(fieldValue);
            }
            else if ("no_password_link_gen_create_report_details".equals(tag)) {
                NoPasswordLinkGenCreateReportDetails fieldValue = null;
                fieldValue = NoPasswordLinkGenCreateReportDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.noPasswordLinkGenCreateReportDetails(fieldValue);
            }
            else if ("no_password_link_gen_report_failed_details".equals(tag)) {
                NoPasswordLinkGenReportFailedDetails fieldValue = null;
                fieldValue = NoPasswordLinkGenReportFailedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.noPasswordLinkGenReportFailedDetails(fieldValue);
            }
            else if ("no_password_link_view_create_report_details".equals(tag)) {
                NoPasswordLinkViewCreateReportDetails fieldValue = null;
                fieldValue = NoPasswordLinkViewCreateReportDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.noPasswordLinkViewCreateReportDetails(fieldValue);
            }
            else if ("no_password_link_view_report_failed_details".equals(tag)) {
                NoPasswordLinkViewReportFailedDetails fieldValue = null;
                fieldValue = NoPasswordLinkViewReportFailedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.noPasswordLinkViewReportFailedDetails(fieldValue);
            }
            else if ("outdated_link_view_create_report_details".equals(tag)) {
                OutdatedLinkViewCreateReportDetails fieldValue = null;
                fieldValue = OutdatedLinkViewCreateReportDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.outdatedLinkViewCreateReportDetails(fieldValue);
            }
            else if ("outdated_link_view_report_failed_details".equals(tag)) {
                OutdatedLinkViewReportFailedDetails fieldValue = null;
                fieldValue = OutdatedLinkViewReportFailedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.outdatedLinkViewReportFailedDetails(fieldValue);
            }
            else if ("paper_admin_export_start_details".equals(tag)) {
                PaperAdminExportStartDetails fieldValue = null;
                fieldValue = PaperAdminExportStartDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperAdminExportStartDetails(fieldValue);
            }
            else if ("smart_sync_create_admin_privilege_report_details".equals(tag)) {
                SmartSyncCreateAdminPrivilegeReportDetails fieldValue = null;
                fieldValue = SmartSyncCreateAdminPrivilegeReportDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.smartSyncCreateAdminPrivilegeReportDetails(fieldValue);
            }
            else if ("team_activity_create_report_details".equals(tag)) {
                TeamActivityCreateReportDetails fieldValue = null;
                fieldValue = TeamActivityCreateReportDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamActivityCreateReportDetails(fieldValue);
            }
            else if ("team_activity_create_report_fail_details".equals(tag)) {
                TeamActivityCreateReportFailDetails fieldValue = null;
                fieldValue = TeamActivityCreateReportFailDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamActivityCreateReportFailDetails(fieldValue);
            }
            else if ("collection_share_details".equals(tag)) {
                CollectionShareDetails fieldValue = null;
                fieldValue = CollectionShareDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.collectionShareDetails(fieldValue);
            }
            else if ("file_transfers_file_add_details".equals(tag)) {
                FileTransfersFileAddDetails fieldValue = null;
                fieldValue = FileTransfersFileAddDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileTransfersFileAddDetails(fieldValue);
            }
            else if ("file_transfers_transfer_delete_details".equals(tag)) {
                FileTransfersTransferDeleteDetails fieldValue = null;
                fieldValue = FileTransfersTransferDeleteDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileTransfersTransferDeleteDetails(fieldValue);
            }
            else if ("file_transfers_transfer_download_details".equals(tag)) {
                FileTransfersTransferDownloadDetails fieldValue = null;
                fieldValue = FileTransfersTransferDownloadDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileTransfersTransferDownloadDetails(fieldValue);
            }
            else if ("file_transfers_transfer_send_details".equals(tag)) {
                FileTransfersTransferSendDetails fieldValue = null;
                fieldValue = FileTransfersTransferSendDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileTransfersTransferSendDetails(fieldValue);
            }
            else if ("file_transfers_transfer_view_details".equals(tag)) {
                FileTransfersTransferViewDetails fieldValue = null;
                fieldValue = FileTransfersTransferViewDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileTransfersTransferViewDetails(fieldValue);
            }
            else if ("note_acl_invite_only_details".equals(tag)) {
                NoteAclInviteOnlyDetails fieldValue = null;
                fieldValue = NoteAclInviteOnlyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.noteAclInviteOnlyDetails(fieldValue);
            }
            else if ("note_acl_link_details".equals(tag)) {
                NoteAclLinkDetails fieldValue = null;
                fieldValue = NoteAclLinkDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.noteAclLinkDetails(fieldValue);
            }
            else if ("note_acl_team_link_details".equals(tag)) {
                NoteAclTeamLinkDetails fieldValue = null;
                fieldValue = NoteAclTeamLinkDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.noteAclTeamLinkDetails(fieldValue);
            }
            else if ("note_shared_details".equals(tag)) {
                NoteSharedDetails fieldValue = null;
                fieldValue = NoteSharedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.noteSharedDetails(fieldValue);
            }
            else if ("note_share_receive_details".equals(tag)) {
                NoteShareReceiveDetails fieldValue = null;
                fieldValue = NoteShareReceiveDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.noteShareReceiveDetails(fieldValue);
            }
            else if ("open_note_shared_details".equals(tag)) {
                OpenNoteSharedDetails fieldValue = null;
                fieldValue = OpenNoteSharedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.openNoteSharedDetails(fieldValue);
            }
            else if ("sf_add_group_details".equals(tag)) {
                SfAddGroupDetails fieldValue = null;
                fieldValue = SfAddGroupDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sfAddGroupDetails(fieldValue);
            }
            else if ("sf_allow_non_members_to_view_shared_links_details".equals(tag)) {
                SfAllowNonMembersToViewSharedLinksDetails fieldValue = null;
                fieldValue = SfAllowNonMembersToViewSharedLinksDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sfAllowNonMembersToViewSharedLinksDetails(fieldValue);
            }
            else if ("sf_external_invite_warn_details".equals(tag)) {
                SfExternalInviteWarnDetails fieldValue = null;
                fieldValue = SfExternalInviteWarnDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sfExternalInviteWarnDetails(fieldValue);
            }
            else if ("sf_fb_invite_details".equals(tag)) {
                SfFbInviteDetails fieldValue = null;
                fieldValue = SfFbInviteDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sfFbInviteDetails(fieldValue);
            }
            else if ("sf_fb_invite_change_role_details".equals(tag)) {
                SfFbInviteChangeRoleDetails fieldValue = null;
                fieldValue = SfFbInviteChangeRoleDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sfFbInviteChangeRoleDetails(fieldValue);
            }
            else if ("sf_fb_uninvite_details".equals(tag)) {
                SfFbUninviteDetails fieldValue = null;
                fieldValue = SfFbUninviteDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sfFbUninviteDetails(fieldValue);
            }
            else if ("sf_invite_group_details".equals(tag)) {
                SfInviteGroupDetails fieldValue = null;
                fieldValue = SfInviteGroupDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sfInviteGroupDetails(fieldValue);
            }
            else if ("sf_team_grant_access_details".equals(tag)) {
                SfTeamGrantAccessDetails fieldValue = null;
                fieldValue = SfTeamGrantAccessDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sfTeamGrantAccessDetails(fieldValue);
            }
            else if ("sf_team_invite_details".equals(tag)) {
                SfTeamInviteDetails fieldValue = null;
                fieldValue = SfTeamInviteDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sfTeamInviteDetails(fieldValue);
            }
            else if ("sf_team_invite_change_role_details".equals(tag)) {
                SfTeamInviteChangeRoleDetails fieldValue = null;
                fieldValue = SfTeamInviteChangeRoleDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sfTeamInviteChangeRoleDetails(fieldValue);
            }
            else if ("sf_team_join_details".equals(tag)) {
                SfTeamJoinDetails fieldValue = null;
                fieldValue = SfTeamJoinDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sfTeamJoinDetails(fieldValue);
            }
            else if ("sf_team_join_from_oob_link_details".equals(tag)) {
                SfTeamJoinFromOobLinkDetails fieldValue = null;
                fieldValue = SfTeamJoinFromOobLinkDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sfTeamJoinFromOobLinkDetails(fieldValue);
            }
            else if ("sf_team_uninvite_details".equals(tag)) {
                SfTeamUninviteDetails fieldValue = null;
                fieldValue = SfTeamUninviteDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sfTeamUninviteDetails(fieldValue);
            }
            else if ("shared_content_add_invitees_details".equals(tag)) {
                SharedContentAddInviteesDetails fieldValue = null;
                fieldValue = SharedContentAddInviteesDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentAddInviteesDetails(fieldValue);
            }
            else if ("shared_content_add_link_expiry_details".equals(tag)) {
                SharedContentAddLinkExpiryDetails fieldValue = null;
                fieldValue = SharedContentAddLinkExpiryDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentAddLinkExpiryDetails(fieldValue);
            }
            else if ("shared_content_add_link_password_details".equals(tag)) {
                SharedContentAddLinkPasswordDetails fieldValue = null;
                fieldValue = SharedContentAddLinkPasswordDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentAddLinkPasswordDetails(fieldValue);
            }
            else if ("shared_content_add_member_details".equals(tag)) {
                SharedContentAddMemberDetails fieldValue = null;
                fieldValue = SharedContentAddMemberDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentAddMemberDetails(fieldValue);
            }
            else if ("shared_content_change_downloads_policy_details".equals(tag)) {
                SharedContentChangeDownloadsPolicyDetails fieldValue = null;
                fieldValue = SharedContentChangeDownloadsPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentChangeDownloadsPolicyDetails(fieldValue);
            }
            else if ("shared_content_change_invitee_role_details".equals(tag)) {
                SharedContentChangeInviteeRoleDetails fieldValue = null;
                fieldValue = SharedContentChangeInviteeRoleDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentChangeInviteeRoleDetails(fieldValue);
            }
            else if ("shared_content_change_link_audience_details".equals(tag)) {
                SharedContentChangeLinkAudienceDetails fieldValue = null;
                fieldValue = SharedContentChangeLinkAudienceDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentChangeLinkAudienceDetails(fieldValue);
            }
            else if ("shared_content_change_link_expiry_details".equals(tag)) {
                SharedContentChangeLinkExpiryDetails fieldValue = null;
                fieldValue = SharedContentChangeLinkExpiryDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentChangeLinkExpiryDetails(fieldValue);
            }
            else if ("shared_content_change_link_password_details".equals(tag)) {
                SharedContentChangeLinkPasswordDetails fieldValue = null;
                fieldValue = SharedContentChangeLinkPasswordDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentChangeLinkPasswordDetails(fieldValue);
            }
            else if ("shared_content_change_member_role_details".equals(tag)) {
                SharedContentChangeMemberRoleDetails fieldValue = null;
                fieldValue = SharedContentChangeMemberRoleDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentChangeMemberRoleDetails(fieldValue);
            }
            else if ("shared_content_change_viewer_info_policy_details".equals(tag)) {
                SharedContentChangeViewerInfoPolicyDetails fieldValue = null;
                fieldValue = SharedContentChangeViewerInfoPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentChangeViewerInfoPolicyDetails(fieldValue);
            }
            else if ("shared_content_claim_invitation_details".equals(tag)) {
                SharedContentClaimInvitationDetails fieldValue = null;
                fieldValue = SharedContentClaimInvitationDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentClaimInvitationDetails(fieldValue);
            }
            else if ("shared_content_copy_details".equals(tag)) {
                SharedContentCopyDetails fieldValue = null;
                fieldValue = SharedContentCopyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentCopyDetails(fieldValue);
            }
            else if ("shared_content_download_details".equals(tag)) {
                SharedContentDownloadDetails fieldValue = null;
                fieldValue = SharedContentDownloadDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentDownloadDetails(fieldValue);
            }
            else if ("shared_content_relinquish_membership_details".equals(tag)) {
                SharedContentRelinquishMembershipDetails fieldValue = null;
                fieldValue = SharedContentRelinquishMembershipDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentRelinquishMembershipDetails(fieldValue);
            }
            else if ("shared_content_remove_invitees_details".equals(tag)) {
                SharedContentRemoveInviteesDetails fieldValue = null;
                fieldValue = SharedContentRemoveInviteesDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentRemoveInviteesDetails(fieldValue);
            }
            else if ("shared_content_remove_link_expiry_details".equals(tag)) {
                SharedContentRemoveLinkExpiryDetails fieldValue = null;
                fieldValue = SharedContentRemoveLinkExpiryDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentRemoveLinkExpiryDetails(fieldValue);
            }
            else if ("shared_content_remove_link_password_details".equals(tag)) {
                SharedContentRemoveLinkPasswordDetails fieldValue = null;
                fieldValue = SharedContentRemoveLinkPasswordDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentRemoveLinkPasswordDetails(fieldValue);
            }
            else if ("shared_content_remove_member_details".equals(tag)) {
                SharedContentRemoveMemberDetails fieldValue = null;
                fieldValue = SharedContentRemoveMemberDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentRemoveMemberDetails(fieldValue);
            }
            else if ("shared_content_request_access_details".equals(tag)) {
                SharedContentRequestAccessDetails fieldValue = null;
                fieldValue = SharedContentRequestAccessDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentRequestAccessDetails(fieldValue);
            }
            else if ("shared_content_restore_invitees_details".equals(tag)) {
                SharedContentRestoreInviteesDetails fieldValue = null;
                fieldValue = SharedContentRestoreInviteesDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentRestoreInviteesDetails(fieldValue);
            }
            else if ("shared_content_restore_member_details".equals(tag)) {
                SharedContentRestoreMemberDetails fieldValue = null;
                fieldValue = SharedContentRestoreMemberDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentRestoreMemberDetails(fieldValue);
            }
            else if ("shared_content_unshare_details".equals(tag)) {
                SharedContentUnshareDetails fieldValue = null;
                fieldValue = SharedContentUnshareDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentUnshareDetails(fieldValue);
            }
            else if ("shared_content_view_details".equals(tag)) {
                SharedContentViewDetails fieldValue = null;
                fieldValue = SharedContentViewDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedContentViewDetails(fieldValue);
            }
            else if ("shared_folder_change_link_policy_details".equals(tag)) {
                SharedFolderChangeLinkPolicyDetails fieldValue = null;
                fieldValue = SharedFolderChangeLinkPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedFolderChangeLinkPolicyDetails(fieldValue);
            }
            else if ("shared_folder_change_members_inheritance_policy_details".equals(tag)) {
                SharedFolderChangeMembersInheritancePolicyDetails fieldValue = null;
                fieldValue = SharedFolderChangeMembersInheritancePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedFolderChangeMembersInheritancePolicyDetails(fieldValue);
            }
            else if ("shared_folder_change_members_management_policy_details".equals(tag)) {
                SharedFolderChangeMembersManagementPolicyDetails fieldValue = null;
                fieldValue = SharedFolderChangeMembersManagementPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedFolderChangeMembersManagementPolicyDetails(fieldValue);
            }
            else if ("shared_folder_change_members_policy_details".equals(tag)) {
                SharedFolderChangeMembersPolicyDetails fieldValue = null;
                fieldValue = SharedFolderChangeMembersPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedFolderChangeMembersPolicyDetails(fieldValue);
            }
            else if ("shared_folder_create_details".equals(tag)) {
                SharedFolderCreateDetails fieldValue = null;
                fieldValue = SharedFolderCreateDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedFolderCreateDetails(fieldValue);
            }
            else if ("shared_folder_decline_invitation_details".equals(tag)) {
                SharedFolderDeclineInvitationDetails fieldValue = null;
                fieldValue = SharedFolderDeclineInvitationDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedFolderDeclineInvitationDetails(fieldValue);
            }
            else if ("shared_folder_mount_details".equals(tag)) {
                SharedFolderMountDetails fieldValue = null;
                fieldValue = SharedFolderMountDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedFolderMountDetails(fieldValue);
            }
            else if ("shared_folder_nest_details".equals(tag)) {
                SharedFolderNestDetails fieldValue = null;
                fieldValue = SharedFolderNestDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedFolderNestDetails(fieldValue);
            }
            else if ("shared_folder_transfer_ownership_details".equals(tag)) {
                SharedFolderTransferOwnershipDetails fieldValue = null;
                fieldValue = SharedFolderTransferOwnershipDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedFolderTransferOwnershipDetails(fieldValue);
            }
            else if ("shared_folder_unmount_details".equals(tag)) {
                SharedFolderUnmountDetails fieldValue = null;
                fieldValue = SharedFolderUnmountDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedFolderUnmountDetails(fieldValue);
            }
            else if ("shared_link_add_expiry_details".equals(tag)) {
                SharedLinkAddExpiryDetails fieldValue = null;
                fieldValue = SharedLinkAddExpiryDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedLinkAddExpiryDetails(fieldValue);
            }
            else if ("shared_link_change_expiry_details".equals(tag)) {
                SharedLinkChangeExpiryDetails fieldValue = null;
                fieldValue = SharedLinkChangeExpiryDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedLinkChangeExpiryDetails(fieldValue);
            }
            else if ("shared_link_change_visibility_details".equals(tag)) {
                SharedLinkChangeVisibilityDetails fieldValue = null;
                fieldValue = SharedLinkChangeVisibilityDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedLinkChangeVisibilityDetails(fieldValue);
            }
            else if ("shared_link_copy_details".equals(tag)) {
                SharedLinkCopyDetails fieldValue = null;
                fieldValue = SharedLinkCopyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedLinkCopyDetails(fieldValue);
            }
            else if ("shared_link_create_details".equals(tag)) {
                SharedLinkCreateDetails fieldValue = null;
                fieldValue = SharedLinkCreateDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedLinkCreateDetails(fieldValue);
            }
            else if ("shared_link_disable_details".equals(tag)) {
                SharedLinkDisableDetails fieldValue = null;
                fieldValue = SharedLinkDisableDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedLinkDisableDetails(fieldValue);
            }
            else if ("shared_link_download_details".equals(tag)) {
                SharedLinkDownloadDetails fieldValue = null;
                fieldValue = SharedLinkDownloadDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedLinkDownloadDetails(fieldValue);
            }
            else if ("shared_link_remove_expiry_details".equals(tag)) {
                SharedLinkRemoveExpiryDetails fieldValue = null;
                fieldValue = SharedLinkRemoveExpiryDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedLinkRemoveExpiryDetails(fieldValue);
            }
            else if ("shared_link_settings_add_expiration_details".equals(tag)) {
                SharedLinkSettingsAddExpirationDetails fieldValue = null;
                fieldValue = SharedLinkSettingsAddExpirationDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedLinkSettingsAddExpirationDetails(fieldValue);
            }
            else if ("shared_link_settings_add_password_details".equals(tag)) {
                SharedLinkSettingsAddPasswordDetails fieldValue = null;
                fieldValue = SharedLinkSettingsAddPasswordDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedLinkSettingsAddPasswordDetails(fieldValue);
            }
            else if ("shared_link_settings_allow_download_disabled_details".equals(tag)) {
                SharedLinkSettingsAllowDownloadDisabledDetails fieldValue = null;
                fieldValue = SharedLinkSettingsAllowDownloadDisabledDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedLinkSettingsAllowDownloadDisabledDetails(fieldValue);
            }
            else if ("shared_link_settings_allow_download_enabled_details".equals(tag)) {
                SharedLinkSettingsAllowDownloadEnabledDetails fieldValue = null;
                fieldValue = SharedLinkSettingsAllowDownloadEnabledDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedLinkSettingsAllowDownloadEnabledDetails(fieldValue);
            }
            else if ("shared_link_settings_change_audience_details".equals(tag)) {
                SharedLinkSettingsChangeAudienceDetails fieldValue = null;
                fieldValue = SharedLinkSettingsChangeAudienceDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedLinkSettingsChangeAudienceDetails(fieldValue);
            }
            else if ("shared_link_settings_change_expiration_details".equals(tag)) {
                SharedLinkSettingsChangeExpirationDetails fieldValue = null;
                fieldValue = SharedLinkSettingsChangeExpirationDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedLinkSettingsChangeExpirationDetails(fieldValue);
            }
            else if ("shared_link_settings_change_password_details".equals(tag)) {
                SharedLinkSettingsChangePasswordDetails fieldValue = null;
                fieldValue = SharedLinkSettingsChangePasswordDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedLinkSettingsChangePasswordDetails(fieldValue);
            }
            else if ("shared_link_settings_remove_expiration_details".equals(tag)) {
                SharedLinkSettingsRemoveExpirationDetails fieldValue = null;
                fieldValue = SharedLinkSettingsRemoveExpirationDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedLinkSettingsRemoveExpirationDetails(fieldValue);
            }
            else if ("shared_link_settings_remove_password_details".equals(tag)) {
                SharedLinkSettingsRemovePasswordDetails fieldValue = null;
                fieldValue = SharedLinkSettingsRemovePasswordDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedLinkSettingsRemovePasswordDetails(fieldValue);
            }
            else if ("shared_link_share_details".equals(tag)) {
                SharedLinkShareDetails fieldValue = null;
                fieldValue = SharedLinkShareDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedLinkShareDetails(fieldValue);
            }
            else if ("shared_link_view_details".equals(tag)) {
                SharedLinkViewDetails fieldValue = null;
                fieldValue = SharedLinkViewDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedLinkViewDetails(fieldValue);
            }
            else if ("shared_note_opened_details".equals(tag)) {
                SharedNoteOpenedDetails fieldValue = null;
                fieldValue = SharedNoteOpenedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharedNoteOpenedDetails(fieldValue);
            }
            else if ("shmodel_disable_downloads_details".equals(tag)) {
                ShmodelDisableDownloadsDetails fieldValue = null;
                fieldValue = ShmodelDisableDownloadsDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.shmodelDisableDownloadsDetails(fieldValue);
            }
            else if ("shmodel_enable_downloads_details".equals(tag)) {
                ShmodelEnableDownloadsDetails fieldValue = null;
                fieldValue = ShmodelEnableDownloadsDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.shmodelEnableDownloadsDetails(fieldValue);
            }
            else if ("shmodel_group_share_details".equals(tag)) {
                ShmodelGroupShareDetails fieldValue = null;
                fieldValue = ShmodelGroupShareDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.shmodelGroupShareDetails(fieldValue);
            }
            else if ("showcase_access_granted_details".equals(tag)) {
                ShowcaseAccessGrantedDetails fieldValue = null;
                fieldValue = ShowcaseAccessGrantedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseAccessGrantedDetails(fieldValue);
            }
            else if ("showcase_add_member_details".equals(tag)) {
                ShowcaseAddMemberDetails fieldValue = null;
                fieldValue = ShowcaseAddMemberDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseAddMemberDetails(fieldValue);
            }
            else if ("showcase_archived_details".equals(tag)) {
                ShowcaseArchivedDetails fieldValue = null;
                fieldValue = ShowcaseArchivedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseArchivedDetails(fieldValue);
            }
            else if ("showcase_created_details".equals(tag)) {
                ShowcaseCreatedDetails fieldValue = null;
                fieldValue = ShowcaseCreatedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseCreatedDetails(fieldValue);
            }
            else if ("showcase_delete_comment_details".equals(tag)) {
                ShowcaseDeleteCommentDetails fieldValue = null;
                fieldValue = ShowcaseDeleteCommentDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseDeleteCommentDetails(fieldValue);
            }
            else if ("showcase_edited_details".equals(tag)) {
                ShowcaseEditedDetails fieldValue = null;
                fieldValue = ShowcaseEditedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseEditedDetails(fieldValue);
            }
            else if ("showcase_edit_comment_details".equals(tag)) {
                ShowcaseEditCommentDetails fieldValue = null;
                fieldValue = ShowcaseEditCommentDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseEditCommentDetails(fieldValue);
            }
            else if ("showcase_file_added_details".equals(tag)) {
                ShowcaseFileAddedDetails fieldValue = null;
                fieldValue = ShowcaseFileAddedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseFileAddedDetails(fieldValue);
            }
            else if ("showcase_file_download_details".equals(tag)) {
                ShowcaseFileDownloadDetails fieldValue = null;
                fieldValue = ShowcaseFileDownloadDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseFileDownloadDetails(fieldValue);
            }
            else if ("showcase_file_removed_details".equals(tag)) {
                ShowcaseFileRemovedDetails fieldValue = null;
                fieldValue = ShowcaseFileRemovedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseFileRemovedDetails(fieldValue);
            }
            else if ("showcase_file_view_details".equals(tag)) {
                ShowcaseFileViewDetails fieldValue = null;
                fieldValue = ShowcaseFileViewDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseFileViewDetails(fieldValue);
            }
            else if ("showcase_permanently_deleted_details".equals(tag)) {
                ShowcasePermanentlyDeletedDetails fieldValue = null;
                fieldValue = ShowcasePermanentlyDeletedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcasePermanentlyDeletedDetails(fieldValue);
            }
            else if ("showcase_post_comment_details".equals(tag)) {
                ShowcasePostCommentDetails fieldValue = null;
                fieldValue = ShowcasePostCommentDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcasePostCommentDetails(fieldValue);
            }
            else if ("showcase_remove_member_details".equals(tag)) {
                ShowcaseRemoveMemberDetails fieldValue = null;
                fieldValue = ShowcaseRemoveMemberDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseRemoveMemberDetails(fieldValue);
            }
            else if ("showcase_renamed_details".equals(tag)) {
                ShowcaseRenamedDetails fieldValue = null;
                fieldValue = ShowcaseRenamedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseRenamedDetails(fieldValue);
            }
            else if ("showcase_request_access_details".equals(tag)) {
                ShowcaseRequestAccessDetails fieldValue = null;
                fieldValue = ShowcaseRequestAccessDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseRequestAccessDetails(fieldValue);
            }
            else if ("showcase_resolve_comment_details".equals(tag)) {
                ShowcaseResolveCommentDetails fieldValue = null;
                fieldValue = ShowcaseResolveCommentDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseResolveCommentDetails(fieldValue);
            }
            else if ("showcase_restored_details".equals(tag)) {
                ShowcaseRestoredDetails fieldValue = null;
                fieldValue = ShowcaseRestoredDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseRestoredDetails(fieldValue);
            }
            else if ("showcase_trashed_details".equals(tag)) {
                ShowcaseTrashedDetails fieldValue = null;
                fieldValue = ShowcaseTrashedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseTrashedDetails(fieldValue);
            }
            else if ("showcase_trashed_deprecated_details".equals(tag)) {
                ShowcaseTrashedDeprecatedDetails fieldValue = null;
                fieldValue = ShowcaseTrashedDeprecatedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseTrashedDeprecatedDetails(fieldValue);
            }
            else if ("showcase_unresolve_comment_details".equals(tag)) {
                ShowcaseUnresolveCommentDetails fieldValue = null;
                fieldValue = ShowcaseUnresolveCommentDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseUnresolveCommentDetails(fieldValue);
            }
            else if ("showcase_untrashed_details".equals(tag)) {
                ShowcaseUntrashedDetails fieldValue = null;
                fieldValue = ShowcaseUntrashedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseUntrashedDetails(fieldValue);
            }
            else if ("showcase_untrashed_deprecated_details".equals(tag)) {
                ShowcaseUntrashedDeprecatedDetails fieldValue = null;
                fieldValue = ShowcaseUntrashedDeprecatedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseUntrashedDeprecatedDetails(fieldValue);
            }
            else if ("showcase_view_details".equals(tag)) {
                ShowcaseViewDetails fieldValue = null;
                fieldValue = ShowcaseViewDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseViewDetails(fieldValue);
            }
            else if ("sso_add_cert_details".equals(tag)) {
                SsoAddCertDetails fieldValue = null;
                fieldValue = SsoAddCertDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.ssoAddCertDetails(fieldValue);
            }
            else if ("sso_add_login_url_details".equals(tag)) {
                SsoAddLoginUrlDetails fieldValue = null;
                fieldValue = SsoAddLoginUrlDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.ssoAddLoginUrlDetails(fieldValue);
            }
            else if ("sso_add_logout_url_details".equals(tag)) {
                SsoAddLogoutUrlDetails fieldValue = null;
                fieldValue = SsoAddLogoutUrlDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.ssoAddLogoutUrlDetails(fieldValue);
            }
            else if ("sso_change_cert_details".equals(tag)) {
                SsoChangeCertDetails fieldValue = null;
                fieldValue = SsoChangeCertDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.ssoChangeCertDetails(fieldValue);
            }
            else if ("sso_change_login_url_details".equals(tag)) {
                SsoChangeLoginUrlDetails fieldValue = null;
                fieldValue = SsoChangeLoginUrlDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.ssoChangeLoginUrlDetails(fieldValue);
            }
            else if ("sso_change_logout_url_details".equals(tag)) {
                SsoChangeLogoutUrlDetails fieldValue = null;
                fieldValue = SsoChangeLogoutUrlDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.ssoChangeLogoutUrlDetails(fieldValue);
            }
            else if ("sso_change_saml_identity_mode_details".equals(tag)) {
                SsoChangeSamlIdentityModeDetails fieldValue = null;
                fieldValue = SsoChangeSamlIdentityModeDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.ssoChangeSamlIdentityModeDetails(fieldValue);
            }
            else if ("sso_remove_cert_details".equals(tag)) {
                SsoRemoveCertDetails fieldValue = null;
                fieldValue = SsoRemoveCertDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.ssoRemoveCertDetails(fieldValue);
            }
            else if ("sso_remove_login_url_details".equals(tag)) {
                SsoRemoveLoginUrlDetails fieldValue = null;
                fieldValue = SsoRemoveLoginUrlDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.ssoRemoveLoginUrlDetails(fieldValue);
            }
            else if ("sso_remove_logout_url_details".equals(tag)) {
                SsoRemoveLogoutUrlDetails fieldValue = null;
                fieldValue = SsoRemoveLogoutUrlDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.ssoRemoveLogoutUrlDetails(fieldValue);
            }
            else if ("team_folder_change_status_details".equals(tag)) {
                TeamFolderChangeStatusDetails fieldValue = null;
                fieldValue = TeamFolderChangeStatusDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamFolderChangeStatusDetails(fieldValue);
            }
            else if ("team_folder_create_details".equals(tag)) {
                TeamFolderCreateDetails fieldValue = null;
                fieldValue = TeamFolderCreateDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamFolderCreateDetails(fieldValue);
            }
            else if ("team_folder_downgrade_details".equals(tag)) {
                TeamFolderDowngradeDetails fieldValue = null;
                fieldValue = TeamFolderDowngradeDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamFolderDowngradeDetails(fieldValue);
            }
            else if ("team_folder_permanently_delete_details".equals(tag)) {
                TeamFolderPermanentlyDeleteDetails fieldValue = null;
                fieldValue = TeamFolderPermanentlyDeleteDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamFolderPermanentlyDeleteDetails(fieldValue);
            }
            else if ("team_folder_rename_details".equals(tag)) {
                TeamFolderRenameDetails fieldValue = null;
                fieldValue = TeamFolderRenameDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamFolderRenameDetails(fieldValue);
            }
            else if ("team_selective_sync_settings_changed_details".equals(tag)) {
                TeamSelectiveSyncSettingsChangedDetails fieldValue = null;
                fieldValue = TeamSelectiveSyncSettingsChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamSelectiveSyncSettingsChangedDetails(fieldValue);
            }
            else if ("account_capture_change_policy_details".equals(tag)) {
                AccountCaptureChangePolicyDetails fieldValue = null;
                fieldValue = AccountCaptureChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.accountCaptureChangePolicyDetails(fieldValue);
            }
            else if ("admin_email_reminders_changed_details".equals(tag)) {
                AdminEmailRemindersChangedDetails fieldValue = null;
                fieldValue = AdminEmailRemindersChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.adminEmailRemindersChangedDetails(fieldValue);
            }
            else if ("allow_download_disabled_details".equals(tag)) {
                AllowDownloadDisabledDetails fieldValue = null;
                fieldValue = AllowDownloadDisabledDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.allowDownloadDisabledDetails(fieldValue);
            }
            else if ("allow_download_enabled_details".equals(tag)) {
                AllowDownloadEnabledDetails fieldValue = null;
                fieldValue = AllowDownloadEnabledDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.allowDownloadEnabledDetails(fieldValue);
            }
            else if ("app_permissions_changed_details".equals(tag)) {
                AppPermissionsChangedDetails fieldValue = null;
                fieldValue = AppPermissionsChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.appPermissionsChangedDetails(fieldValue);
            }
            else if ("camera_uploads_policy_changed_details".equals(tag)) {
                CameraUploadsPolicyChangedDetails fieldValue = null;
                fieldValue = CameraUploadsPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.cameraUploadsPolicyChangedDetails(fieldValue);
            }
            else if ("capture_transcript_policy_changed_details".equals(tag)) {
                CaptureTranscriptPolicyChangedDetails fieldValue = null;
                fieldValue = CaptureTranscriptPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.captureTranscriptPolicyChangedDetails(fieldValue);
            }
            else if ("classification_change_policy_details".equals(tag)) {
                ClassificationChangePolicyDetails fieldValue = null;
                fieldValue = ClassificationChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.classificationChangePolicyDetails(fieldValue);
            }
            else if ("computer_backup_policy_changed_details".equals(tag)) {
                ComputerBackupPolicyChangedDetails fieldValue = null;
                fieldValue = ComputerBackupPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.computerBackupPolicyChangedDetails(fieldValue);
            }
            else if ("content_administration_policy_changed_details".equals(tag)) {
                ContentAdministrationPolicyChangedDetails fieldValue = null;
                fieldValue = ContentAdministrationPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.contentAdministrationPolicyChangedDetails(fieldValue);
            }
            else if ("data_placement_restriction_change_policy_details".equals(tag)) {
                DataPlacementRestrictionChangePolicyDetails fieldValue = null;
                fieldValue = DataPlacementRestrictionChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.dataPlacementRestrictionChangePolicyDetails(fieldValue);
            }
            else if ("data_placement_restriction_satisfy_policy_details".equals(tag)) {
                DataPlacementRestrictionSatisfyPolicyDetails fieldValue = null;
                fieldValue = DataPlacementRestrictionSatisfyPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.dataPlacementRestrictionSatisfyPolicyDetails(fieldValue);
            }
            else if ("device_approvals_add_exception_details".equals(tag)) {
                DeviceApprovalsAddExceptionDetails fieldValue = null;
                fieldValue = DeviceApprovalsAddExceptionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.deviceApprovalsAddExceptionDetails(fieldValue);
            }
            else if ("device_approvals_change_desktop_policy_details".equals(tag)) {
                DeviceApprovalsChangeDesktopPolicyDetails fieldValue = null;
                fieldValue = DeviceApprovalsChangeDesktopPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.deviceApprovalsChangeDesktopPolicyDetails(fieldValue);
            }
            else if ("device_approvals_change_mobile_policy_details".equals(tag)) {
                DeviceApprovalsChangeMobilePolicyDetails fieldValue = null;
                fieldValue = DeviceApprovalsChangeMobilePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.deviceApprovalsChangeMobilePolicyDetails(fieldValue);
            }
            else if ("device_approvals_change_overage_action_details".equals(tag)) {
                DeviceApprovalsChangeOverageActionDetails fieldValue = null;
                fieldValue = DeviceApprovalsChangeOverageActionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.deviceApprovalsChangeOverageActionDetails(fieldValue);
            }
            else if ("device_approvals_change_unlink_action_details".equals(tag)) {
                DeviceApprovalsChangeUnlinkActionDetails fieldValue = null;
                fieldValue = DeviceApprovalsChangeUnlinkActionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.deviceApprovalsChangeUnlinkActionDetails(fieldValue);
            }
            else if ("device_approvals_remove_exception_details".equals(tag)) {
                DeviceApprovalsRemoveExceptionDetails fieldValue = null;
                fieldValue = DeviceApprovalsRemoveExceptionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.deviceApprovalsRemoveExceptionDetails(fieldValue);
            }
            else if ("directory_restrictions_add_members_details".equals(tag)) {
                DirectoryRestrictionsAddMembersDetails fieldValue = null;
                fieldValue = DirectoryRestrictionsAddMembersDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.directoryRestrictionsAddMembersDetails(fieldValue);
            }
            else if ("directory_restrictions_remove_members_details".equals(tag)) {
                DirectoryRestrictionsRemoveMembersDetails fieldValue = null;
                fieldValue = DirectoryRestrictionsRemoveMembersDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.directoryRestrictionsRemoveMembersDetails(fieldValue);
            }
            else if ("dropbox_passwords_policy_changed_details".equals(tag)) {
                DropboxPasswordsPolicyChangedDetails fieldValue = null;
                fieldValue = DropboxPasswordsPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.dropboxPasswordsPolicyChangedDetails(fieldValue);
            }
            else if ("email_ingest_policy_changed_details".equals(tag)) {
                EmailIngestPolicyChangedDetails fieldValue = null;
                fieldValue = EmailIngestPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.emailIngestPolicyChangedDetails(fieldValue);
            }
            else if ("emm_add_exception_details".equals(tag)) {
                EmmAddExceptionDetails fieldValue = null;
                fieldValue = EmmAddExceptionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.emmAddExceptionDetails(fieldValue);
            }
            else if ("emm_change_policy_details".equals(tag)) {
                EmmChangePolicyDetails fieldValue = null;
                fieldValue = EmmChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.emmChangePolicyDetails(fieldValue);
            }
            else if ("emm_remove_exception_details".equals(tag)) {
                EmmRemoveExceptionDetails fieldValue = null;
                fieldValue = EmmRemoveExceptionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.emmRemoveExceptionDetails(fieldValue);
            }
            else if ("extended_version_history_change_policy_details".equals(tag)) {
                ExtendedVersionHistoryChangePolicyDetails fieldValue = null;
                fieldValue = ExtendedVersionHistoryChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.extendedVersionHistoryChangePolicyDetails(fieldValue);
            }
            else if ("external_drive_backup_policy_changed_details".equals(tag)) {
                ExternalDriveBackupPolicyChangedDetails fieldValue = null;
                fieldValue = ExternalDriveBackupPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.externalDriveBackupPolicyChangedDetails(fieldValue);
            }
            else if ("file_comments_change_policy_details".equals(tag)) {
                FileCommentsChangePolicyDetails fieldValue = null;
                fieldValue = FileCommentsChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileCommentsChangePolicyDetails(fieldValue);
            }
            else if ("file_locking_policy_changed_details".equals(tag)) {
                FileLockingPolicyChangedDetails fieldValue = null;
                fieldValue = FileLockingPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileLockingPolicyChangedDetails(fieldValue);
            }
            else if ("file_provider_migration_policy_changed_details".equals(tag)) {
                FileProviderMigrationPolicyChangedDetails fieldValue = null;
                fieldValue = FileProviderMigrationPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileProviderMigrationPolicyChangedDetails(fieldValue);
            }
            else if ("file_requests_change_policy_details".equals(tag)) {
                FileRequestsChangePolicyDetails fieldValue = null;
                fieldValue = FileRequestsChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileRequestsChangePolicyDetails(fieldValue);
            }
            else if ("file_requests_emails_enabled_details".equals(tag)) {
                FileRequestsEmailsEnabledDetails fieldValue = null;
                fieldValue = FileRequestsEmailsEnabledDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileRequestsEmailsEnabledDetails(fieldValue);
            }
            else if ("file_requests_emails_restricted_to_team_only_details".equals(tag)) {
                FileRequestsEmailsRestrictedToTeamOnlyDetails fieldValue = null;
                fieldValue = FileRequestsEmailsRestrictedToTeamOnlyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileRequestsEmailsRestrictedToTeamOnlyDetails(fieldValue);
            }
            else if ("file_transfers_policy_changed_details".equals(tag)) {
                FileTransfersPolicyChangedDetails fieldValue = null;
                fieldValue = FileTransfersPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.fileTransfersPolicyChangedDetails(fieldValue);
            }
            else if ("google_sso_change_policy_details".equals(tag)) {
                GoogleSsoChangePolicyDetails fieldValue = null;
                fieldValue = GoogleSsoChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.googleSsoChangePolicyDetails(fieldValue);
            }
            else if ("group_user_management_change_policy_details".equals(tag)) {
                GroupUserManagementChangePolicyDetails fieldValue = null;
                fieldValue = GroupUserManagementChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.groupUserManagementChangePolicyDetails(fieldValue);
            }
            else if ("integration_policy_changed_details".equals(tag)) {
                IntegrationPolicyChangedDetails fieldValue = null;
                fieldValue = IntegrationPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.integrationPolicyChangedDetails(fieldValue);
            }
            else if ("invite_acceptance_email_policy_changed_details".equals(tag)) {
                InviteAcceptanceEmailPolicyChangedDetails fieldValue = null;
                fieldValue = InviteAcceptanceEmailPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.inviteAcceptanceEmailPolicyChangedDetails(fieldValue);
            }
            else if ("member_requests_change_policy_details".equals(tag)) {
                MemberRequestsChangePolicyDetails fieldValue = null;
                fieldValue = MemberRequestsChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberRequestsChangePolicyDetails(fieldValue);
            }
            else if ("member_send_invite_policy_changed_details".equals(tag)) {
                MemberSendInvitePolicyChangedDetails fieldValue = null;
                fieldValue = MemberSendInvitePolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberSendInvitePolicyChangedDetails(fieldValue);
            }
            else if ("member_space_limits_add_exception_details".equals(tag)) {
                MemberSpaceLimitsAddExceptionDetails fieldValue = null;
                fieldValue = MemberSpaceLimitsAddExceptionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberSpaceLimitsAddExceptionDetails(fieldValue);
            }
            else if ("member_space_limits_change_caps_type_policy_details".equals(tag)) {
                MemberSpaceLimitsChangeCapsTypePolicyDetails fieldValue = null;
                fieldValue = MemberSpaceLimitsChangeCapsTypePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberSpaceLimitsChangeCapsTypePolicyDetails(fieldValue);
            }
            else if ("member_space_limits_change_policy_details".equals(tag)) {
                MemberSpaceLimitsChangePolicyDetails fieldValue = null;
                fieldValue = MemberSpaceLimitsChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberSpaceLimitsChangePolicyDetails(fieldValue);
            }
            else if ("member_space_limits_remove_exception_details".equals(tag)) {
                MemberSpaceLimitsRemoveExceptionDetails fieldValue = null;
                fieldValue = MemberSpaceLimitsRemoveExceptionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberSpaceLimitsRemoveExceptionDetails(fieldValue);
            }
            else if ("member_suggestions_change_policy_details".equals(tag)) {
                MemberSuggestionsChangePolicyDetails fieldValue = null;
                fieldValue = MemberSuggestionsChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.memberSuggestionsChangePolicyDetails(fieldValue);
            }
            else if ("microsoft_office_addin_change_policy_details".equals(tag)) {
                MicrosoftOfficeAddinChangePolicyDetails fieldValue = null;
                fieldValue = MicrosoftOfficeAddinChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.microsoftOfficeAddinChangePolicyDetails(fieldValue);
            }
            else if ("network_control_change_policy_details".equals(tag)) {
                NetworkControlChangePolicyDetails fieldValue = null;
                fieldValue = NetworkControlChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.networkControlChangePolicyDetails(fieldValue);
            }
            else if ("paper_change_deployment_policy_details".equals(tag)) {
                PaperChangeDeploymentPolicyDetails fieldValue = null;
                fieldValue = PaperChangeDeploymentPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperChangeDeploymentPolicyDetails(fieldValue);
            }
            else if ("paper_change_member_link_policy_details".equals(tag)) {
                PaperChangeMemberLinkPolicyDetails fieldValue = null;
                fieldValue = PaperChangeMemberLinkPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperChangeMemberLinkPolicyDetails(fieldValue);
            }
            else if ("paper_change_member_policy_details".equals(tag)) {
                PaperChangeMemberPolicyDetails fieldValue = null;
                fieldValue = PaperChangeMemberPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperChangeMemberPolicyDetails(fieldValue);
            }
            else if ("paper_change_policy_details".equals(tag)) {
                PaperChangePolicyDetails fieldValue = null;
                fieldValue = PaperChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperChangePolicyDetails(fieldValue);
            }
            else if ("paper_default_folder_policy_changed_details".equals(tag)) {
                PaperDefaultFolderPolicyChangedDetails fieldValue = null;
                fieldValue = PaperDefaultFolderPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDefaultFolderPolicyChangedDetails(fieldValue);
            }
            else if ("paper_desktop_policy_changed_details".equals(tag)) {
                PaperDesktopPolicyChangedDetails fieldValue = null;
                fieldValue = PaperDesktopPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperDesktopPolicyChangedDetails(fieldValue);
            }
            else if ("paper_enabled_users_group_addition_details".equals(tag)) {
                PaperEnabledUsersGroupAdditionDetails fieldValue = null;
                fieldValue = PaperEnabledUsersGroupAdditionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperEnabledUsersGroupAdditionDetails(fieldValue);
            }
            else if ("paper_enabled_users_group_removal_details".equals(tag)) {
                PaperEnabledUsersGroupRemovalDetails fieldValue = null;
                fieldValue = PaperEnabledUsersGroupRemovalDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.paperEnabledUsersGroupRemovalDetails(fieldValue);
            }
            else if ("password_strength_requirements_change_policy_details".equals(tag)) {
                PasswordStrengthRequirementsChangePolicyDetails fieldValue = null;
                fieldValue = PasswordStrengthRequirementsChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.passwordStrengthRequirementsChangePolicyDetails(fieldValue);
            }
            else if ("permanent_delete_change_policy_details".equals(tag)) {
                PermanentDeleteChangePolicyDetails fieldValue = null;
                fieldValue = PermanentDeleteChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.permanentDeleteChangePolicyDetails(fieldValue);
            }
            else if ("reseller_support_change_policy_details".equals(tag)) {
                ResellerSupportChangePolicyDetails fieldValue = null;
                fieldValue = ResellerSupportChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.resellerSupportChangePolicyDetails(fieldValue);
            }
            else if ("rewind_policy_changed_details".equals(tag)) {
                RewindPolicyChangedDetails fieldValue = null;
                fieldValue = RewindPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.rewindPolicyChangedDetails(fieldValue);
            }
            else if ("send_for_signature_policy_changed_details".equals(tag)) {
                SendForSignaturePolicyChangedDetails fieldValue = null;
                fieldValue = SendForSignaturePolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sendForSignaturePolicyChangedDetails(fieldValue);
            }
            else if ("sharing_change_folder_join_policy_details".equals(tag)) {
                SharingChangeFolderJoinPolicyDetails fieldValue = null;
                fieldValue = SharingChangeFolderJoinPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharingChangeFolderJoinPolicyDetails(fieldValue);
            }
            else if ("sharing_change_link_allow_change_expiration_policy_details".equals(tag)) {
                SharingChangeLinkAllowChangeExpirationPolicyDetails fieldValue = null;
                fieldValue = SharingChangeLinkAllowChangeExpirationPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharingChangeLinkAllowChangeExpirationPolicyDetails(fieldValue);
            }
            else if ("sharing_change_link_default_expiration_policy_details".equals(tag)) {
                SharingChangeLinkDefaultExpirationPolicyDetails fieldValue = null;
                fieldValue = SharingChangeLinkDefaultExpirationPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharingChangeLinkDefaultExpirationPolicyDetails(fieldValue);
            }
            else if ("sharing_change_link_enforce_password_policy_details".equals(tag)) {
                SharingChangeLinkEnforcePasswordPolicyDetails fieldValue = null;
                fieldValue = SharingChangeLinkEnforcePasswordPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharingChangeLinkEnforcePasswordPolicyDetails(fieldValue);
            }
            else if ("sharing_change_link_policy_details".equals(tag)) {
                SharingChangeLinkPolicyDetails fieldValue = null;
                fieldValue = SharingChangeLinkPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharingChangeLinkPolicyDetails(fieldValue);
            }
            else if ("sharing_change_member_policy_details".equals(tag)) {
                SharingChangeMemberPolicyDetails fieldValue = null;
                fieldValue = SharingChangeMemberPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.sharingChangeMemberPolicyDetails(fieldValue);
            }
            else if ("showcase_change_download_policy_details".equals(tag)) {
                ShowcaseChangeDownloadPolicyDetails fieldValue = null;
                fieldValue = ShowcaseChangeDownloadPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseChangeDownloadPolicyDetails(fieldValue);
            }
            else if ("showcase_change_enabled_policy_details".equals(tag)) {
                ShowcaseChangeEnabledPolicyDetails fieldValue = null;
                fieldValue = ShowcaseChangeEnabledPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseChangeEnabledPolicyDetails(fieldValue);
            }
            else if ("showcase_change_external_sharing_policy_details".equals(tag)) {
                ShowcaseChangeExternalSharingPolicyDetails fieldValue = null;
                fieldValue = ShowcaseChangeExternalSharingPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.showcaseChangeExternalSharingPolicyDetails(fieldValue);
            }
            else if ("smarter_smart_sync_policy_changed_details".equals(tag)) {
                SmarterSmartSyncPolicyChangedDetails fieldValue = null;
                fieldValue = SmarterSmartSyncPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.smarterSmartSyncPolicyChangedDetails(fieldValue);
            }
            else if ("smart_sync_change_policy_details".equals(tag)) {
                SmartSyncChangePolicyDetails fieldValue = null;
                fieldValue = SmartSyncChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.smartSyncChangePolicyDetails(fieldValue);
            }
            else if ("smart_sync_not_opt_out_details".equals(tag)) {
                SmartSyncNotOptOutDetails fieldValue = null;
                fieldValue = SmartSyncNotOptOutDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.smartSyncNotOptOutDetails(fieldValue);
            }
            else if ("smart_sync_opt_out_details".equals(tag)) {
                SmartSyncOptOutDetails fieldValue = null;
                fieldValue = SmartSyncOptOutDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.smartSyncOptOutDetails(fieldValue);
            }
            else if ("sso_change_policy_details".equals(tag)) {
                SsoChangePolicyDetails fieldValue = null;
                fieldValue = SsoChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.ssoChangePolicyDetails(fieldValue);
            }
            else if ("team_branding_policy_changed_details".equals(tag)) {
                TeamBrandingPolicyChangedDetails fieldValue = null;
                fieldValue = TeamBrandingPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamBrandingPolicyChangedDetails(fieldValue);
            }
            else if ("team_extensions_policy_changed_details".equals(tag)) {
                TeamExtensionsPolicyChangedDetails fieldValue = null;
                fieldValue = TeamExtensionsPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamExtensionsPolicyChangedDetails(fieldValue);
            }
            else if ("team_selective_sync_policy_changed_details".equals(tag)) {
                TeamSelectiveSyncPolicyChangedDetails fieldValue = null;
                fieldValue = TeamSelectiveSyncPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamSelectiveSyncPolicyChangedDetails(fieldValue);
            }
            else if ("team_sharing_whitelist_subjects_changed_details".equals(tag)) {
                TeamSharingWhitelistSubjectsChangedDetails fieldValue = null;
                fieldValue = TeamSharingWhitelistSubjectsChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamSharingWhitelistSubjectsChangedDetails(fieldValue);
            }
            else if ("tfa_add_exception_details".equals(tag)) {
                TfaAddExceptionDetails fieldValue = null;
                fieldValue = TfaAddExceptionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.tfaAddExceptionDetails(fieldValue);
            }
            else if ("tfa_change_policy_details".equals(tag)) {
                TfaChangePolicyDetails fieldValue = null;
                fieldValue = TfaChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.tfaChangePolicyDetails(fieldValue);
            }
            else if ("tfa_remove_exception_details".equals(tag)) {
                TfaRemoveExceptionDetails fieldValue = null;
                fieldValue = TfaRemoveExceptionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.tfaRemoveExceptionDetails(fieldValue);
            }
            else if ("two_account_change_policy_details".equals(tag)) {
                TwoAccountChangePolicyDetails fieldValue = null;
                fieldValue = TwoAccountChangePolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.twoAccountChangePolicyDetails(fieldValue);
            }
            else if ("viewer_info_policy_changed_details".equals(tag)) {
                ViewerInfoPolicyChangedDetails fieldValue = null;
                fieldValue = ViewerInfoPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.viewerInfoPolicyChangedDetails(fieldValue);
            }
            else if ("watermarking_policy_changed_details".equals(tag)) {
                WatermarkingPolicyChangedDetails fieldValue = null;
                fieldValue = WatermarkingPolicyChangedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.watermarkingPolicyChangedDetails(fieldValue);
            }
            else if ("web_sessions_change_active_session_limit_details".equals(tag)) {
                WebSessionsChangeActiveSessionLimitDetails fieldValue = null;
                fieldValue = WebSessionsChangeActiveSessionLimitDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.webSessionsChangeActiveSessionLimitDetails(fieldValue);
            }
            else if ("web_sessions_change_fixed_length_policy_details".equals(tag)) {
                WebSessionsChangeFixedLengthPolicyDetails fieldValue = null;
                fieldValue = WebSessionsChangeFixedLengthPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.webSessionsChangeFixedLengthPolicyDetails(fieldValue);
            }
            else if ("web_sessions_change_idle_length_policy_details".equals(tag)) {
                WebSessionsChangeIdleLengthPolicyDetails fieldValue = null;
                fieldValue = WebSessionsChangeIdleLengthPolicyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.webSessionsChangeIdleLengthPolicyDetails(fieldValue);
            }
            else if ("data_residency_migration_request_successful_details".equals(tag)) {
                DataResidencyMigrationRequestSuccessfulDetails fieldValue = null;
                fieldValue = DataResidencyMigrationRequestSuccessfulDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.dataResidencyMigrationRequestSuccessfulDetails(fieldValue);
            }
            else if ("data_residency_migration_request_unsuccessful_details".equals(tag)) {
                DataResidencyMigrationRequestUnsuccessfulDetails fieldValue = null;
                fieldValue = DataResidencyMigrationRequestUnsuccessfulDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.dataResidencyMigrationRequestUnsuccessfulDetails(fieldValue);
            }
            else if ("team_merge_from_details".equals(tag)) {
                TeamMergeFromDetails fieldValue = null;
                fieldValue = TeamMergeFromDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamMergeFromDetails(fieldValue);
            }
            else if ("team_merge_to_details".equals(tag)) {
                TeamMergeToDetails fieldValue = null;
                fieldValue = TeamMergeToDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamMergeToDetails(fieldValue);
            }
            else if ("team_profile_add_background_details".equals(tag)) {
                TeamProfileAddBackgroundDetails fieldValue = null;
                fieldValue = TeamProfileAddBackgroundDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamProfileAddBackgroundDetails(fieldValue);
            }
            else if ("team_profile_add_logo_details".equals(tag)) {
                TeamProfileAddLogoDetails fieldValue = null;
                fieldValue = TeamProfileAddLogoDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamProfileAddLogoDetails(fieldValue);
            }
            else if ("team_profile_change_background_details".equals(tag)) {
                TeamProfileChangeBackgroundDetails fieldValue = null;
                fieldValue = TeamProfileChangeBackgroundDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamProfileChangeBackgroundDetails(fieldValue);
            }
            else if ("team_profile_change_default_language_details".equals(tag)) {
                TeamProfileChangeDefaultLanguageDetails fieldValue = null;
                fieldValue = TeamProfileChangeDefaultLanguageDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamProfileChangeDefaultLanguageDetails(fieldValue);
            }
            else if ("team_profile_change_logo_details".equals(tag)) {
                TeamProfileChangeLogoDetails fieldValue = null;
                fieldValue = TeamProfileChangeLogoDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamProfileChangeLogoDetails(fieldValue);
            }
            else if ("team_profile_change_name_details".equals(tag)) {
                TeamProfileChangeNameDetails fieldValue = null;
                fieldValue = TeamProfileChangeNameDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamProfileChangeNameDetails(fieldValue);
            }
            else if ("team_profile_remove_background_details".equals(tag)) {
                TeamProfileRemoveBackgroundDetails fieldValue = null;
                fieldValue = TeamProfileRemoveBackgroundDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamProfileRemoveBackgroundDetails(fieldValue);
            }
            else if ("team_profile_remove_logo_details".equals(tag)) {
                TeamProfileRemoveLogoDetails fieldValue = null;
                fieldValue = TeamProfileRemoveLogoDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamProfileRemoveLogoDetails(fieldValue);
            }
            else if ("tfa_add_backup_phone_details".equals(tag)) {
                TfaAddBackupPhoneDetails fieldValue = null;
                fieldValue = TfaAddBackupPhoneDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.tfaAddBackupPhoneDetails(fieldValue);
            }
            else if ("tfa_add_security_key_details".equals(tag)) {
                TfaAddSecurityKeyDetails fieldValue = null;
                fieldValue = TfaAddSecurityKeyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.tfaAddSecurityKeyDetails(fieldValue);
            }
            else if ("tfa_change_backup_phone_details".equals(tag)) {
                TfaChangeBackupPhoneDetails fieldValue = null;
                fieldValue = TfaChangeBackupPhoneDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.tfaChangeBackupPhoneDetails(fieldValue);
            }
            else if ("tfa_change_status_details".equals(tag)) {
                TfaChangeStatusDetails fieldValue = null;
                fieldValue = TfaChangeStatusDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.tfaChangeStatusDetails(fieldValue);
            }
            else if ("tfa_remove_backup_phone_details".equals(tag)) {
                TfaRemoveBackupPhoneDetails fieldValue = null;
                fieldValue = TfaRemoveBackupPhoneDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.tfaRemoveBackupPhoneDetails(fieldValue);
            }
            else if ("tfa_remove_security_key_details".equals(tag)) {
                TfaRemoveSecurityKeyDetails fieldValue = null;
                fieldValue = TfaRemoveSecurityKeyDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.tfaRemoveSecurityKeyDetails(fieldValue);
            }
            else if ("tfa_reset_details".equals(tag)) {
                TfaResetDetails fieldValue = null;
                fieldValue = TfaResetDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.tfaResetDetails(fieldValue);
            }
            else if ("changed_enterprise_admin_role_details".equals(tag)) {
                ChangedEnterpriseAdminRoleDetails fieldValue = null;
                fieldValue = ChangedEnterpriseAdminRoleDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.changedEnterpriseAdminRoleDetails(fieldValue);
            }
            else if ("changed_enterprise_connected_team_status_details".equals(tag)) {
                ChangedEnterpriseConnectedTeamStatusDetails fieldValue = null;
                fieldValue = ChangedEnterpriseConnectedTeamStatusDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.changedEnterpriseConnectedTeamStatusDetails(fieldValue);
            }
            else if ("ended_enterprise_admin_session_details".equals(tag)) {
                EndedEnterpriseAdminSessionDetails fieldValue = null;
                fieldValue = EndedEnterpriseAdminSessionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.endedEnterpriseAdminSessionDetails(fieldValue);
            }
            else if ("ended_enterprise_admin_session_deprecated_details".equals(tag)) {
                EndedEnterpriseAdminSessionDeprecatedDetails fieldValue = null;
                fieldValue = EndedEnterpriseAdminSessionDeprecatedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.endedEnterpriseAdminSessionDeprecatedDetails(fieldValue);
            }
            else if ("enterprise_settings_locking_details".equals(tag)) {
                EnterpriseSettingsLockingDetails fieldValue = null;
                fieldValue = EnterpriseSettingsLockingDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.enterpriseSettingsLockingDetails(fieldValue);
            }
            else if ("guest_admin_change_status_details".equals(tag)) {
                GuestAdminChangeStatusDetails fieldValue = null;
                fieldValue = GuestAdminChangeStatusDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.guestAdminChangeStatusDetails(fieldValue);
            }
            else if ("started_enterprise_admin_session_details".equals(tag)) {
                StartedEnterpriseAdminSessionDetails fieldValue = null;
                fieldValue = StartedEnterpriseAdminSessionDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.startedEnterpriseAdminSessionDetails(fieldValue);
            }
            else if ("team_merge_request_accepted_details".equals(tag)) {
                TeamMergeRequestAcceptedDetails fieldValue = null;
                fieldValue = TeamMergeRequestAcceptedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamMergeRequestAcceptedDetails(fieldValue);
            }
            else if ("team_merge_request_accepted_shown_to_primary_team_details".equals(tag)) {
                TeamMergeRequestAcceptedShownToPrimaryTeamDetails fieldValue = null;
                fieldValue = TeamMergeRequestAcceptedShownToPrimaryTeamDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamMergeRequestAcceptedShownToPrimaryTeamDetails(fieldValue);
            }
            else if ("team_merge_request_accepted_shown_to_secondary_team_details".equals(tag)) {
                TeamMergeRequestAcceptedShownToSecondaryTeamDetails fieldValue = null;
                fieldValue = TeamMergeRequestAcceptedShownToSecondaryTeamDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamMergeRequestAcceptedShownToSecondaryTeamDetails(fieldValue);
            }
            else if ("team_merge_request_auto_canceled_details".equals(tag)) {
                TeamMergeRequestAutoCanceledDetails fieldValue = null;
                fieldValue = TeamMergeRequestAutoCanceledDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamMergeRequestAutoCanceledDetails(fieldValue);
            }
            else if ("team_merge_request_canceled_details".equals(tag)) {
                TeamMergeRequestCanceledDetails fieldValue = null;
                fieldValue = TeamMergeRequestCanceledDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamMergeRequestCanceledDetails(fieldValue);
            }
            else if ("team_merge_request_canceled_shown_to_primary_team_details".equals(tag)) {
                TeamMergeRequestCanceledShownToPrimaryTeamDetails fieldValue = null;
                fieldValue = TeamMergeRequestCanceledShownToPrimaryTeamDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamMergeRequestCanceledShownToPrimaryTeamDetails(fieldValue);
            }
            else if ("team_merge_request_canceled_shown_to_secondary_team_details".equals(tag)) {
                TeamMergeRequestCanceledShownToSecondaryTeamDetails fieldValue = null;
                fieldValue = TeamMergeRequestCanceledShownToSecondaryTeamDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamMergeRequestCanceledShownToSecondaryTeamDetails(fieldValue);
            }
            else if ("team_merge_request_expired_details".equals(tag)) {
                TeamMergeRequestExpiredDetails fieldValue = null;
                fieldValue = TeamMergeRequestExpiredDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamMergeRequestExpiredDetails(fieldValue);
            }
            else if ("team_merge_request_expired_shown_to_primary_team_details".equals(tag)) {
                TeamMergeRequestExpiredShownToPrimaryTeamDetails fieldValue = null;
                fieldValue = TeamMergeRequestExpiredShownToPrimaryTeamDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamMergeRequestExpiredShownToPrimaryTeamDetails(fieldValue);
            }
            else if ("team_merge_request_expired_shown_to_secondary_team_details".equals(tag)) {
                TeamMergeRequestExpiredShownToSecondaryTeamDetails fieldValue = null;
                fieldValue = TeamMergeRequestExpiredShownToSecondaryTeamDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamMergeRequestExpiredShownToSecondaryTeamDetails(fieldValue);
            }
            else if ("team_merge_request_rejected_shown_to_primary_team_details".equals(tag)) {
                TeamMergeRequestRejectedShownToPrimaryTeamDetails fieldValue = null;
                fieldValue = TeamMergeRequestRejectedShownToPrimaryTeamDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamMergeRequestRejectedShownToPrimaryTeamDetails(fieldValue);
            }
            else if ("team_merge_request_rejected_shown_to_secondary_team_details".equals(tag)) {
                TeamMergeRequestRejectedShownToSecondaryTeamDetails fieldValue = null;
                fieldValue = TeamMergeRequestRejectedShownToSecondaryTeamDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamMergeRequestRejectedShownToSecondaryTeamDetails(fieldValue);
            }
            else if ("team_merge_request_reminder_details".equals(tag)) {
                TeamMergeRequestReminderDetails fieldValue = null;
                fieldValue = TeamMergeRequestReminderDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamMergeRequestReminderDetails(fieldValue);
            }
            else if ("team_merge_request_reminder_shown_to_primary_team_details".equals(tag)) {
                TeamMergeRequestReminderShownToPrimaryTeamDetails fieldValue = null;
                fieldValue = TeamMergeRequestReminderShownToPrimaryTeamDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamMergeRequestReminderShownToPrimaryTeamDetails(fieldValue);
            }
            else if ("team_merge_request_reminder_shown_to_secondary_team_details".equals(tag)) {
                TeamMergeRequestReminderShownToSecondaryTeamDetails fieldValue = null;
                fieldValue = TeamMergeRequestReminderShownToSecondaryTeamDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamMergeRequestReminderShownToSecondaryTeamDetails(fieldValue);
            }
            else if ("team_merge_request_revoked_details".equals(tag)) {
                TeamMergeRequestRevokedDetails fieldValue = null;
                fieldValue = TeamMergeRequestRevokedDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamMergeRequestRevokedDetails(fieldValue);
            }
            else if ("team_merge_request_sent_shown_to_primary_team_details".equals(tag)) {
                TeamMergeRequestSentShownToPrimaryTeamDetails fieldValue = null;
                fieldValue = TeamMergeRequestSentShownToPrimaryTeamDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamMergeRequestSentShownToPrimaryTeamDetails(fieldValue);
            }
            else if ("team_merge_request_sent_shown_to_secondary_team_details".equals(tag)) {
                TeamMergeRequestSentShownToSecondaryTeamDetails fieldValue = null;
                fieldValue = TeamMergeRequestSentShownToSecondaryTeamDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.teamMergeRequestSentShownToSecondaryTeamDetails(fieldValue);
            }
            else if ("missing_details".equals(tag)) {
                MissingDetails fieldValue = null;
                fieldValue = MissingDetails.Serializer.INSTANCE.deserialize(p, true);
                value = EventDetails.missingDetails(fieldValue);
            }
            else {
                value = EventDetails.OTHER;
            }
            if (!collapsed) {
                skipFields(p);
                expectEndObject(p);
            }
            return value;
        }
    }
}
