/* DO NOT EDIT */
/* This file was generated from team_log_generated.stone */

package com.dropbox.core.v2.teamlog;

import com.dropbox.core.stone.StoneDeserializerLogger;
import com.dropbox.core.stone.StoneSerializers;
import com.dropbox.core.stone.UnionSerializer;

import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;

import java.io.IOException;
import java.util.Arrays;

/**
 * The type of the event with description.
 *
 * <p> This class is an open tagged union.  Tagged unions instances are always
 * associated to a specific tag.  This means only one of the {@code isAbc()}
 * methods will return {@code true}. You can use {@link #tag()} to determine the
 * tag associated with this instance. </p>
 *
 * <p> Open unions may be extended in the future with additional tags. If a new
 * tag is introduced that this SDK does not recognized, the {@link #OTHER} value
 * will be used. </p>
 */
public final class EventType {
    // union team_log.EventType (team_log_generated.stone)

    /**
     * Discriminating tag type for {@link EventType}.
     */
    public enum Tag {
        /**
         * (admin_alerting) Changed an alert state
         */
        ADMIN_ALERTING_ALERT_STATE_CHANGED, // AdminAlertingAlertStateChangedType
        /**
         * (admin_alerting) Changed an alert setting
         */
        ADMIN_ALERTING_CHANGED_ALERT_CONFIG, // AdminAlertingChangedAlertConfigType
        /**
         * (admin_alerting) Triggered security alert
         */
        ADMIN_ALERTING_TRIGGERED_ALERT, // AdminAlertingTriggeredAlertType
        /**
         * (apps) Failed to connect app for member
         */
        APP_BLOCKED_BY_PERMISSIONS, // AppBlockedByPermissionsType
        /**
         * (apps) Linked app for team
         */
        APP_LINK_TEAM, // AppLinkTeamType
        /**
         * (apps) Linked app for member
         */
        APP_LINK_USER, // AppLinkUserType
        /**
         * (apps) Unlinked app for team
         */
        APP_UNLINK_TEAM, // AppUnlinkTeamType
        /**
         * (apps) Unlinked app for member
         */
        APP_UNLINK_USER, // AppUnlinkUserType
        /**
         * (apps) Connected integration for member
         */
        INTEGRATION_CONNECTED, // IntegrationConnectedType
        /**
         * (apps) Disconnected integration for member
         */
        INTEGRATION_DISCONNECTED, // IntegrationDisconnectedType
        /**
         * (comments) Added file comment
         */
        FILE_ADD_COMMENT, // FileAddCommentType
        /**
         * (comments) Subscribed to or unsubscribed from comment notifications
         * for file
         */
        FILE_CHANGE_COMMENT_SUBSCRIPTION, // FileChangeCommentSubscriptionType
        /**
         * (comments) Deleted file comment
         */
        FILE_DELETE_COMMENT, // FileDeleteCommentType
        /**
         * (comments) Edited file comment
         */
        FILE_EDIT_COMMENT, // FileEditCommentType
        /**
         * (comments) Liked file comment (deprecated, no longer logged)
         */
        FILE_LIKE_COMMENT, // FileLikeCommentType
        /**
         * (comments) Resolved file comment
         */
        FILE_RESOLVE_COMMENT, // FileResolveCommentType
        /**
         * (comments) Unliked file comment (deprecated, no longer logged)
         */
        FILE_UNLIKE_COMMENT, // FileUnlikeCommentType
        /**
         * (comments) Unresolved file comment
         */
        FILE_UNRESOLVE_COMMENT, // FileUnresolveCommentType
        /**
         * (data_governance) Added folders to policy
         */
        GOVERNANCE_POLICY_ADD_FOLDERS, // GovernancePolicyAddFoldersType
        /**
         * (data_governance) Couldn't add a folder to a policy
         */
        GOVERNANCE_POLICY_ADD_FOLDER_FAILED, // GovernancePolicyAddFolderFailedType
        /**
         * (data_governance) Content disposed
         */
        GOVERNANCE_POLICY_CONTENT_DISPOSED, // GovernancePolicyContentDisposedType
        /**
         * (data_governance) Activated a new policy
         */
        GOVERNANCE_POLICY_CREATE, // GovernancePolicyCreateType
        /**
         * (data_governance) Deleted a policy
         */
        GOVERNANCE_POLICY_DELETE, // GovernancePolicyDeleteType
        /**
         * (data_governance) Edited policy
         */
        GOVERNANCE_POLICY_EDIT_DETAILS, // GovernancePolicyEditDetailsType
        /**
         * (data_governance) Changed policy duration
         */
        GOVERNANCE_POLICY_EDIT_DURATION, // GovernancePolicyEditDurationType
        /**
         * (data_governance) Created a policy download
         */
        GOVERNANCE_POLICY_EXPORT_CREATED, // GovernancePolicyExportCreatedType
        /**
         * (data_governance) Removed a policy download
         */
        GOVERNANCE_POLICY_EXPORT_REMOVED, // GovernancePolicyExportRemovedType
        /**
         * (data_governance) Removed folders from policy
         */
        GOVERNANCE_POLICY_REMOVE_FOLDERS, // GovernancePolicyRemoveFoldersType
        /**
         * (data_governance) Created a summary report for a policy
         */
        GOVERNANCE_POLICY_REPORT_CREATED, // GovernancePolicyReportCreatedType
        /**
         * (data_governance) Downloaded content from a policy
         */
        GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED, // GovernancePolicyZipPartDownloadedType
        /**
         * (data_governance) Activated a hold
         */
        LEGAL_HOLDS_ACTIVATE_A_HOLD, // LegalHoldsActivateAHoldType
        /**
         * (data_governance) Added members to a hold
         */
        LEGAL_HOLDS_ADD_MEMBERS, // LegalHoldsAddMembersType
        /**
         * (data_governance) Edited details for a hold
         */
        LEGAL_HOLDS_CHANGE_HOLD_DETAILS, // LegalHoldsChangeHoldDetailsType
        /**
         * (data_governance) Renamed a hold
         */
        LEGAL_HOLDS_CHANGE_HOLD_NAME, // LegalHoldsChangeHoldNameType
        /**
         * (data_governance) Exported hold
         */
        LEGAL_HOLDS_EXPORT_A_HOLD, // LegalHoldsExportAHoldType
        /**
         * (data_governance) Canceled export for a hold
         */
        LEGAL_HOLDS_EXPORT_CANCELLED, // LegalHoldsExportCancelledType
        /**
         * (data_governance) Downloaded export for a hold
         */
        LEGAL_HOLDS_EXPORT_DOWNLOADED, // LegalHoldsExportDownloadedType
        /**
         * (data_governance) Removed export for a hold
         */
        LEGAL_HOLDS_EXPORT_REMOVED, // LegalHoldsExportRemovedType
        /**
         * (data_governance) Released a hold
         */
        LEGAL_HOLDS_RELEASE_A_HOLD, // LegalHoldsReleaseAHoldType
        /**
         * (data_governance) Removed members from a hold
         */
        LEGAL_HOLDS_REMOVE_MEMBERS, // LegalHoldsRemoveMembersType
        /**
         * (data_governance) Created a summary report for a hold
         */
        LEGAL_HOLDS_REPORT_A_HOLD, // LegalHoldsReportAHoldType
        /**
         * (devices) Changed IP address associated with active desktop session
         */
        DEVICE_CHANGE_IP_DESKTOP, // DeviceChangeIpDesktopType
        /**
         * (devices) Changed IP address associated with active mobile session
         */
        DEVICE_CHANGE_IP_MOBILE, // DeviceChangeIpMobileType
        /**
         * (devices) Changed IP address associated with active web session
         */
        DEVICE_CHANGE_IP_WEB, // DeviceChangeIpWebType
        /**
         * (devices) Failed to delete all files from unlinked device
         */
        DEVICE_DELETE_ON_UNLINK_FAIL, // DeviceDeleteOnUnlinkFailType
        /**
         * (devices) Deleted all files from unlinked device
         */
        DEVICE_DELETE_ON_UNLINK_SUCCESS, // DeviceDeleteOnUnlinkSuccessType
        /**
         * (devices) Failed to link device
         */
        DEVICE_LINK_FAIL, // DeviceLinkFailType
        /**
         * (devices) Linked device
         */
        DEVICE_LINK_SUCCESS, // DeviceLinkSuccessType
        /**
         * (devices) Disabled device management (deprecated, no longer logged)
         */
        DEVICE_MANAGEMENT_DISABLED, // DeviceManagementDisabledType
        /**
         * (devices) Enabled device management (deprecated, no longer logged)
         */
        DEVICE_MANAGEMENT_ENABLED, // DeviceManagementEnabledType
        /**
         * (devices) Enabled/disabled backup for computer
         */
        DEVICE_SYNC_BACKUP_STATUS_CHANGED, // DeviceSyncBackupStatusChangedType
        /**
         * (devices) Disconnected device
         */
        DEVICE_UNLINK, // DeviceUnlinkType
        /**
         * (devices) Exported passwords
         */
        DROPBOX_PASSWORDS_EXPORTED, // DropboxPasswordsExportedType
        /**
         * (devices) Enrolled new Dropbox Passwords device
         */
        DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED, // DropboxPasswordsNewDeviceEnrolledType
        /**
         * (devices) Refreshed auth token used for setting up EMM
         */
        EMM_REFRESH_AUTH_TOKEN, // EmmRefreshAuthTokenType
        /**
         * (devices) Checked external drive backup eligibility status
         */
        EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED, // ExternalDriveBackupEligibilityStatusCheckedType
        /**
         * (devices) Modified external drive backup
         */
        EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED, // ExternalDriveBackupStatusChangedType
        /**
         * (domains) Granted/revoked option to enable account capture on team
         * domains
         */
        ACCOUNT_CAPTURE_CHANGE_AVAILABILITY, // AccountCaptureChangeAvailabilityType
        /**
         * (domains) Account-captured user migrated account to team
         */
        ACCOUNT_CAPTURE_MIGRATE_ACCOUNT, // AccountCaptureMigrateAccountType
        /**
         * (domains) Sent account capture email to all unmanaged members
         */
        ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT, // AccountCaptureNotificationEmailsSentType
        /**
         * (domains) Account-captured user changed account email to personal
         * email
         */
        ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT, // AccountCaptureRelinquishAccountType
        /**
         * (domains) Disabled domain invites (deprecated, no longer logged)
         */
        DISABLED_DOMAIN_INVITES, // DisabledDomainInvitesType
        /**
         * (domains) Approved user's request to join team
         */
        DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM, // DomainInvitesApproveRequestToJoinTeamType
        /**
         * (domains) Declined user's request to join team
         */
        DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM, // DomainInvitesDeclineRequestToJoinTeamType
        /**
         * (domains) Sent domain invites to existing domain accounts
         * (deprecated, no longer logged)
         */
        DOMAIN_INVITES_EMAIL_EXISTING_USERS, // DomainInvitesEmailExistingUsersType
        /**
         * (domains) Requested to join team
         */
        DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM, // DomainInvitesRequestToJoinTeamType
        /**
         * (domains) Disabled "Automatically invite new users" (deprecated, no
         * longer logged)
         */
        DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO, // DomainInvitesSetInviteNewUserPrefToNoType
        /**
         * (domains) Enabled "Automatically invite new users" (deprecated, no
         * longer logged)
         */
        DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES, // DomainInvitesSetInviteNewUserPrefToYesType
        /**
         * (domains) Failed to verify team domain
         */
        DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL, // DomainVerificationAddDomainFailType
        /**
         * (domains) Verified team domain
         */
        DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS, // DomainVerificationAddDomainSuccessType
        /**
         * (domains) Removed domain from list of verified team domains
         */
        DOMAIN_VERIFICATION_REMOVE_DOMAIN, // DomainVerificationRemoveDomainType
        /**
         * (domains) Enabled domain invites (deprecated, no longer logged)
         */
        ENABLED_DOMAIN_INVITES, // EnabledDomainInvitesType
        /**
         * (file_operations) Applied naming convention
         */
        APPLY_NAMING_CONVENTION, // ApplyNamingConventionType
        /**
         * (file_operations) Created folders (deprecated, no longer logged)
         */
        CREATE_FOLDER, // CreateFolderType
        /**
         * (file_operations) Added files and/or folders
         */
        FILE_ADD, // FileAddType
        /**
         * (file_operations) Copied files and/or folders
         */
        FILE_COPY, // FileCopyType
        /**
         * (file_operations) Deleted files and/or folders
         */
        FILE_DELETE, // FileDeleteType
        /**
         * (file_operations) Downloaded files and/or folders
         */
        FILE_DOWNLOAD, // FileDownloadType
        /**
         * (file_operations) Edited files
         */
        FILE_EDIT, // FileEditType
        /**
         * (file_operations) Created copy reference to file/folder
         */
        FILE_GET_COPY_REFERENCE, // FileGetCopyReferenceType
        /**
         * (file_operations) Locked/unlocked editing for a file
         */
        FILE_LOCKING_LOCK_STATUS_CHANGED, // FileLockingLockStatusChangedType
        /**
         * (file_operations) Moved files and/or folders
         */
        FILE_MOVE, // FileMoveType
        /**
         * (file_operations) Permanently deleted files and/or folders
         */
        FILE_PERMANENTLY_DELETE, // FilePermanentlyDeleteType
        /**
         * (file_operations) Previewed files and/or folders
         */
        FILE_PREVIEW, // FilePreviewType
        /**
         * (file_operations) Renamed files and/or folders
         */
        FILE_RENAME, // FileRenameType
        /**
         * (file_operations) Restored deleted files and/or folders
         */
        FILE_RESTORE, // FileRestoreType
        /**
         * (file_operations) Reverted files to previous version
         */
        FILE_REVERT, // FileRevertType
        /**
         * (file_operations) Rolled back file actions
         */
        FILE_ROLLBACK_CHANGES, // FileRollbackChangesType
        /**
         * (file_operations) Saved file/folder using copy reference
         */
        FILE_SAVE_COPY_REFERENCE, // FileSaveCopyReferenceType
        /**
         * (file_operations) Updated folder overview
         */
        FOLDER_OVERVIEW_DESCRIPTION_CHANGED, // FolderOverviewDescriptionChangedType
        /**
         * (file_operations) Pinned item to folder overview
         */
        FOLDER_OVERVIEW_ITEM_PINNED, // FolderOverviewItemPinnedType
        /**
         * (file_operations) Unpinned item from folder overview
         */
        FOLDER_OVERVIEW_ITEM_UNPINNED, // FolderOverviewItemUnpinnedType
        /**
         * (file_operations) Added a label
         */
        OBJECT_LABEL_ADDED, // ObjectLabelAddedType
        /**
         * (file_operations) Removed a label
         */
        OBJECT_LABEL_REMOVED, // ObjectLabelRemovedType
        /**
         * (file_operations) Updated a label's value
         */
        OBJECT_LABEL_UPDATED_VALUE, // ObjectLabelUpdatedValueType
        /**
         * (file_operations) Organized a folder with multi-file organize
         */
        ORGANIZE_FOLDER_WITH_TIDY, // OrganizeFolderWithTidyType
        /**
         * (file_operations) Rewound a folder
         */
        REWIND_FOLDER, // RewindFolderType
        /**
         * (file_operations) Reverted naming convention
         */
        UNDO_NAMING_CONVENTION, // UndoNamingConventionType
        /**
         * (file_operations) Removed multi-file organize
         */
        UNDO_ORGANIZE_FOLDER_WITH_TIDY, // UndoOrganizeFolderWithTidyType
        /**
         * (file_operations) Tagged a file
         */
        USER_TAGS_ADDED, // UserTagsAddedType
        /**
         * (file_operations) Removed tags
         */
        USER_TAGS_REMOVED, // UserTagsRemovedType
        /**
         * (file_requests) Received files via Email to Dropbox
         */
        EMAIL_INGEST_RECEIVE_FILE, // EmailIngestReceiveFileType
        /**
         * (file_requests) Changed file request
         */
        FILE_REQUEST_CHANGE, // FileRequestChangeType
        /**
         * (file_requests) Closed file request
         */
        FILE_REQUEST_CLOSE, // FileRequestCloseType
        /**
         * (file_requests) Created file request
         */
        FILE_REQUEST_CREATE, // FileRequestCreateType
        /**
         * (file_requests) Delete file request
         */
        FILE_REQUEST_DELETE, // FileRequestDeleteType
        /**
         * (file_requests) Received files for file request
         */
        FILE_REQUEST_RECEIVE_FILE, // FileRequestReceiveFileType
        /**
         * (groups) Added external ID for group
         */
        GROUP_ADD_EXTERNAL_ID, // GroupAddExternalIdType
        /**
         * (groups) Added team members to group
         */
        GROUP_ADD_MEMBER, // GroupAddMemberType
        /**
         * (groups) Changed external ID for group
         */
        GROUP_CHANGE_EXTERNAL_ID, // GroupChangeExternalIdType
        /**
         * (groups) Changed group management type
         */
        GROUP_CHANGE_MANAGEMENT_TYPE, // GroupChangeManagementTypeType
        /**
         * (groups) Changed manager permissions of group member
         */
        GROUP_CHANGE_MEMBER_ROLE, // GroupChangeMemberRoleType
        /**
         * (groups) Created group
         */
        GROUP_CREATE, // GroupCreateType
        /**
         * (groups) Deleted group
         */
        GROUP_DELETE, // GroupDeleteType
        /**
         * (groups) Updated group (deprecated, no longer logged)
         */
        GROUP_DESCRIPTION_UPDATED, // GroupDescriptionUpdatedType
        /**
         * (groups) Updated group join policy (deprecated, no longer logged)
         */
        GROUP_JOIN_POLICY_UPDATED, // GroupJoinPolicyUpdatedType
        /**
         * (groups) Moved group (deprecated, no longer logged)
         */
        GROUP_MOVED, // GroupMovedType
        /**
         * (groups) Removed external ID for group
         */
        GROUP_REMOVE_EXTERNAL_ID, // GroupRemoveExternalIdType
        /**
         * (groups) Removed team members from group
         */
        GROUP_REMOVE_MEMBER, // GroupRemoveMemberType
        /**
         * (groups) Renamed group
         */
        GROUP_RENAME, // GroupRenameType
        /**
         * (logins) Unlocked/locked account after failed sign in attempts
         */
        ACCOUNT_LOCK_OR_UNLOCKED, // AccountLockOrUnlockedType
        /**
         * (logins) Failed to sign in via EMM (deprecated, replaced by 'Failed
         * to sign in')
         */
        EMM_ERROR, // EmmErrorType
        /**
         * (logins) Started trusted team admin session
         */
        GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS, // GuestAdminSignedInViaTrustedTeamsType
        /**
         * (logins) Ended trusted team admin session
         */
        GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS, // GuestAdminSignedOutViaTrustedTeamsType
        /**
         * (logins) Failed to sign in
         */
        LOGIN_FAIL, // LoginFailType
        /**
         * (logins) Signed in
         */
        LOGIN_SUCCESS, // LoginSuccessType
        /**
         * (logins) Signed out
         */
        LOGOUT, // LogoutType
        /**
         * (logins) Ended reseller support session
         */
        RESELLER_SUPPORT_SESSION_END, // ResellerSupportSessionEndType
        /**
         * (logins) Started reseller support session
         */
        RESELLER_SUPPORT_SESSION_START, // ResellerSupportSessionStartType
        /**
         * (logins) Ended admin sign-in-as session
         */
        SIGN_IN_AS_SESSION_END, // SignInAsSessionEndType
        /**
         * (logins) Started admin sign-in-as session
         */
        SIGN_IN_AS_SESSION_START, // SignInAsSessionStartType
        /**
         * (logins) Failed to sign in via SSO (deprecated, replaced by 'Failed
         * to sign in')
         */
        SSO_ERROR, // SsoErrorType
        /**
         * (members) Created team invite link
         */
        CREATE_TEAM_INVITE_LINK, // CreateTeamInviteLinkType
        /**
         * (members) Deleted team invite link
         */
        DELETE_TEAM_INVITE_LINK, // DeleteTeamInviteLinkType
        /**
         * (members) Added an external ID for team member
         */
        MEMBER_ADD_EXTERNAL_ID, // MemberAddExternalIdType
        /**
         * (members) Added team member name
         */
        MEMBER_ADD_NAME, // MemberAddNameType
        /**
         * (members) Changed team member admin role
         */
        MEMBER_CHANGE_ADMIN_ROLE, // MemberChangeAdminRoleType
        /**
         * (members) Changed team member email
         */
        MEMBER_CHANGE_EMAIL, // MemberChangeEmailType
        /**
         * (members) Changed the external ID for team member
         */
        MEMBER_CHANGE_EXTERNAL_ID, // MemberChangeExternalIdType
        /**
         * (members) Changed membership type (limited/full) of member
         * (deprecated, no longer logged)
         */
        MEMBER_CHANGE_MEMBERSHIP_TYPE, // MemberChangeMembershipTypeType
        /**
         * (members) Changed team member name
         */
        MEMBER_CHANGE_NAME, // MemberChangeNameType
        /**
         * (members) Changed team member reseller role
         */
        MEMBER_CHANGE_RESELLER_ROLE, // MemberChangeResellerRoleType
        /**
         * (members) Changed member status (invited, joined, suspended, etc.)
         */
        MEMBER_CHANGE_STATUS, // MemberChangeStatusType
        /**
         * (members) Cleared manually added contacts
         */
        MEMBER_DELETE_MANUAL_CONTACTS, // MemberDeleteManualContactsType
        /**
         * (members) Deleted team member profile photo
         */
        MEMBER_DELETE_PROFILE_PHOTO, // MemberDeleteProfilePhotoType
        /**
         * (members) Permanently deleted contents of deleted team member account
         */
        MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS, // MemberPermanentlyDeleteAccountContentsType
        /**
         * (members) Removed the external ID for team member
         */
        MEMBER_REMOVE_EXTERNAL_ID, // MemberRemoveExternalIdType
        /**
         * (members) Set team member profile photo
         */
        MEMBER_SET_PROFILE_PHOTO, // MemberSetProfilePhotoType
        /**
         * (members) Set custom member space limit
         */
        MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA, // MemberSpaceLimitsAddCustomQuotaType
        /**
         * (members) Changed custom member space limit
         */
        MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA, // MemberSpaceLimitsChangeCustomQuotaType
        /**
         * (members) Changed space limit status
         */
        MEMBER_SPACE_LIMITS_CHANGE_STATUS, // MemberSpaceLimitsChangeStatusType
        /**
         * (members) Removed custom member space limit
         */
        MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA, // MemberSpaceLimitsRemoveCustomQuotaType
        /**
         * (members) Suggested person to add to team
         */
        MEMBER_SUGGEST, // MemberSuggestType
        /**
         * (members) Transferred contents of deleted member account to another
         * member
         */
        MEMBER_TRANSFER_ACCOUNT_CONTENTS, // MemberTransferAccountContentsType
        /**
         * (members) Added pending secondary email
         */
        PENDING_SECONDARY_EMAIL_ADDED, // PendingSecondaryEmailAddedType
        /**
         * (members) Deleted secondary email
         */
        SECONDARY_EMAIL_DELETED, // SecondaryEmailDeletedType
        /**
         * (members) Verified secondary email
         */
        SECONDARY_EMAIL_VERIFIED, // SecondaryEmailVerifiedType
        /**
         * (members) Secondary mails policy changed
         */
        SECONDARY_MAILS_POLICY_CHANGED, // SecondaryMailsPolicyChangedType
        /**
         * (paper) Added Binder page (deprecated, replaced by 'Edited files')
         */
        BINDER_ADD_PAGE, // BinderAddPageType
        /**
         * (paper) Added Binder section (deprecated, replaced by 'Edited files')
         */
        BINDER_ADD_SECTION, // BinderAddSectionType
        /**
         * (paper) Removed Binder page (deprecated, replaced by 'Edited files')
         */
        BINDER_REMOVE_PAGE, // BinderRemovePageType
        /**
         * (paper) Removed Binder section (deprecated, replaced by 'Edited
         * files')
         */
        BINDER_REMOVE_SECTION, // BinderRemoveSectionType
        /**
         * (paper) Renamed Binder page (deprecated, replaced by 'Edited files')
         */
        BINDER_RENAME_PAGE, // BinderRenamePageType
        /**
         * (paper) Renamed Binder section (deprecated, replaced by 'Edited
         * files')
         */
        BINDER_RENAME_SECTION, // BinderRenameSectionType
        /**
         * (paper) Reordered Binder page (deprecated, replaced by 'Edited
         * files')
         */
        BINDER_REORDER_PAGE, // BinderReorderPageType
        /**
         * (paper) Reordered Binder section (deprecated, replaced by 'Edited
         * files')
         */
        BINDER_REORDER_SECTION, // BinderReorderSectionType
        /**
         * (paper) Added users and/or groups to Paper doc/folder
         */
        PAPER_CONTENT_ADD_MEMBER, // PaperContentAddMemberType
        /**
         * (paper) Added Paper doc/folder to folder
         */
        PAPER_CONTENT_ADD_TO_FOLDER, // PaperContentAddToFolderType
        /**
         * (paper) Archived Paper doc/folder
         */
        PAPER_CONTENT_ARCHIVE, // PaperContentArchiveType
        /**
         * (paper) Created Paper doc/folder
         */
        PAPER_CONTENT_CREATE, // PaperContentCreateType
        /**
         * (paper) Permanently deleted Paper doc/folder
         */
        PAPER_CONTENT_PERMANENTLY_DELETE, // PaperContentPermanentlyDeleteType
        /**
         * (paper) Removed Paper doc/folder from folder
         */
        PAPER_CONTENT_REMOVE_FROM_FOLDER, // PaperContentRemoveFromFolderType
        /**
         * (paper) Removed users and/or groups from Paper doc/folder
         */
        PAPER_CONTENT_REMOVE_MEMBER, // PaperContentRemoveMemberType
        /**
         * (paper) Renamed Paper doc/folder
         */
        PAPER_CONTENT_RENAME, // PaperContentRenameType
        /**
         * (paper) Restored archived Paper doc/folder
         */
        PAPER_CONTENT_RESTORE, // PaperContentRestoreType
        /**
         * (paper) Added Paper doc comment
         */
        PAPER_DOC_ADD_COMMENT, // PaperDocAddCommentType
        /**
         * (paper) Changed member permissions for Paper doc
         */
        PAPER_DOC_CHANGE_MEMBER_ROLE, // PaperDocChangeMemberRoleType
        /**
         * (paper) Changed sharing setting for Paper doc
         */
        PAPER_DOC_CHANGE_SHARING_POLICY, // PaperDocChangeSharingPolicyType
        /**
         * (paper) Followed/unfollowed Paper doc
         */
        PAPER_DOC_CHANGE_SUBSCRIPTION, // PaperDocChangeSubscriptionType
        /**
         * (paper) Archived Paper doc (deprecated, no longer logged)
         */
        PAPER_DOC_DELETED, // PaperDocDeletedType
        /**
         * (paper) Deleted Paper doc comment
         */
        PAPER_DOC_DELETE_COMMENT, // PaperDocDeleteCommentType
        /**
         * (paper) Downloaded Paper doc in specific format
         */
        PAPER_DOC_DOWNLOAD, // PaperDocDownloadType
        /**
         * (paper) Edited Paper doc
         */
        PAPER_DOC_EDIT, // PaperDocEditType
        /**
         * (paper) Edited Paper doc comment
         */
        PAPER_DOC_EDIT_COMMENT, // PaperDocEditCommentType
        /**
         * (paper) Followed Paper doc (deprecated, replaced by
         * 'Followed/unfollowed Paper doc')
         */
        PAPER_DOC_FOLLOWED, // PaperDocFollowedType
        /**
         * (paper) Mentioned user in Paper doc
         */
        PAPER_DOC_MENTION, // PaperDocMentionType
        /**
         * (paper) Transferred ownership of Paper doc
         */
        PAPER_DOC_OWNERSHIP_CHANGED, // PaperDocOwnershipChangedType
        /**
         * (paper) Requested access to Paper doc
         */
        PAPER_DOC_REQUEST_ACCESS, // PaperDocRequestAccessType
        /**
         * (paper) Resolved Paper doc comment
         */
        PAPER_DOC_RESOLVE_COMMENT, // PaperDocResolveCommentType
        /**
         * (paper) Restored Paper doc to previous version
         */
        PAPER_DOC_REVERT, // PaperDocRevertType
        /**
         * (paper) Shared Paper doc via Slack
         */
        PAPER_DOC_SLACK_SHARE, // PaperDocSlackShareType
        /**
         * (paper) Shared Paper doc with users and/or groups (deprecated, no
         * longer logged)
         */
        PAPER_DOC_TEAM_INVITE, // PaperDocTeamInviteType
        /**
         * (paper) Deleted Paper doc
         */
        PAPER_DOC_TRASHED, // PaperDocTrashedType
        /**
         * (paper) Unresolved Paper doc comment
         */
        PAPER_DOC_UNRESOLVE_COMMENT, // PaperDocUnresolveCommentType
        /**
         * (paper) Restored Paper doc
         */
        PAPER_DOC_UNTRASHED, // PaperDocUntrashedType
        /**
         * (paper) Viewed Paper doc
         */
        PAPER_DOC_VIEW, // PaperDocViewType
        /**
         * (paper) Changed Paper external sharing setting to anyone (deprecated,
         * no longer logged)
         */
        PAPER_EXTERNAL_VIEW_ALLOW, // PaperExternalViewAllowType
        /**
         * (paper) Changed Paper external sharing setting to default team
         * (deprecated, no longer logged)
         */
        PAPER_EXTERNAL_VIEW_DEFAULT_TEAM, // PaperExternalViewDefaultTeamType
        /**
         * (paper) Changed Paper external sharing setting to team-only
         * (deprecated, no longer logged)
         */
        PAPER_EXTERNAL_VIEW_FORBID, // PaperExternalViewForbidType
        /**
         * (paper) Followed/unfollowed Paper folder
         */
        PAPER_FOLDER_CHANGE_SUBSCRIPTION, // PaperFolderChangeSubscriptionType
        /**
         * (paper) Archived Paper folder (deprecated, no longer logged)
         */
        PAPER_FOLDER_DELETED, // PaperFolderDeletedType
        /**
         * (paper) Followed Paper folder (deprecated, replaced by
         * 'Followed/unfollowed Paper folder')
         */
        PAPER_FOLDER_FOLLOWED, // PaperFolderFollowedType
        /**
         * (paper) Shared Paper folder with users and/or groups (deprecated, no
         * longer logged)
         */
        PAPER_FOLDER_TEAM_INVITE, // PaperFolderTeamInviteType
        /**
         * (paper) Changed permissions for published doc
         */
        PAPER_PUBLISHED_LINK_CHANGE_PERMISSION, // PaperPublishedLinkChangePermissionType
        /**
         * (paper) Published doc
         */
        PAPER_PUBLISHED_LINK_CREATE, // PaperPublishedLinkCreateType
        /**
         * (paper) Unpublished doc
         */
        PAPER_PUBLISHED_LINK_DISABLED, // PaperPublishedLinkDisabledType
        /**
         * (paper) Viewed published doc
         */
        PAPER_PUBLISHED_LINK_VIEW, // PaperPublishedLinkViewType
        /**
         * (passwords) Changed password
         */
        PASSWORD_CHANGE, // PasswordChangeType
        /**
         * (passwords) Reset password
         */
        PASSWORD_RESET, // PasswordResetType
        /**
         * (passwords) Reset all team member passwords
         */
        PASSWORD_RESET_ALL, // PasswordResetAllType
        /**
         * (reports) Created Classification report
         */
        CLASSIFICATION_CREATE_REPORT, // ClassificationCreateReportType
        /**
         * (reports) Couldn't create Classification report
         */
        CLASSIFICATION_CREATE_REPORT_FAIL, // ClassificationCreateReportFailType
        /**
         * (reports) Created EMM-excluded users report
         */
        EMM_CREATE_EXCEPTIONS_REPORT, // EmmCreateExceptionsReportType
        /**
         * (reports) Created EMM mobile app usage report
         */
        EMM_CREATE_USAGE_REPORT, // EmmCreateUsageReportType
        /**
         * (reports) Created member data report
         */
        EXPORT_MEMBERS_REPORT, // ExportMembersReportType
        /**
         * (reports) Failed to create members data report
         */
        EXPORT_MEMBERS_REPORT_FAIL, // ExportMembersReportFailType
        /**
         * (reports) Created External sharing report
         */
        EXTERNAL_SHARING_CREATE_REPORT, // ExternalSharingCreateReportType
        /**
         * (reports) Couldn't create External sharing report
         */
        EXTERNAL_SHARING_REPORT_FAILED, // ExternalSharingReportFailedType
        /**
         * (reports) Report created: Links created with no expiration
         */
        NO_EXPIRATION_LINK_GEN_CREATE_REPORT, // NoExpirationLinkGenCreateReportType
        /**
         * (reports) Couldn't create report: Links created with no expiration
         */
        NO_EXPIRATION_LINK_GEN_REPORT_FAILED, // NoExpirationLinkGenReportFailedType
        /**
         * (reports) Report created: Links created without passwords
         */
        NO_PASSWORD_LINK_GEN_CREATE_REPORT, // NoPasswordLinkGenCreateReportType
        /**
         * (reports) Couldn't create report: Links created without passwords
         */
        NO_PASSWORD_LINK_GEN_REPORT_FAILED, // NoPasswordLinkGenReportFailedType
        /**
         * (reports) Report created: Views of links without passwords
         */
        NO_PASSWORD_LINK_VIEW_CREATE_REPORT, // NoPasswordLinkViewCreateReportType
        /**
         * (reports) Couldn't create report: Views of links without passwords
         */
        NO_PASSWORD_LINK_VIEW_REPORT_FAILED, // NoPasswordLinkViewReportFailedType
        /**
         * (reports) Report created: Views of old links
         */
        OUTDATED_LINK_VIEW_CREATE_REPORT, // OutdatedLinkViewCreateReportType
        /**
         * (reports) Couldn't create report: Views of old links
         */
        OUTDATED_LINK_VIEW_REPORT_FAILED, // OutdatedLinkViewReportFailedType
        /**
         * (reports) Exported all team Paper docs
         */
        PAPER_ADMIN_EXPORT_START, // PaperAdminExportStartType
        /**
         * (reports) Created Smart Sync non-admin devices report
         */
        SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT, // SmartSyncCreateAdminPrivilegeReportType
        /**
         * (reports) Created team activity report
         */
        TEAM_ACTIVITY_CREATE_REPORT, // TeamActivityCreateReportType
        /**
         * (reports) Couldn't generate team activity report
         */
        TEAM_ACTIVITY_CREATE_REPORT_FAIL, // TeamActivityCreateReportFailType
        /**
         * (sharing) Shared album
         */
        COLLECTION_SHARE, // CollectionShareType
        /**
         * (sharing) Transfer files added
         */
        FILE_TRANSFERS_FILE_ADD, // FileTransfersFileAddType
        /**
         * (sharing) Deleted transfer
         */
        FILE_TRANSFERS_TRANSFER_DELETE, // FileTransfersTransferDeleteType
        /**
         * (sharing) Transfer downloaded
         */
        FILE_TRANSFERS_TRANSFER_DOWNLOAD, // FileTransfersTransferDownloadType
        /**
         * (sharing) Sent transfer
         */
        FILE_TRANSFERS_TRANSFER_SEND, // FileTransfersTransferSendType
        /**
         * (sharing) Viewed transfer
         */
        FILE_TRANSFERS_TRANSFER_VIEW, // FileTransfersTransferViewType
        /**
         * (sharing) Changed Paper doc to invite-only (deprecated, no longer
         * logged)
         */
        NOTE_ACL_INVITE_ONLY, // NoteAclInviteOnlyType
        /**
         * (sharing) Changed Paper doc to link-accessible (deprecated, no longer
         * logged)
         */
        NOTE_ACL_LINK, // NoteAclLinkType
        /**
         * (sharing) Changed Paper doc to link-accessible for team (deprecated,
         * no longer logged)
         */
        NOTE_ACL_TEAM_LINK, // NoteAclTeamLinkType
        /**
         * (sharing) Shared Paper doc (deprecated, no longer logged)
         */
        NOTE_SHARED, // NoteSharedType
        /**
         * (sharing) Shared received Paper doc (deprecated, no longer logged)
         */
        NOTE_SHARE_RECEIVE, // NoteShareReceiveType
        /**
         * (sharing) Opened shared Paper doc (deprecated, no longer logged)
         */
        OPEN_NOTE_SHARED, // OpenNoteSharedType
        /**
         * (sharing) Added team to shared folder (deprecated, no longer logged)
         */
        SF_ADD_GROUP, // SfAddGroupType
        /**
         * (sharing) Allowed non-collaborators to view links to files in shared
         * folder (deprecated, no longer logged)
         */
        SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS, // SfAllowNonMembersToViewSharedLinksType
        /**
         * (sharing) Set team members to see warning before sharing folders
         * outside team (deprecated, no longer logged)
         */
        SF_EXTERNAL_INVITE_WARN, // SfExternalInviteWarnType
        /**
         * (sharing) Invited Facebook users to shared folder (deprecated, no
         * longer logged)
         */
        SF_FB_INVITE, // SfFbInviteType
        /**
         * (sharing) Changed Facebook user's role in shared folder (deprecated,
         * no longer logged)
         */
        SF_FB_INVITE_CHANGE_ROLE, // SfFbInviteChangeRoleType
        /**
         * (sharing) Uninvited Facebook user from shared folder (deprecated, no
         * longer logged)
         */
        SF_FB_UNINVITE, // SfFbUninviteType
        /**
         * (sharing) Invited group to shared folder (deprecated, no longer
         * logged)
         */
        SF_INVITE_GROUP, // SfInviteGroupType
        /**
         * (sharing) Granted access to shared folder (deprecated, no longer
         * logged)
         */
        SF_TEAM_GRANT_ACCESS, // SfTeamGrantAccessType
        /**
         * (sharing) Invited team members to shared folder (deprecated, replaced
         * by 'Invited user to Dropbox and added them to shared file/folder')
         */
        SF_TEAM_INVITE, // SfTeamInviteType
        /**
         * (sharing) Changed team member's role in shared folder (deprecated, no
         * longer logged)
         */
        SF_TEAM_INVITE_CHANGE_ROLE, // SfTeamInviteChangeRoleType
        /**
         * (sharing) Joined team member's shared folder (deprecated, no longer
         * logged)
         */
        SF_TEAM_JOIN, // SfTeamJoinType
        /**
         * (sharing) Joined team member's shared folder from link (deprecated,
         * no longer logged)
         */
        SF_TEAM_JOIN_FROM_OOB_LINK, // SfTeamJoinFromOobLinkType
        /**
         * (sharing) Unshared folder with team member (deprecated, replaced by
         * 'Removed invitee from shared file/folder before invite was accepted')
         */
        SF_TEAM_UNINVITE, // SfTeamUninviteType
        /**
         * (sharing) Invited user to Dropbox and added them to shared
         * file/folder
         */
        SHARED_CONTENT_ADD_INVITEES, // SharedContentAddInviteesType
        /**
         * (sharing) Added expiration date to link for shared file/folder
         * (deprecated, no longer logged)
         */
        SHARED_CONTENT_ADD_LINK_EXPIRY, // SharedContentAddLinkExpiryType
        /**
         * (sharing) Added password to link for shared file/folder (deprecated,
         * no longer logged)
         */
        SHARED_CONTENT_ADD_LINK_PASSWORD, // SharedContentAddLinkPasswordType
        /**
         * (sharing) Added users and/or groups to shared file/folder
         */
        SHARED_CONTENT_ADD_MEMBER, // SharedContentAddMemberType
        /**
         * (sharing) Changed whether members can download shared file/folder
         * (deprecated, no longer logged)
         */
        SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY, // SharedContentChangeDownloadsPolicyType
        /**
         * (sharing) Changed access type of invitee to shared file/folder before
         * invite was accepted
         */
        SHARED_CONTENT_CHANGE_INVITEE_ROLE, // SharedContentChangeInviteeRoleType
        /**
         * (sharing) Changed link audience of shared file/folder (deprecated, no
         * longer logged)
         */
        SHARED_CONTENT_CHANGE_LINK_AUDIENCE, // SharedContentChangeLinkAudienceType
        /**
         * (sharing) Changed link expiration of shared file/folder (deprecated,
         * no longer logged)
         */
        SHARED_CONTENT_CHANGE_LINK_EXPIRY, // SharedContentChangeLinkExpiryType
        /**
         * (sharing) Changed link password of shared file/folder (deprecated, no
         * longer logged)
         */
        SHARED_CONTENT_CHANGE_LINK_PASSWORD, // SharedContentChangeLinkPasswordType
        /**
         * (sharing) Changed access type of shared file/folder member
         */
        SHARED_CONTENT_CHANGE_MEMBER_ROLE, // SharedContentChangeMemberRoleType
        /**
         * (sharing) Changed whether members can see who viewed shared
         * file/folder
         */
        SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY, // SharedContentChangeViewerInfoPolicyType
        /**
         * (sharing) Acquired membership of shared file/folder by accepting
         * invite
         */
        SHARED_CONTENT_CLAIM_INVITATION, // SharedContentClaimInvitationType
        /**
         * (sharing) Copied shared file/folder to own Dropbox
         */
        SHARED_CONTENT_COPY, // SharedContentCopyType
        /**
         * (sharing) Downloaded shared file/folder
         */
        SHARED_CONTENT_DOWNLOAD, // SharedContentDownloadType
        /**
         * (sharing) Left shared file/folder
         */
        SHARED_CONTENT_RELINQUISH_MEMBERSHIP, // SharedContentRelinquishMembershipType
        /**
         * (sharing) Removed invitee from shared file/folder before invite was
         * accepted
         */
        SHARED_CONTENT_REMOVE_INVITEES, // SharedContentRemoveInviteesType
        /**
         * (sharing) Removed link expiration date of shared file/folder
         * (deprecated, no longer logged)
         */
        SHARED_CONTENT_REMOVE_LINK_EXPIRY, // SharedContentRemoveLinkExpiryType
        /**
         * (sharing) Removed link password of shared file/folder (deprecated, no
         * longer logged)
         */
        SHARED_CONTENT_REMOVE_LINK_PASSWORD, // SharedContentRemoveLinkPasswordType
        /**
         * (sharing) Removed user/group from shared file/folder
         */
        SHARED_CONTENT_REMOVE_MEMBER, // SharedContentRemoveMemberType
        /**
         * (sharing) Requested access to shared file/folder
         */
        SHARED_CONTENT_REQUEST_ACCESS, // SharedContentRequestAccessType
        /**
         * (sharing) Restored shared file/folder invitees
         */
        SHARED_CONTENT_RESTORE_INVITEES, // SharedContentRestoreInviteesType
        /**
         * (sharing) Restored users and/or groups to membership of shared
         * file/folder
         */
        SHARED_CONTENT_RESTORE_MEMBER, // SharedContentRestoreMemberType
        /**
         * (sharing) Unshared file/folder by clearing membership
         */
        SHARED_CONTENT_UNSHARE, // SharedContentUnshareType
        /**
         * (sharing) Previewed shared file/folder
         */
        SHARED_CONTENT_VIEW, // SharedContentViewType
        /**
         * (sharing) Changed who can access shared folder via link
         */
        SHARED_FOLDER_CHANGE_LINK_POLICY, // SharedFolderChangeLinkPolicyType
        /**
         * (sharing) Changed whether shared folder inherits members from parent
         * folder
         */
        SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY, // SharedFolderChangeMembersInheritancePolicyType
        /**
         * (sharing) Changed who can add/remove members of shared folder
         */
        SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY, // SharedFolderChangeMembersManagementPolicyType
        /**
         * (sharing) Changed who can become member of shared folder
         */
        SHARED_FOLDER_CHANGE_MEMBERS_POLICY, // SharedFolderChangeMembersPolicyType
        /**
         * (sharing) Created shared folder
         */
        SHARED_FOLDER_CREATE, // SharedFolderCreateType
        /**
         * (sharing) Declined team member's invite to shared folder
         */
        SHARED_FOLDER_DECLINE_INVITATION, // SharedFolderDeclineInvitationType
        /**
         * (sharing) Added shared folder to own Dropbox
         */
        SHARED_FOLDER_MOUNT, // SharedFolderMountType
        /**
         * (sharing) Changed parent of shared folder
         */
        SHARED_FOLDER_NEST, // SharedFolderNestType
        /**
         * (sharing) Transferred ownership of shared folder to another member
         */
        SHARED_FOLDER_TRANSFER_OWNERSHIP, // SharedFolderTransferOwnershipType
        /**
         * (sharing) Deleted shared folder from Dropbox
         */
        SHARED_FOLDER_UNMOUNT, // SharedFolderUnmountType
        /**
         * (sharing) Added shared link expiration date
         */
        SHARED_LINK_ADD_EXPIRY, // SharedLinkAddExpiryType
        /**
         * (sharing) Changed shared link expiration date
         */
        SHARED_LINK_CHANGE_EXPIRY, // SharedLinkChangeExpiryType
        /**
         * (sharing) Changed visibility of shared link
         */
        SHARED_LINK_CHANGE_VISIBILITY, // SharedLinkChangeVisibilityType
        /**
         * (sharing) Added file/folder to Dropbox from shared link
         */
        SHARED_LINK_COPY, // SharedLinkCopyType
        /**
         * (sharing) Created shared link
         */
        SHARED_LINK_CREATE, // SharedLinkCreateType
        /**
         * (sharing) Removed shared link
         */
        SHARED_LINK_DISABLE, // SharedLinkDisableType
        /**
         * (sharing) Downloaded file/folder from shared link
         */
        SHARED_LINK_DOWNLOAD, // SharedLinkDownloadType
        /**
         * (sharing) Removed shared link expiration date
         */
        SHARED_LINK_REMOVE_EXPIRY, // SharedLinkRemoveExpiryType
        /**
         * (sharing) Added an expiration date to the shared link
         */
        SHARED_LINK_SETTINGS_ADD_EXPIRATION, // SharedLinkSettingsAddExpirationType
        /**
         * (sharing) Added a password to the shared link
         */
        SHARED_LINK_SETTINGS_ADD_PASSWORD, // SharedLinkSettingsAddPasswordType
        /**
         * (sharing) Disabled downloads
         */
        SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED, // SharedLinkSettingsAllowDownloadDisabledType
        /**
         * (sharing) Enabled downloads
         */
        SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED, // SharedLinkSettingsAllowDownloadEnabledType
        /**
         * (sharing) Changed the audience of the shared link
         */
        SHARED_LINK_SETTINGS_CHANGE_AUDIENCE, // SharedLinkSettingsChangeAudienceType
        /**
         * (sharing) Changed the expiration date of the shared link
         */
        SHARED_LINK_SETTINGS_CHANGE_EXPIRATION, // SharedLinkSettingsChangeExpirationType
        /**
         * (sharing) Changed the password of the shared link
         */
        SHARED_LINK_SETTINGS_CHANGE_PASSWORD, // SharedLinkSettingsChangePasswordType
        /**
         * (sharing) Removed the expiration date from the shared link
         */
        SHARED_LINK_SETTINGS_REMOVE_EXPIRATION, // SharedLinkSettingsRemoveExpirationType
        /**
         * (sharing) Removed the password from the shared link
         */
        SHARED_LINK_SETTINGS_REMOVE_PASSWORD, // SharedLinkSettingsRemovePasswordType
        /**
         * (sharing) Added members as audience of shared link
         */
        SHARED_LINK_SHARE, // SharedLinkShareType
        /**
         * (sharing) Opened shared link
         */
        SHARED_LINK_VIEW, // SharedLinkViewType
        /**
         * (sharing) Opened shared Paper doc (deprecated, no longer logged)
         */
        SHARED_NOTE_OPENED, // SharedNoteOpenedType
        /**
         * (sharing) Disabled downloads for link (deprecated, no longer logged)
         */
        SHMODEL_DISABLE_DOWNLOADS, // ShmodelDisableDownloadsType
        /**
         * (sharing) Enabled downloads for link (deprecated, no longer logged)
         */
        SHMODEL_ENABLE_DOWNLOADS, // ShmodelEnableDownloadsType
        /**
         * (sharing) Shared link with group (deprecated, no longer logged)
         */
        SHMODEL_GROUP_SHARE, // ShmodelGroupShareType
        /**
         * (showcase) Granted access to showcase
         */
        SHOWCASE_ACCESS_GRANTED, // ShowcaseAccessGrantedType
        /**
         * (showcase) Added member to showcase
         */
        SHOWCASE_ADD_MEMBER, // ShowcaseAddMemberType
        /**
         * (showcase) Archived showcase
         */
        SHOWCASE_ARCHIVED, // ShowcaseArchivedType
        /**
         * (showcase) Created showcase
         */
        SHOWCASE_CREATED, // ShowcaseCreatedType
        /**
         * (showcase) Deleted showcase comment
         */
        SHOWCASE_DELETE_COMMENT, // ShowcaseDeleteCommentType
        /**
         * (showcase) Edited showcase
         */
        SHOWCASE_EDITED, // ShowcaseEditedType
        /**
         * (showcase) Edited showcase comment
         */
        SHOWCASE_EDIT_COMMENT, // ShowcaseEditCommentType
        /**
         * (showcase) Added file to showcase
         */
        SHOWCASE_FILE_ADDED, // ShowcaseFileAddedType
        /**
         * (showcase) Downloaded file from showcase
         */
        SHOWCASE_FILE_DOWNLOAD, // ShowcaseFileDownloadType
        /**
         * (showcase) Removed file from showcase
         */
        SHOWCASE_FILE_REMOVED, // ShowcaseFileRemovedType
        /**
         * (showcase) Viewed file in showcase
         */
        SHOWCASE_FILE_VIEW, // ShowcaseFileViewType
        /**
         * (showcase) Permanently deleted showcase
         */
        SHOWCASE_PERMANENTLY_DELETED, // ShowcasePermanentlyDeletedType
        /**
         * (showcase) Added showcase comment
         */
        SHOWCASE_POST_COMMENT, // ShowcasePostCommentType
        /**
         * (showcase) Removed member from showcase
         */
        SHOWCASE_REMOVE_MEMBER, // ShowcaseRemoveMemberType
        /**
         * (showcase) Renamed showcase
         */
        SHOWCASE_RENAMED, // ShowcaseRenamedType
        /**
         * (showcase) Requested access to showcase
         */
        SHOWCASE_REQUEST_ACCESS, // ShowcaseRequestAccessType
        /**
         * (showcase) Resolved showcase comment
         */
        SHOWCASE_RESOLVE_COMMENT, // ShowcaseResolveCommentType
        /**
         * (showcase) Unarchived showcase
         */
        SHOWCASE_RESTORED, // ShowcaseRestoredType
        /**
         * (showcase) Deleted showcase
         */
        SHOWCASE_TRASHED, // ShowcaseTrashedType
        /**
         * (showcase) Deleted showcase (old version) (deprecated, replaced by
         * 'Deleted showcase')
         */
        SHOWCASE_TRASHED_DEPRECATED, // ShowcaseTrashedDeprecatedType
        /**
         * (showcase) Unresolved showcase comment
         */
        SHOWCASE_UNRESOLVE_COMMENT, // ShowcaseUnresolveCommentType
        /**
         * (showcase) Restored showcase
         */
        SHOWCASE_UNTRASHED, // ShowcaseUntrashedType
        /**
         * (showcase) Restored showcase (old version) (deprecated, replaced by
         * 'Restored showcase')
         */
        SHOWCASE_UNTRASHED_DEPRECATED, // ShowcaseUntrashedDeprecatedType
        /**
         * (showcase) Viewed showcase
         */
        SHOWCASE_VIEW, // ShowcaseViewType
        /**
         * (sso) Added X.509 certificate for SSO
         */
        SSO_ADD_CERT, // SsoAddCertType
        /**
         * (sso) Added sign-in URL for SSO
         */
        SSO_ADD_LOGIN_URL, // SsoAddLoginUrlType
        /**
         * (sso) Added sign-out URL for SSO
         */
        SSO_ADD_LOGOUT_URL, // SsoAddLogoutUrlType
        /**
         * (sso) Changed X.509 certificate for SSO
         */
        SSO_CHANGE_CERT, // SsoChangeCertType
        /**
         * (sso) Changed sign-in URL for SSO
         */
        SSO_CHANGE_LOGIN_URL, // SsoChangeLoginUrlType
        /**
         * (sso) Changed sign-out URL for SSO
         */
        SSO_CHANGE_LOGOUT_URL, // SsoChangeLogoutUrlType
        /**
         * (sso) Changed SAML identity mode for SSO
         */
        SSO_CHANGE_SAML_IDENTITY_MODE, // SsoChangeSamlIdentityModeType
        /**
         * (sso) Removed X.509 certificate for SSO
         */
        SSO_REMOVE_CERT, // SsoRemoveCertType
        /**
         * (sso) Removed sign-in URL for SSO
         */
        SSO_REMOVE_LOGIN_URL, // SsoRemoveLoginUrlType
        /**
         * (sso) Removed sign-out URL for SSO
         */
        SSO_REMOVE_LOGOUT_URL, // SsoRemoveLogoutUrlType
        /**
         * (team_folders) Changed archival status of team folder
         */
        TEAM_FOLDER_CHANGE_STATUS, // TeamFolderChangeStatusType
        /**
         * (team_folders) Created team folder in active status
         */
        TEAM_FOLDER_CREATE, // TeamFolderCreateType
        /**
         * (team_folders) Downgraded team folder to regular shared folder
         */
        TEAM_FOLDER_DOWNGRADE, // TeamFolderDowngradeType
        /**
         * (team_folders) Permanently deleted archived team folder
         */
        TEAM_FOLDER_PERMANENTLY_DELETE, // TeamFolderPermanentlyDeleteType
        /**
         * (team_folders) Renamed active/archived team folder
         */
        TEAM_FOLDER_RENAME, // TeamFolderRenameType
        /**
         * (team_folders) Changed sync default
         */
        TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED, // TeamSelectiveSyncSettingsChangedType
        /**
         * (team_policies) Changed account capture setting on team domain
         */
        ACCOUNT_CAPTURE_CHANGE_POLICY, // AccountCaptureChangePolicyType
        /**
         * (team_policies) Changed admin reminder settings for requests to join
         * the team
         */
        ADMIN_EMAIL_REMINDERS_CHANGED, // AdminEmailRemindersChangedType
        /**
         * (team_policies) Disabled downloads (deprecated, no longer logged)
         */
        ALLOW_DOWNLOAD_DISABLED, // AllowDownloadDisabledType
        /**
         * (team_policies) Enabled downloads (deprecated, no longer logged)
         */
        ALLOW_DOWNLOAD_ENABLED, // AllowDownloadEnabledType
        /**
         * (team_policies) Changed app permissions
         */
        APP_PERMISSIONS_CHANGED, // AppPermissionsChangedType
        /**
         * (team_policies) Changed camera uploads setting for team
         */
        CAMERA_UPLOADS_POLICY_CHANGED, // CameraUploadsPolicyChangedType
        /**
         * (team_policies) Changed Capture transcription policy for team
         */
        CAPTURE_TRANSCRIPT_POLICY_CHANGED, // CaptureTranscriptPolicyChangedType
        /**
         * (team_policies) Changed classification policy for team
         */
        CLASSIFICATION_CHANGE_POLICY, // ClassificationChangePolicyType
        /**
         * (team_policies) Changed computer backup policy for team
         */
        COMPUTER_BACKUP_POLICY_CHANGED, // ComputerBackupPolicyChangedType
        /**
         * (team_policies) Changed content management setting
         */
        CONTENT_ADMINISTRATION_POLICY_CHANGED, // ContentAdministrationPolicyChangedType
        /**
         * (team_policies) Set restrictions on data center locations where team
         * data resides
         */
        DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY, // DataPlacementRestrictionChangePolicyType
        /**
         * (team_policies) Completed restrictions on data center locations where
         * team data resides
         */
        DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY, // DataPlacementRestrictionSatisfyPolicyType
        /**
         * (team_policies) Added members to device approvals exception list
         */
        DEVICE_APPROVALS_ADD_EXCEPTION, // DeviceApprovalsAddExceptionType
        /**
         * (team_policies) Set/removed limit on number of computers member can
         * link to team Dropbox account
         */
        DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY, // DeviceApprovalsChangeDesktopPolicyType
        /**
         * (team_policies) Set/removed limit on number of mobile devices member
         * can link to team Dropbox account
         */
        DEVICE_APPROVALS_CHANGE_MOBILE_POLICY, // DeviceApprovalsChangeMobilePolicyType
        /**
         * (team_policies) Changed device approvals setting when member is over
         * limit
         */
        DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION, // DeviceApprovalsChangeOverageActionType
        /**
         * (team_policies) Changed device approvals setting when member unlinks
         * approved device
         */
        DEVICE_APPROVALS_CHANGE_UNLINK_ACTION, // DeviceApprovalsChangeUnlinkActionType
        /**
         * (team_policies) Removed members from device approvals exception list
         */
        DEVICE_APPROVALS_REMOVE_EXCEPTION, // DeviceApprovalsRemoveExceptionType
        /**
         * (team_policies) Added members to directory restrictions list
         */
        DIRECTORY_RESTRICTIONS_ADD_MEMBERS, // DirectoryRestrictionsAddMembersType
        /**
         * (team_policies) Removed members from directory restrictions list
         */
        DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS, // DirectoryRestrictionsRemoveMembersType
        /**
         * (team_policies) Changed Dropbox Passwords policy for team
         */
        DROPBOX_PASSWORDS_POLICY_CHANGED, // DropboxPasswordsPolicyChangedType
        /**
         * (team_policies) Changed email to Dropbox policy for team
         */
        EMAIL_INGEST_POLICY_CHANGED, // EmailIngestPolicyChangedType
        /**
         * (team_policies) Added members to EMM exception list
         */
        EMM_ADD_EXCEPTION, // EmmAddExceptionType
        /**
         * (team_policies) Enabled/disabled enterprise mobility management for
         * members
         */
        EMM_CHANGE_POLICY, // EmmChangePolicyType
        /**
         * (team_policies) Removed members from EMM exception list
         */
        EMM_REMOVE_EXCEPTION, // EmmRemoveExceptionType
        /**
         * (team_policies) Accepted/opted out of extended version history
         */
        EXTENDED_VERSION_HISTORY_CHANGE_POLICY, // ExtendedVersionHistoryChangePolicyType
        /**
         * (team_policies) Changed external drive backup policy for team
         */
        EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED, // ExternalDriveBackupPolicyChangedType
        /**
         * (team_policies) Enabled/disabled commenting on team files
         */
        FILE_COMMENTS_CHANGE_POLICY, // FileCommentsChangePolicyType
        /**
         * (team_policies) Changed file locking policy for team
         */
        FILE_LOCKING_POLICY_CHANGED, // FileLockingPolicyChangedType
        /**
         * (team_policies) Changed File Provider Migration policy for team
         */
        FILE_PROVIDER_MIGRATION_POLICY_CHANGED, // FileProviderMigrationPolicyChangedType
        /**
         * (team_policies) Enabled/disabled file requests
         */
        FILE_REQUESTS_CHANGE_POLICY, // FileRequestsChangePolicyType
        /**
         * (team_policies) Enabled file request emails for everyone (deprecated,
         * no longer logged)
         */
        FILE_REQUESTS_EMAILS_ENABLED, // FileRequestsEmailsEnabledType
        /**
         * (team_policies) Enabled file request emails for team (deprecated, no
         * longer logged)
         */
        FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY, // FileRequestsEmailsRestrictedToTeamOnlyType
        /**
         * (team_policies) Changed file transfers policy for team
         */
        FILE_TRANSFERS_POLICY_CHANGED, // FileTransfersPolicyChangedType
        /**
         * (team_policies) Enabled/disabled Google single sign-on for team
         */
        GOOGLE_SSO_CHANGE_POLICY, // GoogleSsoChangePolicyType
        /**
         * (team_policies) Changed who can create groups
         */
        GROUP_USER_MANAGEMENT_CHANGE_POLICY, // GroupUserManagementChangePolicyType
        /**
         * (team_policies) Changed integration policy for team
         */
        INTEGRATION_POLICY_CHANGED, // IntegrationPolicyChangedType
        /**
         * (team_policies) Changed invite accept email policy for team
         */
        INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED, // InviteAcceptanceEmailPolicyChangedType
        /**
         * (team_policies) Changed whether users can find team when not invited
         */
        MEMBER_REQUESTS_CHANGE_POLICY, // MemberRequestsChangePolicyType
        /**
         * (team_policies) Changed member send invite policy for team
         */
        MEMBER_SEND_INVITE_POLICY_CHANGED, // MemberSendInvitePolicyChangedType
        /**
         * (team_policies) Added members to member space limit exception list
         */
        MEMBER_SPACE_LIMITS_ADD_EXCEPTION, // MemberSpaceLimitsAddExceptionType
        /**
         * (team_policies) Changed member space limit type for team
         */
        MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY, // MemberSpaceLimitsChangeCapsTypePolicyType
        /**
         * (team_policies) Changed team default member space limit
         */
        MEMBER_SPACE_LIMITS_CHANGE_POLICY, // MemberSpaceLimitsChangePolicyType
        /**
         * (team_policies) Removed members from member space limit exception
         * list
         */
        MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION, // MemberSpaceLimitsRemoveExceptionType
        /**
         * (team_policies) Enabled/disabled option for team members to suggest
         * people to add to team
         */
        MEMBER_SUGGESTIONS_CHANGE_POLICY, // MemberSuggestionsChangePolicyType
        /**
         * (team_policies) Enabled/disabled Microsoft Office add-in
         */
        MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY, // MicrosoftOfficeAddinChangePolicyType
        /**
         * (team_policies) Enabled/disabled network control
         */
        NETWORK_CONTROL_CHANGE_POLICY, // NetworkControlChangePolicyType
        /**
         * (team_policies) Changed whether Dropbox Paper, when enabled, is
         * deployed to all members or to specific members
         */
        PAPER_CHANGE_DEPLOYMENT_POLICY, // PaperChangeDeploymentPolicyType
        /**
         * (team_policies) Changed whether non-members can view Paper docs with
         * link (deprecated, no longer logged)
         */
        PAPER_CHANGE_MEMBER_LINK_POLICY, // PaperChangeMemberLinkPolicyType
        /**
         * (team_policies) Changed whether members can share Paper docs outside
         * team, and if docs are accessible only by team members or anyone by
         * default
         */
        PAPER_CHANGE_MEMBER_POLICY, // PaperChangeMemberPolicyType
        /**
         * (team_policies) Enabled/disabled Dropbox Paper for team
         */
        PAPER_CHANGE_POLICY, // PaperChangePolicyType
        /**
         * (team_policies) Changed Paper Default Folder Policy setting for team
         */
        PAPER_DEFAULT_FOLDER_POLICY_CHANGED, // PaperDefaultFolderPolicyChangedType
        /**
         * (team_policies) Enabled/disabled Paper Desktop for team
         */
        PAPER_DESKTOP_POLICY_CHANGED, // PaperDesktopPolicyChangedType
        /**
         * (team_policies) Added users to Paper-enabled users list
         */
        PAPER_ENABLED_USERS_GROUP_ADDITION, // PaperEnabledUsersGroupAdditionType
        /**
         * (team_policies) Removed users from Paper-enabled users list
         */
        PAPER_ENABLED_USERS_GROUP_REMOVAL, // PaperEnabledUsersGroupRemovalType
        /**
         * (team_policies) Changed team password strength requirements
         */
        PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY, // PasswordStrengthRequirementsChangePolicyType
        /**
         * (team_policies) Enabled/disabled ability of team members to
         * permanently delete content
         */
        PERMANENT_DELETE_CHANGE_POLICY, // PermanentDeleteChangePolicyType
        /**
         * (team_policies) Enabled/disabled reseller support
         */
        RESELLER_SUPPORT_CHANGE_POLICY, // ResellerSupportChangePolicyType
        /**
         * (team_policies) Changed Rewind policy for team
         */
        REWIND_POLICY_CHANGED, // RewindPolicyChangedType
        /**
         * (team_policies) Changed send for signature policy for team
         */
        SEND_FOR_SIGNATURE_POLICY_CHANGED, // SendForSignaturePolicyChangedType
        /**
         * (team_policies) Changed whether team members can join shared folders
         * owned outside team
         */
        SHARING_CHANGE_FOLDER_JOIN_POLICY, // SharingChangeFolderJoinPolicyType
        /**
         * (team_policies) Changed the allow remove or change expiration policy
         * for the links shared outside of the team
         */
        SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY, // SharingChangeLinkAllowChangeExpirationPolicyType
        /**
         * (team_policies) Changed the default expiration for the links shared
         * outside of the team
         */
        SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY, // SharingChangeLinkDefaultExpirationPolicyType
        /**
         * (team_policies) Changed the password requirement for the links shared
         * outside of the team
         */
        SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY, // SharingChangeLinkEnforcePasswordPolicyType
        /**
         * (team_policies) Changed whether members can share links outside team,
         * and if links are accessible only by team members or anyone by default
         */
        SHARING_CHANGE_LINK_POLICY, // SharingChangeLinkPolicyType
        /**
         * (team_policies) Changed whether members can share files/folders
         * outside team
         */
        SHARING_CHANGE_MEMBER_POLICY, // SharingChangeMemberPolicyType
        /**
         * (team_policies) Enabled/disabled downloading files from Dropbox
         * Showcase for team
         */
        SHOWCASE_CHANGE_DOWNLOAD_POLICY, // ShowcaseChangeDownloadPolicyType
        /**
         * (team_policies) Enabled/disabled Dropbox Showcase for team
         */
        SHOWCASE_CHANGE_ENABLED_POLICY, // ShowcaseChangeEnabledPolicyType
        /**
         * (team_policies) Enabled/disabled sharing Dropbox Showcase externally
         * for team
         */
        SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY, // ShowcaseChangeExternalSharingPolicyType
        /**
         * (team_policies) Changed automatic Smart Sync setting for team
         */
        SMARTER_SMART_SYNC_POLICY_CHANGED, // SmarterSmartSyncPolicyChangedType
        /**
         * (team_policies) Changed default Smart Sync setting for team members
         */
        SMART_SYNC_CHANGE_POLICY, // SmartSyncChangePolicyType
        /**
         * (team_policies) Opted team into Smart Sync
         */
        SMART_SYNC_NOT_OPT_OUT, // SmartSyncNotOptOutType
        /**
         * (team_policies) Opted team out of Smart Sync
         */
        SMART_SYNC_OPT_OUT, // SmartSyncOptOutType
        /**
         * (team_policies) Changed single sign-on setting for team
         */
        SSO_CHANGE_POLICY, // SsoChangePolicyType
        /**
         * (team_policies) Changed team branding policy for team
         */
        TEAM_BRANDING_POLICY_CHANGED, // TeamBrandingPolicyChangedType
        /**
         * (team_policies) Changed App Integrations setting for team
         */
        TEAM_EXTENSIONS_POLICY_CHANGED, // TeamExtensionsPolicyChangedType
        /**
         * (team_policies) Enabled/disabled Team Selective Sync for team
         */
        TEAM_SELECTIVE_SYNC_POLICY_CHANGED, // TeamSelectiveSyncPolicyChangedType
        /**
         * (team_policies) Edited the approved list for sharing externally
         */
        TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED, // TeamSharingWhitelistSubjectsChangedType
        /**
         * (team_policies) Added members to two factor authentication exception
         * list
         */
        TFA_ADD_EXCEPTION, // TfaAddExceptionType
        /**
         * (team_policies) Changed two-step verification setting for team
         */
        TFA_CHANGE_POLICY, // TfaChangePolicyType
        /**
         * (team_policies) Removed members from two factor authentication
         * exception list
         */
        TFA_REMOVE_EXCEPTION, // TfaRemoveExceptionType
        /**
         * (team_policies) Enabled/disabled option for members to link personal
         * Dropbox account and team account to same computer
         */
        TWO_ACCOUNT_CHANGE_POLICY, // TwoAccountChangePolicyType
        /**
         * (team_policies) Changed team policy for viewer info
         */
        VIEWER_INFO_POLICY_CHANGED, // ViewerInfoPolicyChangedType
        /**
         * (team_policies) Changed watermarking policy for team
         */
        WATERMARKING_POLICY_CHANGED, // WatermarkingPolicyChangedType
        /**
         * (team_policies) Changed limit on active sessions per member
         */
        WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT, // WebSessionsChangeActiveSessionLimitType
        /**
         * (team_policies) Changed how long members can stay signed in to
         * Dropbox.com
         */
        WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY, // WebSessionsChangeFixedLengthPolicyType
        /**
         * (team_policies) Changed how long team members can be idle while
         * signed in to Dropbox.com
         */
        WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY, // WebSessionsChangeIdleLengthPolicyType
        /**
         * (team_profile) Requested data residency migration for team data
         */
        DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL, // DataResidencyMigrationRequestSuccessfulType
        /**
         * (team_profile) Request for data residency migration for team data has
         * failed
         */
        DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL, // DataResidencyMigrationRequestUnsuccessfulType
        /**
         * (team_profile) Merged another team into this team
         */
        TEAM_MERGE_FROM, // TeamMergeFromType
        /**
         * (team_profile) Merged this team into another team
         */
        TEAM_MERGE_TO, // TeamMergeToType
        /**
         * (team_profile) Added team background to display on shared link
         * headers
         */
        TEAM_PROFILE_ADD_BACKGROUND, // TeamProfileAddBackgroundType
        /**
         * (team_profile) Added team logo to display on shared link headers
         */
        TEAM_PROFILE_ADD_LOGO, // TeamProfileAddLogoType
        /**
         * (team_profile) Changed team background displayed on shared link
         * headers
         */
        TEAM_PROFILE_CHANGE_BACKGROUND, // TeamProfileChangeBackgroundType
        /**
         * (team_profile) Changed default language for team
         */
        TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE, // TeamProfileChangeDefaultLanguageType
        /**
         * (team_profile) Changed team logo displayed on shared link headers
         */
        TEAM_PROFILE_CHANGE_LOGO, // TeamProfileChangeLogoType
        /**
         * (team_profile) Changed team name
         */
        TEAM_PROFILE_CHANGE_NAME, // TeamProfileChangeNameType
        /**
         * (team_profile) Removed team background displayed on shared link
         * headers
         */
        TEAM_PROFILE_REMOVE_BACKGROUND, // TeamProfileRemoveBackgroundType
        /**
         * (team_profile) Removed team logo displayed on shared link headers
         */
        TEAM_PROFILE_REMOVE_LOGO, // TeamProfileRemoveLogoType
        /**
         * (tfa) Added backup phone for two-step verification
         */
        TFA_ADD_BACKUP_PHONE, // TfaAddBackupPhoneType
        /**
         * (tfa) Added security key for two-step verification
         */
        TFA_ADD_SECURITY_KEY, // TfaAddSecurityKeyType
        /**
         * (tfa) Changed backup phone for two-step verification
         */
        TFA_CHANGE_BACKUP_PHONE, // TfaChangeBackupPhoneType
        /**
         * (tfa) Enabled/disabled/changed two-step verification setting
         */
        TFA_CHANGE_STATUS, // TfaChangeStatusType
        /**
         * (tfa) Removed backup phone for two-step verification
         */
        TFA_REMOVE_BACKUP_PHONE, // TfaRemoveBackupPhoneType
        /**
         * (tfa) Removed security key for two-step verification
         */
        TFA_REMOVE_SECURITY_KEY, // TfaRemoveSecurityKeyType
        /**
         * (tfa) Reset two-step verification for team member
         */
        TFA_RESET, // TfaResetType
        /**
         * (trusted_teams) Changed enterprise admin role
         */
        CHANGED_ENTERPRISE_ADMIN_ROLE, // ChangedEnterpriseAdminRoleType
        /**
         * (trusted_teams) Changed enterprise-connected team status
         */
        CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS, // ChangedEnterpriseConnectedTeamStatusType
        /**
         * (trusted_teams) Ended enterprise admin session
         */
        ENDED_ENTERPRISE_ADMIN_SESSION, // EndedEnterpriseAdminSessionType
        /**
         * (trusted_teams) Ended enterprise admin session (deprecated, replaced
         * by 'Ended enterprise admin session')
         */
        ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED, // EndedEnterpriseAdminSessionDeprecatedType
        /**
         * (trusted_teams) Changed who can update a setting
         */
        ENTERPRISE_SETTINGS_LOCKING, // EnterpriseSettingsLockingType
        /**
         * (trusted_teams) Changed guest team admin status
         */
        GUEST_ADMIN_CHANGE_STATUS, // GuestAdminChangeStatusType
        /**
         * (trusted_teams) Started enterprise admin session
         */
        STARTED_ENTERPRISE_ADMIN_SESSION, // StartedEnterpriseAdminSessionType
        /**
         * (trusted_teams) Accepted a team merge request
         */
        TEAM_MERGE_REQUEST_ACCEPTED, // TeamMergeRequestAcceptedType
        /**
         * (trusted_teams) Accepted a team merge request (deprecated, replaced
         * by 'Accepted a team merge request')
         */
        TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM, // TeamMergeRequestAcceptedShownToPrimaryTeamType
        /**
         * (trusted_teams) Accepted a team merge request (deprecated, replaced
         * by 'Accepted a team merge request')
         */
        TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM, // TeamMergeRequestAcceptedShownToSecondaryTeamType
        /**
         * (trusted_teams) Automatically canceled team merge request
         */
        TEAM_MERGE_REQUEST_AUTO_CANCELED, // TeamMergeRequestAutoCanceledType
        /**
         * (trusted_teams) Canceled a team merge request
         */
        TEAM_MERGE_REQUEST_CANCELED, // TeamMergeRequestCanceledType
        /**
         * (trusted_teams) Canceled a team merge request (deprecated, replaced
         * by 'Canceled a team merge request')
         */
        TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM, // TeamMergeRequestCanceledShownToPrimaryTeamType
        /**
         * (trusted_teams) Canceled a team merge request (deprecated, replaced
         * by 'Canceled a team merge request')
         */
        TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM, // TeamMergeRequestCanceledShownToSecondaryTeamType
        /**
         * (trusted_teams) Team merge request expired
         */
        TEAM_MERGE_REQUEST_EXPIRED, // TeamMergeRequestExpiredType
        /**
         * (trusted_teams) Team merge request expired (deprecated, replaced by
         * 'Team merge request expired')
         */
        TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM, // TeamMergeRequestExpiredShownToPrimaryTeamType
        /**
         * (trusted_teams) Team merge request expired (deprecated, replaced by
         * 'Team merge request expired')
         */
        TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM, // TeamMergeRequestExpiredShownToSecondaryTeamType
        /**
         * (trusted_teams) Rejected a team merge request (deprecated, no longer
         * logged)
         */
        TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM, // TeamMergeRequestRejectedShownToPrimaryTeamType
        /**
         * (trusted_teams) Rejected a team merge request (deprecated, no longer
         * logged)
         */
        TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM, // TeamMergeRequestRejectedShownToSecondaryTeamType
        /**
         * (trusted_teams) Sent a team merge request reminder
         */
        TEAM_MERGE_REQUEST_REMINDER, // TeamMergeRequestReminderType
        /**
         * (trusted_teams) Sent a team merge request reminder (deprecated,
         * replaced by 'Sent a team merge request reminder')
         */
        TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM, // TeamMergeRequestReminderShownToPrimaryTeamType
        /**
         * (trusted_teams) Sent a team merge request reminder (deprecated,
         * replaced by 'Sent a team merge request reminder')
         */
        TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM, // TeamMergeRequestReminderShownToSecondaryTeamType
        /**
         * (trusted_teams) Canceled the team merge
         */
        TEAM_MERGE_REQUEST_REVOKED, // TeamMergeRequestRevokedType
        /**
         * (trusted_teams) Requested to merge their Dropbox team into yours
         */
        TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM, // TeamMergeRequestSentShownToPrimaryTeamType
        /**
         * (trusted_teams) Requested to merge your team into another Dropbox
         * team
         */
        TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM, // TeamMergeRequestSentShownToSecondaryTeamType
        /**
         * Catch-all used for unknown tag values returned by the Dropbox
         * servers.
         *
         * <p> Receiving a catch-all value typically indicates this SDK version
         * is not up to date. Consider updating your SDK version to handle the
         * new tags. </p>
         */
        OTHER; // *catch_all
    }

    /**
     * Catch-all used for unknown tag values returned by the Dropbox servers.
     *
     * <p> Receiving a catch-all value typically indicates this SDK version is
     * not up to date. Consider updating your SDK version to handle the new
     * tags. </p>
     */
    public static final EventType OTHER = new EventType().withTag(Tag.OTHER);

    private Tag _tag;
    private AdminAlertingAlertStateChangedType adminAlertingAlertStateChangedValue;
    private AdminAlertingChangedAlertConfigType adminAlertingChangedAlertConfigValue;
    private AdminAlertingTriggeredAlertType adminAlertingTriggeredAlertValue;
    private AppBlockedByPermissionsType appBlockedByPermissionsValue;
    private AppLinkTeamType appLinkTeamValue;
    private AppLinkUserType appLinkUserValue;
    private AppUnlinkTeamType appUnlinkTeamValue;
    private AppUnlinkUserType appUnlinkUserValue;
    private IntegrationConnectedType integrationConnectedValue;
    private IntegrationDisconnectedType integrationDisconnectedValue;
    private FileAddCommentType fileAddCommentValue;
    private FileChangeCommentSubscriptionType fileChangeCommentSubscriptionValue;
    private FileDeleteCommentType fileDeleteCommentValue;
    private FileEditCommentType fileEditCommentValue;
    private FileLikeCommentType fileLikeCommentValue;
    private FileResolveCommentType fileResolveCommentValue;
    private FileUnlikeCommentType fileUnlikeCommentValue;
    private FileUnresolveCommentType fileUnresolveCommentValue;
    private GovernancePolicyAddFoldersType governancePolicyAddFoldersValue;
    private GovernancePolicyAddFolderFailedType governancePolicyAddFolderFailedValue;
    private GovernancePolicyContentDisposedType governancePolicyContentDisposedValue;
    private GovernancePolicyCreateType governancePolicyCreateValue;
    private GovernancePolicyDeleteType governancePolicyDeleteValue;
    private GovernancePolicyEditDetailsType governancePolicyEditDetailsValue;
    private GovernancePolicyEditDurationType governancePolicyEditDurationValue;
    private GovernancePolicyExportCreatedType governancePolicyExportCreatedValue;
    private GovernancePolicyExportRemovedType governancePolicyExportRemovedValue;
    private GovernancePolicyRemoveFoldersType governancePolicyRemoveFoldersValue;
    private GovernancePolicyReportCreatedType governancePolicyReportCreatedValue;
    private GovernancePolicyZipPartDownloadedType governancePolicyZipPartDownloadedValue;
    private LegalHoldsActivateAHoldType legalHoldsActivateAHoldValue;
    private LegalHoldsAddMembersType legalHoldsAddMembersValue;
    private LegalHoldsChangeHoldDetailsType legalHoldsChangeHoldDetailsValue;
    private LegalHoldsChangeHoldNameType legalHoldsChangeHoldNameValue;
    private LegalHoldsExportAHoldType legalHoldsExportAHoldValue;
    private LegalHoldsExportCancelledType legalHoldsExportCancelledValue;
    private LegalHoldsExportDownloadedType legalHoldsExportDownloadedValue;
    private LegalHoldsExportRemovedType legalHoldsExportRemovedValue;
    private LegalHoldsReleaseAHoldType legalHoldsReleaseAHoldValue;
    private LegalHoldsRemoveMembersType legalHoldsRemoveMembersValue;
    private LegalHoldsReportAHoldType legalHoldsReportAHoldValue;
    private DeviceChangeIpDesktopType deviceChangeIpDesktopValue;
    private DeviceChangeIpMobileType deviceChangeIpMobileValue;
    private DeviceChangeIpWebType deviceChangeIpWebValue;
    private DeviceDeleteOnUnlinkFailType deviceDeleteOnUnlinkFailValue;
    private DeviceDeleteOnUnlinkSuccessType deviceDeleteOnUnlinkSuccessValue;
    private DeviceLinkFailType deviceLinkFailValue;
    private DeviceLinkSuccessType deviceLinkSuccessValue;
    private DeviceManagementDisabledType deviceManagementDisabledValue;
    private DeviceManagementEnabledType deviceManagementEnabledValue;
    private DeviceSyncBackupStatusChangedType deviceSyncBackupStatusChangedValue;
    private DeviceUnlinkType deviceUnlinkValue;
    private DropboxPasswordsExportedType dropboxPasswordsExportedValue;
    private DropboxPasswordsNewDeviceEnrolledType dropboxPasswordsNewDeviceEnrolledValue;
    private EmmRefreshAuthTokenType emmRefreshAuthTokenValue;
    private ExternalDriveBackupEligibilityStatusCheckedType externalDriveBackupEligibilityStatusCheckedValue;
    private ExternalDriveBackupStatusChangedType externalDriveBackupStatusChangedValue;
    private AccountCaptureChangeAvailabilityType accountCaptureChangeAvailabilityValue;
    private AccountCaptureMigrateAccountType accountCaptureMigrateAccountValue;
    private AccountCaptureNotificationEmailsSentType accountCaptureNotificationEmailsSentValue;
    private AccountCaptureRelinquishAccountType accountCaptureRelinquishAccountValue;
    private DisabledDomainInvitesType disabledDomainInvitesValue;
    private DomainInvitesApproveRequestToJoinTeamType domainInvitesApproveRequestToJoinTeamValue;
    private DomainInvitesDeclineRequestToJoinTeamType domainInvitesDeclineRequestToJoinTeamValue;
    private DomainInvitesEmailExistingUsersType domainInvitesEmailExistingUsersValue;
    private DomainInvitesRequestToJoinTeamType domainInvitesRequestToJoinTeamValue;
    private DomainInvitesSetInviteNewUserPrefToNoType domainInvitesSetInviteNewUserPrefToNoValue;
    private DomainInvitesSetInviteNewUserPrefToYesType domainInvitesSetInviteNewUserPrefToYesValue;
    private DomainVerificationAddDomainFailType domainVerificationAddDomainFailValue;
    private DomainVerificationAddDomainSuccessType domainVerificationAddDomainSuccessValue;
    private DomainVerificationRemoveDomainType domainVerificationRemoveDomainValue;
    private EnabledDomainInvitesType enabledDomainInvitesValue;
    private ApplyNamingConventionType applyNamingConventionValue;
    private CreateFolderType createFolderValue;
    private FileAddType fileAddValue;
    private FileCopyType fileCopyValue;
    private FileDeleteType fileDeleteValue;
    private FileDownloadType fileDownloadValue;
    private FileEditType fileEditValue;
    private FileGetCopyReferenceType fileGetCopyReferenceValue;
    private FileLockingLockStatusChangedType fileLockingLockStatusChangedValue;
    private FileMoveType fileMoveValue;
    private FilePermanentlyDeleteType filePermanentlyDeleteValue;
    private FilePreviewType filePreviewValue;
    private FileRenameType fileRenameValue;
    private FileRestoreType fileRestoreValue;
    private FileRevertType fileRevertValue;
    private FileRollbackChangesType fileRollbackChangesValue;
    private FileSaveCopyReferenceType fileSaveCopyReferenceValue;
    private FolderOverviewDescriptionChangedType folderOverviewDescriptionChangedValue;
    private FolderOverviewItemPinnedType folderOverviewItemPinnedValue;
    private FolderOverviewItemUnpinnedType folderOverviewItemUnpinnedValue;
    private ObjectLabelAddedType objectLabelAddedValue;
    private ObjectLabelRemovedType objectLabelRemovedValue;
    private ObjectLabelUpdatedValueType objectLabelUpdatedValueValue;
    private OrganizeFolderWithTidyType organizeFolderWithTidyValue;
    private RewindFolderType rewindFolderValue;
    private UndoNamingConventionType undoNamingConventionValue;
    private UndoOrganizeFolderWithTidyType undoOrganizeFolderWithTidyValue;
    private UserTagsAddedType userTagsAddedValue;
    private UserTagsRemovedType userTagsRemovedValue;
    private EmailIngestReceiveFileType emailIngestReceiveFileValue;
    private FileRequestChangeType fileRequestChangeValue;
    private FileRequestCloseType fileRequestCloseValue;
    private FileRequestCreateType fileRequestCreateValue;
    private FileRequestDeleteType fileRequestDeleteValue;
    private FileRequestReceiveFileType fileRequestReceiveFileValue;
    private GroupAddExternalIdType groupAddExternalIdValue;
    private GroupAddMemberType groupAddMemberValue;
    private GroupChangeExternalIdType groupChangeExternalIdValue;
    private GroupChangeManagementTypeType groupChangeManagementTypeValue;
    private GroupChangeMemberRoleType groupChangeMemberRoleValue;
    private GroupCreateType groupCreateValue;
    private GroupDeleteType groupDeleteValue;
    private GroupDescriptionUpdatedType groupDescriptionUpdatedValue;
    private GroupJoinPolicyUpdatedType groupJoinPolicyUpdatedValue;
    private GroupMovedType groupMovedValue;
    private GroupRemoveExternalIdType groupRemoveExternalIdValue;
    private GroupRemoveMemberType groupRemoveMemberValue;
    private GroupRenameType groupRenameValue;
    private AccountLockOrUnlockedType accountLockOrUnlockedValue;
    private EmmErrorType emmErrorValue;
    private GuestAdminSignedInViaTrustedTeamsType guestAdminSignedInViaTrustedTeamsValue;
    private GuestAdminSignedOutViaTrustedTeamsType guestAdminSignedOutViaTrustedTeamsValue;
    private LoginFailType loginFailValue;
    private LoginSuccessType loginSuccessValue;
    private LogoutType logoutValue;
    private ResellerSupportSessionEndType resellerSupportSessionEndValue;
    private ResellerSupportSessionStartType resellerSupportSessionStartValue;
    private SignInAsSessionEndType signInAsSessionEndValue;
    private SignInAsSessionStartType signInAsSessionStartValue;
    private SsoErrorType ssoErrorValue;
    private CreateTeamInviteLinkType createTeamInviteLinkValue;
    private DeleteTeamInviteLinkType deleteTeamInviteLinkValue;
    private MemberAddExternalIdType memberAddExternalIdValue;
    private MemberAddNameType memberAddNameValue;
    private MemberChangeAdminRoleType memberChangeAdminRoleValue;
    private MemberChangeEmailType memberChangeEmailValue;
    private MemberChangeExternalIdType memberChangeExternalIdValue;
    private MemberChangeMembershipTypeType memberChangeMembershipTypeValue;
    private MemberChangeNameType memberChangeNameValue;
    private MemberChangeResellerRoleType memberChangeResellerRoleValue;
    private MemberChangeStatusType memberChangeStatusValue;
    private MemberDeleteManualContactsType memberDeleteManualContactsValue;
    private MemberDeleteProfilePhotoType memberDeleteProfilePhotoValue;
    private MemberPermanentlyDeleteAccountContentsType memberPermanentlyDeleteAccountContentsValue;
    private MemberRemoveExternalIdType memberRemoveExternalIdValue;
    private MemberSetProfilePhotoType memberSetProfilePhotoValue;
    private MemberSpaceLimitsAddCustomQuotaType memberSpaceLimitsAddCustomQuotaValue;
    private MemberSpaceLimitsChangeCustomQuotaType memberSpaceLimitsChangeCustomQuotaValue;
    private MemberSpaceLimitsChangeStatusType memberSpaceLimitsChangeStatusValue;
    private MemberSpaceLimitsRemoveCustomQuotaType memberSpaceLimitsRemoveCustomQuotaValue;
    private MemberSuggestType memberSuggestValue;
    private MemberTransferAccountContentsType memberTransferAccountContentsValue;
    private PendingSecondaryEmailAddedType pendingSecondaryEmailAddedValue;
    private SecondaryEmailDeletedType secondaryEmailDeletedValue;
    private SecondaryEmailVerifiedType secondaryEmailVerifiedValue;
    private SecondaryMailsPolicyChangedType secondaryMailsPolicyChangedValue;
    private BinderAddPageType binderAddPageValue;
    private BinderAddSectionType binderAddSectionValue;
    private BinderRemovePageType binderRemovePageValue;
    private BinderRemoveSectionType binderRemoveSectionValue;
    private BinderRenamePageType binderRenamePageValue;
    private BinderRenameSectionType binderRenameSectionValue;
    private BinderReorderPageType binderReorderPageValue;
    private BinderReorderSectionType binderReorderSectionValue;
    private PaperContentAddMemberType paperContentAddMemberValue;
    private PaperContentAddToFolderType paperContentAddToFolderValue;
    private PaperContentArchiveType paperContentArchiveValue;
    private PaperContentCreateType paperContentCreateValue;
    private PaperContentPermanentlyDeleteType paperContentPermanentlyDeleteValue;
    private PaperContentRemoveFromFolderType paperContentRemoveFromFolderValue;
    private PaperContentRemoveMemberType paperContentRemoveMemberValue;
    private PaperContentRenameType paperContentRenameValue;
    private PaperContentRestoreType paperContentRestoreValue;
    private PaperDocAddCommentType paperDocAddCommentValue;
    private PaperDocChangeMemberRoleType paperDocChangeMemberRoleValue;
    private PaperDocChangeSharingPolicyType paperDocChangeSharingPolicyValue;
    private PaperDocChangeSubscriptionType paperDocChangeSubscriptionValue;
    private PaperDocDeletedType paperDocDeletedValue;
    private PaperDocDeleteCommentType paperDocDeleteCommentValue;
    private PaperDocDownloadType paperDocDownloadValue;
    private PaperDocEditType paperDocEditValue;
    private PaperDocEditCommentType paperDocEditCommentValue;
    private PaperDocFollowedType paperDocFollowedValue;
    private PaperDocMentionType paperDocMentionValue;
    private PaperDocOwnershipChangedType paperDocOwnershipChangedValue;
    private PaperDocRequestAccessType paperDocRequestAccessValue;
    private PaperDocResolveCommentType paperDocResolveCommentValue;
    private PaperDocRevertType paperDocRevertValue;
    private PaperDocSlackShareType paperDocSlackShareValue;
    private PaperDocTeamInviteType paperDocTeamInviteValue;
    private PaperDocTrashedType paperDocTrashedValue;
    private PaperDocUnresolveCommentType paperDocUnresolveCommentValue;
    private PaperDocUntrashedType paperDocUntrashedValue;
    private PaperDocViewType paperDocViewValue;
    private PaperExternalViewAllowType paperExternalViewAllowValue;
    private PaperExternalViewDefaultTeamType paperExternalViewDefaultTeamValue;
    private PaperExternalViewForbidType paperExternalViewForbidValue;
    private PaperFolderChangeSubscriptionType paperFolderChangeSubscriptionValue;
    private PaperFolderDeletedType paperFolderDeletedValue;
    private PaperFolderFollowedType paperFolderFollowedValue;
    private PaperFolderTeamInviteType paperFolderTeamInviteValue;
    private PaperPublishedLinkChangePermissionType paperPublishedLinkChangePermissionValue;
    private PaperPublishedLinkCreateType paperPublishedLinkCreateValue;
    private PaperPublishedLinkDisabledType paperPublishedLinkDisabledValue;
    private PaperPublishedLinkViewType paperPublishedLinkViewValue;
    private PasswordChangeType passwordChangeValue;
    private PasswordResetType passwordResetValue;
    private PasswordResetAllType passwordResetAllValue;
    private ClassificationCreateReportType classificationCreateReportValue;
    private ClassificationCreateReportFailType classificationCreateReportFailValue;
    private EmmCreateExceptionsReportType emmCreateExceptionsReportValue;
    private EmmCreateUsageReportType emmCreateUsageReportValue;
    private ExportMembersReportType exportMembersReportValue;
    private ExportMembersReportFailType exportMembersReportFailValue;
    private ExternalSharingCreateReportType externalSharingCreateReportValue;
    private ExternalSharingReportFailedType externalSharingReportFailedValue;
    private NoExpirationLinkGenCreateReportType noExpirationLinkGenCreateReportValue;
    private NoExpirationLinkGenReportFailedType noExpirationLinkGenReportFailedValue;
    private NoPasswordLinkGenCreateReportType noPasswordLinkGenCreateReportValue;
    private NoPasswordLinkGenReportFailedType noPasswordLinkGenReportFailedValue;
    private NoPasswordLinkViewCreateReportType noPasswordLinkViewCreateReportValue;
    private NoPasswordLinkViewReportFailedType noPasswordLinkViewReportFailedValue;
    private OutdatedLinkViewCreateReportType outdatedLinkViewCreateReportValue;
    private OutdatedLinkViewReportFailedType outdatedLinkViewReportFailedValue;
    private PaperAdminExportStartType paperAdminExportStartValue;
    private SmartSyncCreateAdminPrivilegeReportType smartSyncCreateAdminPrivilegeReportValue;
    private TeamActivityCreateReportType teamActivityCreateReportValue;
    private TeamActivityCreateReportFailType teamActivityCreateReportFailValue;
    private CollectionShareType collectionShareValue;
    private FileTransfersFileAddType fileTransfersFileAddValue;
    private FileTransfersTransferDeleteType fileTransfersTransferDeleteValue;
    private FileTransfersTransferDownloadType fileTransfersTransferDownloadValue;
    private FileTransfersTransferSendType fileTransfersTransferSendValue;
    private FileTransfersTransferViewType fileTransfersTransferViewValue;
    private NoteAclInviteOnlyType noteAclInviteOnlyValue;
    private NoteAclLinkType noteAclLinkValue;
    private NoteAclTeamLinkType noteAclTeamLinkValue;
    private NoteSharedType noteSharedValue;
    private NoteShareReceiveType noteShareReceiveValue;
    private OpenNoteSharedType openNoteSharedValue;
    private SfAddGroupType sfAddGroupValue;
    private SfAllowNonMembersToViewSharedLinksType sfAllowNonMembersToViewSharedLinksValue;
    private SfExternalInviteWarnType sfExternalInviteWarnValue;
    private SfFbInviteType sfFbInviteValue;
    private SfFbInviteChangeRoleType sfFbInviteChangeRoleValue;
    private SfFbUninviteType sfFbUninviteValue;
    private SfInviteGroupType sfInviteGroupValue;
    private SfTeamGrantAccessType sfTeamGrantAccessValue;
    private SfTeamInviteType sfTeamInviteValue;
    private SfTeamInviteChangeRoleType sfTeamInviteChangeRoleValue;
    private SfTeamJoinType sfTeamJoinValue;
    private SfTeamJoinFromOobLinkType sfTeamJoinFromOobLinkValue;
    private SfTeamUninviteType sfTeamUninviteValue;
    private SharedContentAddInviteesType sharedContentAddInviteesValue;
    private SharedContentAddLinkExpiryType sharedContentAddLinkExpiryValue;
    private SharedContentAddLinkPasswordType sharedContentAddLinkPasswordValue;
    private SharedContentAddMemberType sharedContentAddMemberValue;
    private SharedContentChangeDownloadsPolicyType sharedContentChangeDownloadsPolicyValue;
    private SharedContentChangeInviteeRoleType sharedContentChangeInviteeRoleValue;
    private SharedContentChangeLinkAudienceType sharedContentChangeLinkAudienceValue;
    private SharedContentChangeLinkExpiryType sharedContentChangeLinkExpiryValue;
    private SharedContentChangeLinkPasswordType sharedContentChangeLinkPasswordValue;
    private SharedContentChangeMemberRoleType sharedContentChangeMemberRoleValue;
    private SharedContentChangeViewerInfoPolicyType sharedContentChangeViewerInfoPolicyValue;
    private SharedContentClaimInvitationType sharedContentClaimInvitationValue;
    private SharedContentCopyType sharedContentCopyValue;
    private SharedContentDownloadType sharedContentDownloadValue;
    private SharedContentRelinquishMembershipType sharedContentRelinquishMembershipValue;
    private SharedContentRemoveInviteesType sharedContentRemoveInviteesValue;
    private SharedContentRemoveLinkExpiryType sharedContentRemoveLinkExpiryValue;
    private SharedContentRemoveLinkPasswordType sharedContentRemoveLinkPasswordValue;
    private SharedContentRemoveMemberType sharedContentRemoveMemberValue;
    private SharedContentRequestAccessType sharedContentRequestAccessValue;
    private SharedContentRestoreInviteesType sharedContentRestoreInviteesValue;
    private SharedContentRestoreMemberType sharedContentRestoreMemberValue;
    private SharedContentUnshareType sharedContentUnshareValue;
    private SharedContentViewType sharedContentViewValue;
    private SharedFolderChangeLinkPolicyType sharedFolderChangeLinkPolicyValue;
    private SharedFolderChangeMembersInheritancePolicyType sharedFolderChangeMembersInheritancePolicyValue;
    private SharedFolderChangeMembersManagementPolicyType sharedFolderChangeMembersManagementPolicyValue;
    private SharedFolderChangeMembersPolicyType sharedFolderChangeMembersPolicyValue;
    private SharedFolderCreateType sharedFolderCreateValue;
    private SharedFolderDeclineInvitationType sharedFolderDeclineInvitationValue;
    private SharedFolderMountType sharedFolderMountValue;
    private SharedFolderNestType sharedFolderNestValue;
    private SharedFolderTransferOwnershipType sharedFolderTransferOwnershipValue;
    private SharedFolderUnmountType sharedFolderUnmountValue;
    private SharedLinkAddExpiryType sharedLinkAddExpiryValue;
    private SharedLinkChangeExpiryType sharedLinkChangeExpiryValue;
    private SharedLinkChangeVisibilityType sharedLinkChangeVisibilityValue;
    private SharedLinkCopyType sharedLinkCopyValue;
    private SharedLinkCreateType sharedLinkCreateValue;
    private SharedLinkDisableType sharedLinkDisableValue;
    private SharedLinkDownloadType sharedLinkDownloadValue;
    private SharedLinkRemoveExpiryType sharedLinkRemoveExpiryValue;
    private SharedLinkSettingsAddExpirationType sharedLinkSettingsAddExpirationValue;
    private SharedLinkSettingsAddPasswordType sharedLinkSettingsAddPasswordValue;
    private SharedLinkSettingsAllowDownloadDisabledType sharedLinkSettingsAllowDownloadDisabledValue;
    private SharedLinkSettingsAllowDownloadEnabledType sharedLinkSettingsAllowDownloadEnabledValue;
    private SharedLinkSettingsChangeAudienceType sharedLinkSettingsChangeAudienceValue;
    private SharedLinkSettingsChangeExpirationType sharedLinkSettingsChangeExpirationValue;
    private SharedLinkSettingsChangePasswordType sharedLinkSettingsChangePasswordValue;
    private SharedLinkSettingsRemoveExpirationType sharedLinkSettingsRemoveExpirationValue;
    private SharedLinkSettingsRemovePasswordType sharedLinkSettingsRemovePasswordValue;
    private SharedLinkShareType sharedLinkShareValue;
    private SharedLinkViewType sharedLinkViewValue;
    private SharedNoteOpenedType sharedNoteOpenedValue;
    private ShmodelDisableDownloadsType shmodelDisableDownloadsValue;
    private ShmodelEnableDownloadsType shmodelEnableDownloadsValue;
    private ShmodelGroupShareType shmodelGroupShareValue;
    private ShowcaseAccessGrantedType showcaseAccessGrantedValue;
    private ShowcaseAddMemberType showcaseAddMemberValue;
    private ShowcaseArchivedType showcaseArchivedValue;
    private ShowcaseCreatedType showcaseCreatedValue;
    private ShowcaseDeleteCommentType showcaseDeleteCommentValue;
    private ShowcaseEditedType showcaseEditedValue;
    private ShowcaseEditCommentType showcaseEditCommentValue;
    private ShowcaseFileAddedType showcaseFileAddedValue;
    private ShowcaseFileDownloadType showcaseFileDownloadValue;
    private ShowcaseFileRemovedType showcaseFileRemovedValue;
    private ShowcaseFileViewType showcaseFileViewValue;
    private ShowcasePermanentlyDeletedType showcasePermanentlyDeletedValue;
    private ShowcasePostCommentType showcasePostCommentValue;
    private ShowcaseRemoveMemberType showcaseRemoveMemberValue;
    private ShowcaseRenamedType showcaseRenamedValue;
    private ShowcaseRequestAccessType showcaseRequestAccessValue;
    private ShowcaseResolveCommentType showcaseResolveCommentValue;
    private ShowcaseRestoredType showcaseRestoredValue;
    private ShowcaseTrashedType showcaseTrashedValue;
    private ShowcaseTrashedDeprecatedType showcaseTrashedDeprecatedValue;
    private ShowcaseUnresolveCommentType showcaseUnresolveCommentValue;
    private ShowcaseUntrashedType showcaseUntrashedValue;
    private ShowcaseUntrashedDeprecatedType showcaseUntrashedDeprecatedValue;
    private ShowcaseViewType showcaseViewValue;
    private SsoAddCertType ssoAddCertValue;
    private SsoAddLoginUrlType ssoAddLoginUrlValue;
    private SsoAddLogoutUrlType ssoAddLogoutUrlValue;
    private SsoChangeCertType ssoChangeCertValue;
    private SsoChangeLoginUrlType ssoChangeLoginUrlValue;
    private SsoChangeLogoutUrlType ssoChangeLogoutUrlValue;
    private SsoChangeSamlIdentityModeType ssoChangeSamlIdentityModeValue;
    private SsoRemoveCertType ssoRemoveCertValue;
    private SsoRemoveLoginUrlType ssoRemoveLoginUrlValue;
    private SsoRemoveLogoutUrlType ssoRemoveLogoutUrlValue;
    private TeamFolderChangeStatusType teamFolderChangeStatusValue;
    private TeamFolderCreateType teamFolderCreateValue;
    private TeamFolderDowngradeType teamFolderDowngradeValue;
    private TeamFolderPermanentlyDeleteType teamFolderPermanentlyDeleteValue;
    private TeamFolderRenameType teamFolderRenameValue;
    private TeamSelectiveSyncSettingsChangedType teamSelectiveSyncSettingsChangedValue;
    private AccountCaptureChangePolicyType accountCaptureChangePolicyValue;
    private AdminEmailRemindersChangedType adminEmailRemindersChangedValue;
    private AllowDownloadDisabledType allowDownloadDisabledValue;
    private AllowDownloadEnabledType allowDownloadEnabledValue;
    private AppPermissionsChangedType appPermissionsChangedValue;
    private CameraUploadsPolicyChangedType cameraUploadsPolicyChangedValue;
    private CaptureTranscriptPolicyChangedType captureTranscriptPolicyChangedValue;
    private ClassificationChangePolicyType classificationChangePolicyValue;
    private ComputerBackupPolicyChangedType computerBackupPolicyChangedValue;
    private ContentAdministrationPolicyChangedType contentAdministrationPolicyChangedValue;
    private DataPlacementRestrictionChangePolicyType dataPlacementRestrictionChangePolicyValue;
    private DataPlacementRestrictionSatisfyPolicyType dataPlacementRestrictionSatisfyPolicyValue;
    private DeviceApprovalsAddExceptionType deviceApprovalsAddExceptionValue;
    private DeviceApprovalsChangeDesktopPolicyType deviceApprovalsChangeDesktopPolicyValue;
    private DeviceApprovalsChangeMobilePolicyType deviceApprovalsChangeMobilePolicyValue;
    private DeviceApprovalsChangeOverageActionType deviceApprovalsChangeOverageActionValue;
    private DeviceApprovalsChangeUnlinkActionType deviceApprovalsChangeUnlinkActionValue;
    private DeviceApprovalsRemoveExceptionType deviceApprovalsRemoveExceptionValue;
    private DirectoryRestrictionsAddMembersType directoryRestrictionsAddMembersValue;
    private DirectoryRestrictionsRemoveMembersType directoryRestrictionsRemoveMembersValue;
    private DropboxPasswordsPolicyChangedType dropboxPasswordsPolicyChangedValue;
    private EmailIngestPolicyChangedType emailIngestPolicyChangedValue;
    private EmmAddExceptionType emmAddExceptionValue;
    private EmmChangePolicyType emmChangePolicyValue;
    private EmmRemoveExceptionType emmRemoveExceptionValue;
    private ExtendedVersionHistoryChangePolicyType extendedVersionHistoryChangePolicyValue;
    private ExternalDriveBackupPolicyChangedType externalDriveBackupPolicyChangedValue;
    private FileCommentsChangePolicyType fileCommentsChangePolicyValue;
    private FileLockingPolicyChangedType fileLockingPolicyChangedValue;
    private FileProviderMigrationPolicyChangedType fileProviderMigrationPolicyChangedValue;
    private FileRequestsChangePolicyType fileRequestsChangePolicyValue;
    private FileRequestsEmailsEnabledType fileRequestsEmailsEnabledValue;
    private FileRequestsEmailsRestrictedToTeamOnlyType fileRequestsEmailsRestrictedToTeamOnlyValue;
    private FileTransfersPolicyChangedType fileTransfersPolicyChangedValue;
    private GoogleSsoChangePolicyType googleSsoChangePolicyValue;
    private GroupUserManagementChangePolicyType groupUserManagementChangePolicyValue;
    private IntegrationPolicyChangedType integrationPolicyChangedValue;
    private InviteAcceptanceEmailPolicyChangedType inviteAcceptanceEmailPolicyChangedValue;
    private MemberRequestsChangePolicyType memberRequestsChangePolicyValue;
    private MemberSendInvitePolicyChangedType memberSendInvitePolicyChangedValue;
    private MemberSpaceLimitsAddExceptionType memberSpaceLimitsAddExceptionValue;
    private MemberSpaceLimitsChangeCapsTypePolicyType memberSpaceLimitsChangeCapsTypePolicyValue;
    private MemberSpaceLimitsChangePolicyType memberSpaceLimitsChangePolicyValue;
    private MemberSpaceLimitsRemoveExceptionType memberSpaceLimitsRemoveExceptionValue;
    private MemberSuggestionsChangePolicyType memberSuggestionsChangePolicyValue;
    private MicrosoftOfficeAddinChangePolicyType microsoftOfficeAddinChangePolicyValue;
    private NetworkControlChangePolicyType networkControlChangePolicyValue;
    private PaperChangeDeploymentPolicyType paperChangeDeploymentPolicyValue;
    private PaperChangeMemberLinkPolicyType paperChangeMemberLinkPolicyValue;
    private PaperChangeMemberPolicyType paperChangeMemberPolicyValue;
    private PaperChangePolicyType paperChangePolicyValue;
    private PaperDefaultFolderPolicyChangedType paperDefaultFolderPolicyChangedValue;
    private PaperDesktopPolicyChangedType paperDesktopPolicyChangedValue;
    private PaperEnabledUsersGroupAdditionType paperEnabledUsersGroupAdditionValue;
    private PaperEnabledUsersGroupRemovalType paperEnabledUsersGroupRemovalValue;
    private PasswordStrengthRequirementsChangePolicyType passwordStrengthRequirementsChangePolicyValue;
    private PermanentDeleteChangePolicyType permanentDeleteChangePolicyValue;
    private ResellerSupportChangePolicyType resellerSupportChangePolicyValue;
    private RewindPolicyChangedType rewindPolicyChangedValue;
    private SendForSignaturePolicyChangedType sendForSignaturePolicyChangedValue;
    private SharingChangeFolderJoinPolicyType sharingChangeFolderJoinPolicyValue;
    private SharingChangeLinkAllowChangeExpirationPolicyType sharingChangeLinkAllowChangeExpirationPolicyValue;
    private SharingChangeLinkDefaultExpirationPolicyType sharingChangeLinkDefaultExpirationPolicyValue;
    private SharingChangeLinkEnforcePasswordPolicyType sharingChangeLinkEnforcePasswordPolicyValue;
    private SharingChangeLinkPolicyType sharingChangeLinkPolicyValue;
    private SharingChangeMemberPolicyType sharingChangeMemberPolicyValue;
    private ShowcaseChangeDownloadPolicyType showcaseChangeDownloadPolicyValue;
    private ShowcaseChangeEnabledPolicyType showcaseChangeEnabledPolicyValue;
    private ShowcaseChangeExternalSharingPolicyType showcaseChangeExternalSharingPolicyValue;
    private SmarterSmartSyncPolicyChangedType smarterSmartSyncPolicyChangedValue;
    private SmartSyncChangePolicyType smartSyncChangePolicyValue;
    private SmartSyncNotOptOutType smartSyncNotOptOutValue;
    private SmartSyncOptOutType smartSyncOptOutValue;
    private SsoChangePolicyType ssoChangePolicyValue;
    private TeamBrandingPolicyChangedType teamBrandingPolicyChangedValue;
    private TeamExtensionsPolicyChangedType teamExtensionsPolicyChangedValue;
    private TeamSelectiveSyncPolicyChangedType teamSelectiveSyncPolicyChangedValue;
    private TeamSharingWhitelistSubjectsChangedType teamSharingWhitelistSubjectsChangedValue;
    private TfaAddExceptionType tfaAddExceptionValue;
    private TfaChangePolicyType tfaChangePolicyValue;
    private TfaRemoveExceptionType tfaRemoveExceptionValue;
    private TwoAccountChangePolicyType twoAccountChangePolicyValue;
    private ViewerInfoPolicyChangedType viewerInfoPolicyChangedValue;
    private WatermarkingPolicyChangedType watermarkingPolicyChangedValue;
    private WebSessionsChangeActiveSessionLimitType webSessionsChangeActiveSessionLimitValue;
    private WebSessionsChangeFixedLengthPolicyType webSessionsChangeFixedLengthPolicyValue;
    private WebSessionsChangeIdleLengthPolicyType webSessionsChangeIdleLengthPolicyValue;
    private DataResidencyMigrationRequestSuccessfulType dataResidencyMigrationRequestSuccessfulValue;
    private DataResidencyMigrationRequestUnsuccessfulType dataResidencyMigrationRequestUnsuccessfulValue;
    private TeamMergeFromType teamMergeFromValue;
    private TeamMergeToType teamMergeToValue;
    private TeamProfileAddBackgroundType teamProfileAddBackgroundValue;
    private TeamProfileAddLogoType teamProfileAddLogoValue;
    private TeamProfileChangeBackgroundType teamProfileChangeBackgroundValue;
    private TeamProfileChangeDefaultLanguageType teamProfileChangeDefaultLanguageValue;
    private TeamProfileChangeLogoType teamProfileChangeLogoValue;
    private TeamProfileChangeNameType teamProfileChangeNameValue;
    private TeamProfileRemoveBackgroundType teamProfileRemoveBackgroundValue;
    private TeamProfileRemoveLogoType teamProfileRemoveLogoValue;
    private TfaAddBackupPhoneType tfaAddBackupPhoneValue;
    private TfaAddSecurityKeyType tfaAddSecurityKeyValue;
    private TfaChangeBackupPhoneType tfaChangeBackupPhoneValue;
    private TfaChangeStatusType tfaChangeStatusValue;
    private TfaRemoveBackupPhoneType tfaRemoveBackupPhoneValue;
    private TfaRemoveSecurityKeyType tfaRemoveSecurityKeyValue;
    private TfaResetType tfaResetValue;
    private ChangedEnterpriseAdminRoleType changedEnterpriseAdminRoleValue;
    private ChangedEnterpriseConnectedTeamStatusType changedEnterpriseConnectedTeamStatusValue;
    private EndedEnterpriseAdminSessionType endedEnterpriseAdminSessionValue;
    private EndedEnterpriseAdminSessionDeprecatedType endedEnterpriseAdminSessionDeprecatedValue;
    private EnterpriseSettingsLockingType enterpriseSettingsLockingValue;
    private GuestAdminChangeStatusType guestAdminChangeStatusValue;
    private StartedEnterpriseAdminSessionType startedEnterpriseAdminSessionValue;
    private TeamMergeRequestAcceptedType teamMergeRequestAcceptedValue;
    private TeamMergeRequestAcceptedShownToPrimaryTeamType teamMergeRequestAcceptedShownToPrimaryTeamValue;
    private TeamMergeRequestAcceptedShownToSecondaryTeamType teamMergeRequestAcceptedShownToSecondaryTeamValue;
    private TeamMergeRequestAutoCanceledType teamMergeRequestAutoCanceledValue;
    private TeamMergeRequestCanceledType teamMergeRequestCanceledValue;
    private TeamMergeRequestCanceledShownToPrimaryTeamType teamMergeRequestCanceledShownToPrimaryTeamValue;
    private TeamMergeRequestCanceledShownToSecondaryTeamType teamMergeRequestCanceledShownToSecondaryTeamValue;
    private TeamMergeRequestExpiredType teamMergeRequestExpiredValue;
    private TeamMergeRequestExpiredShownToPrimaryTeamType teamMergeRequestExpiredShownToPrimaryTeamValue;
    private TeamMergeRequestExpiredShownToSecondaryTeamType teamMergeRequestExpiredShownToSecondaryTeamValue;
    private TeamMergeRequestRejectedShownToPrimaryTeamType teamMergeRequestRejectedShownToPrimaryTeamValue;
    private TeamMergeRequestRejectedShownToSecondaryTeamType teamMergeRequestRejectedShownToSecondaryTeamValue;
    private TeamMergeRequestReminderType teamMergeRequestReminderValue;
    private TeamMergeRequestReminderShownToPrimaryTeamType teamMergeRequestReminderShownToPrimaryTeamValue;
    private TeamMergeRequestReminderShownToSecondaryTeamType teamMergeRequestReminderShownToSecondaryTeamValue;
    private TeamMergeRequestRevokedType teamMergeRequestRevokedValue;
    private TeamMergeRequestSentShownToPrimaryTeamType teamMergeRequestSentShownToPrimaryTeamValue;
    private TeamMergeRequestSentShownToSecondaryTeamType teamMergeRequestSentShownToSecondaryTeamValue;

    /**
     * Private default constructor, so that object is uninitializable publicly.
     */
    private EventType() {
    }


    /**
     * The type of the event with description.
     *
     * @param _tag  Discriminating tag for this instance.
     */
    private EventType withTag(Tag _tag) {
        EventType result = new EventType();
        result._tag = _tag;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param adminAlertingAlertStateChangedValue  (admin_alerting) Changed an
     *     alert state. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndAdminAlertingAlertStateChanged(Tag _tag, AdminAlertingAlertStateChangedType adminAlertingAlertStateChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.adminAlertingAlertStateChangedValue = adminAlertingAlertStateChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param adminAlertingChangedAlertConfigValue  (admin_alerting) Changed an
     *     alert setting. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndAdminAlertingChangedAlertConfig(Tag _tag, AdminAlertingChangedAlertConfigType adminAlertingChangedAlertConfigValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.adminAlertingChangedAlertConfigValue = adminAlertingChangedAlertConfigValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param adminAlertingTriggeredAlertValue  (admin_alerting) Triggered
     *     security alert. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndAdminAlertingTriggeredAlert(Tag _tag, AdminAlertingTriggeredAlertType adminAlertingTriggeredAlertValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.adminAlertingTriggeredAlertValue = adminAlertingTriggeredAlertValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param appBlockedByPermissionsValue  (apps) Failed to connect app for
     *     member. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndAppBlockedByPermissions(Tag _tag, AppBlockedByPermissionsType appBlockedByPermissionsValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.appBlockedByPermissionsValue = appBlockedByPermissionsValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param appLinkTeamValue  (apps) Linked app for team. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndAppLinkTeam(Tag _tag, AppLinkTeamType appLinkTeamValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.appLinkTeamValue = appLinkTeamValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param appLinkUserValue  (apps) Linked app for member. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndAppLinkUser(Tag _tag, AppLinkUserType appLinkUserValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.appLinkUserValue = appLinkUserValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param appUnlinkTeamValue  (apps) Unlinked app for team. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndAppUnlinkTeam(Tag _tag, AppUnlinkTeamType appUnlinkTeamValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.appUnlinkTeamValue = appUnlinkTeamValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param appUnlinkUserValue  (apps) Unlinked app for member. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndAppUnlinkUser(Tag _tag, AppUnlinkUserType appUnlinkUserValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.appUnlinkUserValue = appUnlinkUserValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param integrationConnectedValue  (apps) Connected integration for
     *     member. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndIntegrationConnected(Tag _tag, IntegrationConnectedType integrationConnectedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.integrationConnectedValue = integrationConnectedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param integrationDisconnectedValue  (apps) Disconnected integration for
     *     member. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndIntegrationDisconnected(Tag _tag, IntegrationDisconnectedType integrationDisconnectedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.integrationDisconnectedValue = integrationDisconnectedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileAddCommentValue  (comments) Added file comment. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileAddComment(Tag _tag, FileAddCommentType fileAddCommentValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileAddCommentValue = fileAddCommentValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileChangeCommentSubscriptionValue  (comments) Subscribed to or
     *     unsubscribed from comment notifications for file. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileChangeCommentSubscription(Tag _tag, FileChangeCommentSubscriptionType fileChangeCommentSubscriptionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileChangeCommentSubscriptionValue = fileChangeCommentSubscriptionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileDeleteCommentValue  (comments) Deleted file comment. Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileDeleteComment(Tag _tag, FileDeleteCommentType fileDeleteCommentValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileDeleteCommentValue = fileDeleteCommentValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileEditCommentValue  (comments) Edited file comment. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileEditComment(Tag _tag, FileEditCommentType fileEditCommentValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileEditCommentValue = fileEditCommentValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileLikeCommentValue  (comments) Liked file comment (deprecated,
     *     no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileLikeComment(Tag _tag, FileLikeCommentType fileLikeCommentValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileLikeCommentValue = fileLikeCommentValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileResolveCommentValue  (comments) Resolved file comment. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileResolveComment(Tag _tag, FileResolveCommentType fileResolveCommentValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileResolveCommentValue = fileResolveCommentValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileUnlikeCommentValue  (comments) Unliked file comment
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileUnlikeComment(Tag _tag, FileUnlikeCommentType fileUnlikeCommentValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileUnlikeCommentValue = fileUnlikeCommentValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileUnresolveCommentValue  (comments) Unresolved file comment.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileUnresolveComment(Tag _tag, FileUnresolveCommentType fileUnresolveCommentValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileUnresolveCommentValue = fileUnresolveCommentValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param governancePolicyAddFoldersValue  (data_governance) Added folders
     *     to policy. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGovernancePolicyAddFolders(Tag _tag, GovernancePolicyAddFoldersType governancePolicyAddFoldersValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.governancePolicyAddFoldersValue = governancePolicyAddFoldersValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param governancePolicyAddFolderFailedValue  (data_governance) Couldn't
     *     add a folder to a policy. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGovernancePolicyAddFolderFailed(Tag _tag, GovernancePolicyAddFolderFailedType governancePolicyAddFolderFailedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.governancePolicyAddFolderFailedValue = governancePolicyAddFolderFailedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param governancePolicyContentDisposedValue  (data_governance) Content
     *     disposed. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGovernancePolicyContentDisposed(Tag _tag, GovernancePolicyContentDisposedType governancePolicyContentDisposedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.governancePolicyContentDisposedValue = governancePolicyContentDisposedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param governancePolicyCreateValue  (data_governance) Activated a new
     *     policy. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGovernancePolicyCreate(Tag _tag, GovernancePolicyCreateType governancePolicyCreateValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.governancePolicyCreateValue = governancePolicyCreateValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param governancePolicyDeleteValue  (data_governance) Deleted a policy.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGovernancePolicyDelete(Tag _tag, GovernancePolicyDeleteType governancePolicyDeleteValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.governancePolicyDeleteValue = governancePolicyDeleteValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param governancePolicyEditDetailsValue  (data_governance) Edited policy.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGovernancePolicyEditDetails(Tag _tag, GovernancePolicyEditDetailsType governancePolicyEditDetailsValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.governancePolicyEditDetailsValue = governancePolicyEditDetailsValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param governancePolicyEditDurationValue  (data_governance) Changed
     *     policy duration. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGovernancePolicyEditDuration(Tag _tag, GovernancePolicyEditDurationType governancePolicyEditDurationValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.governancePolicyEditDurationValue = governancePolicyEditDurationValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param governancePolicyExportCreatedValue  (data_governance) Created a
     *     policy download. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGovernancePolicyExportCreated(Tag _tag, GovernancePolicyExportCreatedType governancePolicyExportCreatedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.governancePolicyExportCreatedValue = governancePolicyExportCreatedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param governancePolicyExportRemovedValue  (data_governance) Removed a
     *     policy download. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGovernancePolicyExportRemoved(Tag _tag, GovernancePolicyExportRemovedType governancePolicyExportRemovedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.governancePolicyExportRemovedValue = governancePolicyExportRemovedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param governancePolicyRemoveFoldersValue  (data_governance) Removed
     *     folders from policy. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGovernancePolicyRemoveFolders(Tag _tag, GovernancePolicyRemoveFoldersType governancePolicyRemoveFoldersValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.governancePolicyRemoveFoldersValue = governancePolicyRemoveFoldersValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param governancePolicyReportCreatedValue  (data_governance) Created a
     *     summary report for a policy. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGovernancePolicyReportCreated(Tag _tag, GovernancePolicyReportCreatedType governancePolicyReportCreatedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.governancePolicyReportCreatedValue = governancePolicyReportCreatedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param governancePolicyZipPartDownloadedValue  (data_governance)
     *     Downloaded content from a policy. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGovernancePolicyZipPartDownloaded(Tag _tag, GovernancePolicyZipPartDownloadedType governancePolicyZipPartDownloadedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.governancePolicyZipPartDownloadedValue = governancePolicyZipPartDownloadedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param legalHoldsActivateAHoldValue  (data_governance) Activated a hold.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndLegalHoldsActivateAHold(Tag _tag, LegalHoldsActivateAHoldType legalHoldsActivateAHoldValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.legalHoldsActivateAHoldValue = legalHoldsActivateAHoldValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param legalHoldsAddMembersValue  (data_governance) Added members to a
     *     hold. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndLegalHoldsAddMembers(Tag _tag, LegalHoldsAddMembersType legalHoldsAddMembersValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.legalHoldsAddMembersValue = legalHoldsAddMembersValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param legalHoldsChangeHoldDetailsValue  (data_governance) Edited details
     *     for a hold. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndLegalHoldsChangeHoldDetails(Tag _tag, LegalHoldsChangeHoldDetailsType legalHoldsChangeHoldDetailsValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.legalHoldsChangeHoldDetailsValue = legalHoldsChangeHoldDetailsValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param legalHoldsChangeHoldNameValue  (data_governance) Renamed a hold.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndLegalHoldsChangeHoldName(Tag _tag, LegalHoldsChangeHoldNameType legalHoldsChangeHoldNameValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.legalHoldsChangeHoldNameValue = legalHoldsChangeHoldNameValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param legalHoldsExportAHoldValue  (data_governance) Exported hold. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndLegalHoldsExportAHold(Tag _tag, LegalHoldsExportAHoldType legalHoldsExportAHoldValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.legalHoldsExportAHoldValue = legalHoldsExportAHoldValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param legalHoldsExportCancelledValue  (data_governance) Canceled export
     *     for a hold. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndLegalHoldsExportCancelled(Tag _tag, LegalHoldsExportCancelledType legalHoldsExportCancelledValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.legalHoldsExportCancelledValue = legalHoldsExportCancelledValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param legalHoldsExportDownloadedValue  (data_governance) Downloaded
     *     export for a hold. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndLegalHoldsExportDownloaded(Tag _tag, LegalHoldsExportDownloadedType legalHoldsExportDownloadedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.legalHoldsExportDownloadedValue = legalHoldsExportDownloadedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param legalHoldsExportRemovedValue  (data_governance) Removed export for
     *     a hold. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndLegalHoldsExportRemoved(Tag _tag, LegalHoldsExportRemovedType legalHoldsExportRemovedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.legalHoldsExportRemovedValue = legalHoldsExportRemovedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param legalHoldsReleaseAHoldValue  (data_governance) Released a hold.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndLegalHoldsReleaseAHold(Tag _tag, LegalHoldsReleaseAHoldType legalHoldsReleaseAHoldValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.legalHoldsReleaseAHoldValue = legalHoldsReleaseAHoldValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param legalHoldsRemoveMembersValue  (data_governance) Removed members
     *     from a hold. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndLegalHoldsRemoveMembers(Tag _tag, LegalHoldsRemoveMembersType legalHoldsRemoveMembersValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.legalHoldsRemoveMembersValue = legalHoldsRemoveMembersValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param legalHoldsReportAHoldValue  (data_governance) Created a summary
     *     report for a hold. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndLegalHoldsReportAHold(Tag _tag, LegalHoldsReportAHoldType legalHoldsReportAHoldValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.legalHoldsReportAHoldValue = legalHoldsReportAHoldValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param deviceChangeIpDesktopValue  (devices) Changed IP address
     *     associated with active desktop session. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDeviceChangeIpDesktop(Tag _tag, DeviceChangeIpDesktopType deviceChangeIpDesktopValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.deviceChangeIpDesktopValue = deviceChangeIpDesktopValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param deviceChangeIpMobileValue  (devices) Changed IP address associated
     *     with active mobile session. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDeviceChangeIpMobile(Tag _tag, DeviceChangeIpMobileType deviceChangeIpMobileValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.deviceChangeIpMobileValue = deviceChangeIpMobileValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param deviceChangeIpWebValue  (devices) Changed IP address associated
     *     with active web session. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDeviceChangeIpWeb(Tag _tag, DeviceChangeIpWebType deviceChangeIpWebValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.deviceChangeIpWebValue = deviceChangeIpWebValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param deviceDeleteOnUnlinkFailValue  (devices) Failed to delete all
     *     files from unlinked device. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDeviceDeleteOnUnlinkFail(Tag _tag, DeviceDeleteOnUnlinkFailType deviceDeleteOnUnlinkFailValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.deviceDeleteOnUnlinkFailValue = deviceDeleteOnUnlinkFailValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param deviceDeleteOnUnlinkSuccessValue  (devices) Deleted all files from
     *     unlinked device. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDeviceDeleteOnUnlinkSuccess(Tag _tag, DeviceDeleteOnUnlinkSuccessType deviceDeleteOnUnlinkSuccessValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.deviceDeleteOnUnlinkSuccessValue = deviceDeleteOnUnlinkSuccessValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param deviceLinkFailValue  (devices) Failed to link device. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDeviceLinkFail(Tag _tag, DeviceLinkFailType deviceLinkFailValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.deviceLinkFailValue = deviceLinkFailValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param deviceLinkSuccessValue  (devices) Linked device. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDeviceLinkSuccess(Tag _tag, DeviceLinkSuccessType deviceLinkSuccessValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.deviceLinkSuccessValue = deviceLinkSuccessValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param deviceManagementDisabledValue  (devices) Disabled device
     *     management (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDeviceManagementDisabled(Tag _tag, DeviceManagementDisabledType deviceManagementDisabledValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.deviceManagementDisabledValue = deviceManagementDisabledValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param deviceManagementEnabledValue  (devices) Enabled device management
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDeviceManagementEnabled(Tag _tag, DeviceManagementEnabledType deviceManagementEnabledValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.deviceManagementEnabledValue = deviceManagementEnabledValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param deviceSyncBackupStatusChangedValue  (devices) Enabled/disabled
     *     backup for computer. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDeviceSyncBackupStatusChanged(Tag _tag, DeviceSyncBackupStatusChangedType deviceSyncBackupStatusChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.deviceSyncBackupStatusChangedValue = deviceSyncBackupStatusChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param deviceUnlinkValue  (devices) Disconnected device. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDeviceUnlink(Tag _tag, DeviceUnlinkType deviceUnlinkValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.deviceUnlinkValue = deviceUnlinkValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param dropboxPasswordsExportedValue  (devices) Exported passwords. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDropboxPasswordsExported(Tag _tag, DropboxPasswordsExportedType dropboxPasswordsExportedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.dropboxPasswordsExportedValue = dropboxPasswordsExportedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param dropboxPasswordsNewDeviceEnrolledValue  (devices) Enrolled new
     *     Dropbox Passwords device. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDropboxPasswordsNewDeviceEnrolled(Tag _tag, DropboxPasswordsNewDeviceEnrolledType dropboxPasswordsNewDeviceEnrolledValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.dropboxPasswordsNewDeviceEnrolledValue = dropboxPasswordsNewDeviceEnrolledValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param emmRefreshAuthTokenValue  (devices) Refreshed auth token used for
     *     setting up EMM. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndEmmRefreshAuthToken(Tag _tag, EmmRefreshAuthTokenType emmRefreshAuthTokenValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.emmRefreshAuthTokenValue = emmRefreshAuthTokenValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param externalDriveBackupEligibilityStatusCheckedValue  (devices)
     *     Checked external drive backup eligibility status. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndExternalDriveBackupEligibilityStatusChecked(Tag _tag, ExternalDriveBackupEligibilityStatusCheckedType externalDriveBackupEligibilityStatusCheckedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.externalDriveBackupEligibilityStatusCheckedValue = externalDriveBackupEligibilityStatusCheckedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param externalDriveBackupStatusChangedValue  (devices) Modified external
     *     drive backup. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndExternalDriveBackupStatusChanged(Tag _tag, ExternalDriveBackupStatusChangedType externalDriveBackupStatusChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.externalDriveBackupStatusChangedValue = externalDriveBackupStatusChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param accountCaptureChangeAvailabilityValue  (domains) Granted/revoked
     *     option to enable account capture on team domains. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndAccountCaptureChangeAvailability(Tag _tag, AccountCaptureChangeAvailabilityType accountCaptureChangeAvailabilityValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.accountCaptureChangeAvailabilityValue = accountCaptureChangeAvailabilityValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param accountCaptureMigrateAccountValue  (domains) Account-captured user
     *     migrated account to team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndAccountCaptureMigrateAccount(Tag _tag, AccountCaptureMigrateAccountType accountCaptureMigrateAccountValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.accountCaptureMigrateAccountValue = accountCaptureMigrateAccountValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param accountCaptureNotificationEmailsSentValue  (domains) Sent account
     *     capture email to all unmanaged members. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndAccountCaptureNotificationEmailsSent(Tag _tag, AccountCaptureNotificationEmailsSentType accountCaptureNotificationEmailsSentValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.accountCaptureNotificationEmailsSentValue = accountCaptureNotificationEmailsSentValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param accountCaptureRelinquishAccountValue  (domains) Account-captured
     *     user changed account email to personal email. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndAccountCaptureRelinquishAccount(Tag _tag, AccountCaptureRelinquishAccountType accountCaptureRelinquishAccountValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.accountCaptureRelinquishAccountValue = accountCaptureRelinquishAccountValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param disabledDomainInvitesValue  (domains) Disabled domain invites
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDisabledDomainInvites(Tag _tag, DisabledDomainInvitesType disabledDomainInvitesValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.disabledDomainInvitesValue = disabledDomainInvitesValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param domainInvitesApproveRequestToJoinTeamValue  (domains) Approved
     *     user's request to join team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDomainInvitesApproveRequestToJoinTeam(Tag _tag, DomainInvitesApproveRequestToJoinTeamType domainInvitesApproveRequestToJoinTeamValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.domainInvitesApproveRequestToJoinTeamValue = domainInvitesApproveRequestToJoinTeamValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param domainInvitesDeclineRequestToJoinTeamValue  (domains) Declined
     *     user's request to join team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDomainInvitesDeclineRequestToJoinTeam(Tag _tag, DomainInvitesDeclineRequestToJoinTeamType domainInvitesDeclineRequestToJoinTeamValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.domainInvitesDeclineRequestToJoinTeamValue = domainInvitesDeclineRequestToJoinTeamValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param domainInvitesEmailExistingUsersValue  (domains) Sent domain
     *     invites to existing domain accounts (deprecated, no longer logged).
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDomainInvitesEmailExistingUsers(Tag _tag, DomainInvitesEmailExistingUsersType domainInvitesEmailExistingUsersValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.domainInvitesEmailExistingUsersValue = domainInvitesEmailExistingUsersValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param domainInvitesRequestToJoinTeamValue  (domains) Requested to join
     *     team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDomainInvitesRequestToJoinTeam(Tag _tag, DomainInvitesRequestToJoinTeamType domainInvitesRequestToJoinTeamValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.domainInvitesRequestToJoinTeamValue = domainInvitesRequestToJoinTeamValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param domainInvitesSetInviteNewUserPrefToNoValue  (domains) Disabled
     *     "Automatically invite new users" (deprecated, no longer logged). Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDomainInvitesSetInviteNewUserPrefToNo(Tag _tag, DomainInvitesSetInviteNewUserPrefToNoType domainInvitesSetInviteNewUserPrefToNoValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.domainInvitesSetInviteNewUserPrefToNoValue = domainInvitesSetInviteNewUserPrefToNoValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param domainInvitesSetInviteNewUserPrefToYesValue  (domains) Enabled
     *     "Automatically invite new users" (deprecated, no longer logged). Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDomainInvitesSetInviteNewUserPrefToYes(Tag _tag, DomainInvitesSetInviteNewUserPrefToYesType domainInvitesSetInviteNewUserPrefToYesValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.domainInvitesSetInviteNewUserPrefToYesValue = domainInvitesSetInviteNewUserPrefToYesValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param domainVerificationAddDomainFailValue  (domains) Failed to verify
     *     team domain. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDomainVerificationAddDomainFail(Tag _tag, DomainVerificationAddDomainFailType domainVerificationAddDomainFailValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.domainVerificationAddDomainFailValue = domainVerificationAddDomainFailValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param domainVerificationAddDomainSuccessValue  (domains) Verified team
     *     domain. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDomainVerificationAddDomainSuccess(Tag _tag, DomainVerificationAddDomainSuccessType domainVerificationAddDomainSuccessValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.domainVerificationAddDomainSuccessValue = domainVerificationAddDomainSuccessValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param domainVerificationRemoveDomainValue  (domains) Removed domain from
     *     list of verified team domains. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDomainVerificationRemoveDomain(Tag _tag, DomainVerificationRemoveDomainType domainVerificationRemoveDomainValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.domainVerificationRemoveDomainValue = domainVerificationRemoveDomainValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param enabledDomainInvitesValue  (domains) Enabled domain invites
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndEnabledDomainInvites(Tag _tag, EnabledDomainInvitesType enabledDomainInvitesValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.enabledDomainInvitesValue = enabledDomainInvitesValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param applyNamingConventionValue  (file_operations) Applied naming
     *     convention. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndApplyNamingConvention(Tag _tag, ApplyNamingConventionType applyNamingConventionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.applyNamingConventionValue = applyNamingConventionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param createFolderValue  (file_operations) Created folders (deprecated,
     *     no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndCreateFolder(Tag _tag, CreateFolderType createFolderValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.createFolderValue = createFolderValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileAddValue  (file_operations) Added files and/or folders. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileAdd(Tag _tag, FileAddType fileAddValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileAddValue = fileAddValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileCopyValue  (file_operations) Copied files and/or folders. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileCopy(Tag _tag, FileCopyType fileCopyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileCopyValue = fileCopyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileDeleteValue  (file_operations) Deleted files and/or folders.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileDelete(Tag _tag, FileDeleteType fileDeleteValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileDeleteValue = fileDeleteValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileDownloadValue  (file_operations) Downloaded files and/or
     *     folders. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileDownload(Tag _tag, FileDownloadType fileDownloadValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileDownloadValue = fileDownloadValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileEditValue  (file_operations) Edited files. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileEdit(Tag _tag, FileEditType fileEditValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileEditValue = fileEditValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileGetCopyReferenceValue  (file_operations) Created copy
     *     reference to file/folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileGetCopyReference(Tag _tag, FileGetCopyReferenceType fileGetCopyReferenceValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileGetCopyReferenceValue = fileGetCopyReferenceValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileLockingLockStatusChangedValue  (file_operations)
     *     Locked/unlocked editing for a file. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileLockingLockStatusChanged(Tag _tag, FileLockingLockStatusChangedType fileLockingLockStatusChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileLockingLockStatusChangedValue = fileLockingLockStatusChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileMoveValue  (file_operations) Moved files and/or folders. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileMove(Tag _tag, FileMoveType fileMoveValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileMoveValue = fileMoveValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param filePermanentlyDeleteValue  (file_operations) Permanently deleted
     *     files and/or folders. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFilePermanentlyDelete(Tag _tag, FilePermanentlyDeleteType filePermanentlyDeleteValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.filePermanentlyDeleteValue = filePermanentlyDeleteValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param filePreviewValue  (file_operations) Previewed files and/or
     *     folders. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFilePreview(Tag _tag, FilePreviewType filePreviewValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.filePreviewValue = filePreviewValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileRenameValue  (file_operations) Renamed files and/or folders.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileRename(Tag _tag, FileRenameType fileRenameValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileRenameValue = fileRenameValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileRestoreValue  (file_operations) Restored deleted files and/or
     *     folders. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileRestore(Tag _tag, FileRestoreType fileRestoreValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileRestoreValue = fileRestoreValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileRevertValue  (file_operations) Reverted files to previous
     *     version. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileRevert(Tag _tag, FileRevertType fileRevertValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileRevertValue = fileRevertValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileRollbackChangesValue  (file_operations) Rolled back file
     *     actions. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileRollbackChanges(Tag _tag, FileRollbackChangesType fileRollbackChangesValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileRollbackChangesValue = fileRollbackChangesValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileSaveCopyReferenceValue  (file_operations) Saved file/folder
     *     using copy reference. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileSaveCopyReference(Tag _tag, FileSaveCopyReferenceType fileSaveCopyReferenceValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileSaveCopyReferenceValue = fileSaveCopyReferenceValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param folderOverviewDescriptionChangedValue  (file_operations) Updated
     *     folder overview. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFolderOverviewDescriptionChanged(Tag _tag, FolderOverviewDescriptionChangedType folderOverviewDescriptionChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.folderOverviewDescriptionChangedValue = folderOverviewDescriptionChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param folderOverviewItemPinnedValue  (file_operations) Pinned item to
     *     folder overview. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFolderOverviewItemPinned(Tag _tag, FolderOverviewItemPinnedType folderOverviewItemPinnedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.folderOverviewItemPinnedValue = folderOverviewItemPinnedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param folderOverviewItemUnpinnedValue  (file_operations) Unpinned item
     *     from folder overview. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFolderOverviewItemUnpinned(Tag _tag, FolderOverviewItemUnpinnedType folderOverviewItemUnpinnedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.folderOverviewItemUnpinnedValue = folderOverviewItemUnpinnedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param objectLabelAddedValue  (file_operations) Added a label. Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndObjectLabelAdded(Tag _tag, ObjectLabelAddedType objectLabelAddedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.objectLabelAddedValue = objectLabelAddedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param objectLabelRemovedValue  (file_operations) Removed a label. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndObjectLabelRemoved(Tag _tag, ObjectLabelRemovedType objectLabelRemovedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.objectLabelRemovedValue = objectLabelRemovedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param objectLabelUpdatedValueValue  (file_operations) Updated a label's
     *     value. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndObjectLabelUpdatedValue(Tag _tag, ObjectLabelUpdatedValueType objectLabelUpdatedValueValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.objectLabelUpdatedValueValue = objectLabelUpdatedValueValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param organizeFolderWithTidyValue  (file_operations) Organized a folder
     *     with multi-file organize. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndOrganizeFolderWithTidy(Tag _tag, OrganizeFolderWithTidyType organizeFolderWithTidyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.organizeFolderWithTidyValue = organizeFolderWithTidyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param rewindFolderValue  (file_operations) Rewound a folder. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndRewindFolder(Tag _tag, RewindFolderType rewindFolderValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.rewindFolderValue = rewindFolderValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param undoNamingConventionValue  (file_operations) Reverted naming
     *     convention. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndUndoNamingConvention(Tag _tag, UndoNamingConventionType undoNamingConventionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.undoNamingConventionValue = undoNamingConventionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param undoOrganizeFolderWithTidyValue  (file_operations) Removed
     *     multi-file organize. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndUndoOrganizeFolderWithTidy(Tag _tag, UndoOrganizeFolderWithTidyType undoOrganizeFolderWithTidyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.undoOrganizeFolderWithTidyValue = undoOrganizeFolderWithTidyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param userTagsAddedValue  (file_operations) Tagged a file. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndUserTagsAdded(Tag _tag, UserTagsAddedType userTagsAddedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.userTagsAddedValue = userTagsAddedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param userTagsRemovedValue  (file_operations) Removed tags. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndUserTagsRemoved(Tag _tag, UserTagsRemovedType userTagsRemovedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.userTagsRemovedValue = userTagsRemovedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param emailIngestReceiveFileValue  (file_requests) Received files via
     *     Email to Dropbox. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndEmailIngestReceiveFile(Tag _tag, EmailIngestReceiveFileType emailIngestReceiveFileValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.emailIngestReceiveFileValue = emailIngestReceiveFileValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileRequestChangeValue  (file_requests) Changed file request. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileRequestChange(Tag _tag, FileRequestChangeType fileRequestChangeValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileRequestChangeValue = fileRequestChangeValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileRequestCloseValue  (file_requests) Closed file request. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileRequestClose(Tag _tag, FileRequestCloseType fileRequestCloseValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileRequestCloseValue = fileRequestCloseValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileRequestCreateValue  (file_requests) Created file request. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileRequestCreate(Tag _tag, FileRequestCreateType fileRequestCreateValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileRequestCreateValue = fileRequestCreateValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileRequestDeleteValue  (file_requests) Delete file request. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileRequestDelete(Tag _tag, FileRequestDeleteType fileRequestDeleteValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileRequestDeleteValue = fileRequestDeleteValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileRequestReceiveFileValue  (file_requests) Received files for
     *     file request. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileRequestReceiveFile(Tag _tag, FileRequestReceiveFileType fileRequestReceiveFileValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileRequestReceiveFileValue = fileRequestReceiveFileValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param groupAddExternalIdValue  (groups) Added external ID for group.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGroupAddExternalId(Tag _tag, GroupAddExternalIdType groupAddExternalIdValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.groupAddExternalIdValue = groupAddExternalIdValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param groupAddMemberValue  (groups) Added team members to group. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGroupAddMember(Tag _tag, GroupAddMemberType groupAddMemberValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.groupAddMemberValue = groupAddMemberValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param groupChangeExternalIdValue  (groups) Changed external ID for
     *     group. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGroupChangeExternalId(Tag _tag, GroupChangeExternalIdType groupChangeExternalIdValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.groupChangeExternalIdValue = groupChangeExternalIdValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param groupChangeManagementTypeValue  (groups) Changed group management
     *     type. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGroupChangeManagementType(Tag _tag, GroupChangeManagementTypeType groupChangeManagementTypeValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.groupChangeManagementTypeValue = groupChangeManagementTypeValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param groupChangeMemberRoleValue  (groups) Changed manager permissions
     *     of group member. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGroupChangeMemberRole(Tag _tag, GroupChangeMemberRoleType groupChangeMemberRoleValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.groupChangeMemberRoleValue = groupChangeMemberRoleValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param groupCreateValue  (groups) Created group. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGroupCreate(Tag _tag, GroupCreateType groupCreateValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.groupCreateValue = groupCreateValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param groupDeleteValue  (groups) Deleted group. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGroupDelete(Tag _tag, GroupDeleteType groupDeleteValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.groupDeleteValue = groupDeleteValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param groupDescriptionUpdatedValue  (groups) Updated group (deprecated,
     *     no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGroupDescriptionUpdated(Tag _tag, GroupDescriptionUpdatedType groupDescriptionUpdatedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.groupDescriptionUpdatedValue = groupDescriptionUpdatedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param groupJoinPolicyUpdatedValue  (groups) Updated group join policy
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGroupJoinPolicyUpdated(Tag _tag, GroupJoinPolicyUpdatedType groupJoinPolicyUpdatedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.groupJoinPolicyUpdatedValue = groupJoinPolicyUpdatedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param groupMovedValue  (groups) Moved group (deprecated, no longer
     *     logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGroupMoved(Tag _tag, GroupMovedType groupMovedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.groupMovedValue = groupMovedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param groupRemoveExternalIdValue  (groups) Removed external ID for
     *     group. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGroupRemoveExternalId(Tag _tag, GroupRemoveExternalIdType groupRemoveExternalIdValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.groupRemoveExternalIdValue = groupRemoveExternalIdValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param groupRemoveMemberValue  (groups) Removed team members from group.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGroupRemoveMember(Tag _tag, GroupRemoveMemberType groupRemoveMemberValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.groupRemoveMemberValue = groupRemoveMemberValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param groupRenameValue  (groups) Renamed group. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGroupRename(Tag _tag, GroupRenameType groupRenameValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.groupRenameValue = groupRenameValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param accountLockOrUnlockedValue  (logins) Unlocked/locked account after
     *     failed sign in attempts. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndAccountLockOrUnlocked(Tag _tag, AccountLockOrUnlockedType accountLockOrUnlockedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.accountLockOrUnlockedValue = accountLockOrUnlockedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param emmErrorValue  (logins) Failed to sign in via EMM (deprecated,
     *     replaced by 'Failed to sign in'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndEmmError(Tag _tag, EmmErrorType emmErrorValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.emmErrorValue = emmErrorValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param guestAdminSignedInViaTrustedTeamsValue  (logins) Started trusted
     *     team admin session. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGuestAdminSignedInViaTrustedTeams(Tag _tag, GuestAdminSignedInViaTrustedTeamsType guestAdminSignedInViaTrustedTeamsValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.guestAdminSignedInViaTrustedTeamsValue = guestAdminSignedInViaTrustedTeamsValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param guestAdminSignedOutViaTrustedTeamsValue  (logins) Ended trusted
     *     team admin session. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGuestAdminSignedOutViaTrustedTeams(Tag _tag, GuestAdminSignedOutViaTrustedTeamsType guestAdminSignedOutViaTrustedTeamsValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.guestAdminSignedOutViaTrustedTeamsValue = guestAdminSignedOutViaTrustedTeamsValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param loginFailValue  (logins) Failed to sign in. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndLoginFail(Tag _tag, LoginFailType loginFailValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.loginFailValue = loginFailValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param loginSuccessValue  (logins) Signed in. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndLoginSuccess(Tag _tag, LoginSuccessType loginSuccessValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.loginSuccessValue = loginSuccessValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param logoutValue  (logins) Signed out. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndLogout(Tag _tag, LogoutType logoutValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.logoutValue = logoutValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param resellerSupportSessionEndValue  (logins) Ended reseller support
     *     session. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndResellerSupportSessionEnd(Tag _tag, ResellerSupportSessionEndType resellerSupportSessionEndValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.resellerSupportSessionEndValue = resellerSupportSessionEndValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param resellerSupportSessionStartValue  (logins) Started reseller
     *     support session. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndResellerSupportSessionStart(Tag _tag, ResellerSupportSessionStartType resellerSupportSessionStartValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.resellerSupportSessionStartValue = resellerSupportSessionStartValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param signInAsSessionEndValue  (logins) Ended admin sign-in-as session.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSignInAsSessionEnd(Tag _tag, SignInAsSessionEndType signInAsSessionEndValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.signInAsSessionEndValue = signInAsSessionEndValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param signInAsSessionStartValue  (logins) Started admin sign-in-as
     *     session. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSignInAsSessionStart(Tag _tag, SignInAsSessionStartType signInAsSessionStartValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.signInAsSessionStartValue = signInAsSessionStartValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param ssoErrorValue  (logins) Failed to sign in via SSO (deprecated,
     *     replaced by 'Failed to sign in'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSsoError(Tag _tag, SsoErrorType ssoErrorValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.ssoErrorValue = ssoErrorValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param createTeamInviteLinkValue  (members) Created team invite link.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndCreateTeamInviteLink(Tag _tag, CreateTeamInviteLinkType createTeamInviteLinkValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.createTeamInviteLinkValue = createTeamInviteLinkValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param deleteTeamInviteLinkValue  (members) Deleted team invite link.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDeleteTeamInviteLink(Tag _tag, DeleteTeamInviteLinkType deleteTeamInviteLinkValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.deleteTeamInviteLinkValue = deleteTeamInviteLinkValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberAddExternalIdValue  (members) Added an external ID for team
     *     member. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberAddExternalId(Tag _tag, MemberAddExternalIdType memberAddExternalIdValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberAddExternalIdValue = memberAddExternalIdValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberAddNameValue  (members) Added team member name. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberAddName(Tag _tag, MemberAddNameType memberAddNameValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberAddNameValue = memberAddNameValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberChangeAdminRoleValue  (members) Changed team member admin
     *     role. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberChangeAdminRole(Tag _tag, MemberChangeAdminRoleType memberChangeAdminRoleValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberChangeAdminRoleValue = memberChangeAdminRoleValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberChangeEmailValue  (members) Changed team member email. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberChangeEmail(Tag _tag, MemberChangeEmailType memberChangeEmailValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberChangeEmailValue = memberChangeEmailValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberChangeExternalIdValue  (members) Changed the external ID for
     *     team member. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberChangeExternalId(Tag _tag, MemberChangeExternalIdType memberChangeExternalIdValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberChangeExternalIdValue = memberChangeExternalIdValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberChangeMembershipTypeValue  (members) Changed membership type
     *     (limited/full) of member (deprecated, no longer logged). Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberChangeMembershipType(Tag _tag, MemberChangeMembershipTypeType memberChangeMembershipTypeValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberChangeMembershipTypeValue = memberChangeMembershipTypeValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberChangeNameValue  (members) Changed team member name. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberChangeName(Tag _tag, MemberChangeNameType memberChangeNameValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberChangeNameValue = memberChangeNameValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberChangeResellerRoleValue  (members) Changed team member
     *     reseller role. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberChangeResellerRole(Tag _tag, MemberChangeResellerRoleType memberChangeResellerRoleValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberChangeResellerRoleValue = memberChangeResellerRoleValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberChangeStatusValue  (members) Changed member status (invited,
     *     joined, suspended, etc.). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberChangeStatus(Tag _tag, MemberChangeStatusType memberChangeStatusValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberChangeStatusValue = memberChangeStatusValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberDeleteManualContactsValue  (members) Cleared manually added
     *     contacts. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberDeleteManualContacts(Tag _tag, MemberDeleteManualContactsType memberDeleteManualContactsValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberDeleteManualContactsValue = memberDeleteManualContactsValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberDeleteProfilePhotoValue  (members) Deleted team member
     *     profile photo. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberDeleteProfilePhoto(Tag _tag, MemberDeleteProfilePhotoType memberDeleteProfilePhotoValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberDeleteProfilePhotoValue = memberDeleteProfilePhotoValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberPermanentlyDeleteAccountContentsValue  (members) Permanently
     *     deleted contents of deleted team member account. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberPermanentlyDeleteAccountContents(Tag _tag, MemberPermanentlyDeleteAccountContentsType memberPermanentlyDeleteAccountContentsValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberPermanentlyDeleteAccountContentsValue = memberPermanentlyDeleteAccountContentsValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberRemoveExternalIdValue  (members) Removed the external ID for
     *     team member. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberRemoveExternalId(Tag _tag, MemberRemoveExternalIdType memberRemoveExternalIdValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberRemoveExternalIdValue = memberRemoveExternalIdValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberSetProfilePhotoValue  (members) Set team member profile
     *     photo. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberSetProfilePhoto(Tag _tag, MemberSetProfilePhotoType memberSetProfilePhotoValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberSetProfilePhotoValue = memberSetProfilePhotoValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberSpaceLimitsAddCustomQuotaValue  (members) Set custom member
     *     space limit. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberSpaceLimitsAddCustomQuota(Tag _tag, MemberSpaceLimitsAddCustomQuotaType memberSpaceLimitsAddCustomQuotaValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberSpaceLimitsAddCustomQuotaValue = memberSpaceLimitsAddCustomQuotaValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberSpaceLimitsChangeCustomQuotaValue  (members) Changed custom
     *     member space limit. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberSpaceLimitsChangeCustomQuota(Tag _tag, MemberSpaceLimitsChangeCustomQuotaType memberSpaceLimitsChangeCustomQuotaValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberSpaceLimitsChangeCustomQuotaValue = memberSpaceLimitsChangeCustomQuotaValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberSpaceLimitsChangeStatusValue  (members) Changed space limit
     *     status. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberSpaceLimitsChangeStatus(Tag _tag, MemberSpaceLimitsChangeStatusType memberSpaceLimitsChangeStatusValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberSpaceLimitsChangeStatusValue = memberSpaceLimitsChangeStatusValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberSpaceLimitsRemoveCustomQuotaValue  (members) Removed custom
     *     member space limit. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberSpaceLimitsRemoveCustomQuota(Tag _tag, MemberSpaceLimitsRemoveCustomQuotaType memberSpaceLimitsRemoveCustomQuotaValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberSpaceLimitsRemoveCustomQuotaValue = memberSpaceLimitsRemoveCustomQuotaValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberSuggestValue  (members) Suggested person to add to team.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberSuggest(Tag _tag, MemberSuggestType memberSuggestValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberSuggestValue = memberSuggestValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberTransferAccountContentsValue  (members) Transferred contents
     *     of deleted member account to another member. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberTransferAccountContents(Tag _tag, MemberTransferAccountContentsType memberTransferAccountContentsValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberTransferAccountContentsValue = memberTransferAccountContentsValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param pendingSecondaryEmailAddedValue  (members) Added pending secondary
     *     email. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPendingSecondaryEmailAdded(Tag _tag, PendingSecondaryEmailAddedType pendingSecondaryEmailAddedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.pendingSecondaryEmailAddedValue = pendingSecondaryEmailAddedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param secondaryEmailDeletedValue  (members) Deleted secondary email.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSecondaryEmailDeleted(Tag _tag, SecondaryEmailDeletedType secondaryEmailDeletedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.secondaryEmailDeletedValue = secondaryEmailDeletedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param secondaryEmailVerifiedValue  (members) Verified secondary email.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSecondaryEmailVerified(Tag _tag, SecondaryEmailVerifiedType secondaryEmailVerifiedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.secondaryEmailVerifiedValue = secondaryEmailVerifiedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param secondaryMailsPolicyChangedValue  (members) Secondary mails policy
     *     changed. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSecondaryMailsPolicyChanged(Tag _tag, SecondaryMailsPolicyChangedType secondaryMailsPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.secondaryMailsPolicyChangedValue = secondaryMailsPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param binderAddPageValue  (paper) Added Binder page (deprecated,
     *     replaced by 'Edited files'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndBinderAddPage(Tag _tag, BinderAddPageType binderAddPageValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.binderAddPageValue = binderAddPageValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param binderAddSectionValue  (paper) Added Binder section (deprecated,
     *     replaced by 'Edited files'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndBinderAddSection(Tag _tag, BinderAddSectionType binderAddSectionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.binderAddSectionValue = binderAddSectionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param binderRemovePageValue  (paper) Removed Binder page (deprecated,
     *     replaced by 'Edited files'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndBinderRemovePage(Tag _tag, BinderRemovePageType binderRemovePageValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.binderRemovePageValue = binderRemovePageValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param binderRemoveSectionValue  (paper) Removed Binder section
     *     (deprecated, replaced by 'Edited files'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndBinderRemoveSection(Tag _tag, BinderRemoveSectionType binderRemoveSectionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.binderRemoveSectionValue = binderRemoveSectionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param binderRenamePageValue  (paper) Renamed Binder page (deprecated,
     *     replaced by 'Edited files'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndBinderRenamePage(Tag _tag, BinderRenamePageType binderRenamePageValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.binderRenamePageValue = binderRenamePageValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param binderRenameSectionValue  (paper) Renamed Binder section
     *     (deprecated, replaced by 'Edited files'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndBinderRenameSection(Tag _tag, BinderRenameSectionType binderRenameSectionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.binderRenameSectionValue = binderRenameSectionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param binderReorderPageValue  (paper) Reordered Binder page (deprecated,
     *     replaced by 'Edited files'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndBinderReorderPage(Tag _tag, BinderReorderPageType binderReorderPageValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.binderReorderPageValue = binderReorderPageValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param binderReorderSectionValue  (paper) Reordered Binder section
     *     (deprecated, replaced by 'Edited files'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndBinderReorderSection(Tag _tag, BinderReorderSectionType binderReorderSectionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.binderReorderSectionValue = binderReorderSectionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperContentAddMemberValue  (paper) Added users and/or groups to
     *     Paper doc/folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperContentAddMember(Tag _tag, PaperContentAddMemberType paperContentAddMemberValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperContentAddMemberValue = paperContentAddMemberValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperContentAddToFolderValue  (paper) Added Paper doc/folder to
     *     folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperContentAddToFolder(Tag _tag, PaperContentAddToFolderType paperContentAddToFolderValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperContentAddToFolderValue = paperContentAddToFolderValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperContentArchiveValue  (paper) Archived Paper doc/folder. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperContentArchive(Tag _tag, PaperContentArchiveType paperContentArchiveValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperContentArchiveValue = paperContentArchiveValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperContentCreateValue  (paper) Created Paper doc/folder. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperContentCreate(Tag _tag, PaperContentCreateType paperContentCreateValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperContentCreateValue = paperContentCreateValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperContentPermanentlyDeleteValue  (paper) Permanently deleted
     *     Paper doc/folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperContentPermanentlyDelete(Tag _tag, PaperContentPermanentlyDeleteType paperContentPermanentlyDeleteValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperContentPermanentlyDeleteValue = paperContentPermanentlyDeleteValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperContentRemoveFromFolderValue  (paper) Removed Paper
     *     doc/folder from folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperContentRemoveFromFolder(Tag _tag, PaperContentRemoveFromFolderType paperContentRemoveFromFolderValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperContentRemoveFromFolderValue = paperContentRemoveFromFolderValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperContentRemoveMemberValue  (paper) Removed users and/or groups
     *     from Paper doc/folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperContentRemoveMember(Tag _tag, PaperContentRemoveMemberType paperContentRemoveMemberValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperContentRemoveMemberValue = paperContentRemoveMemberValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperContentRenameValue  (paper) Renamed Paper doc/folder. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperContentRename(Tag _tag, PaperContentRenameType paperContentRenameValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperContentRenameValue = paperContentRenameValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperContentRestoreValue  (paper) Restored archived Paper
     *     doc/folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperContentRestore(Tag _tag, PaperContentRestoreType paperContentRestoreValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperContentRestoreValue = paperContentRestoreValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocAddCommentValue  (paper) Added Paper doc comment. Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocAddComment(Tag _tag, PaperDocAddCommentType paperDocAddCommentValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocAddCommentValue = paperDocAddCommentValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocChangeMemberRoleValue  (paper) Changed member permissions
     *     for Paper doc. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocChangeMemberRole(Tag _tag, PaperDocChangeMemberRoleType paperDocChangeMemberRoleValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocChangeMemberRoleValue = paperDocChangeMemberRoleValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocChangeSharingPolicyValue  (paper) Changed sharing setting
     *     for Paper doc. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocChangeSharingPolicy(Tag _tag, PaperDocChangeSharingPolicyType paperDocChangeSharingPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocChangeSharingPolicyValue = paperDocChangeSharingPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocChangeSubscriptionValue  (paper) Followed/unfollowed Paper
     *     doc. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocChangeSubscription(Tag _tag, PaperDocChangeSubscriptionType paperDocChangeSubscriptionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocChangeSubscriptionValue = paperDocChangeSubscriptionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocDeletedValue  (paper) Archived Paper doc (deprecated, no
     *     longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocDeleted(Tag _tag, PaperDocDeletedType paperDocDeletedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocDeletedValue = paperDocDeletedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocDeleteCommentValue  (paper) Deleted Paper doc comment.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocDeleteComment(Tag _tag, PaperDocDeleteCommentType paperDocDeleteCommentValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocDeleteCommentValue = paperDocDeleteCommentValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocDownloadValue  (paper) Downloaded Paper doc in specific
     *     format. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocDownload(Tag _tag, PaperDocDownloadType paperDocDownloadValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocDownloadValue = paperDocDownloadValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocEditValue  (paper) Edited Paper doc. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocEdit(Tag _tag, PaperDocEditType paperDocEditValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocEditValue = paperDocEditValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocEditCommentValue  (paper) Edited Paper doc comment. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocEditComment(Tag _tag, PaperDocEditCommentType paperDocEditCommentValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocEditCommentValue = paperDocEditCommentValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocFollowedValue  (paper) Followed Paper doc (deprecated,
     *     replaced by 'Followed/unfollowed Paper doc'). Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocFollowed(Tag _tag, PaperDocFollowedType paperDocFollowedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocFollowedValue = paperDocFollowedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocMentionValue  (paper) Mentioned user in Paper doc. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocMention(Tag _tag, PaperDocMentionType paperDocMentionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocMentionValue = paperDocMentionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocOwnershipChangedValue  (paper) Transferred ownership of
     *     Paper doc. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocOwnershipChanged(Tag _tag, PaperDocOwnershipChangedType paperDocOwnershipChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocOwnershipChangedValue = paperDocOwnershipChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocRequestAccessValue  (paper) Requested access to Paper doc.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocRequestAccess(Tag _tag, PaperDocRequestAccessType paperDocRequestAccessValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocRequestAccessValue = paperDocRequestAccessValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocResolveCommentValue  (paper) Resolved Paper doc comment.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocResolveComment(Tag _tag, PaperDocResolveCommentType paperDocResolveCommentValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocResolveCommentValue = paperDocResolveCommentValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocRevertValue  (paper) Restored Paper doc to previous
     *     version. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocRevert(Tag _tag, PaperDocRevertType paperDocRevertValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocRevertValue = paperDocRevertValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocSlackShareValue  (paper) Shared Paper doc via Slack. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocSlackShare(Tag _tag, PaperDocSlackShareType paperDocSlackShareValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocSlackShareValue = paperDocSlackShareValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocTeamInviteValue  (paper) Shared Paper doc with users
     *     and/or groups (deprecated, no longer logged). Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocTeamInvite(Tag _tag, PaperDocTeamInviteType paperDocTeamInviteValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocTeamInviteValue = paperDocTeamInviteValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocTrashedValue  (paper) Deleted Paper doc. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocTrashed(Tag _tag, PaperDocTrashedType paperDocTrashedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocTrashedValue = paperDocTrashedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocUnresolveCommentValue  (paper) Unresolved Paper doc
     *     comment. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocUnresolveComment(Tag _tag, PaperDocUnresolveCommentType paperDocUnresolveCommentValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocUnresolveCommentValue = paperDocUnresolveCommentValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocUntrashedValue  (paper) Restored Paper doc. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocUntrashed(Tag _tag, PaperDocUntrashedType paperDocUntrashedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocUntrashedValue = paperDocUntrashedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDocViewValue  (paper) Viewed Paper doc. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDocView(Tag _tag, PaperDocViewType paperDocViewValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDocViewValue = paperDocViewValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperExternalViewAllowValue  (paper) Changed Paper external
     *     sharing setting to anyone (deprecated, no longer logged). Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperExternalViewAllow(Tag _tag, PaperExternalViewAllowType paperExternalViewAllowValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperExternalViewAllowValue = paperExternalViewAllowValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperExternalViewDefaultTeamValue  (paper) Changed Paper external
     *     sharing setting to default team (deprecated, no longer logged). Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperExternalViewDefaultTeam(Tag _tag, PaperExternalViewDefaultTeamType paperExternalViewDefaultTeamValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperExternalViewDefaultTeamValue = paperExternalViewDefaultTeamValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperExternalViewForbidValue  (paper) Changed Paper external
     *     sharing setting to team-only (deprecated, no longer logged). Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperExternalViewForbid(Tag _tag, PaperExternalViewForbidType paperExternalViewForbidValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperExternalViewForbidValue = paperExternalViewForbidValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperFolderChangeSubscriptionValue  (paper) Followed/unfollowed
     *     Paper folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperFolderChangeSubscription(Tag _tag, PaperFolderChangeSubscriptionType paperFolderChangeSubscriptionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperFolderChangeSubscriptionValue = paperFolderChangeSubscriptionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperFolderDeletedValue  (paper) Archived Paper folder
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperFolderDeleted(Tag _tag, PaperFolderDeletedType paperFolderDeletedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperFolderDeletedValue = paperFolderDeletedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperFolderFollowedValue  (paper) Followed Paper folder
     *     (deprecated, replaced by 'Followed/unfollowed Paper folder'). Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperFolderFollowed(Tag _tag, PaperFolderFollowedType paperFolderFollowedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperFolderFollowedValue = paperFolderFollowedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperFolderTeamInviteValue  (paper) Shared Paper folder with users
     *     and/or groups (deprecated, no longer logged). Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperFolderTeamInvite(Tag _tag, PaperFolderTeamInviteType paperFolderTeamInviteValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperFolderTeamInviteValue = paperFolderTeamInviteValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperPublishedLinkChangePermissionValue  (paper) Changed
     *     permissions for published doc. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperPublishedLinkChangePermission(Tag _tag, PaperPublishedLinkChangePermissionType paperPublishedLinkChangePermissionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperPublishedLinkChangePermissionValue = paperPublishedLinkChangePermissionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperPublishedLinkCreateValue  (paper) Published doc. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperPublishedLinkCreate(Tag _tag, PaperPublishedLinkCreateType paperPublishedLinkCreateValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperPublishedLinkCreateValue = paperPublishedLinkCreateValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperPublishedLinkDisabledValue  (paper) Unpublished doc. Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperPublishedLinkDisabled(Tag _tag, PaperPublishedLinkDisabledType paperPublishedLinkDisabledValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperPublishedLinkDisabledValue = paperPublishedLinkDisabledValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperPublishedLinkViewValue  (paper) Viewed published doc. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperPublishedLinkView(Tag _tag, PaperPublishedLinkViewType paperPublishedLinkViewValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperPublishedLinkViewValue = paperPublishedLinkViewValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param passwordChangeValue  (passwords) Changed password. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPasswordChange(Tag _tag, PasswordChangeType passwordChangeValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.passwordChangeValue = passwordChangeValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param passwordResetValue  (passwords) Reset password. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPasswordReset(Tag _tag, PasswordResetType passwordResetValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.passwordResetValue = passwordResetValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param passwordResetAllValue  (passwords) Reset all team member
     *     passwords. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPasswordResetAll(Tag _tag, PasswordResetAllType passwordResetAllValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.passwordResetAllValue = passwordResetAllValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param classificationCreateReportValue  (reports) Created Classification
     *     report. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndClassificationCreateReport(Tag _tag, ClassificationCreateReportType classificationCreateReportValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.classificationCreateReportValue = classificationCreateReportValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param classificationCreateReportFailValue  (reports) Couldn't create
     *     Classification report. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndClassificationCreateReportFail(Tag _tag, ClassificationCreateReportFailType classificationCreateReportFailValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.classificationCreateReportFailValue = classificationCreateReportFailValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param emmCreateExceptionsReportValue  (reports) Created EMM-excluded
     *     users report. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndEmmCreateExceptionsReport(Tag _tag, EmmCreateExceptionsReportType emmCreateExceptionsReportValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.emmCreateExceptionsReportValue = emmCreateExceptionsReportValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param emmCreateUsageReportValue  (reports) Created EMM mobile app usage
     *     report. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndEmmCreateUsageReport(Tag _tag, EmmCreateUsageReportType emmCreateUsageReportValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.emmCreateUsageReportValue = emmCreateUsageReportValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param exportMembersReportValue  (reports) Created member data report.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndExportMembersReport(Tag _tag, ExportMembersReportType exportMembersReportValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.exportMembersReportValue = exportMembersReportValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param exportMembersReportFailValue  (reports) Failed to create members
     *     data report. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndExportMembersReportFail(Tag _tag, ExportMembersReportFailType exportMembersReportFailValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.exportMembersReportFailValue = exportMembersReportFailValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param externalSharingCreateReportValue  (reports) Created External
     *     sharing report. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndExternalSharingCreateReport(Tag _tag, ExternalSharingCreateReportType externalSharingCreateReportValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.externalSharingCreateReportValue = externalSharingCreateReportValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param externalSharingReportFailedValue  (reports) Couldn't create
     *     External sharing report. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndExternalSharingReportFailed(Tag _tag, ExternalSharingReportFailedType externalSharingReportFailedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.externalSharingReportFailedValue = externalSharingReportFailedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param noExpirationLinkGenCreateReportValue  (reports) Report created:
     *     Links created with no expiration. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndNoExpirationLinkGenCreateReport(Tag _tag, NoExpirationLinkGenCreateReportType noExpirationLinkGenCreateReportValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.noExpirationLinkGenCreateReportValue = noExpirationLinkGenCreateReportValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param noExpirationLinkGenReportFailedValue  (reports) Couldn't create
     *     report: Links created with no expiration. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndNoExpirationLinkGenReportFailed(Tag _tag, NoExpirationLinkGenReportFailedType noExpirationLinkGenReportFailedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.noExpirationLinkGenReportFailedValue = noExpirationLinkGenReportFailedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param noPasswordLinkGenCreateReportValue  (reports) Report created:
     *     Links created without passwords. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndNoPasswordLinkGenCreateReport(Tag _tag, NoPasswordLinkGenCreateReportType noPasswordLinkGenCreateReportValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.noPasswordLinkGenCreateReportValue = noPasswordLinkGenCreateReportValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param noPasswordLinkGenReportFailedValue  (reports) Couldn't create
     *     report: Links created without passwords. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndNoPasswordLinkGenReportFailed(Tag _tag, NoPasswordLinkGenReportFailedType noPasswordLinkGenReportFailedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.noPasswordLinkGenReportFailedValue = noPasswordLinkGenReportFailedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param noPasswordLinkViewCreateReportValue  (reports) Report created:
     *     Views of links without passwords. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndNoPasswordLinkViewCreateReport(Tag _tag, NoPasswordLinkViewCreateReportType noPasswordLinkViewCreateReportValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.noPasswordLinkViewCreateReportValue = noPasswordLinkViewCreateReportValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param noPasswordLinkViewReportFailedValue  (reports) Couldn't create
     *     report: Views of links without passwords. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndNoPasswordLinkViewReportFailed(Tag _tag, NoPasswordLinkViewReportFailedType noPasswordLinkViewReportFailedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.noPasswordLinkViewReportFailedValue = noPasswordLinkViewReportFailedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param outdatedLinkViewCreateReportValue  (reports) Report created: Views
     *     of old links. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndOutdatedLinkViewCreateReport(Tag _tag, OutdatedLinkViewCreateReportType outdatedLinkViewCreateReportValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.outdatedLinkViewCreateReportValue = outdatedLinkViewCreateReportValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param outdatedLinkViewReportFailedValue  (reports) Couldn't create
     *     report: Views of old links. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndOutdatedLinkViewReportFailed(Tag _tag, OutdatedLinkViewReportFailedType outdatedLinkViewReportFailedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.outdatedLinkViewReportFailedValue = outdatedLinkViewReportFailedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperAdminExportStartValue  (reports) Exported all team Paper
     *     docs. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperAdminExportStart(Tag _tag, PaperAdminExportStartType paperAdminExportStartValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperAdminExportStartValue = paperAdminExportStartValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param smartSyncCreateAdminPrivilegeReportValue  (reports) Created Smart
     *     Sync non-admin devices report. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSmartSyncCreateAdminPrivilegeReport(Tag _tag, SmartSyncCreateAdminPrivilegeReportType smartSyncCreateAdminPrivilegeReportValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.smartSyncCreateAdminPrivilegeReportValue = smartSyncCreateAdminPrivilegeReportValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamActivityCreateReportValue  (reports) Created team activity
     *     report. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamActivityCreateReport(Tag _tag, TeamActivityCreateReportType teamActivityCreateReportValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamActivityCreateReportValue = teamActivityCreateReportValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamActivityCreateReportFailValue  (reports) Couldn't generate
     *     team activity report. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamActivityCreateReportFail(Tag _tag, TeamActivityCreateReportFailType teamActivityCreateReportFailValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamActivityCreateReportFailValue = teamActivityCreateReportFailValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param collectionShareValue  (sharing) Shared album. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndCollectionShare(Tag _tag, CollectionShareType collectionShareValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.collectionShareValue = collectionShareValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileTransfersFileAddValue  (sharing) Transfer files added. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileTransfersFileAdd(Tag _tag, FileTransfersFileAddType fileTransfersFileAddValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileTransfersFileAddValue = fileTransfersFileAddValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileTransfersTransferDeleteValue  (sharing) Deleted transfer. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileTransfersTransferDelete(Tag _tag, FileTransfersTransferDeleteType fileTransfersTransferDeleteValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileTransfersTransferDeleteValue = fileTransfersTransferDeleteValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileTransfersTransferDownloadValue  (sharing) Transfer downloaded.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileTransfersTransferDownload(Tag _tag, FileTransfersTransferDownloadType fileTransfersTransferDownloadValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileTransfersTransferDownloadValue = fileTransfersTransferDownloadValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileTransfersTransferSendValue  (sharing) Sent transfer. Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileTransfersTransferSend(Tag _tag, FileTransfersTransferSendType fileTransfersTransferSendValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileTransfersTransferSendValue = fileTransfersTransferSendValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileTransfersTransferViewValue  (sharing) Viewed transfer. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileTransfersTransferView(Tag _tag, FileTransfersTransferViewType fileTransfersTransferViewValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileTransfersTransferViewValue = fileTransfersTransferViewValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param noteAclInviteOnlyValue  (sharing) Changed Paper doc to invite-only
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndNoteAclInviteOnly(Tag _tag, NoteAclInviteOnlyType noteAclInviteOnlyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.noteAclInviteOnlyValue = noteAclInviteOnlyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param noteAclLinkValue  (sharing) Changed Paper doc to link-accessible
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndNoteAclLink(Tag _tag, NoteAclLinkType noteAclLinkValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.noteAclLinkValue = noteAclLinkValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param noteAclTeamLinkValue  (sharing) Changed Paper doc to
     *     link-accessible for team (deprecated, no longer logged). Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndNoteAclTeamLink(Tag _tag, NoteAclTeamLinkType noteAclTeamLinkValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.noteAclTeamLinkValue = noteAclTeamLinkValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param noteSharedValue  (sharing) Shared Paper doc (deprecated, no longer
     *     logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndNoteShared(Tag _tag, NoteSharedType noteSharedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.noteSharedValue = noteSharedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param noteShareReceiveValue  (sharing) Shared received Paper doc
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndNoteShareReceive(Tag _tag, NoteShareReceiveType noteShareReceiveValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.noteShareReceiveValue = noteShareReceiveValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param openNoteSharedValue  (sharing) Opened shared Paper doc
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndOpenNoteShared(Tag _tag, OpenNoteSharedType openNoteSharedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.openNoteSharedValue = openNoteSharedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sfAddGroupValue  (sharing) Added team to shared folder
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSfAddGroup(Tag _tag, SfAddGroupType sfAddGroupValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sfAddGroupValue = sfAddGroupValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sfAllowNonMembersToViewSharedLinksValue  (sharing) Allowed
     *     non-collaborators to view links to files in shared folder
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSfAllowNonMembersToViewSharedLinks(Tag _tag, SfAllowNonMembersToViewSharedLinksType sfAllowNonMembersToViewSharedLinksValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sfAllowNonMembersToViewSharedLinksValue = sfAllowNonMembersToViewSharedLinksValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sfExternalInviteWarnValue  (sharing) Set team members to see
     *     warning before sharing folders outside team (deprecated, no longer
     *     logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSfExternalInviteWarn(Tag _tag, SfExternalInviteWarnType sfExternalInviteWarnValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sfExternalInviteWarnValue = sfExternalInviteWarnValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sfFbInviteValue  (sharing) Invited Facebook users to shared folder
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSfFbInvite(Tag _tag, SfFbInviteType sfFbInviteValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sfFbInviteValue = sfFbInviteValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sfFbInviteChangeRoleValue  (sharing) Changed Facebook user's role
     *     in shared folder (deprecated, no longer logged). Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSfFbInviteChangeRole(Tag _tag, SfFbInviteChangeRoleType sfFbInviteChangeRoleValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sfFbInviteChangeRoleValue = sfFbInviteChangeRoleValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sfFbUninviteValue  (sharing) Uninvited Facebook user from shared
     *     folder (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSfFbUninvite(Tag _tag, SfFbUninviteType sfFbUninviteValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sfFbUninviteValue = sfFbUninviteValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sfInviteGroupValue  (sharing) Invited group to shared folder
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSfInviteGroup(Tag _tag, SfInviteGroupType sfInviteGroupValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sfInviteGroupValue = sfInviteGroupValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sfTeamGrantAccessValue  (sharing) Granted access to shared folder
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSfTeamGrantAccess(Tag _tag, SfTeamGrantAccessType sfTeamGrantAccessValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sfTeamGrantAccessValue = sfTeamGrantAccessValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sfTeamInviteValue  (sharing) Invited team members to shared folder
     *     (deprecated, replaced by 'Invited user to Dropbox and added them to
     *     shared file/folder'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSfTeamInvite(Tag _tag, SfTeamInviteType sfTeamInviteValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sfTeamInviteValue = sfTeamInviteValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sfTeamInviteChangeRoleValue  (sharing) Changed team member's role
     *     in shared folder (deprecated, no longer logged). Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSfTeamInviteChangeRole(Tag _tag, SfTeamInviteChangeRoleType sfTeamInviteChangeRoleValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sfTeamInviteChangeRoleValue = sfTeamInviteChangeRoleValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sfTeamJoinValue  (sharing) Joined team member's shared folder
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSfTeamJoin(Tag _tag, SfTeamJoinType sfTeamJoinValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sfTeamJoinValue = sfTeamJoinValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sfTeamJoinFromOobLinkValue  (sharing) Joined team member's shared
     *     folder from link (deprecated, no longer logged). Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSfTeamJoinFromOobLink(Tag _tag, SfTeamJoinFromOobLinkType sfTeamJoinFromOobLinkValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sfTeamJoinFromOobLinkValue = sfTeamJoinFromOobLinkValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sfTeamUninviteValue  (sharing) Unshared folder with team member
     *     (deprecated, replaced by 'Removed invitee from shared file/folder
     *     before invite was accepted'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSfTeamUninvite(Tag _tag, SfTeamUninviteType sfTeamUninviteValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sfTeamUninviteValue = sfTeamUninviteValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentAddInviteesValue  (sharing) Invited user to Dropbox
     *     and added them to shared file/folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentAddInvitees(Tag _tag, SharedContentAddInviteesType sharedContentAddInviteesValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentAddInviteesValue = sharedContentAddInviteesValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentAddLinkExpiryValue  (sharing) Added expiration date
     *     to link for shared file/folder (deprecated, no longer logged). Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentAddLinkExpiry(Tag _tag, SharedContentAddLinkExpiryType sharedContentAddLinkExpiryValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentAddLinkExpiryValue = sharedContentAddLinkExpiryValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentAddLinkPasswordValue  (sharing) Added password to
     *     link for shared file/folder (deprecated, no longer logged). Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentAddLinkPassword(Tag _tag, SharedContentAddLinkPasswordType sharedContentAddLinkPasswordValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentAddLinkPasswordValue = sharedContentAddLinkPasswordValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentAddMemberValue  (sharing) Added users and/or groups
     *     to shared file/folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentAddMember(Tag _tag, SharedContentAddMemberType sharedContentAddMemberValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentAddMemberValue = sharedContentAddMemberValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentChangeDownloadsPolicyValue  (sharing) Changed whether
     *     members can download shared file/folder (deprecated, no longer
     *     logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentChangeDownloadsPolicy(Tag _tag, SharedContentChangeDownloadsPolicyType sharedContentChangeDownloadsPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentChangeDownloadsPolicyValue = sharedContentChangeDownloadsPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentChangeInviteeRoleValue  (sharing) Changed access type
     *     of invitee to shared file/folder before invite was accepted. Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentChangeInviteeRole(Tag _tag, SharedContentChangeInviteeRoleType sharedContentChangeInviteeRoleValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentChangeInviteeRoleValue = sharedContentChangeInviteeRoleValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentChangeLinkAudienceValue  (sharing) Changed link
     *     audience of shared file/folder (deprecated, no longer logged). Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentChangeLinkAudience(Tag _tag, SharedContentChangeLinkAudienceType sharedContentChangeLinkAudienceValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentChangeLinkAudienceValue = sharedContentChangeLinkAudienceValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentChangeLinkExpiryValue  (sharing) Changed link
     *     expiration of shared file/folder (deprecated, no longer logged). Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentChangeLinkExpiry(Tag _tag, SharedContentChangeLinkExpiryType sharedContentChangeLinkExpiryValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentChangeLinkExpiryValue = sharedContentChangeLinkExpiryValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentChangeLinkPasswordValue  (sharing) Changed link
     *     password of shared file/folder (deprecated, no longer logged). Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentChangeLinkPassword(Tag _tag, SharedContentChangeLinkPasswordType sharedContentChangeLinkPasswordValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentChangeLinkPasswordValue = sharedContentChangeLinkPasswordValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentChangeMemberRoleValue  (sharing) Changed access type
     *     of shared file/folder member. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentChangeMemberRole(Tag _tag, SharedContentChangeMemberRoleType sharedContentChangeMemberRoleValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentChangeMemberRoleValue = sharedContentChangeMemberRoleValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentChangeViewerInfoPolicyValue  (sharing) Changed
     *     whether members can see who viewed shared file/folder. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentChangeViewerInfoPolicy(Tag _tag, SharedContentChangeViewerInfoPolicyType sharedContentChangeViewerInfoPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentChangeViewerInfoPolicyValue = sharedContentChangeViewerInfoPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentClaimInvitationValue  (sharing) Acquired membership
     *     of shared file/folder by accepting invite. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentClaimInvitation(Tag _tag, SharedContentClaimInvitationType sharedContentClaimInvitationValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentClaimInvitationValue = sharedContentClaimInvitationValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentCopyValue  (sharing) Copied shared file/folder to own
     *     Dropbox. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentCopy(Tag _tag, SharedContentCopyType sharedContentCopyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentCopyValue = sharedContentCopyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentDownloadValue  (sharing) Downloaded shared
     *     file/folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentDownload(Tag _tag, SharedContentDownloadType sharedContentDownloadValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentDownloadValue = sharedContentDownloadValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentRelinquishMembershipValue  (sharing) Left shared
     *     file/folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentRelinquishMembership(Tag _tag, SharedContentRelinquishMembershipType sharedContentRelinquishMembershipValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentRelinquishMembershipValue = sharedContentRelinquishMembershipValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentRemoveInviteesValue  (sharing) Removed invitee from
     *     shared file/folder before invite was accepted. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentRemoveInvitees(Tag _tag, SharedContentRemoveInviteesType sharedContentRemoveInviteesValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentRemoveInviteesValue = sharedContentRemoveInviteesValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentRemoveLinkExpiryValue  (sharing) Removed link
     *     expiration date of shared file/folder (deprecated, no longer logged).
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentRemoveLinkExpiry(Tag _tag, SharedContentRemoveLinkExpiryType sharedContentRemoveLinkExpiryValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentRemoveLinkExpiryValue = sharedContentRemoveLinkExpiryValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentRemoveLinkPasswordValue  (sharing) Removed link
     *     password of shared file/folder (deprecated, no longer logged). Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentRemoveLinkPassword(Tag _tag, SharedContentRemoveLinkPasswordType sharedContentRemoveLinkPasswordValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentRemoveLinkPasswordValue = sharedContentRemoveLinkPasswordValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentRemoveMemberValue  (sharing) Removed user/group from
     *     shared file/folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentRemoveMember(Tag _tag, SharedContentRemoveMemberType sharedContentRemoveMemberValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentRemoveMemberValue = sharedContentRemoveMemberValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentRequestAccessValue  (sharing) Requested access to
     *     shared file/folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentRequestAccess(Tag _tag, SharedContentRequestAccessType sharedContentRequestAccessValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentRequestAccessValue = sharedContentRequestAccessValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentRestoreInviteesValue  (sharing) Restored shared
     *     file/folder invitees. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentRestoreInvitees(Tag _tag, SharedContentRestoreInviteesType sharedContentRestoreInviteesValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentRestoreInviteesValue = sharedContentRestoreInviteesValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentRestoreMemberValue  (sharing) Restored users and/or
     *     groups to membership of shared file/folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentRestoreMember(Tag _tag, SharedContentRestoreMemberType sharedContentRestoreMemberValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentRestoreMemberValue = sharedContentRestoreMemberValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentUnshareValue  (sharing) Unshared file/folder by
     *     clearing membership. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentUnshare(Tag _tag, SharedContentUnshareType sharedContentUnshareValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentUnshareValue = sharedContentUnshareValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedContentViewValue  (sharing) Previewed shared file/folder.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedContentView(Tag _tag, SharedContentViewType sharedContentViewValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedContentViewValue = sharedContentViewValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedFolderChangeLinkPolicyValue  (sharing) Changed who can
     *     access shared folder via link. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedFolderChangeLinkPolicy(Tag _tag, SharedFolderChangeLinkPolicyType sharedFolderChangeLinkPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedFolderChangeLinkPolicyValue = sharedFolderChangeLinkPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedFolderChangeMembersInheritancePolicyValue  (sharing) Changed
     *     whether shared folder inherits members from parent folder. Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedFolderChangeMembersInheritancePolicy(Tag _tag, SharedFolderChangeMembersInheritancePolicyType sharedFolderChangeMembersInheritancePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedFolderChangeMembersInheritancePolicyValue = sharedFolderChangeMembersInheritancePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedFolderChangeMembersManagementPolicyValue  (sharing) Changed
     *     who can add/remove members of shared folder. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedFolderChangeMembersManagementPolicy(Tag _tag, SharedFolderChangeMembersManagementPolicyType sharedFolderChangeMembersManagementPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedFolderChangeMembersManagementPolicyValue = sharedFolderChangeMembersManagementPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedFolderChangeMembersPolicyValue  (sharing) Changed who can
     *     become member of shared folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedFolderChangeMembersPolicy(Tag _tag, SharedFolderChangeMembersPolicyType sharedFolderChangeMembersPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedFolderChangeMembersPolicyValue = sharedFolderChangeMembersPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedFolderCreateValue  (sharing) Created shared folder. Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedFolderCreate(Tag _tag, SharedFolderCreateType sharedFolderCreateValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedFolderCreateValue = sharedFolderCreateValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedFolderDeclineInvitationValue  (sharing) Declined team
     *     member's invite to shared folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedFolderDeclineInvitation(Tag _tag, SharedFolderDeclineInvitationType sharedFolderDeclineInvitationValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedFolderDeclineInvitationValue = sharedFolderDeclineInvitationValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedFolderMountValue  (sharing) Added shared folder to own
     *     Dropbox. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedFolderMount(Tag _tag, SharedFolderMountType sharedFolderMountValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedFolderMountValue = sharedFolderMountValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedFolderNestValue  (sharing) Changed parent of shared folder.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedFolderNest(Tag _tag, SharedFolderNestType sharedFolderNestValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedFolderNestValue = sharedFolderNestValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedFolderTransferOwnershipValue  (sharing) Transferred
     *     ownership of shared folder to another member. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedFolderTransferOwnership(Tag _tag, SharedFolderTransferOwnershipType sharedFolderTransferOwnershipValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedFolderTransferOwnershipValue = sharedFolderTransferOwnershipValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedFolderUnmountValue  (sharing) Deleted shared folder from
     *     Dropbox. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedFolderUnmount(Tag _tag, SharedFolderUnmountType sharedFolderUnmountValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedFolderUnmountValue = sharedFolderUnmountValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedLinkAddExpiryValue  (sharing) Added shared link expiration
     *     date. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedLinkAddExpiry(Tag _tag, SharedLinkAddExpiryType sharedLinkAddExpiryValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedLinkAddExpiryValue = sharedLinkAddExpiryValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedLinkChangeExpiryValue  (sharing) Changed shared link
     *     expiration date. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedLinkChangeExpiry(Tag _tag, SharedLinkChangeExpiryType sharedLinkChangeExpiryValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedLinkChangeExpiryValue = sharedLinkChangeExpiryValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedLinkChangeVisibilityValue  (sharing) Changed visibility of
     *     shared link. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedLinkChangeVisibility(Tag _tag, SharedLinkChangeVisibilityType sharedLinkChangeVisibilityValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedLinkChangeVisibilityValue = sharedLinkChangeVisibilityValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedLinkCopyValue  (sharing) Added file/folder to Dropbox from
     *     shared link. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedLinkCopy(Tag _tag, SharedLinkCopyType sharedLinkCopyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedLinkCopyValue = sharedLinkCopyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedLinkCreateValue  (sharing) Created shared link. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedLinkCreate(Tag _tag, SharedLinkCreateType sharedLinkCreateValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedLinkCreateValue = sharedLinkCreateValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedLinkDisableValue  (sharing) Removed shared link. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedLinkDisable(Tag _tag, SharedLinkDisableType sharedLinkDisableValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedLinkDisableValue = sharedLinkDisableValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedLinkDownloadValue  (sharing) Downloaded file/folder from
     *     shared link. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedLinkDownload(Tag _tag, SharedLinkDownloadType sharedLinkDownloadValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedLinkDownloadValue = sharedLinkDownloadValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedLinkRemoveExpiryValue  (sharing) Removed shared link
     *     expiration date. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedLinkRemoveExpiry(Tag _tag, SharedLinkRemoveExpiryType sharedLinkRemoveExpiryValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedLinkRemoveExpiryValue = sharedLinkRemoveExpiryValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedLinkSettingsAddExpirationValue  (sharing) Added an
     *     expiration date to the shared link. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedLinkSettingsAddExpiration(Tag _tag, SharedLinkSettingsAddExpirationType sharedLinkSettingsAddExpirationValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedLinkSettingsAddExpirationValue = sharedLinkSettingsAddExpirationValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedLinkSettingsAddPasswordValue  (sharing) Added a password to
     *     the shared link. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedLinkSettingsAddPassword(Tag _tag, SharedLinkSettingsAddPasswordType sharedLinkSettingsAddPasswordValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedLinkSettingsAddPasswordValue = sharedLinkSettingsAddPasswordValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedLinkSettingsAllowDownloadDisabledValue  (sharing) Disabled
     *     downloads. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedLinkSettingsAllowDownloadDisabled(Tag _tag, SharedLinkSettingsAllowDownloadDisabledType sharedLinkSettingsAllowDownloadDisabledValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedLinkSettingsAllowDownloadDisabledValue = sharedLinkSettingsAllowDownloadDisabledValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedLinkSettingsAllowDownloadEnabledValue  (sharing) Enabled
     *     downloads. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedLinkSettingsAllowDownloadEnabled(Tag _tag, SharedLinkSettingsAllowDownloadEnabledType sharedLinkSettingsAllowDownloadEnabledValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedLinkSettingsAllowDownloadEnabledValue = sharedLinkSettingsAllowDownloadEnabledValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedLinkSettingsChangeAudienceValue  (sharing) Changed the
     *     audience of the shared link. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedLinkSettingsChangeAudience(Tag _tag, SharedLinkSettingsChangeAudienceType sharedLinkSettingsChangeAudienceValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedLinkSettingsChangeAudienceValue = sharedLinkSettingsChangeAudienceValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedLinkSettingsChangeExpirationValue  (sharing) Changed the
     *     expiration date of the shared link. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedLinkSettingsChangeExpiration(Tag _tag, SharedLinkSettingsChangeExpirationType sharedLinkSettingsChangeExpirationValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedLinkSettingsChangeExpirationValue = sharedLinkSettingsChangeExpirationValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedLinkSettingsChangePasswordValue  (sharing) Changed the
     *     password of the shared link. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedLinkSettingsChangePassword(Tag _tag, SharedLinkSettingsChangePasswordType sharedLinkSettingsChangePasswordValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedLinkSettingsChangePasswordValue = sharedLinkSettingsChangePasswordValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedLinkSettingsRemoveExpirationValue  (sharing) Removed the
     *     expiration date from the shared link. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedLinkSettingsRemoveExpiration(Tag _tag, SharedLinkSettingsRemoveExpirationType sharedLinkSettingsRemoveExpirationValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedLinkSettingsRemoveExpirationValue = sharedLinkSettingsRemoveExpirationValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedLinkSettingsRemovePasswordValue  (sharing) Removed the
     *     password from the shared link. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedLinkSettingsRemovePassword(Tag _tag, SharedLinkSettingsRemovePasswordType sharedLinkSettingsRemovePasswordValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedLinkSettingsRemovePasswordValue = sharedLinkSettingsRemovePasswordValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedLinkShareValue  (sharing) Added members as audience of
     *     shared link. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedLinkShare(Tag _tag, SharedLinkShareType sharedLinkShareValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedLinkShareValue = sharedLinkShareValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedLinkViewValue  (sharing) Opened shared link. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedLinkView(Tag _tag, SharedLinkViewType sharedLinkViewValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedLinkViewValue = sharedLinkViewValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharedNoteOpenedValue  (sharing) Opened shared Paper doc
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharedNoteOpened(Tag _tag, SharedNoteOpenedType sharedNoteOpenedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharedNoteOpenedValue = sharedNoteOpenedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param shmodelDisableDownloadsValue  (sharing) Disabled downloads for
     *     link (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShmodelDisableDownloads(Tag _tag, ShmodelDisableDownloadsType shmodelDisableDownloadsValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.shmodelDisableDownloadsValue = shmodelDisableDownloadsValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param shmodelEnableDownloadsValue  (sharing) Enabled downloads for link
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShmodelEnableDownloads(Tag _tag, ShmodelEnableDownloadsType shmodelEnableDownloadsValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.shmodelEnableDownloadsValue = shmodelEnableDownloadsValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param shmodelGroupShareValue  (sharing) Shared link with group
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShmodelGroupShare(Tag _tag, ShmodelGroupShareType shmodelGroupShareValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.shmodelGroupShareValue = shmodelGroupShareValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseAccessGrantedValue  (showcase) Granted access to showcase.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseAccessGranted(Tag _tag, ShowcaseAccessGrantedType showcaseAccessGrantedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseAccessGrantedValue = showcaseAccessGrantedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseAddMemberValue  (showcase) Added member to showcase. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseAddMember(Tag _tag, ShowcaseAddMemberType showcaseAddMemberValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseAddMemberValue = showcaseAddMemberValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseArchivedValue  (showcase) Archived showcase. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseArchived(Tag _tag, ShowcaseArchivedType showcaseArchivedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseArchivedValue = showcaseArchivedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseCreatedValue  (showcase) Created showcase. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseCreated(Tag _tag, ShowcaseCreatedType showcaseCreatedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseCreatedValue = showcaseCreatedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseDeleteCommentValue  (showcase) Deleted showcase comment.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseDeleteComment(Tag _tag, ShowcaseDeleteCommentType showcaseDeleteCommentValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseDeleteCommentValue = showcaseDeleteCommentValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseEditedValue  (showcase) Edited showcase. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseEdited(Tag _tag, ShowcaseEditedType showcaseEditedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseEditedValue = showcaseEditedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseEditCommentValue  (showcase) Edited showcase comment. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseEditComment(Tag _tag, ShowcaseEditCommentType showcaseEditCommentValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseEditCommentValue = showcaseEditCommentValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseFileAddedValue  (showcase) Added file to showcase. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseFileAdded(Tag _tag, ShowcaseFileAddedType showcaseFileAddedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseFileAddedValue = showcaseFileAddedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseFileDownloadValue  (showcase) Downloaded file from
     *     showcase. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseFileDownload(Tag _tag, ShowcaseFileDownloadType showcaseFileDownloadValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseFileDownloadValue = showcaseFileDownloadValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseFileRemovedValue  (showcase) Removed file from showcase.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseFileRemoved(Tag _tag, ShowcaseFileRemovedType showcaseFileRemovedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseFileRemovedValue = showcaseFileRemovedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseFileViewValue  (showcase) Viewed file in showcase. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseFileView(Tag _tag, ShowcaseFileViewType showcaseFileViewValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseFileViewValue = showcaseFileViewValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcasePermanentlyDeletedValue  (showcase) Permanently deleted
     *     showcase. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcasePermanentlyDeleted(Tag _tag, ShowcasePermanentlyDeletedType showcasePermanentlyDeletedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcasePermanentlyDeletedValue = showcasePermanentlyDeletedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcasePostCommentValue  (showcase) Added showcase comment. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcasePostComment(Tag _tag, ShowcasePostCommentType showcasePostCommentValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcasePostCommentValue = showcasePostCommentValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseRemoveMemberValue  (showcase) Removed member from
     *     showcase. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseRemoveMember(Tag _tag, ShowcaseRemoveMemberType showcaseRemoveMemberValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseRemoveMemberValue = showcaseRemoveMemberValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseRenamedValue  (showcase) Renamed showcase. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseRenamed(Tag _tag, ShowcaseRenamedType showcaseRenamedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseRenamedValue = showcaseRenamedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseRequestAccessValue  (showcase) Requested access to
     *     showcase. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseRequestAccess(Tag _tag, ShowcaseRequestAccessType showcaseRequestAccessValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseRequestAccessValue = showcaseRequestAccessValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseResolveCommentValue  (showcase) Resolved showcase comment.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseResolveComment(Tag _tag, ShowcaseResolveCommentType showcaseResolveCommentValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseResolveCommentValue = showcaseResolveCommentValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseRestoredValue  (showcase) Unarchived showcase. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseRestored(Tag _tag, ShowcaseRestoredType showcaseRestoredValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseRestoredValue = showcaseRestoredValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseTrashedValue  (showcase) Deleted showcase. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseTrashed(Tag _tag, ShowcaseTrashedType showcaseTrashedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseTrashedValue = showcaseTrashedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseTrashedDeprecatedValue  (showcase) Deleted showcase (old
     *     version) (deprecated, replaced by 'Deleted showcase'). Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseTrashedDeprecated(Tag _tag, ShowcaseTrashedDeprecatedType showcaseTrashedDeprecatedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseTrashedDeprecatedValue = showcaseTrashedDeprecatedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseUnresolveCommentValue  (showcase) Unresolved showcase
     *     comment. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseUnresolveComment(Tag _tag, ShowcaseUnresolveCommentType showcaseUnresolveCommentValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseUnresolveCommentValue = showcaseUnresolveCommentValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseUntrashedValue  (showcase) Restored showcase. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseUntrashed(Tag _tag, ShowcaseUntrashedType showcaseUntrashedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseUntrashedValue = showcaseUntrashedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseUntrashedDeprecatedValue  (showcase) Restored showcase
     *     (old version) (deprecated, replaced by 'Restored showcase'). Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseUntrashedDeprecated(Tag _tag, ShowcaseUntrashedDeprecatedType showcaseUntrashedDeprecatedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseUntrashedDeprecatedValue = showcaseUntrashedDeprecatedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseViewValue  (showcase) Viewed showcase. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseView(Tag _tag, ShowcaseViewType showcaseViewValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseViewValue = showcaseViewValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param ssoAddCertValue  (sso) Added X.509 certificate for SSO. Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSsoAddCert(Tag _tag, SsoAddCertType ssoAddCertValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.ssoAddCertValue = ssoAddCertValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param ssoAddLoginUrlValue  (sso) Added sign-in URL for SSO. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSsoAddLoginUrl(Tag _tag, SsoAddLoginUrlType ssoAddLoginUrlValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.ssoAddLoginUrlValue = ssoAddLoginUrlValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param ssoAddLogoutUrlValue  (sso) Added sign-out URL for SSO. Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSsoAddLogoutUrl(Tag _tag, SsoAddLogoutUrlType ssoAddLogoutUrlValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.ssoAddLogoutUrlValue = ssoAddLogoutUrlValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param ssoChangeCertValue  (sso) Changed X.509 certificate for SSO. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSsoChangeCert(Tag _tag, SsoChangeCertType ssoChangeCertValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.ssoChangeCertValue = ssoChangeCertValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param ssoChangeLoginUrlValue  (sso) Changed sign-in URL for SSO. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSsoChangeLoginUrl(Tag _tag, SsoChangeLoginUrlType ssoChangeLoginUrlValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.ssoChangeLoginUrlValue = ssoChangeLoginUrlValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param ssoChangeLogoutUrlValue  (sso) Changed sign-out URL for SSO. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSsoChangeLogoutUrl(Tag _tag, SsoChangeLogoutUrlType ssoChangeLogoutUrlValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.ssoChangeLogoutUrlValue = ssoChangeLogoutUrlValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param ssoChangeSamlIdentityModeValue  (sso) Changed SAML identity mode
     *     for SSO. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSsoChangeSamlIdentityMode(Tag _tag, SsoChangeSamlIdentityModeType ssoChangeSamlIdentityModeValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.ssoChangeSamlIdentityModeValue = ssoChangeSamlIdentityModeValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param ssoRemoveCertValue  (sso) Removed X.509 certificate for SSO. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSsoRemoveCert(Tag _tag, SsoRemoveCertType ssoRemoveCertValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.ssoRemoveCertValue = ssoRemoveCertValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param ssoRemoveLoginUrlValue  (sso) Removed sign-in URL for SSO. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSsoRemoveLoginUrl(Tag _tag, SsoRemoveLoginUrlType ssoRemoveLoginUrlValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.ssoRemoveLoginUrlValue = ssoRemoveLoginUrlValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param ssoRemoveLogoutUrlValue  (sso) Removed sign-out URL for SSO. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSsoRemoveLogoutUrl(Tag _tag, SsoRemoveLogoutUrlType ssoRemoveLogoutUrlValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.ssoRemoveLogoutUrlValue = ssoRemoveLogoutUrlValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamFolderChangeStatusValue  (team_folders) Changed archival
     *     status of team folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamFolderChangeStatus(Tag _tag, TeamFolderChangeStatusType teamFolderChangeStatusValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamFolderChangeStatusValue = teamFolderChangeStatusValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamFolderCreateValue  (team_folders) Created team folder in
     *     active status. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamFolderCreate(Tag _tag, TeamFolderCreateType teamFolderCreateValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamFolderCreateValue = teamFolderCreateValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamFolderDowngradeValue  (team_folders) Downgraded team folder to
     *     regular shared folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamFolderDowngrade(Tag _tag, TeamFolderDowngradeType teamFolderDowngradeValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamFolderDowngradeValue = teamFolderDowngradeValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamFolderPermanentlyDeleteValue  (team_folders) Permanently
     *     deleted archived team folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamFolderPermanentlyDelete(Tag _tag, TeamFolderPermanentlyDeleteType teamFolderPermanentlyDeleteValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamFolderPermanentlyDeleteValue = teamFolderPermanentlyDeleteValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamFolderRenameValue  (team_folders) Renamed active/archived team
     *     folder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamFolderRename(Tag _tag, TeamFolderRenameType teamFolderRenameValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamFolderRenameValue = teamFolderRenameValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamSelectiveSyncSettingsChangedValue  (team_folders) Changed sync
     *     default. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamSelectiveSyncSettingsChanged(Tag _tag, TeamSelectiveSyncSettingsChangedType teamSelectiveSyncSettingsChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamSelectiveSyncSettingsChangedValue = teamSelectiveSyncSettingsChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param accountCaptureChangePolicyValue  (team_policies) Changed account
     *     capture setting on team domain. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndAccountCaptureChangePolicy(Tag _tag, AccountCaptureChangePolicyType accountCaptureChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.accountCaptureChangePolicyValue = accountCaptureChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param adminEmailRemindersChangedValue  (team_policies) Changed admin
     *     reminder settings for requests to join the team. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndAdminEmailRemindersChanged(Tag _tag, AdminEmailRemindersChangedType adminEmailRemindersChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.adminEmailRemindersChangedValue = adminEmailRemindersChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param allowDownloadDisabledValue  (team_policies) Disabled downloads
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndAllowDownloadDisabled(Tag _tag, AllowDownloadDisabledType allowDownloadDisabledValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.allowDownloadDisabledValue = allowDownloadDisabledValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param allowDownloadEnabledValue  (team_policies) Enabled downloads
     *     (deprecated, no longer logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndAllowDownloadEnabled(Tag _tag, AllowDownloadEnabledType allowDownloadEnabledValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.allowDownloadEnabledValue = allowDownloadEnabledValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param appPermissionsChangedValue  (team_policies) Changed app
     *     permissions. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndAppPermissionsChanged(Tag _tag, AppPermissionsChangedType appPermissionsChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.appPermissionsChangedValue = appPermissionsChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param cameraUploadsPolicyChangedValue  (team_policies) Changed camera
     *     uploads setting for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndCameraUploadsPolicyChanged(Tag _tag, CameraUploadsPolicyChangedType cameraUploadsPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.cameraUploadsPolicyChangedValue = cameraUploadsPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param captureTranscriptPolicyChangedValue  (team_policies) Changed
     *     Capture transcription policy for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndCaptureTranscriptPolicyChanged(Tag _tag, CaptureTranscriptPolicyChangedType captureTranscriptPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.captureTranscriptPolicyChangedValue = captureTranscriptPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param classificationChangePolicyValue  (team_policies) Changed
     *     classification policy for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndClassificationChangePolicy(Tag _tag, ClassificationChangePolicyType classificationChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.classificationChangePolicyValue = classificationChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param computerBackupPolicyChangedValue  (team_policies) Changed computer
     *     backup policy for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndComputerBackupPolicyChanged(Tag _tag, ComputerBackupPolicyChangedType computerBackupPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.computerBackupPolicyChangedValue = computerBackupPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param contentAdministrationPolicyChangedValue  (team_policies) Changed
     *     content management setting. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndContentAdministrationPolicyChanged(Tag _tag, ContentAdministrationPolicyChangedType contentAdministrationPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.contentAdministrationPolicyChangedValue = contentAdministrationPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param dataPlacementRestrictionChangePolicyValue  (team_policies) Set
     *     restrictions on data center locations where team data resides. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDataPlacementRestrictionChangePolicy(Tag _tag, DataPlacementRestrictionChangePolicyType dataPlacementRestrictionChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.dataPlacementRestrictionChangePolicyValue = dataPlacementRestrictionChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param dataPlacementRestrictionSatisfyPolicyValue  (team_policies)
     *     Completed restrictions on data center locations where team data
     *     resides. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDataPlacementRestrictionSatisfyPolicy(Tag _tag, DataPlacementRestrictionSatisfyPolicyType dataPlacementRestrictionSatisfyPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.dataPlacementRestrictionSatisfyPolicyValue = dataPlacementRestrictionSatisfyPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param deviceApprovalsAddExceptionValue  (team_policies) Added members to
     *     device approvals exception list. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDeviceApprovalsAddException(Tag _tag, DeviceApprovalsAddExceptionType deviceApprovalsAddExceptionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.deviceApprovalsAddExceptionValue = deviceApprovalsAddExceptionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param deviceApprovalsChangeDesktopPolicyValue  (team_policies)
     *     Set/removed limit on number of computers member can link to team
     *     Dropbox account. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDeviceApprovalsChangeDesktopPolicy(Tag _tag, DeviceApprovalsChangeDesktopPolicyType deviceApprovalsChangeDesktopPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.deviceApprovalsChangeDesktopPolicyValue = deviceApprovalsChangeDesktopPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param deviceApprovalsChangeMobilePolicyValue  (team_policies)
     *     Set/removed limit on number of mobile devices member can link to team
     *     Dropbox account. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDeviceApprovalsChangeMobilePolicy(Tag _tag, DeviceApprovalsChangeMobilePolicyType deviceApprovalsChangeMobilePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.deviceApprovalsChangeMobilePolicyValue = deviceApprovalsChangeMobilePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param deviceApprovalsChangeOverageActionValue  (team_policies) Changed
     *     device approvals setting when member is over limit. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDeviceApprovalsChangeOverageAction(Tag _tag, DeviceApprovalsChangeOverageActionType deviceApprovalsChangeOverageActionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.deviceApprovalsChangeOverageActionValue = deviceApprovalsChangeOverageActionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param deviceApprovalsChangeUnlinkActionValue  (team_policies) Changed
     *     device approvals setting when member unlinks approved device. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDeviceApprovalsChangeUnlinkAction(Tag _tag, DeviceApprovalsChangeUnlinkActionType deviceApprovalsChangeUnlinkActionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.deviceApprovalsChangeUnlinkActionValue = deviceApprovalsChangeUnlinkActionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param deviceApprovalsRemoveExceptionValue  (team_policies) Removed
     *     members from device approvals exception list. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDeviceApprovalsRemoveException(Tag _tag, DeviceApprovalsRemoveExceptionType deviceApprovalsRemoveExceptionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.deviceApprovalsRemoveExceptionValue = deviceApprovalsRemoveExceptionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param directoryRestrictionsAddMembersValue  (team_policies) Added
     *     members to directory restrictions list. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDirectoryRestrictionsAddMembers(Tag _tag, DirectoryRestrictionsAddMembersType directoryRestrictionsAddMembersValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.directoryRestrictionsAddMembersValue = directoryRestrictionsAddMembersValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param directoryRestrictionsRemoveMembersValue  (team_policies) Removed
     *     members from directory restrictions list. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDirectoryRestrictionsRemoveMembers(Tag _tag, DirectoryRestrictionsRemoveMembersType directoryRestrictionsRemoveMembersValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.directoryRestrictionsRemoveMembersValue = directoryRestrictionsRemoveMembersValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param dropboxPasswordsPolicyChangedValue  (team_policies) Changed
     *     Dropbox Passwords policy for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDropboxPasswordsPolicyChanged(Tag _tag, DropboxPasswordsPolicyChangedType dropboxPasswordsPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.dropboxPasswordsPolicyChangedValue = dropboxPasswordsPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param emailIngestPolicyChangedValue  (team_policies) Changed email to
     *     Dropbox policy for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndEmailIngestPolicyChanged(Tag _tag, EmailIngestPolicyChangedType emailIngestPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.emailIngestPolicyChangedValue = emailIngestPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param emmAddExceptionValue  (team_policies) Added members to EMM
     *     exception list. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndEmmAddException(Tag _tag, EmmAddExceptionType emmAddExceptionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.emmAddExceptionValue = emmAddExceptionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param emmChangePolicyValue  (team_policies) Enabled/disabled enterprise
     *     mobility management for members. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndEmmChangePolicy(Tag _tag, EmmChangePolicyType emmChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.emmChangePolicyValue = emmChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param emmRemoveExceptionValue  (team_policies) Removed members from EMM
     *     exception list. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndEmmRemoveException(Tag _tag, EmmRemoveExceptionType emmRemoveExceptionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.emmRemoveExceptionValue = emmRemoveExceptionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param extendedVersionHistoryChangePolicyValue  (team_policies)
     *     Accepted/opted out of extended version history. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndExtendedVersionHistoryChangePolicy(Tag _tag, ExtendedVersionHistoryChangePolicyType extendedVersionHistoryChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.extendedVersionHistoryChangePolicyValue = extendedVersionHistoryChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param externalDriveBackupPolicyChangedValue  (team_policies) Changed
     *     external drive backup policy for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndExternalDriveBackupPolicyChanged(Tag _tag, ExternalDriveBackupPolicyChangedType externalDriveBackupPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.externalDriveBackupPolicyChangedValue = externalDriveBackupPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileCommentsChangePolicyValue  (team_policies) Enabled/disabled
     *     commenting on team files. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileCommentsChangePolicy(Tag _tag, FileCommentsChangePolicyType fileCommentsChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileCommentsChangePolicyValue = fileCommentsChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileLockingPolicyChangedValue  (team_policies) Changed file
     *     locking policy for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileLockingPolicyChanged(Tag _tag, FileLockingPolicyChangedType fileLockingPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileLockingPolicyChangedValue = fileLockingPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileProviderMigrationPolicyChangedValue  (team_policies) Changed
     *     File Provider Migration policy for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileProviderMigrationPolicyChanged(Tag _tag, FileProviderMigrationPolicyChangedType fileProviderMigrationPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileProviderMigrationPolicyChangedValue = fileProviderMigrationPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileRequestsChangePolicyValue  (team_policies) Enabled/disabled
     *     file requests. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileRequestsChangePolicy(Tag _tag, FileRequestsChangePolicyType fileRequestsChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileRequestsChangePolicyValue = fileRequestsChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileRequestsEmailsEnabledValue  (team_policies) Enabled file
     *     request emails for everyone (deprecated, no longer logged). Must not
     *     be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileRequestsEmailsEnabled(Tag _tag, FileRequestsEmailsEnabledType fileRequestsEmailsEnabledValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileRequestsEmailsEnabledValue = fileRequestsEmailsEnabledValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileRequestsEmailsRestrictedToTeamOnlyValue  (team_policies)
     *     Enabled file request emails for team (deprecated, no longer logged).
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileRequestsEmailsRestrictedToTeamOnly(Tag _tag, FileRequestsEmailsRestrictedToTeamOnlyType fileRequestsEmailsRestrictedToTeamOnlyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileRequestsEmailsRestrictedToTeamOnlyValue = fileRequestsEmailsRestrictedToTeamOnlyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param fileTransfersPolicyChangedValue  (team_policies) Changed file
     *     transfers policy for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndFileTransfersPolicyChanged(Tag _tag, FileTransfersPolicyChangedType fileTransfersPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.fileTransfersPolicyChangedValue = fileTransfersPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param googleSsoChangePolicyValue  (team_policies) Enabled/disabled
     *     Google single sign-on for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGoogleSsoChangePolicy(Tag _tag, GoogleSsoChangePolicyType googleSsoChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.googleSsoChangePolicyValue = googleSsoChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param groupUserManagementChangePolicyValue  (team_policies) Changed who
     *     can create groups. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGroupUserManagementChangePolicy(Tag _tag, GroupUserManagementChangePolicyType groupUserManagementChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.groupUserManagementChangePolicyValue = groupUserManagementChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param integrationPolicyChangedValue  (team_policies) Changed integration
     *     policy for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndIntegrationPolicyChanged(Tag _tag, IntegrationPolicyChangedType integrationPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.integrationPolicyChangedValue = integrationPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param inviteAcceptanceEmailPolicyChangedValue  (team_policies) Changed
     *     invite accept email policy for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndInviteAcceptanceEmailPolicyChanged(Tag _tag, InviteAcceptanceEmailPolicyChangedType inviteAcceptanceEmailPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.inviteAcceptanceEmailPolicyChangedValue = inviteAcceptanceEmailPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberRequestsChangePolicyValue  (team_policies) Changed whether
     *     users can find team when not invited. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberRequestsChangePolicy(Tag _tag, MemberRequestsChangePolicyType memberRequestsChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberRequestsChangePolicyValue = memberRequestsChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberSendInvitePolicyChangedValue  (team_policies) Changed member
     *     send invite policy for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberSendInvitePolicyChanged(Tag _tag, MemberSendInvitePolicyChangedType memberSendInvitePolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberSendInvitePolicyChangedValue = memberSendInvitePolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberSpaceLimitsAddExceptionValue  (team_policies) Added members
     *     to member space limit exception list. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberSpaceLimitsAddException(Tag _tag, MemberSpaceLimitsAddExceptionType memberSpaceLimitsAddExceptionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberSpaceLimitsAddExceptionValue = memberSpaceLimitsAddExceptionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberSpaceLimitsChangeCapsTypePolicyValue  (team_policies)
     *     Changed member space limit type for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberSpaceLimitsChangeCapsTypePolicy(Tag _tag, MemberSpaceLimitsChangeCapsTypePolicyType memberSpaceLimitsChangeCapsTypePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberSpaceLimitsChangeCapsTypePolicyValue = memberSpaceLimitsChangeCapsTypePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberSpaceLimitsChangePolicyValue  (team_policies) Changed team
     *     default member space limit. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberSpaceLimitsChangePolicy(Tag _tag, MemberSpaceLimitsChangePolicyType memberSpaceLimitsChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberSpaceLimitsChangePolicyValue = memberSpaceLimitsChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberSpaceLimitsRemoveExceptionValue  (team_policies) Removed
     *     members from member space limit exception list. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberSpaceLimitsRemoveException(Tag _tag, MemberSpaceLimitsRemoveExceptionType memberSpaceLimitsRemoveExceptionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberSpaceLimitsRemoveExceptionValue = memberSpaceLimitsRemoveExceptionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param memberSuggestionsChangePolicyValue  (team_policies)
     *     Enabled/disabled option for team members to suggest people to add to
     *     team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMemberSuggestionsChangePolicy(Tag _tag, MemberSuggestionsChangePolicyType memberSuggestionsChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.memberSuggestionsChangePolicyValue = memberSuggestionsChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param microsoftOfficeAddinChangePolicyValue  (team_policies)
     *     Enabled/disabled Microsoft Office add-in. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndMicrosoftOfficeAddinChangePolicy(Tag _tag, MicrosoftOfficeAddinChangePolicyType microsoftOfficeAddinChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.microsoftOfficeAddinChangePolicyValue = microsoftOfficeAddinChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param networkControlChangePolicyValue  (team_policies) Enabled/disabled
     *     network control. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndNetworkControlChangePolicy(Tag _tag, NetworkControlChangePolicyType networkControlChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.networkControlChangePolicyValue = networkControlChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperChangeDeploymentPolicyValue  (team_policies) Changed whether
     *     Dropbox Paper, when enabled, is deployed to all members or to
     *     specific members. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperChangeDeploymentPolicy(Tag _tag, PaperChangeDeploymentPolicyType paperChangeDeploymentPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperChangeDeploymentPolicyValue = paperChangeDeploymentPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperChangeMemberLinkPolicyValue  (team_policies) Changed whether
     *     non-members can view Paper docs with link (deprecated, no longer
     *     logged). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperChangeMemberLinkPolicy(Tag _tag, PaperChangeMemberLinkPolicyType paperChangeMemberLinkPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperChangeMemberLinkPolicyValue = paperChangeMemberLinkPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperChangeMemberPolicyValue  (team_policies) Changed whether
     *     members can share Paper docs outside team, and if docs are accessible
     *     only by team members or anyone by default. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperChangeMemberPolicy(Tag _tag, PaperChangeMemberPolicyType paperChangeMemberPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperChangeMemberPolicyValue = paperChangeMemberPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperChangePolicyValue  (team_policies) Enabled/disabled Dropbox
     *     Paper for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperChangePolicy(Tag _tag, PaperChangePolicyType paperChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperChangePolicyValue = paperChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDefaultFolderPolicyChangedValue  (team_policies) Changed
     *     Paper Default Folder Policy setting for team. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDefaultFolderPolicyChanged(Tag _tag, PaperDefaultFolderPolicyChangedType paperDefaultFolderPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDefaultFolderPolicyChangedValue = paperDefaultFolderPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperDesktopPolicyChangedValue  (team_policies) Enabled/disabled
     *     Paper Desktop for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperDesktopPolicyChanged(Tag _tag, PaperDesktopPolicyChangedType paperDesktopPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperDesktopPolicyChangedValue = paperDesktopPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperEnabledUsersGroupAdditionValue  (team_policies) Added users
     *     to Paper-enabled users list. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperEnabledUsersGroupAddition(Tag _tag, PaperEnabledUsersGroupAdditionType paperEnabledUsersGroupAdditionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperEnabledUsersGroupAdditionValue = paperEnabledUsersGroupAdditionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param paperEnabledUsersGroupRemovalValue  (team_policies) Removed users
     *     from Paper-enabled users list. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPaperEnabledUsersGroupRemoval(Tag _tag, PaperEnabledUsersGroupRemovalType paperEnabledUsersGroupRemovalValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.paperEnabledUsersGroupRemovalValue = paperEnabledUsersGroupRemovalValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param passwordStrengthRequirementsChangePolicyValue  (team_policies)
     *     Changed team password strength requirements. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPasswordStrengthRequirementsChangePolicy(Tag _tag, PasswordStrengthRequirementsChangePolicyType passwordStrengthRequirementsChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.passwordStrengthRequirementsChangePolicyValue = passwordStrengthRequirementsChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param permanentDeleteChangePolicyValue  (team_policies) Enabled/disabled
     *     ability of team members to permanently delete content. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndPermanentDeleteChangePolicy(Tag _tag, PermanentDeleteChangePolicyType permanentDeleteChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.permanentDeleteChangePolicyValue = permanentDeleteChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param resellerSupportChangePolicyValue  (team_policies) Enabled/disabled
     *     reseller support. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndResellerSupportChangePolicy(Tag _tag, ResellerSupportChangePolicyType resellerSupportChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.resellerSupportChangePolicyValue = resellerSupportChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param rewindPolicyChangedValue  (team_policies) Changed Rewind policy
     *     for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndRewindPolicyChanged(Tag _tag, RewindPolicyChangedType rewindPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.rewindPolicyChangedValue = rewindPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sendForSignaturePolicyChangedValue  (team_policies) Changed send
     *     for signature policy for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSendForSignaturePolicyChanged(Tag _tag, SendForSignaturePolicyChangedType sendForSignaturePolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sendForSignaturePolicyChangedValue = sendForSignaturePolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharingChangeFolderJoinPolicyValue  (team_policies) Changed
     *     whether team members can join shared folders owned outside team. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharingChangeFolderJoinPolicy(Tag _tag, SharingChangeFolderJoinPolicyType sharingChangeFolderJoinPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharingChangeFolderJoinPolicyValue = sharingChangeFolderJoinPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharingChangeLinkAllowChangeExpirationPolicyValue  (team_policies)
     *     Changed the allow remove or change expiration policy for the links
     *     shared outside of the team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharingChangeLinkAllowChangeExpirationPolicy(Tag _tag, SharingChangeLinkAllowChangeExpirationPolicyType sharingChangeLinkAllowChangeExpirationPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharingChangeLinkAllowChangeExpirationPolicyValue = sharingChangeLinkAllowChangeExpirationPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharingChangeLinkDefaultExpirationPolicyValue  (team_policies)
     *     Changed the default expiration for the links shared outside of the
     *     team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharingChangeLinkDefaultExpirationPolicy(Tag _tag, SharingChangeLinkDefaultExpirationPolicyType sharingChangeLinkDefaultExpirationPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharingChangeLinkDefaultExpirationPolicyValue = sharingChangeLinkDefaultExpirationPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharingChangeLinkEnforcePasswordPolicyValue  (team_policies)
     *     Changed the password requirement for the links shared outside of the
     *     team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharingChangeLinkEnforcePasswordPolicy(Tag _tag, SharingChangeLinkEnforcePasswordPolicyType sharingChangeLinkEnforcePasswordPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharingChangeLinkEnforcePasswordPolicyValue = sharingChangeLinkEnforcePasswordPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharingChangeLinkPolicyValue  (team_policies) Changed whether
     *     members can share links outside team, and if links are accessible
     *     only by team members or anyone by default. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharingChangeLinkPolicy(Tag _tag, SharingChangeLinkPolicyType sharingChangeLinkPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharingChangeLinkPolicyValue = sharingChangeLinkPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param sharingChangeMemberPolicyValue  (team_policies) Changed whether
     *     members can share files/folders outside team. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSharingChangeMemberPolicy(Tag _tag, SharingChangeMemberPolicyType sharingChangeMemberPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.sharingChangeMemberPolicyValue = sharingChangeMemberPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseChangeDownloadPolicyValue  (team_policies)
     *     Enabled/disabled downloading files from Dropbox Showcase for team.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseChangeDownloadPolicy(Tag _tag, ShowcaseChangeDownloadPolicyType showcaseChangeDownloadPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseChangeDownloadPolicyValue = showcaseChangeDownloadPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseChangeEnabledPolicyValue  (team_policies) Enabled/disabled
     *     Dropbox Showcase for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseChangeEnabledPolicy(Tag _tag, ShowcaseChangeEnabledPolicyType showcaseChangeEnabledPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseChangeEnabledPolicyValue = showcaseChangeEnabledPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param showcaseChangeExternalSharingPolicyValue  (team_policies)
     *     Enabled/disabled sharing Dropbox Showcase externally for team. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndShowcaseChangeExternalSharingPolicy(Tag _tag, ShowcaseChangeExternalSharingPolicyType showcaseChangeExternalSharingPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.showcaseChangeExternalSharingPolicyValue = showcaseChangeExternalSharingPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param smarterSmartSyncPolicyChangedValue  (team_policies) Changed
     *     automatic Smart Sync setting for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSmarterSmartSyncPolicyChanged(Tag _tag, SmarterSmartSyncPolicyChangedType smarterSmartSyncPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.smarterSmartSyncPolicyChangedValue = smarterSmartSyncPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param smartSyncChangePolicyValue  (team_policies) Changed default Smart
     *     Sync setting for team members. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSmartSyncChangePolicy(Tag _tag, SmartSyncChangePolicyType smartSyncChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.smartSyncChangePolicyValue = smartSyncChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param smartSyncNotOptOutValue  (team_policies) Opted team into Smart
     *     Sync. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSmartSyncNotOptOut(Tag _tag, SmartSyncNotOptOutType smartSyncNotOptOutValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.smartSyncNotOptOutValue = smartSyncNotOptOutValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param smartSyncOptOutValue  (team_policies) Opted team out of Smart
     *     Sync. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSmartSyncOptOut(Tag _tag, SmartSyncOptOutType smartSyncOptOutValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.smartSyncOptOutValue = smartSyncOptOutValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param ssoChangePolicyValue  (team_policies) Changed single sign-on
     *     setting for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndSsoChangePolicy(Tag _tag, SsoChangePolicyType ssoChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.ssoChangePolicyValue = ssoChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamBrandingPolicyChangedValue  (team_policies) Changed team
     *     branding policy for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamBrandingPolicyChanged(Tag _tag, TeamBrandingPolicyChangedType teamBrandingPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamBrandingPolicyChangedValue = teamBrandingPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamExtensionsPolicyChangedValue  (team_policies) Changed App
     *     Integrations setting for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamExtensionsPolicyChanged(Tag _tag, TeamExtensionsPolicyChangedType teamExtensionsPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamExtensionsPolicyChangedValue = teamExtensionsPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamSelectiveSyncPolicyChangedValue  (team_policies)
     *     Enabled/disabled Team Selective Sync for team. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamSelectiveSyncPolicyChanged(Tag _tag, TeamSelectiveSyncPolicyChangedType teamSelectiveSyncPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamSelectiveSyncPolicyChangedValue = teamSelectiveSyncPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamSharingWhitelistSubjectsChangedValue  (team_policies) Edited
     *     the approved list for sharing externally. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamSharingWhitelistSubjectsChanged(Tag _tag, TeamSharingWhitelistSubjectsChangedType teamSharingWhitelistSubjectsChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamSharingWhitelistSubjectsChangedValue = teamSharingWhitelistSubjectsChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param tfaAddExceptionValue  (team_policies) Added members to two factor
     *     authentication exception list. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTfaAddException(Tag _tag, TfaAddExceptionType tfaAddExceptionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.tfaAddExceptionValue = tfaAddExceptionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param tfaChangePolicyValue  (team_policies) Changed two-step
     *     verification setting for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTfaChangePolicy(Tag _tag, TfaChangePolicyType tfaChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.tfaChangePolicyValue = tfaChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param tfaRemoveExceptionValue  (team_policies) Removed members from two
     *     factor authentication exception list. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTfaRemoveException(Tag _tag, TfaRemoveExceptionType tfaRemoveExceptionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.tfaRemoveExceptionValue = tfaRemoveExceptionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param twoAccountChangePolicyValue  (team_policies) Enabled/disabled
     *     option for members to link personal Dropbox account and team account
     *     to same computer. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTwoAccountChangePolicy(Tag _tag, TwoAccountChangePolicyType twoAccountChangePolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.twoAccountChangePolicyValue = twoAccountChangePolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param viewerInfoPolicyChangedValue  (team_policies) Changed team policy
     *     for viewer info. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndViewerInfoPolicyChanged(Tag _tag, ViewerInfoPolicyChangedType viewerInfoPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.viewerInfoPolicyChangedValue = viewerInfoPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param watermarkingPolicyChangedValue  (team_policies) Changed
     *     watermarking policy for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndWatermarkingPolicyChanged(Tag _tag, WatermarkingPolicyChangedType watermarkingPolicyChangedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.watermarkingPolicyChangedValue = watermarkingPolicyChangedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param webSessionsChangeActiveSessionLimitValue  (team_policies) Changed
     *     limit on active sessions per member. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndWebSessionsChangeActiveSessionLimit(Tag _tag, WebSessionsChangeActiveSessionLimitType webSessionsChangeActiveSessionLimitValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.webSessionsChangeActiveSessionLimitValue = webSessionsChangeActiveSessionLimitValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param webSessionsChangeFixedLengthPolicyValue  (team_policies) Changed
     *     how long members can stay signed in to Dropbox.com. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndWebSessionsChangeFixedLengthPolicy(Tag _tag, WebSessionsChangeFixedLengthPolicyType webSessionsChangeFixedLengthPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.webSessionsChangeFixedLengthPolicyValue = webSessionsChangeFixedLengthPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param webSessionsChangeIdleLengthPolicyValue  (team_policies) Changed
     *     how long team members can be idle while signed in to Dropbox.com.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndWebSessionsChangeIdleLengthPolicy(Tag _tag, WebSessionsChangeIdleLengthPolicyType webSessionsChangeIdleLengthPolicyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.webSessionsChangeIdleLengthPolicyValue = webSessionsChangeIdleLengthPolicyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param dataResidencyMigrationRequestSuccessfulValue  (team_profile)
     *     Requested data residency migration for team data. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDataResidencyMigrationRequestSuccessful(Tag _tag, DataResidencyMigrationRequestSuccessfulType dataResidencyMigrationRequestSuccessfulValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.dataResidencyMigrationRequestSuccessfulValue = dataResidencyMigrationRequestSuccessfulValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param dataResidencyMigrationRequestUnsuccessfulValue  (team_profile)
     *     Request for data residency migration for team data has failed. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndDataResidencyMigrationRequestUnsuccessful(Tag _tag, DataResidencyMigrationRequestUnsuccessfulType dataResidencyMigrationRequestUnsuccessfulValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.dataResidencyMigrationRequestUnsuccessfulValue = dataResidencyMigrationRequestUnsuccessfulValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamMergeFromValue  (team_profile) Merged another team into this
     *     team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamMergeFrom(Tag _tag, TeamMergeFromType teamMergeFromValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamMergeFromValue = teamMergeFromValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamMergeToValue  (team_profile) Merged this team into another
     *     team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamMergeTo(Tag _tag, TeamMergeToType teamMergeToValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamMergeToValue = teamMergeToValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamProfileAddBackgroundValue  (team_profile) Added team
     *     background to display on shared link headers. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamProfileAddBackground(Tag _tag, TeamProfileAddBackgroundType teamProfileAddBackgroundValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamProfileAddBackgroundValue = teamProfileAddBackgroundValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamProfileAddLogoValue  (team_profile) Added team logo to display
     *     on shared link headers. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamProfileAddLogo(Tag _tag, TeamProfileAddLogoType teamProfileAddLogoValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamProfileAddLogoValue = teamProfileAddLogoValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamProfileChangeBackgroundValue  (team_profile) Changed team
     *     background displayed on shared link headers. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamProfileChangeBackground(Tag _tag, TeamProfileChangeBackgroundType teamProfileChangeBackgroundValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamProfileChangeBackgroundValue = teamProfileChangeBackgroundValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamProfileChangeDefaultLanguageValue  (team_profile) Changed
     *     default language for team. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamProfileChangeDefaultLanguage(Tag _tag, TeamProfileChangeDefaultLanguageType teamProfileChangeDefaultLanguageValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamProfileChangeDefaultLanguageValue = teamProfileChangeDefaultLanguageValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamProfileChangeLogoValue  (team_profile) Changed team logo
     *     displayed on shared link headers. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamProfileChangeLogo(Tag _tag, TeamProfileChangeLogoType teamProfileChangeLogoValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamProfileChangeLogoValue = teamProfileChangeLogoValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamProfileChangeNameValue  (team_profile) Changed team name. Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamProfileChangeName(Tag _tag, TeamProfileChangeNameType teamProfileChangeNameValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamProfileChangeNameValue = teamProfileChangeNameValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamProfileRemoveBackgroundValue  (team_profile) Removed team
     *     background displayed on shared link headers. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamProfileRemoveBackground(Tag _tag, TeamProfileRemoveBackgroundType teamProfileRemoveBackgroundValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamProfileRemoveBackgroundValue = teamProfileRemoveBackgroundValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamProfileRemoveLogoValue  (team_profile) Removed team logo
     *     displayed on shared link headers. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamProfileRemoveLogo(Tag _tag, TeamProfileRemoveLogoType teamProfileRemoveLogoValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamProfileRemoveLogoValue = teamProfileRemoveLogoValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param tfaAddBackupPhoneValue  (tfa) Added backup phone for two-step
     *     verification. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTfaAddBackupPhone(Tag _tag, TfaAddBackupPhoneType tfaAddBackupPhoneValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.tfaAddBackupPhoneValue = tfaAddBackupPhoneValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param tfaAddSecurityKeyValue  (tfa) Added security key for two-step
     *     verification. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTfaAddSecurityKey(Tag _tag, TfaAddSecurityKeyType tfaAddSecurityKeyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.tfaAddSecurityKeyValue = tfaAddSecurityKeyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param tfaChangeBackupPhoneValue  (tfa) Changed backup phone for two-step
     *     verification. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTfaChangeBackupPhone(Tag _tag, TfaChangeBackupPhoneType tfaChangeBackupPhoneValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.tfaChangeBackupPhoneValue = tfaChangeBackupPhoneValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param tfaChangeStatusValue  (tfa) Enabled/disabled/changed two-step
     *     verification setting. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTfaChangeStatus(Tag _tag, TfaChangeStatusType tfaChangeStatusValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.tfaChangeStatusValue = tfaChangeStatusValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param tfaRemoveBackupPhoneValue  (tfa) Removed backup phone for two-step
     *     verification. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTfaRemoveBackupPhone(Tag _tag, TfaRemoveBackupPhoneType tfaRemoveBackupPhoneValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.tfaRemoveBackupPhoneValue = tfaRemoveBackupPhoneValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param tfaRemoveSecurityKeyValue  (tfa) Removed security key for two-step
     *     verification. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTfaRemoveSecurityKey(Tag _tag, TfaRemoveSecurityKeyType tfaRemoveSecurityKeyValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.tfaRemoveSecurityKeyValue = tfaRemoveSecurityKeyValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param tfaResetValue  (tfa) Reset two-step verification for team member.
     *     Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTfaReset(Tag _tag, TfaResetType tfaResetValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.tfaResetValue = tfaResetValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param changedEnterpriseAdminRoleValue  (trusted_teams) Changed
     *     enterprise admin role. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndChangedEnterpriseAdminRole(Tag _tag, ChangedEnterpriseAdminRoleType changedEnterpriseAdminRoleValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.changedEnterpriseAdminRoleValue = changedEnterpriseAdminRoleValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param changedEnterpriseConnectedTeamStatusValue  (trusted_teams) Changed
     *     enterprise-connected team status. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndChangedEnterpriseConnectedTeamStatus(Tag _tag, ChangedEnterpriseConnectedTeamStatusType changedEnterpriseConnectedTeamStatusValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.changedEnterpriseConnectedTeamStatusValue = changedEnterpriseConnectedTeamStatusValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param endedEnterpriseAdminSessionValue  (trusted_teams) Ended enterprise
     *     admin session. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndEndedEnterpriseAdminSession(Tag _tag, EndedEnterpriseAdminSessionType endedEnterpriseAdminSessionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.endedEnterpriseAdminSessionValue = endedEnterpriseAdminSessionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param endedEnterpriseAdminSessionDeprecatedValue  (trusted_teams) Ended
     *     enterprise admin session (deprecated, replaced by 'Ended enterprise
     *     admin session'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndEndedEnterpriseAdminSessionDeprecated(Tag _tag, EndedEnterpriseAdminSessionDeprecatedType endedEnterpriseAdminSessionDeprecatedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.endedEnterpriseAdminSessionDeprecatedValue = endedEnterpriseAdminSessionDeprecatedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param enterpriseSettingsLockingValue  (trusted_teams) Changed who can
     *     update a setting. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndEnterpriseSettingsLocking(Tag _tag, EnterpriseSettingsLockingType enterpriseSettingsLockingValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.enterpriseSettingsLockingValue = enterpriseSettingsLockingValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param guestAdminChangeStatusValue  (trusted_teams) Changed guest team
     *     admin status. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndGuestAdminChangeStatus(Tag _tag, GuestAdminChangeStatusType guestAdminChangeStatusValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.guestAdminChangeStatusValue = guestAdminChangeStatusValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param startedEnterpriseAdminSessionValue  (trusted_teams) Started
     *     enterprise admin session. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndStartedEnterpriseAdminSession(Tag _tag, StartedEnterpriseAdminSessionType startedEnterpriseAdminSessionValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.startedEnterpriseAdminSessionValue = startedEnterpriseAdminSessionValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamMergeRequestAcceptedValue  (trusted_teams) Accepted a team
     *     merge request. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamMergeRequestAccepted(Tag _tag, TeamMergeRequestAcceptedType teamMergeRequestAcceptedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamMergeRequestAcceptedValue = teamMergeRequestAcceptedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamMergeRequestAcceptedShownToPrimaryTeamValue  (trusted_teams)
     *     Accepted a team merge request (deprecated, replaced by 'Accepted a
     *     team merge request'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamMergeRequestAcceptedShownToPrimaryTeam(Tag _tag, TeamMergeRequestAcceptedShownToPrimaryTeamType teamMergeRequestAcceptedShownToPrimaryTeamValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamMergeRequestAcceptedShownToPrimaryTeamValue = teamMergeRequestAcceptedShownToPrimaryTeamValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamMergeRequestAcceptedShownToSecondaryTeamValue  (trusted_teams)
     *     Accepted a team merge request (deprecated, replaced by 'Accepted a
     *     team merge request'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamMergeRequestAcceptedShownToSecondaryTeam(Tag _tag, TeamMergeRequestAcceptedShownToSecondaryTeamType teamMergeRequestAcceptedShownToSecondaryTeamValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamMergeRequestAcceptedShownToSecondaryTeamValue = teamMergeRequestAcceptedShownToSecondaryTeamValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamMergeRequestAutoCanceledValue  (trusted_teams) Automatically
     *     canceled team merge request. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamMergeRequestAutoCanceled(Tag _tag, TeamMergeRequestAutoCanceledType teamMergeRequestAutoCanceledValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamMergeRequestAutoCanceledValue = teamMergeRequestAutoCanceledValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamMergeRequestCanceledValue  (trusted_teams) Canceled a team
     *     merge request. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamMergeRequestCanceled(Tag _tag, TeamMergeRequestCanceledType teamMergeRequestCanceledValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamMergeRequestCanceledValue = teamMergeRequestCanceledValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamMergeRequestCanceledShownToPrimaryTeamValue  (trusted_teams)
     *     Canceled a team merge request (deprecated, replaced by 'Canceled a
     *     team merge request'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamMergeRequestCanceledShownToPrimaryTeam(Tag _tag, TeamMergeRequestCanceledShownToPrimaryTeamType teamMergeRequestCanceledShownToPrimaryTeamValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamMergeRequestCanceledShownToPrimaryTeamValue = teamMergeRequestCanceledShownToPrimaryTeamValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamMergeRequestCanceledShownToSecondaryTeamValue  (trusted_teams)
     *     Canceled a team merge request (deprecated, replaced by 'Canceled a
     *     team merge request'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamMergeRequestCanceledShownToSecondaryTeam(Tag _tag, TeamMergeRequestCanceledShownToSecondaryTeamType teamMergeRequestCanceledShownToSecondaryTeamValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamMergeRequestCanceledShownToSecondaryTeamValue = teamMergeRequestCanceledShownToSecondaryTeamValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamMergeRequestExpiredValue  (trusted_teams) Team merge request
     *     expired. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamMergeRequestExpired(Tag _tag, TeamMergeRequestExpiredType teamMergeRequestExpiredValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamMergeRequestExpiredValue = teamMergeRequestExpiredValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamMergeRequestExpiredShownToPrimaryTeamValue  (trusted_teams)
     *     Team merge request expired (deprecated, replaced by 'Team merge
     *     request expired'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamMergeRequestExpiredShownToPrimaryTeam(Tag _tag, TeamMergeRequestExpiredShownToPrimaryTeamType teamMergeRequestExpiredShownToPrimaryTeamValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamMergeRequestExpiredShownToPrimaryTeamValue = teamMergeRequestExpiredShownToPrimaryTeamValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamMergeRequestExpiredShownToSecondaryTeamValue  (trusted_teams)
     *     Team merge request expired (deprecated, replaced by 'Team merge
     *     request expired'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamMergeRequestExpiredShownToSecondaryTeam(Tag _tag, TeamMergeRequestExpiredShownToSecondaryTeamType teamMergeRequestExpiredShownToSecondaryTeamValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamMergeRequestExpiredShownToSecondaryTeamValue = teamMergeRequestExpiredShownToSecondaryTeamValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamMergeRequestRejectedShownToPrimaryTeamValue  (trusted_teams)
     *     Rejected a team merge request (deprecated, no longer logged). Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamMergeRequestRejectedShownToPrimaryTeam(Tag _tag, TeamMergeRequestRejectedShownToPrimaryTeamType teamMergeRequestRejectedShownToPrimaryTeamValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamMergeRequestRejectedShownToPrimaryTeamValue = teamMergeRequestRejectedShownToPrimaryTeamValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamMergeRequestRejectedShownToSecondaryTeamValue  (trusted_teams)
     *     Rejected a team merge request (deprecated, no longer logged). Must
     *     not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamMergeRequestRejectedShownToSecondaryTeam(Tag _tag, TeamMergeRequestRejectedShownToSecondaryTeamType teamMergeRequestRejectedShownToSecondaryTeamValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamMergeRequestRejectedShownToSecondaryTeamValue = teamMergeRequestRejectedShownToSecondaryTeamValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamMergeRequestReminderValue  (trusted_teams) Sent a team merge
     *     request reminder. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamMergeRequestReminder(Tag _tag, TeamMergeRequestReminderType teamMergeRequestReminderValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamMergeRequestReminderValue = teamMergeRequestReminderValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamMergeRequestReminderShownToPrimaryTeamValue  (trusted_teams)
     *     Sent a team merge request reminder (deprecated, replaced by 'Sent a
     *     team merge request reminder'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamMergeRequestReminderShownToPrimaryTeam(Tag _tag, TeamMergeRequestReminderShownToPrimaryTeamType teamMergeRequestReminderShownToPrimaryTeamValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamMergeRequestReminderShownToPrimaryTeamValue = teamMergeRequestReminderShownToPrimaryTeamValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamMergeRequestReminderShownToSecondaryTeamValue  (trusted_teams)
     *     Sent a team merge request reminder (deprecated, replaced by 'Sent a
     *     team merge request reminder'). Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamMergeRequestReminderShownToSecondaryTeam(Tag _tag, TeamMergeRequestReminderShownToSecondaryTeamType teamMergeRequestReminderShownToSecondaryTeamValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamMergeRequestReminderShownToSecondaryTeamValue = teamMergeRequestReminderShownToSecondaryTeamValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamMergeRequestRevokedValue  (trusted_teams) Canceled the team
     *     merge. Must not be {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamMergeRequestRevoked(Tag _tag, TeamMergeRequestRevokedType teamMergeRequestRevokedValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamMergeRequestRevokedValue = teamMergeRequestRevokedValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamMergeRequestSentShownToPrimaryTeamValue  (trusted_teams)
     *     Requested to merge their Dropbox team into yours. Must not be {@code
     *     null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamMergeRequestSentShownToPrimaryTeam(Tag _tag, TeamMergeRequestSentShownToPrimaryTeamType teamMergeRequestSentShownToPrimaryTeamValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamMergeRequestSentShownToPrimaryTeamValue = teamMergeRequestSentShownToPrimaryTeamValue;
        return result;
    }

    /**
     * The type of the event with description.
     *
     * @param teamMergeRequestSentShownToSecondaryTeamValue  (trusted_teams)
     *     Requested to merge your team into another Dropbox team. Must not be
     *     {@code null}.
     * @param _tag  Discriminating tag for this instance.
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    private EventType withTagAndTeamMergeRequestSentShownToSecondaryTeam(Tag _tag, TeamMergeRequestSentShownToSecondaryTeamType teamMergeRequestSentShownToSecondaryTeamValue) {
        EventType result = new EventType();
        result._tag = _tag;
        result.teamMergeRequestSentShownToSecondaryTeamValue = teamMergeRequestSentShownToSecondaryTeamValue;
        return result;
    }

    /**
     * Returns the tag for this instance.
     *
     * <p> This class is a tagged union.  Tagged unions instances are always
     * associated to a specific tag.  This means only one of the {@code isXyz()}
     * methods will return {@code true}. Callers are recommended to use the tag
     * value in a {@code switch} statement to properly handle the different
     * values for this {@code EventType}. </p>
     *
     * <p> If a tag returned by the server is unrecognized by this SDK, the
     * {@link Tag#OTHER} value will be used. </p>
     *
     * @return the tag for this instance.
     */
    public Tag tag() {
        return _tag;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ADMIN_ALERTING_ALERT_STATE_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ADMIN_ALERTING_ALERT_STATE_CHANGED}, {@code false} otherwise.
     */
    public boolean isAdminAlertingAlertStateChanged() {
        return this._tag == Tag.ADMIN_ALERTING_ALERT_STATE_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#ADMIN_ALERTING_ALERT_STATE_CHANGED}.
     *
     * <p> (admin_alerting) Changed an alert state </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#ADMIN_ALERTING_ALERT_STATE_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType adminAlertingAlertStateChanged(AdminAlertingAlertStateChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndAdminAlertingAlertStateChanged(Tag.ADMIN_ALERTING_ALERT_STATE_CHANGED, value);
    }

    /**
     * (admin_alerting) Changed an alert state
     *
     * <p> This instance must be tagged as {@link
     * Tag#ADMIN_ALERTING_ALERT_STATE_CHANGED}. </p>
     *
     * @return The {@link AdminAlertingAlertStateChangedType} value associated
     *     with this instance if {@link #isAdminAlertingAlertStateChanged} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isAdminAlertingAlertStateChanged} is {@code false}.
     */
    public AdminAlertingAlertStateChangedType getAdminAlertingAlertStateChangedValue() {
        if (this._tag != Tag.ADMIN_ALERTING_ALERT_STATE_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.ADMIN_ALERTING_ALERT_STATE_CHANGED, but was Tag." + this._tag.name());
        }
        return adminAlertingAlertStateChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ADMIN_ALERTING_CHANGED_ALERT_CONFIG}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ADMIN_ALERTING_CHANGED_ALERT_CONFIG}, {@code false} otherwise.
     */
    public boolean isAdminAlertingChangedAlertConfig() {
        return this._tag == Tag.ADMIN_ALERTING_CHANGED_ALERT_CONFIG;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#ADMIN_ALERTING_CHANGED_ALERT_CONFIG}.
     *
     * <p> (admin_alerting) Changed an alert setting </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#ADMIN_ALERTING_CHANGED_ALERT_CONFIG}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType adminAlertingChangedAlertConfig(AdminAlertingChangedAlertConfigType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndAdminAlertingChangedAlertConfig(Tag.ADMIN_ALERTING_CHANGED_ALERT_CONFIG, value);
    }

    /**
     * (admin_alerting) Changed an alert setting
     *
     * <p> This instance must be tagged as {@link
     * Tag#ADMIN_ALERTING_CHANGED_ALERT_CONFIG}. </p>
     *
     * @return The {@link AdminAlertingChangedAlertConfigType} value associated
     *     with this instance if {@link #isAdminAlertingChangedAlertConfig} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isAdminAlertingChangedAlertConfig} is {@code false}.
     */
    public AdminAlertingChangedAlertConfigType getAdminAlertingChangedAlertConfigValue() {
        if (this._tag != Tag.ADMIN_ALERTING_CHANGED_ALERT_CONFIG) {
            throw new IllegalStateException("Invalid tag: required Tag.ADMIN_ALERTING_CHANGED_ALERT_CONFIG, but was Tag." + this._tag.name());
        }
        return adminAlertingChangedAlertConfigValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ADMIN_ALERTING_TRIGGERED_ALERT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ADMIN_ALERTING_TRIGGERED_ALERT}, {@code false} otherwise.
     */
    public boolean isAdminAlertingTriggeredAlert() {
        return this._tag == Tag.ADMIN_ALERTING_TRIGGERED_ALERT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#ADMIN_ALERTING_TRIGGERED_ALERT}.
     *
     * <p> (admin_alerting) Triggered security alert </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#ADMIN_ALERTING_TRIGGERED_ALERT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType adminAlertingTriggeredAlert(AdminAlertingTriggeredAlertType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndAdminAlertingTriggeredAlert(Tag.ADMIN_ALERTING_TRIGGERED_ALERT, value);
    }

    /**
     * (admin_alerting) Triggered security alert
     *
     * <p> This instance must be tagged as {@link
     * Tag#ADMIN_ALERTING_TRIGGERED_ALERT}. </p>
     *
     * @return The {@link AdminAlertingTriggeredAlertType} value associated with
     *     this instance if {@link #isAdminAlertingTriggeredAlert} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isAdminAlertingTriggeredAlert}
     *     is {@code false}.
     */
    public AdminAlertingTriggeredAlertType getAdminAlertingTriggeredAlertValue() {
        if (this._tag != Tag.ADMIN_ALERTING_TRIGGERED_ALERT) {
            throw new IllegalStateException("Invalid tag: required Tag.ADMIN_ALERTING_TRIGGERED_ALERT, but was Tag." + this._tag.name());
        }
        return adminAlertingTriggeredAlertValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#APP_BLOCKED_BY_PERMISSIONS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#APP_BLOCKED_BY_PERMISSIONS}, {@code false} otherwise.
     */
    public boolean isAppBlockedByPermissions() {
        return this._tag == Tag.APP_BLOCKED_BY_PERMISSIONS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#APP_BLOCKED_BY_PERMISSIONS}.
     *
     * <p> (apps) Failed to connect app for member </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#APP_BLOCKED_BY_PERMISSIONS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType appBlockedByPermissions(AppBlockedByPermissionsType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndAppBlockedByPermissions(Tag.APP_BLOCKED_BY_PERMISSIONS, value);
    }

    /**
     * (apps) Failed to connect app for member
     *
     * <p> This instance must be tagged as {@link
     * Tag#APP_BLOCKED_BY_PERMISSIONS}. </p>
     *
     * @return The {@link AppBlockedByPermissionsType} value associated with
     *     this instance if {@link #isAppBlockedByPermissions} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isAppBlockedByPermissions} is
     *     {@code false}.
     */
    public AppBlockedByPermissionsType getAppBlockedByPermissionsValue() {
        if (this._tag != Tag.APP_BLOCKED_BY_PERMISSIONS) {
            throw new IllegalStateException("Invalid tag: required Tag.APP_BLOCKED_BY_PERMISSIONS, but was Tag." + this._tag.name());
        }
        return appBlockedByPermissionsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#APP_LINK_TEAM}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#APP_LINK_TEAM}, {@code false} otherwise.
     */
    public boolean isAppLinkTeam() {
        return this._tag == Tag.APP_LINK_TEAM;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#APP_LINK_TEAM}.
     *
     * <p> (apps) Linked app for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#APP_LINK_TEAM}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType appLinkTeam(AppLinkTeamType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndAppLinkTeam(Tag.APP_LINK_TEAM, value);
    }

    /**
     * (apps) Linked app for team
     *
     * <p> This instance must be tagged as {@link Tag#APP_LINK_TEAM}. </p>
     *
     * @return The {@link AppLinkTeamType} value associated with this instance
     *     if {@link #isAppLinkTeam} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isAppLinkTeam} is {@code
     *     false}.
     */
    public AppLinkTeamType getAppLinkTeamValue() {
        if (this._tag != Tag.APP_LINK_TEAM) {
            throw new IllegalStateException("Invalid tag: required Tag.APP_LINK_TEAM, but was Tag." + this._tag.name());
        }
        return appLinkTeamValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#APP_LINK_USER}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#APP_LINK_USER}, {@code false} otherwise.
     */
    public boolean isAppLinkUser() {
        return this._tag == Tag.APP_LINK_USER;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#APP_LINK_USER}.
     *
     * <p> (apps) Linked app for member </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#APP_LINK_USER}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType appLinkUser(AppLinkUserType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndAppLinkUser(Tag.APP_LINK_USER, value);
    }

    /**
     * (apps) Linked app for member
     *
     * <p> This instance must be tagged as {@link Tag#APP_LINK_USER}. </p>
     *
     * @return The {@link AppLinkUserType} value associated with this instance
     *     if {@link #isAppLinkUser} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isAppLinkUser} is {@code
     *     false}.
     */
    public AppLinkUserType getAppLinkUserValue() {
        if (this._tag != Tag.APP_LINK_USER) {
            throw new IllegalStateException("Invalid tag: required Tag.APP_LINK_USER, but was Tag." + this._tag.name());
        }
        return appLinkUserValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#APP_UNLINK_TEAM}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#APP_UNLINK_TEAM}, {@code false} otherwise.
     */
    public boolean isAppUnlinkTeam() {
        return this._tag == Tag.APP_UNLINK_TEAM;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#APP_UNLINK_TEAM}.
     *
     * <p> (apps) Unlinked app for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#APP_UNLINK_TEAM}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType appUnlinkTeam(AppUnlinkTeamType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndAppUnlinkTeam(Tag.APP_UNLINK_TEAM, value);
    }

    /**
     * (apps) Unlinked app for team
     *
     * <p> This instance must be tagged as {@link Tag#APP_UNLINK_TEAM}. </p>
     *
     * @return The {@link AppUnlinkTeamType} value associated with this instance
     *     if {@link #isAppUnlinkTeam} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isAppUnlinkTeam} is {@code
     *     false}.
     */
    public AppUnlinkTeamType getAppUnlinkTeamValue() {
        if (this._tag != Tag.APP_UNLINK_TEAM) {
            throw new IllegalStateException("Invalid tag: required Tag.APP_UNLINK_TEAM, but was Tag." + this._tag.name());
        }
        return appUnlinkTeamValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#APP_UNLINK_USER}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#APP_UNLINK_USER}, {@code false} otherwise.
     */
    public boolean isAppUnlinkUser() {
        return this._tag == Tag.APP_UNLINK_USER;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#APP_UNLINK_USER}.
     *
     * <p> (apps) Unlinked app for member </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#APP_UNLINK_USER}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType appUnlinkUser(AppUnlinkUserType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndAppUnlinkUser(Tag.APP_UNLINK_USER, value);
    }

    /**
     * (apps) Unlinked app for member
     *
     * <p> This instance must be tagged as {@link Tag#APP_UNLINK_USER}. </p>
     *
     * @return The {@link AppUnlinkUserType} value associated with this instance
     *     if {@link #isAppUnlinkUser} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isAppUnlinkUser} is {@code
     *     false}.
     */
    public AppUnlinkUserType getAppUnlinkUserValue() {
        if (this._tag != Tag.APP_UNLINK_USER) {
            throw new IllegalStateException("Invalid tag: required Tag.APP_UNLINK_USER, but was Tag." + this._tag.name());
        }
        return appUnlinkUserValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#INTEGRATION_CONNECTED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#INTEGRATION_CONNECTED}, {@code false} otherwise.
     */
    public boolean isIntegrationConnected() {
        return this._tag == Tag.INTEGRATION_CONNECTED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#INTEGRATION_CONNECTED}.
     *
     * <p> (apps) Connected integration for member </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#INTEGRATION_CONNECTED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType integrationConnected(IntegrationConnectedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndIntegrationConnected(Tag.INTEGRATION_CONNECTED, value);
    }

    /**
     * (apps) Connected integration for member
     *
     * <p> This instance must be tagged as {@link Tag#INTEGRATION_CONNECTED}.
     * </p>
     *
     * @return The {@link IntegrationConnectedType} value associated with this
     *     instance if {@link #isIntegrationConnected} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isIntegrationConnected} is
     *     {@code false}.
     */
    public IntegrationConnectedType getIntegrationConnectedValue() {
        if (this._tag != Tag.INTEGRATION_CONNECTED) {
            throw new IllegalStateException("Invalid tag: required Tag.INTEGRATION_CONNECTED, but was Tag." + this._tag.name());
        }
        return integrationConnectedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#INTEGRATION_DISCONNECTED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#INTEGRATION_DISCONNECTED}, {@code false} otherwise.
     */
    public boolean isIntegrationDisconnected() {
        return this._tag == Tag.INTEGRATION_DISCONNECTED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#INTEGRATION_DISCONNECTED}.
     *
     * <p> (apps) Disconnected integration for member </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#INTEGRATION_DISCONNECTED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType integrationDisconnected(IntegrationDisconnectedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndIntegrationDisconnected(Tag.INTEGRATION_DISCONNECTED, value);
    }

    /**
     * (apps) Disconnected integration for member
     *
     * <p> This instance must be tagged as {@link Tag#INTEGRATION_DISCONNECTED}.
     * </p>
     *
     * @return The {@link IntegrationDisconnectedType} value associated with
     *     this instance if {@link #isIntegrationDisconnected} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isIntegrationDisconnected} is
     *     {@code false}.
     */
    public IntegrationDisconnectedType getIntegrationDisconnectedValue() {
        if (this._tag != Tag.INTEGRATION_DISCONNECTED) {
            throw new IllegalStateException("Invalid tag: required Tag.INTEGRATION_DISCONNECTED, but was Tag." + this._tag.name());
        }
        return integrationDisconnectedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_ADD_COMMENT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_ADD_COMMENT}, {@code false} otherwise.
     */
    public boolean isFileAddComment() {
        return this._tag == Tag.FILE_ADD_COMMENT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_ADD_COMMENT}.
     *
     * <p> (comments) Added file comment </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_ADD_COMMENT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileAddComment(FileAddCommentType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileAddComment(Tag.FILE_ADD_COMMENT, value);
    }

    /**
     * (comments) Added file comment
     *
     * <p> This instance must be tagged as {@link Tag#FILE_ADD_COMMENT}. </p>
     *
     * @return The {@link FileAddCommentType} value associated with this
     *     instance if {@link #isFileAddComment} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileAddComment} is {@code
     *     false}.
     */
    public FileAddCommentType getFileAddCommentValue() {
        if (this._tag != Tag.FILE_ADD_COMMENT) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_ADD_COMMENT, but was Tag." + this._tag.name());
        }
        return fileAddCommentValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_CHANGE_COMMENT_SUBSCRIPTION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_CHANGE_COMMENT_SUBSCRIPTION}, {@code false} otherwise.
     */
    public boolean isFileChangeCommentSubscription() {
        return this._tag == Tag.FILE_CHANGE_COMMENT_SUBSCRIPTION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_CHANGE_COMMENT_SUBSCRIPTION}.
     *
     * <p> (comments) Subscribed to or unsubscribed from comment notifications
     * for file </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_CHANGE_COMMENT_SUBSCRIPTION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileChangeCommentSubscription(FileChangeCommentSubscriptionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileChangeCommentSubscription(Tag.FILE_CHANGE_COMMENT_SUBSCRIPTION, value);
    }

    /**
     * (comments) Subscribed to or unsubscribed from comment notifications for
     * file
     *
     * <p> This instance must be tagged as {@link
     * Tag#FILE_CHANGE_COMMENT_SUBSCRIPTION}. </p>
     *
     * @return The {@link FileChangeCommentSubscriptionType} value associated
     *     with this instance if {@link #isFileChangeCommentSubscription} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFileChangeCommentSubscription} is {@code false}.
     */
    public FileChangeCommentSubscriptionType getFileChangeCommentSubscriptionValue() {
        if (this._tag != Tag.FILE_CHANGE_COMMENT_SUBSCRIPTION) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_CHANGE_COMMENT_SUBSCRIPTION, but was Tag." + this._tag.name());
        }
        return fileChangeCommentSubscriptionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_DELETE_COMMENT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_DELETE_COMMENT}, {@code false} otherwise.
     */
    public boolean isFileDeleteComment() {
        return this._tag == Tag.FILE_DELETE_COMMENT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_DELETE_COMMENT}.
     *
     * <p> (comments) Deleted file comment </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_DELETE_COMMENT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileDeleteComment(FileDeleteCommentType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileDeleteComment(Tag.FILE_DELETE_COMMENT, value);
    }

    /**
     * (comments) Deleted file comment
     *
     * <p> This instance must be tagged as {@link Tag#FILE_DELETE_COMMENT}. </p>
     *
     * @return The {@link FileDeleteCommentType} value associated with this
     *     instance if {@link #isFileDeleteComment} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileDeleteComment} is {@code
     *     false}.
     */
    public FileDeleteCommentType getFileDeleteCommentValue() {
        if (this._tag != Tag.FILE_DELETE_COMMENT) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_DELETE_COMMENT, but was Tag." + this._tag.name());
        }
        return fileDeleteCommentValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_EDIT_COMMENT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_EDIT_COMMENT}, {@code false} otherwise.
     */
    public boolean isFileEditComment() {
        return this._tag == Tag.FILE_EDIT_COMMENT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_EDIT_COMMENT}.
     *
     * <p> (comments) Edited file comment </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_EDIT_COMMENT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileEditComment(FileEditCommentType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileEditComment(Tag.FILE_EDIT_COMMENT, value);
    }

    /**
     * (comments) Edited file comment
     *
     * <p> This instance must be tagged as {@link Tag#FILE_EDIT_COMMENT}. </p>
     *
     * @return The {@link FileEditCommentType} value associated with this
     *     instance if {@link #isFileEditComment} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileEditComment} is {@code
     *     false}.
     */
    public FileEditCommentType getFileEditCommentValue() {
        if (this._tag != Tag.FILE_EDIT_COMMENT) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_EDIT_COMMENT, but was Tag." + this._tag.name());
        }
        return fileEditCommentValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_LIKE_COMMENT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_LIKE_COMMENT}, {@code false} otherwise.
     */
    public boolean isFileLikeComment() {
        return this._tag == Tag.FILE_LIKE_COMMENT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_LIKE_COMMENT}.
     *
     * <p> (comments) Liked file comment (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_LIKE_COMMENT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileLikeComment(FileLikeCommentType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileLikeComment(Tag.FILE_LIKE_COMMENT, value);
    }

    /**
     * (comments) Liked file comment (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#FILE_LIKE_COMMENT}. </p>
     *
     * @return The {@link FileLikeCommentType} value associated with this
     *     instance if {@link #isFileLikeComment} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileLikeComment} is {@code
     *     false}.
     */
    public FileLikeCommentType getFileLikeCommentValue() {
        if (this._tag != Tag.FILE_LIKE_COMMENT) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_LIKE_COMMENT, but was Tag." + this._tag.name());
        }
        return fileLikeCommentValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_RESOLVE_COMMENT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_RESOLVE_COMMENT}, {@code false} otherwise.
     */
    public boolean isFileResolveComment() {
        return this._tag == Tag.FILE_RESOLVE_COMMENT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_RESOLVE_COMMENT}.
     *
     * <p> (comments) Resolved file comment </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_RESOLVE_COMMENT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileResolveComment(FileResolveCommentType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileResolveComment(Tag.FILE_RESOLVE_COMMENT, value);
    }

    /**
     * (comments) Resolved file comment
     *
     * <p> This instance must be tagged as {@link Tag#FILE_RESOLVE_COMMENT}.
     * </p>
     *
     * @return The {@link FileResolveCommentType} value associated with this
     *     instance if {@link #isFileResolveComment} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileResolveComment} is {@code
     *     false}.
     */
    public FileResolveCommentType getFileResolveCommentValue() {
        if (this._tag != Tag.FILE_RESOLVE_COMMENT) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_RESOLVE_COMMENT, but was Tag." + this._tag.name());
        }
        return fileResolveCommentValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_UNLIKE_COMMENT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_UNLIKE_COMMENT}, {@code false} otherwise.
     */
    public boolean isFileUnlikeComment() {
        return this._tag == Tag.FILE_UNLIKE_COMMENT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_UNLIKE_COMMENT}.
     *
     * <p> (comments) Unliked file comment (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_UNLIKE_COMMENT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileUnlikeComment(FileUnlikeCommentType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileUnlikeComment(Tag.FILE_UNLIKE_COMMENT, value);
    }

    /**
     * (comments) Unliked file comment (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#FILE_UNLIKE_COMMENT}. </p>
     *
     * @return The {@link FileUnlikeCommentType} value associated with this
     *     instance if {@link #isFileUnlikeComment} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileUnlikeComment} is {@code
     *     false}.
     */
    public FileUnlikeCommentType getFileUnlikeCommentValue() {
        if (this._tag != Tag.FILE_UNLIKE_COMMENT) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_UNLIKE_COMMENT, but was Tag." + this._tag.name());
        }
        return fileUnlikeCommentValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_UNRESOLVE_COMMENT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_UNRESOLVE_COMMENT}, {@code false} otherwise.
     */
    public boolean isFileUnresolveComment() {
        return this._tag == Tag.FILE_UNRESOLVE_COMMENT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_UNRESOLVE_COMMENT}.
     *
     * <p> (comments) Unresolved file comment </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_UNRESOLVE_COMMENT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileUnresolveComment(FileUnresolveCommentType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileUnresolveComment(Tag.FILE_UNRESOLVE_COMMENT, value);
    }

    /**
     * (comments) Unresolved file comment
     *
     * <p> This instance must be tagged as {@link Tag#FILE_UNRESOLVE_COMMENT}.
     * </p>
     *
     * @return The {@link FileUnresolveCommentType} value associated with this
     *     instance if {@link #isFileUnresolveComment} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileUnresolveComment} is
     *     {@code false}.
     */
    public FileUnresolveCommentType getFileUnresolveCommentValue() {
        if (this._tag != Tag.FILE_UNRESOLVE_COMMENT) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_UNRESOLVE_COMMENT, but was Tag." + this._tag.name());
        }
        return fileUnresolveCommentValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_ADD_FOLDERS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_ADD_FOLDERS}, {@code false} otherwise.
     */
    public boolean isGovernancePolicyAddFolders() {
        return this._tag == Tag.GOVERNANCE_POLICY_ADD_FOLDERS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GOVERNANCE_POLICY_ADD_FOLDERS}.
     *
     * <p> (data_governance) Added folders to policy </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_ADD_FOLDERS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType governancePolicyAddFolders(GovernancePolicyAddFoldersType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGovernancePolicyAddFolders(Tag.GOVERNANCE_POLICY_ADD_FOLDERS, value);
    }

    /**
     * (data_governance) Added folders to policy
     *
     * <p> This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_ADD_FOLDERS}. </p>
     *
     * @return The {@link GovernancePolicyAddFoldersType} value associated with
     *     this instance if {@link #isGovernancePolicyAddFolders} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isGovernancePolicyAddFolders}
     *     is {@code false}.
     */
    public GovernancePolicyAddFoldersType getGovernancePolicyAddFoldersValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_ADD_FOLDERS) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_ADD_FOLDERS, but was Tag." + this._tag.name());
        }
        return governancePolicyAddFoldersValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_ADD_FOLDER_FAILED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_ADD_FOLDER_FAILED}, {@code false} otherwise.
     */
    public boolean isGovernancePolicyAddFolderFailed() {
        return this._tag == Tag.GOVERNANCE_POLICY_ADD_FOLDER_FAILED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GOVERNANCE_POLICY_ADD_FOLDER_FAILED}.
     *
     * <p> (data_governance) Couldn't add a folder to a policy </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_ADD_FOLDER_FAILED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType governancePolicyAddFolderFailed(GovernancePolicyAddFolderFailedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGovernancePolicyAddFolderFailed(Tag.GOVERNANCE_POLICY_ADD_FOLDER_FAILED, value);
    }

    /**
     * (data_governance) Couldn't add a folder to a policy
     *
     * <p> This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_ADD_FOLDER_FAILED}. </p>
     *
     * @return The {@link GovernancePolicyAddFolderFailedType} value associated
     *     with this instance if {@link #isGovernancePolicyAddFolderFailed} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGovernancePolicyAddFolderFailed} is {@code false}.
     */
    public GovernancePolicyAddFolderFailedType getGovernancePolicyAddFolderFailedValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_ADD_FOLDER_FAILED) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_ADD_FOLDER_FAILED, but was Tag." + this._tag.name());
        }
        return governancePolicyAddFolderFailedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_CONTENT_DISPOSED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_CONTENT_DISPOSED}, {@code false} otherwise.
     */
    public boolean isGovernancePolicyContentDisposed() {
        return this._tag == Tag.GOVERNANCE_POLICY_CONTENT_DISPOSED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GOVERNANCE_POLICY_CONTENT_DISPOSED}.
     *
     * <p> (data_governance) Content disposed </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_CONTENT_DISPOSED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType governancePolicyContentDisposed(GovernancePolicyContentDisposedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGovernancePolicyContentDisposed(Tag.GOVERNANCE_POLICY_CONTENT_DISPOSED, value);
    }

    /**
     * (data_governance) Content disposed
     *
     * <p> This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_CONTENT_DISPOSED}. </p>
     *
     * @return The {@link GovernancePolicyContentDisposedType} value associated
     *     with this instance if {@link #isGovernancePolicyContentDisposed} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGovernancePolicyContentDisposed} is {@code false}.
     */
    public GovernancePolicyContentDisposedType getGovernancePolicyContentDisposedValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_CONTENT_DISPOSED) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_CONTENT_DISPOSED, but was Tag." + this._tag.name());
        }
        return governancePolicyContentDisposedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_CREATE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_CREATE}, {@code false} otherwise.
     */
    public boolean isGovernancePolicyCreate() {
        return this._tag == Tag.GOVERNANCE_POLICY_CREATE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GOVERNANCE_POLICY_CREATE}.
     *
     * <p> (data_governance) Activated a new policy </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_CREATE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType governancePolicyCreate(GovernancePolicyCreateType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGovernancePolicyCreate(Tag.GOVERNANCE_POLICY_CREATE, value);
    }

    /**
     * (data_governance) Activated a new policy
     *
     * <p> This instance must be tagged as {@link Tag#GOVERNANCE_POLICY_CREATE}.
     * </p>
     *
     * @return The {@link GovernancePolicyCreateType} value associated with this
     *     instance if {@link #isGovernancePolicyCreate} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGovernancePolicyCreate} is
     *     {@code false}.
     */
    public GovernancePolicyCreateType getGovernancePolicyCreateValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_CREATE) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_CREATE, but was Tag." + this._tag.name());
        }
        return governancePolicyCreateValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_DELETE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_DELETE}, {@code false} otherwise.
     */
    public boolean isGovernancePolicyDelete() {
        return this._tag == Tag.GOVERNANCE_POLICY_DELETE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GOVERNANCE_POLICY_DELETE}.
     *
     * <p> (data_governance) Deleted a policy </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_DELETE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType governancePolicyDelete(GovernancePolicyDeleteType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGovernancePolicyDelete(Tag.GOVERNANCE_POLICY_DELETE, value);
    }

    /**
     * (data_governance) Deleted a policy
     *
     * <p> This instance must be tagged as {@link Tag#GOVERNANCE_POLICY_DELETE}.
     * </p>
     *
     * @return The {@link GovernancePolicyDeleteType} value associated with this
     *     instance if {@link #isGovernancePolicyDelete} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGovernancePolicyDelete} is
     *     {@code false}.
     */
    public GovernancePolicyDeleteType getGovernancePolicyDeleteValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_DELETE) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_DELETE, but was Tag." + this._tag.name());
        }
        return governancePolicyDeleteValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_EDIT_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_EDIT_DETAILS}, {@code false} otherwise.
     */
    public boolean isGovernancePolicyEditDetails() {
        return this._tag == Tag.GOVERNANCE_POLICY_EDIT_DETAILS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GOVERNANCE_POLICY_EDIT_DETAILS}.
     *
     * <p> (data_governance) Edited policy </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_EDIT_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType governancePolicyEditDetails(GovernancePolicyEditDetailsType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGovernancePolicyEditDetails(Tag.GOVERNANCE_POLICY_EDIT_DETAILS, value);
    }

    /**
     * (data_governance) Edited policy
     *
     * <p> This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_EDIT_DETAILS}. </p>
     *
     * @return The {@link GovernancePolicyEditDetailsType} value associated with
     *     this instance if {@link #isGovernancePolicyEditDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isGovernancePolicyEditDetails}
     *     is {@code false}.
     */
    public GovernancePolicyEditDetailsType getGovernancePolicyEditDetailsValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_EDIT_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_EDIT_DETAILS, but was Tag." + this._tag.name());
        }
        return governancePolicyEditDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_EDIT_DURATION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_EDIT_DURATION}, {@code false} otherwise.
     */
    public boolean isGovernancePolicyEditDuration() {
        return this._tag == Tag.GOVERNANCE_POLICY_EDIT_DURATION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GOVERNANCE_POLICY_EDIT_DURATION}.
     *
     * <p> (data_governance) Changed policy duration </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_EDIT_DURATION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType governancePolicyEditDuration(GovernancePolicyEditDurationType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGovernancePolicyEditDuration(Tag.GOVERNANCE_POLICY_EDIT_DURATION, value);
    }

    /**
     * (data_governance) Changed policy duration
     *
     * <p> This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_EDIT_DURATION}. </p>
     *
     * @return The {@link GovernancePolicyEditDurationType} value associated
     *     with this instance if {@link #isGovernancePolicyEditDuration} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGovernancePolicyEditDuration}
     *     is {@code false}.
     */
    public GovernancePolicyEditDurationType getGovernancePolicyEditDurationValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_EDIT_DURATION) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_EDIT_DURATION, but was Tag." + this._tag.name());
        }
        return governancePolicyEditDurationValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_EXPORT_CREATED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_EXPORT_CREATED}, {@code false} otherwise.
     */
    public boolean isGovernancePolicyExportCreated() {
        return this._tag == Tag.GOVERNANCE_POLICY_EXPORT_CREATED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GOVERNANCE_POLICY_EXPORT_CREATED}.
     *
     * <p> (data_governance) Created a policy download </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_EXPORT_CREATED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType governancePolicyExportCreated(GovernancePolicyExportCreatedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGovernancePolicyExportCreated(Tag.GOVERNANCE_POLICY_EXPORT_CREATED, value);
    }

    /**
     * (data_governance) Created a policy download
     *
     * <p> This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_EXPORT_CREATED}. </p>
     *
     * @return The {@link GovernancePolicyExportCreatedType} value associated
     *     with this instance if {@link #isGovernancePolicyExportCreated} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGovernancePolicyExportCreated} is {@code false}.
     */
    public GovernancePolicyExportCreatedType getGovernancePolicyExportCreatedValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_EXPORT_CREATED) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_EXPORT_CREATED, but was Tag." + this._tag.name());
        }
        return governancePolicyExportCreatedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_EXPORT_REMOVED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_EXPORT_REMOVED}, {@code false} otherwise.
     */
    public boolean isGovernancePolicyExportRemoved() {
        return this._tag == Tag.GOVERNANCE_POLICY_EXPORT_REMOVED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GOVERNANCE_POLICY_EXPORT_REMOVED}.
     *
     * <p> (data_governance) Removed a policy download </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_EXPORT_REMOVED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType governancePolicyExportRemoved(GovernancePolicyExportRemovedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGovernancePolicyExportRemoved(Tag.GOVERNANCE_POLICY_EXPORT_REMOVED, value);
    }

    /**
     * (data_governance) Removed a policy download
     *
     * <p> This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_EXPORT_REMOVED}. </p>
     *
     * @return The {@link GovernancePolicyExportRemovedType} value associated
     *     with this instance if {@link #isGovernancePolicyExportRemoved} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGovernancePolicyExportRemoved} is {@code false}.
     */
    public GovernancePolicyExportRemovedType getGovernancePolicyExportRemovedValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_EXPORT_REMOVED) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_EXPORT_REMOVED, but was Tag." + this._tag.name());
        }
        return governancePolicyExportRemovedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_REMOVE_FOLDERS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_REMOVE_FOLDERS}, {@code false} otherwise.
     */
    public boolean isGovernancePolicyRemoveFolders() {
        return this._tag == Tag.GOVERNANCE_POLICY_REMOVE_FOLDERS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GOVERNANCE_POLICY_REMOVE_FOLDERS}.
     *
     * <p> (data_governance) Removed folders from policy </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_REMOVE_FOLDERS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType governancePolicyRemoveFolders(GovernancePolicyRemoveFoldersType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGovernancePolicyRemoveFolders(Tag.GOVERNANCE_POLICY_REMOVE_FOLDERS, value);
    }

    /**
     * (data_governance) Removed folders from policy
     *
     * <p> This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_REMOVE_FOLDERS}. </p>
     *
     * @return The {@link GovernancePolicyRemoveFoldersType} value associated
     *     with this instance if {@link #isGovernancePolicyRemoveFolders} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGovernancePolicyRemoveFolders} is {@code false}.
     */
    public GovernancePolicyRemoveFoldersType getGovernancePolicyRemoveFoldersValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_REMOVE_FOLDERS) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_REMOVE_FOLDERS, but was Tag." + this._tag.name());
        }
        return governancePolicyRemoveFoldersValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_REPORT_CREATED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_REPORT_CREATED}, {@code false} otherwise.
     */
    public boolean isGovernancePolicyReportCreated() {
        return this._tag == Tag.GOVERNANCE_POLICY_REPORT_CREATED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GOVERNANCE_POLICY_REPORT_CREATED}.
     *
     * <p> (data_governance) Created a summary report for a policy </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_REPORT_CREATED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType governancePolicyReportCreated(GovernancePolicyReportCreatedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGovernancePolicyReportCreated(Tag.GOVERNANCE_POLICY_REPORT_CREATED, value);
    }

    /**
     * (data_governance) Created a summary report for a policy
     *
     * <p> This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_REPORT_CREATED}. </p>
     *
     * @return The {@link GovernancePolicyReportCreatedType} value associated
     *     with this instance if {@link #isGovernancePolicyReportCreated} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGovernancePolicyReportCreated} is {@code false}.
     */
    public GovernancePolicyReportCreatedType getGovernancePolicyReportCreatedValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_REPORT_CREATED) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_REPORT_CREATED, but was Tag." + this._tag.name());
        }
        return governancePolicyReportCreatedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED}, {@code false} otherwise.
     */
    public boolean isGovernancePolicyZipPartDownloaded() {
        return this._tag == Tag.GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED}.
     *
     * <p> (data_governance) Downloaded content from a policy </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType governancePolicyZipPartDownloaded(GovernancePolicyZipPartDownloadedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGovernancePolicyZipPartDownloaded(Tag.GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED, value);
    }

    /**
     * (data_governance) Downloaded content from a policy
     *
     * <p> This instance must be tagged as {@link
     * Tag#GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED}. </p>
     *
     * @return The {@link GovernancePolicyZipPartDownloadedType} value
     *     associated with this instance if {@link
     *     #isGovernancePolicyZipPartDownloaded} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGovernancePolicyZipPartDownloaded} is {@code false}.
     */
    public GovernancePolicyZipPartDownloadedType getGovernancePolicyZipPartDownloadedValue() {
        if (this._tag != Tag.GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED) {
            throw new IllegalStateException("Invalid tag: required Tag.GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED, but was Tag." + this._tag.name());
        }
        return governancePolicyZipPartDownloadedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_ACTIVATE_A_HOLD}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_ACTIVATE_A_HOLD}, {@code false} otherwise.
     */
    public boolean isLegalHoldsActivateAHold() {
        return this._tag == Tag.LEGAL_HOLDS_ACTIVATE_A_HOLD;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#LEGAL_HOLDS_ACTIVATE_A_HOLD}.
     *
     * <p> (data_governance) Activated a hold </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_ACTIVATE_A_HOLD}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType legalHoldsActivateAHold(LegalHoldsActivateAHoldType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndLegalHoldsActivateAHold(Tag.LEGAL_HOLDS_ACTIVATE_A_HOLD, value);
    }

    /**
     * (data_governance) Activated a hold
     *
     * <p> This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_ACTIVATE_A_HOLD}. </p>
     *
     * @return The {@link LegalHoldsActivateAHoldType} value associated with
     *     this instance if {@link #isLegalHoldsActivateAHold} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isLegalHoldsActivateAHold} is
     *     {@code false}.
     */
    public LegalHoldsActivateAHoldType getLegalHoldsActivateAHoldValue() {
        if (this._tag != Tag.LEGAL_HOLDS_ACTIVATE_A_HOLD) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_ACTIVATE_A_HOLD, but was Tag." + this._tag.name());
        }
        return legalHoldsActivateAHoldValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_ADD_MEMBERS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_ADD_MEMBERS}, {@code false} otherwise.
     */
    public boolean isLegalHoldsAddMembers() {
        return this._tag == Tag.LEGAL_HOLDS_ADD_MEMBERS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#LEGAL_HOLDS_ADD_MEMBERS}.
     *
     * <p> (data_governance) Added members to a hold </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_ADD_MEMBERS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType legalHoldsAddMembers(LegalHoldsAddMembersType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndLegalHoldsAddMembers(Tag.LEGAL_HOLDS_ADD_MEMBERS, value);
    }

    /**
     * (data_governance) Added members to a hold
     *
     * <p> This instance must be tagged as {@link Tag#LEGAL_HOLDS_ADD_MEMBERS}.
     * </p>
     *
     * @return The {@link LegalHoldsAddMembersType} value associated with this
     *     instance if {@link #isLegalHoldsAddMembers} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isLegalHoldsAddMembers} is
     *     {@code false}.
     */
    public LegalHoldsAddMembersType getLegalHoldsAddMembersValue() {
        if (this._tag != Tag.LEGAL_HOLDS_ADD_MEMBERS) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_ADD_MEMBERS, but was Tag." + this._tag.name());
        }
        return legalHoldsAddMembersValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_CHANGE_HOLD_DETAILS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_CHANGE_HOLD_DETAILS}, {@code false} otherwise.
     */
    public boolean isLegalHoldsChangeHoldDetails() {
        return this._tag == Tag.LEGAL_HOLDS_CHANGE_HOLD_DETAILS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#LEGAL_HOLDS_CHANGE_HOLD_DETAILS}.
     *
     * <p> (data_governance) Edited details for a hold </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_CHANGE_HOLD_DETAILS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType legalHoldsChangeHoldDetails(LegalHoldsChangeHoldDetailsType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndLegalHoldsChangeHoldDetails(Tag.LEGAL_HOLDS_CHANGE_HOLD_DETAILS, value);
    }

    /**
     * (data_governance) Edited details for a hold
     *
     * <p> This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_CHANGE_HOLD_DETAILS}. </p>
     *
     * @return The {@link LegalHoldsChangeHoldDetailsType} value associated with
     *     this instance if {@link #isLegalHoldsChangeHoldDetails} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isLegalHoldsChangeHoldDetails}
     *     is {@code false}.
     */
    public LegalHoldsChangeHoldDetailsType getLegalHoldsChangeHoldDetailsValue() {
        if (this._tag != Tag.LEGAL_HOLDS_CHANGE_HOLD_DETAILS) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_CHANGE_HOLD_DETAILS, but was Tag." + this._tag.name());
        }
        return legalHoldsChangeHoldDetailsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_CHANGE_HOLD_NAME}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_CHANGE_HOLD_NAME}, {@code false} otherwise.
     */
    public boolean isLegalHoldsChangeHoldName() {
        return this._tag == Tag.LEGAL_HOLDS_CHANGE_HOLD_NAME;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#LEGAL_HOLDS_CHANGE_HOLD_NAME}.
     *
     * <p> (data_governance) Renamed a hold </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_CHANGE_HOLD_NAME}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType legalHoldsChangeHoldName(LegalHoldsChangeHoldNameType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndLegalHoldsChangeHoldName(Tag.LEGAL_HOLDS_CHANGE_HOLD_NAME, value);
    }

    /**
     * (data_governance) Renamed a hold
     *
     * <p> This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_CHANGE_HOLD_NAME}. </p>
     *
     * @return The {@link LegalHoldsChangeHoldNameType} value associated with
     *     this instance if {@link #isLegalHoldsChangeHoldName} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isLegalHoldsChangeHoldName} is
     *     {@code false}.
     */
    public LegalHoldsChangeHoldNameType getLegalHoldsChangeHoldNameValue() {
        if (this._tag != Tag.LEGAL_HOLDS_CHANGE_HOLD_NAME) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_CHANGE_HOLD_NAME, but was Tag." + this._tag.name());
        }
        return legalHoldsChangeHoldNameValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_EXPORT_A_HOLD}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_EXPORT_A_HOLD}, {@code false} otherwise.
     */
    public boolean isLegalHoldsExportAHold() {
        return this._tag == Tag.LEGAL_HOLDS_EXPORT_A_HOLD;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#LEGAL_HOLDS_EXPORT_A_HOLD}.
     *
     * <p> (data_governance) Exported hold </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_EXPORT_A_HOLD}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType legalHoldsExportAHold(LegalHoldsExportAHoldType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndLegalHoldsExportAHold(Tag.LEGAL_HOLDS_EXPORT_A_HOLD, value);
    }

    /**
     * (data_governance) Exported hold
     *
     * <p> This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_EXPORT_A_HOLD}. </p>
     *
     * @return The {@link LegalHoldsExportAHoldType} value associated with this
     *     instance if {@link #isLegalHoldsExportAHold} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isLegalHoldsExportAHold} is
     *     {@code false}.
     */
    public LegalHoldsExportAHoldType getLegalHoldsExportAHoldValue() {
        if (this._tag != Tag.LEGAL_HOLDS_EXPORT_A_HOLD) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_EXPORT_A_HOLD, but was Tag." + this._tag.name());
        }
        return legalHoldsExportAHoldValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_EXPORT_CANCELLED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_EXPORT_CANCELLED}, {@code false} otherwise.
     */
    public boolean isLegalHoldsExportCancelled() {
        return this._tag == Tag.LEGAL_HOLDS_EXPORT_CANCELLED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#LEGAL_HOLDS_EXPORT_CANCELLED}.
     *
     * <p> (data_governance) Canceled export for a hold </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_EXPORT_CANCELLED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType legalHoldsExportCancelled(LegalHoldsExportCancelledType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndLegalHoldsExportCancelled(Tag.LEGAL_HOLDS_EXPORT_CANCELLED, value);
    }

    /**
     * (data_governance) Canceled export for a hold
     *
     * <p> This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_EXPORT_CANCELLED}. </p>
     *
     * @return The {@link LegalHoldsExportCancelledType} value associated with
     *     this instance if {@link #isLegalHoldsExportCancelled} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isLegalHoldsExportCancelled} is
     *     {@code false}.
     */
    public LegalHoldsExportCancelledType getLegalHoldsExportCancelledValue() {
        if (this._tag != Tag.LEGAL_HOLDS_EXPORT_CANCELLED) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_EXPORT_CANCELLED, but was Tag." + this._tag.name());
        }
        return legalHoldsExportCancelledValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_EXPORT_DOWNLOADED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_EXPORT_DOWNLOADED}, {@code false} otherwise.
     */
    public boolean isLegalHoldsExportDownloaded() {
        return this._tag == Tag.LEGAL_HOLDS_EXPORT_DOWNLOADED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#LEGAL_HOLDS_EXPORT_DOWNLOADED}.
     *
     * <p> (data_governance) Downloaded export for a hold </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_EXPORT_DOWNLOADED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType legalHoldsExportDownloaded(LegalHoldsExportDownloadedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndLegalHoldsExportDownloaded(Tag.LEGAL_HOLDS_EXPORT_DOWNLOADED, value);
    }

    /**
     * (data_governance) Downloaded export for a hold
     *
     * <p> This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_EXPORT_DOWNLOADED}. </p>
     *
     * @return The {@link LegalHoldsExportDownloadedType} value associated with
     *     this instance if {@link #isLegalHoldsExportDownloaded} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isLegalHoldsExportDownloaded}
     *     is {@code false}.
     */
    public LegalHoldsExportDownloadedType getLegalHoldsExportDownloadedValue() {
        if (this._tag != Tag.LEGAL_HOLDS_EXPORT_DOWNLOADED) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_EXPORT_DOWNLOADED, but was Tag." + this._tag.name());
        }
        return legalHoldsExportDownloadedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_EXPORT_REMOVED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_EXPORT_REMOVED}, {@code false} otherwise.
     */
    public boolean isLegalHoldsExportRemoved() {
        return this._tag == Tag.LEGAL_HOLDS_EXPORT_REMOVED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#LEGAL_HOLDS_EXPORT_REMOVED}.
     *
     * <p> (data_governance) Removed export for a hold </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_EXPORT_REMOVED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType legalHoldsExportRemoved(LegalHoldsExportRemovedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndLegalHoldsExportRemoved(Tag.LEGAL_HOLDS_EXPORT_REMOVED, value);
    }

    /**
     * (data_governance) Removed export for a hold
     *
     * <p> This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_EXPORT_REMOVED}. </p>
     *
     * @return The {@link LegalHoldsExportRemovedType} value associated with
     *     this instance if {@link #isLegalHoldsExportRemoved} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isLegalHoldsExportRemoved} is
     *     {@code false}.
     */
    public LegalHoldsExportRemovedType getLegalHoldsExportRemovedValue() {
        if (this._tag != Tag.LEGAL_HOLDS_EXPORT_REMOVED) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_EXPORT_REMOVED, but was Tag." + this._tag.name());
        }
        return legalHoldsExportRemovedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_RELEASE_A_HOLD}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_RELEASE_A_HOLD}, {@code false} otherwise.
     */
    public boolean isLegalHoldsReleaseAHold() {
        return this._tag == Tag.LEGAL_HOLDS_RELEASE_A_HOLD;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#LEGAL_HOLDS_RELEASE_A_HOLD}.
     *
     * <p> (data_governance) Released a hold </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_RELEASE_A_HOLD}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType legalHoldsReleaseAHold(LegalHoldsReleaseAHoldType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndLegalHoldsReleaseAHold(Tag.LEGAL_HOLDS_RELEASE_A_HOLD, value);
    }

    /**
     * (data_governance) Released a hold
     *
     * <p> This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_RELEASE_A_HOLD}. </p>
     *
     * @return The {@link LegalHoldsReleaseAHoldType} value associated with this
     *     instance if {@link #isLegalHoldsReleaseAHold} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isLegalHoldsReleaseAHold} is
     *     {@code false}.
     */
    public LegalHoldsReleaseAHoldType getLegalHoldsReleaseAHoldValue() {
        if (this._tag != Tag.LEGAL_HOLDS_RELEASE_A_HOLD) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_RELEASE_A_HOLD, but was Tag." + this._tag.name());
        }
        return legalHoldsReleaseAHoldValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_REMOVE_MEMBERS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_REMOVE_MEMBERS}, {@code false} otherwise.
     */
    public boolean isLegalHoldsRemoveMembers() {
        return this._tag == Tag.LEGAL_HOLDS_REMOVE_MEMBERS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#LEGAL_HOLDS_REMOVE_MEMBERS}.
     *
     * <p> (data_governance) Removed members from a hold </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_REMOVE_MEMBERS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType legalHoldsRemoveMembers(LegalHoldsRemoveMembersType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndLegalHoldsRemoveMembers(Tag.LEGAL_HOLDS_REMOVE_MEMBERS, value);
    }

    /**
     * (data_governance) Removed members from a hold
     *
     * <p> This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_REMOVE_MEMBERS}. </p>
     *
     * @return The {@link LegalHoldsRemoveMembersType} value associated with
     *     this instance if {@link #isLegalHoldsRemoveMembers} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isLegalHoldsRemoveMembers} is
     *     {@code false}.
     */
    public LegalHoldsRemoveMembersType getLegalHoldsRemoveMembersValue() {
        if (this._tag != Tag.LEGAL_HOLDS_REMOVE_MEMBERS) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_REMOVE_MEMBERS, but was Tag." + this._tag.name());
        }
        return legalHoldsRemoveMembersValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LEGAL_HOLDS_REPORT_A_HOLD}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LEGAL_HOLDS_REPORT_A_HOLD}, {@code false} otherwise.
     */
    public boolean isLegalHoldsReportAHold() {
        return this._tag == Tag.LEGAL_HOLDS_REPORT_A_HOLD;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#LEGAL_HOLDS_REPORT_A_HOLD}.
     *
     * <p> (data_governance) Created a summary report for a hold </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#LEGAL_HOLDS_REPORT_A_HOLD}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType legalHoldsReportAHold(LegalHoldsReportAHoldType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndLegalHoldsReportAHold(Tag.LEGAL_HOLDS_REPORT_A_HOLD, value);
    }

    /**
     * (data_governance) Created a summary report for a hold
     *
     * <p> This instance must be tagged as {@link
     * Tag#LEGAL_HOLDS_REPORT_A_HOLD}. </p>
     *
     * @return The {@link LegalHoldsReportAHoldType} value associated with this
     *     instance if {@link #isLegalHoldsReportAHold} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isLegalHoldsReportAHold} is
     *     {@code false}.
     */
    public LegalHoldsReportAHoldType getLegalHoldsReportAHoldValue() {
        if (this._tag != Tag.LEGAL_HOLDS_REPORT_A_HOLD) {
            throw new IllegalStateException("Invalid tag: required Tag.LEGAL_HOLDS_REPORT_A_HOLD, but was Tag." + this._tag.name());
        }
        return legalHoldsReportAHoldValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_CHANGE_IP_DESKTOP}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_CHANGE_IP_DESKTOP}, {@code false} otherwise.
     */
    public boolean isDeviceChangeIpDesktop() {
        return this._tag == Tag.DEVICE_CHANGE_IP_DESKTOP;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DEVICE_CHANGE_IP_DESKTOP}.
     *
     * <p> (devices) Changed IP address associated with active desktop session
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DEVICE_CHANGE_IP_DESKTOP}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType deviceChangeIpDesktop(DeviceChangeIpDesktopType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDeviceChangeIpDesktop(Tag.DEVICE_CHANGE_IP_DESKTOP, value);
    }

    /**
     * (devices) Changed IP address associated with active desktop session
     *
     * <p> This instance must be tagged as {@link Tag#DEVICE_CHANGE_IP_DESKTOP}.
     * </p>
     *
     * @return The {@link DeviceChangeIpDesktopType} value associated with this
     *     instance if {@link #isDeviceChangeIpDesktop} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isDeviceChangeIpDesktop} is
     *     {@code false}.
     */
    public DeviceChangeIpDesktopType getDeviceChangeIpDesktopValue() {
        if (this._tag != Tag.DEVICE_CHANGE_IP_DESKTOP) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_CHANGE_IP_DESKTOP, but was Tag." + this._tag.name());
        }
        return deviceChangeIpDesktopValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_CHANGE_IP_MOBILE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_CHANGE_IP_MOBILE}, {@code false} otherwise.
     */
    public boolean isDeviceChangeIpMobile() {
        return this._tag == Tag.DEVICE_CHANGE_IP_MOBILE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DEVICE_CHANGE_IP_MOBILE}.
     *
     * <p> (devices) Changed IP address associated with active mobile session
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DEVICE_CHANGE_IP_MOBILE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType deviceChangeIpMobile(DeviceChangeIpMobileType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDeviceChangeIpMobile(Tag.DEVICE_CHANGE_IP_MOBILE, value);
    }

    /**
     * (devices) Changed IP address associated with active mobile session
     *
     * <p> This instance must be tagged as {@link Tag#DEVICE_CHANGE_IP_MOBILE}.
     * </p>
     *
     * @return The {@link DeviceChangeIpMobileType} value associated with this
     *     instance if {@link #isDeviceChangeIpMobile} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isDeviceChangeIpMobile} is
     *     {@code false}.
     */
    public DeviceChangeIpMobileType getDeviceChangeIpMobileValue() {
        if (this._tag != Tag.DEVICE_CHANGE_IP_MOBILE) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_CHANGE_IP_MOBILE, but was Tag." + this._tag.name());
        }
        return deviceChangeIpMobileValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_CHANGE_IP_WEB}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_CHANGE_IP_WEB}, {@code false} otherwise.
     */
    public boolean isDeviceChangeIpWeb() {
        return this._tag == Tag.DEVICE_CHANGE_IP_WEB;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DEVICE_CHANGE_IP_WEB}.
     *
     * <p> (devices) Changed IP address associated with active web session </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DEVICE_CHANGE_IP_WEB}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType deviceChangeIpWeb(DeviceChangeIpWebType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDeviceChangeIpWeb(Tag.DEVICE_CHANGE_IP_WEB, value);
    }

    /**
     * (devices) Changed IP address associated with active web session
     *
     * <p> This instance must be tagged as {@link Tag#DEVICE_CHANGE_IP_WEB}.
     * </p>
     *
     * @return The {@link DeviceChangeIpWebType} value associated with this
     *     instance if {@link #isDeviceChangeIpWeb} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isDeviceChangeIpWeb} is {@code
     *     false}.
     */
    public DeviceChangeIpWebType getDeviceChangeIpWebValue() {
        if (this._tag != Tag.DEVICE_CHANGE_IP_WEB) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_CHANGE_IP_WEB, but was Tag." + this._tag.name());
        }
        return deviceChangeIpWebValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_DELETE_ON_UNLINK_FAIL}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_DELETE_ON_UNLINK_FAIL}, {@code false} otherwise.
     */
    public boolean isDeviceDeleteOnUnlinkFail() {
        return this._tag == Tag.DEVICE_DELETE_ON_UNLINK_FAIL;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DEVICE_DELETE_ON_UNLINK_FAIL}.
     *
     * <p> (devices) Failed to delete all files from unlinked device </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DEVICE_DELETE_ON_UNLINK_FAIL}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType deviceDeleteOnUnlinkFail(DeviceDeleteOnUnlinkFailType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDeviceDeleteOnUnlinkFail(Tag.DEVICE_DELETE_ON_UNLINK_FAIL, value);
    }

    /**
     * (devices) Failed to delete all files from unlinked device
     *
     * <p> This instance must be tagged as {@link
     * Tag#DEVICE_DELETE_ON_UNLINK_FAIL}. </p>
     *
     * @return The {@link DeviceDeleteOnUnlinkFailType} value associated with
     *     this instance if {@link #isDeviceDeleteOnUnlinkFail} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isDeviceDeleteOnUnlinkFail} is
     *     {@code false}.
     */
    public DeviceDeleteOnUnlinkFailType getDeviceDeleteOnUnlinkFailValue() {
        if (this._tag != Tag.DEVICE_DELETE_ON_UNLINK_FAIL) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_DELETE_ON_UNLINK_FAIL, but was Tag." + this._tag.name());
        }
        return deviceDeleteOnUnlinkFailValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_DELETE_ON_UNLINK_SUCCESS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_DELETE_ON_UNLINK_SUCCESS}, {@code false} otherwise.
     */
    public boolean isDeviceDeleteOnUnlinkSuccess() {
        return this._tag == Tag.DEVICE_DELETE_ON_UNLINK_SUCCESS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DEVICE_DELETE_ON_UNLINK_SUCCESS}.
     *
     * <p> (devices) Deleted all files from unlinked device </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DEVICE_DELETE_ON_UNLINK_SUCCESS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType deviceDeleteOnUnlinkSuccess(DeviceDeleteOnUnlinkSuccessType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDeviceDeleteOnUnlinkSuccess(Tag.DEVICE_DELETE_ON_UNLINK_SUCCESS, value);
    }

    /**
     * (devices) Deleted all files from unlinked device
     *
     * <p> This instance must be tagged as {@link
     * Tag#DEVICE_DELETE_ON_UNLINK_SUCCESS}. </p>
     *
     * @return The {@link DeviceDeleteOnUnlinkSuccessType} value associated with
     *     this instance if {@link #isDeviceDeleteOnUnlinkSuccess} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isDeviceDeleteOnUnlinkSuccess}
     *     is {@code false}.
     */
    public DeviceDeleteOnUnlinkSuccessType getDeviceDeleteOnUnlinkSuccessValue() {
        if (this._tag != Tag.DEVICE_DELETE_ON_UNLINK_SUCCESS) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_DELETE_ON_UNLINK_SUCCESS, but was Tag." + this._tag.name());
        }
        return deviceDeleteOnUnlinkSuccessValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_LINK_FAIL}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_LINK_FAIL}, {@code false} otherwise.
     */
    public boolean isDeviceLinkFail() {
        return this._tag == Tag.DEVICE_LINK_FAIL;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DEVICE_LINK_FAIL}.
     *
     * <p> (devices) Failed to link device </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DEVICE_LINK_FAIL}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType deviceLinkFail(DeviceLinkFailType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDeviceLinkFail(Tag.DEVICE_LINK_FAIL, value);
    }

    /**
     * (devices) Failed to link device
     *
     * <p> This instance must be tagged as {@link Tag#DEVICE_LINK_FAIL}. </p>
     *
     * @return The {@link DeviceLinkFailType} value associated with this
     *     instance if {@link #isDeviceLinkFail} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isDeviceLinkFail} is {@code
     *     false}.
     */
    public DeviceLinkFailType getDeviceLinkFailValue() {
        if (this._tag != Tag.DEVICE_LINK_FAIL) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_LINK_FAIL, but was Tag." + this._tag.name());
        }
        return deviceLinkFailValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_LINK_SUCCESS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_LINK_SUCCESS}, {@code false} otherwise.
     */
    public boolean isDeviceLinkSuccess() {
        return this._tag == Tag.DEVICE_LINK_SUCCESS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DEVICE_LINK_SUCCESS}.
     *
     * <p> (devices) Linked device </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DEVICE_LINK_SUCCESS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType deviceLinkSuccess(DeviceLinkSuccessType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDeviceLinkSuccess(Tag.DEVICE_LINK_SUCCESS, value);
    }

    /**
     * (devices) Linked device
     *
     * <p> This instance must be tagged as {@link Tag#DEVICE_LINK_SUCCESS}. </p>
     *
     * @return The {@link DeviceLinkSuccessType} value associated with this
     *     instance if {@link #isDeviceLinkSuccess} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isDeviceLinkSuccess} is {@code
     *     false}.
     */
    public DeviceLinkSuccessType getDeviceLinkSuccessValue() {
        if (this._tag != Tag.DEVICE_LINK_SUCCESS) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_LINK_SUCCESS, but was Tag." + this._tag.name());
        }
        return deviceLinkSuccessValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_MANAGEMENT_DISABLED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_MANAGEMENT_DISABLED}, {@code false} otherwise.
     */
    public boolean isDeviceManagementDisabled() {
        return this._tag == Tag.DEVICE_MANAGEMENT_DISABLED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DEVICE_MANAGEMENT_DISABLED}.
     *
     * <p> (devices) Disabled device management (deprecated, no longer logged)
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DEVICE_MANAGEMENT_DISABLED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType deviceManagementDisabled(DeviceManagementDisabledType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDeviceManagementDisabled(Tag.DEVICE_MANAGEMENT_DISABLED, value);
    }

    /**
     * (devices) Disabled device management (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#DEVICE_MANAGEMENT_DISABLED}. </p>
     *
     * @return The {@link DeviceManagementDisabledType} value associated with
     *     this instance if {@link #isDeviceManagementDisabled} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isDeviceManagementDisabled} is
     *     {@code false}.
     */
    public DeviceManagementDisabledType getDeviceManagementDisabledValue() {
        if (this._tag != Tag.DEVICE_MANAGEMENT_DISABLED) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_MANAGEMENT_DISABLED, but was Tag." + this._tag.name());
        }
        return deviceManagementDisabledValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_MANAGEMENT_ENABLED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_MANAGEMENT_ENABLED}, {@code false} otherwise.
     */
    public boolean isDeviceManagementEnabled() {
        return this._tag == Tag.DEVICE_MANAGEMENT_ENABLED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DEVICE_MANAGEMENT_ENABLED}.
     *
     * <p> (devices) Enabled device management (deprecated, no longer logged)
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DEVICE_MANAGEMENT_ENABLED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType deviceManagementEnabled(DeviceManagementEnabledType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDeviceManagementEnabled(Tag.DEVICE_MANAGEMENT_ENABLED, value);
    }

    /**
     * (devices) Enabled device management (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#DEVICE_MANAGEMENT_ENABLED}. </p>
     *
     * @return The {@link DeviceManagementEnabledType} value associated with
     *     this instance if {@link #isDeviceManagementEnabled} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isDeviceManagementEnabled} is
     *     {@code false}.
     */
    public DeviceManagementEnabledType getDeviceManagementEnabledValue() {
        if (this._tag != Tag.DEVICE_MANAGEMENT_ENABLED) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_MANAGEMENT_ENABLED, but was Tag." + this._tag.name());
        }
        return deviceManagementEnabledValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_SYNC_BACKUP_STATUS_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_SYNC_BACKUP_STATUS_CHANGED}, {@code false} otherwise.
     */
    public boolean isDeviceSyncBackupStatusChanged() {
        return this._tag == Tag.DEVICE_SYNC_BACKUP_STATUS_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DEVICE_SYNC_BACKUP_STATUS_CHANGED}.
     *
     * <p> (devices) Enabled/disabled backup for computer </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DEVICE_SYNC_BACKUP_STATUS_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType deviceSyncBackupStatusChanged(DeviceSyncBackupStatusChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDeviceSyncBackupStatusChanged(Tag.DEVICE_SYNC_BACKUP_STATUS_CHANGED, value);
    }

    /**
     * (devices) Enabled/disabled backup for computer
     *
     * <p> This instance must be tagged as {@link
     * Tag#DEVICE_SYNC_BACKUP_STATUS_CHANGED}. </p>
     *
     * @return The {@link DeviceSyncBackupStatusChangedType} value associated
     *     with this instance if {@link #isDeviceSyncBackupStatusChanged} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDeviceSyncBackupStatusChanged} is {@code false}.
     */
    public DeviceSyncBackupStatusChangedType getDeviceSyncBackupStatusChangedValue() {
        if (this._tag != Tag.DEVICE_SYNC_BACKUP_STATUS_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_SYNC_BACKUP_STATUS_CHANGED, but was Tag." + this._tag.name());
        }
        return deviceSyncBackupStatusChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_UNLINK}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_UNLINK}, {@code false} otherwise.
     */
    public boolean isDeviceUnlink() {
        return this._tag == Tag.DEVICE_UNLINK;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DEVICE_UNLINK}.
     *
     * <p> (devices) Disconnected device </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DEVICE_UNLINK}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType deviceUnlink(DeviceUnlinkType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDeviceUnlink(Tag.DEVICE_UNLINK, value);
    }

    /**
     * (devices) Disconnected device
     *
     * <p> This instance must be tagged as {@link Tag#DEVICE_UNLINK}. </p>
     *
     * @return The {@link DeviceUnlinkType} value associated with this instance
     *     if {@link #isDeviceUnlink} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isDeviceUnlink} is {@code
     *     false}.
     */
    public DeviceUnlinkType getDeviceUnlinkValue() {
        if (this._tag != Tag.DEVICE_UNLINK) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_UNLINK, but was Tag." + this._tag.name());
        }
        return deviceUnlinkValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DROPBOX_PASSWORDS_EXPORTED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DROPBOX_PASSWORDS_EXPORTED}, {@code false} otherwise.
     */
    public boolean isDropboxPasswordsExported() {
        return this._tag == Tag.DROPBOX_PASSWORDS_EXPORTED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DROPBOX_PASSWORDS_EXPORTED}.
     *
     * <p> (devices) Exported passwords </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DROPBOX_PASSWORDS_EXPORTED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType dropboxPasswordsExported(DropboxPasswordsExportedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDropboxPasswordsExported(Tag.DROPBOX_PASSWORDS_EXPORTED, value);
    }

    /**
     * (devices) Exported passwords
     *
     * <p> This instance must be tagged as {@link
     * Tag#DROPBOX_PASSWORDS_EXPORTED}. </p>
     *
     * @return The {@link DropboxPasswordsExportedType} value associated with
     *     this instance if {@link #isDropboxPasswordsExported} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isDropboxPasswordsExported} is
     *     {@code false}.
     */
    public DropboxPasswordsExportedType getDropboxPasswordsExportedValue() {
        if (this._tag != Tag.DROPBOX_PASSWORDS_EXPORTED) {
            throw new IllegalStateException("Invalid tag: required Tag.DROPBOX_PASSWORDS_EXPORTED, but was Tag." + this._tag.name());
        }
        return dropboxPasswordsExportedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED}, {@code false} otherwise.
     */
    public boolean isDropboxPasswordsNewDeviceEnrolled() {
        return this._tag == Tag.DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED}.
     *
     * <p> (devices) Enrolled new Dropbox Passwords device </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType dropboxPasswordsNewDeviceEnrolled(DropboxPasswordsNewDeviceEnrolledType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDropboxPasswordsNewDeviceEnrolled(Tag.DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED, value);
    }

    /**
     * (devices) Enrolled new Dropbox Passwords device
     *
     * <p> This instance must be tagged as {@link
     * Tag#DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED}. </p>
     *
     * @return The {@link DropboxPasswordsNewDeviceEnrolledType} value
     *     associated with this instance if {@link
     *     #isDropboxPasswordsNewDeviceEnrolled} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDropboxPasswordsNewDeviceEnrolled} is {@code false}.
     */
    public DropboxPasswordsNewDeviceEnrolledType getDropboxPasswordsNewDeviceEnrolledValue() {
        if (this._tag != Tag.DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED) {
            throw new IllegalStateException("Invalid tag: required Tag.DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED, but was Tag." + this._tag.name());
        }
        return dropboxPasswordsNewDeviceEnrolledValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EMM_REFRESH_AUTH_TOKEN}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EMM_REFRESH_AUTH_TOKEN}, {@code false} otherwise.
     */
    public boolean isEmmRefreshAuthToken() {
        return this._tag == Tag.EMM_REFRESH_AUTH_TOKEN;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#EMM_REFRESH_AUTH_TOKEN}.
     *
     * <p> (devices) Refreshed auth token used for setting up EMM </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#EMM_REFRESH_AUTH_TOKEN}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType emmRefreshAuthToken(EmmRefreshAuthTokenType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndEmmRefreshAuthToken(Tag.EMM_REFRESH_AUTH_TOKEN, value);
    }

    /**
     * (devices) Refreshed auth token used for setting up EMM
     *
     * <p> This instance must be tagged as {@link Tag#EMM_REFRESH_AUTH_TOKEN}.
     * </p>
     *
     * @return The {@link EmmRefreshAuthTokenType} value associated with this
     *     instance if {@link #isEmmRefreshAuthToken} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isEmmRefreshAuthToken} is
     *     {@code false}.
     */
    public EmmRefreshAuthTokenType getEmmRefreshAuthTokenValue() {
        if (this._tag != Tag.EMM_REFRESH_AUTH_TOKEN) {
            throw new IllegalStateException("Invalid tag: required Tag.EMM_REFRESH_AUTH_TOKEN, but was Tag." + this._tag.name());
        }
        return emmRefreshAuthTokenValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED}, {@code false}
     *     otherwise.
     */
    public boolean isExternalDriveBackupEligibilityStatusChecked() {
        return this._tag == Tag.EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED}.
     *
     * <p> (devices) Checked external drive backup eligibility status </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType externalDriveBackupEligibilityStatusChecked(ExternalDriveBackupEligibilityStatusCheckedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndExternalDriveBackupEligibilityStatusChecked(Tag.EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED, value);
    }

    /**
     * (devices) Checked external drive backup eligibility status
     *
     * <p> This instance must be tagged as {@link
     * Tag#EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED}. </p>
     *
     * @return The {@link ExternalDriveBackupEligibilityStatusCheckedType} value
     *     associated with this instance if {@link
     *     #isExternalDriveBackupEligibilityStatusChecked} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isExternalDriveBackupEligibilityStatusChecked} is {@code false}.
     */
    public ExternalDriveBackupEligibilityStatusCheckedType getExternalDriveBackupEligibilityStatusCheckedValue() {
        if (this._tag != Tag.EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED) {
            throw new IllegalStateException("Invalid tag: required Tag.EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED, but was Tag." + this._tag.name());
        }
        return externalDriveBackupEligibilityStatusCheckedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED}, {@code false} otherwise.
     */
    public boolean isExternalDriveBackupStatusChanged() {
        return this._tag == Tag.EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED}.
     *
     * <p> (devices) Modified external drive backup </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType externalDriveBackupStatusChanged(ExternalDriveBackupStatusChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndExternalDriveBackupStatusChanged(Tag.EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED, value);
    }

    /**
     * (devices) Modified external drive backup
     *
     * <p> This instance must be tagged as {@link
     * Tag#EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED}. </p>
     *
     * @return The {@link ExternalDriveBackupStatusChangedType} value associated
     *     with this instance if {@link #isExternalDriveBackupStatusChanged} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isExternalDriveBackupStatusChanged} is {@code false}.
     */
    public ExternalDriveBackupStatusChangedType getExternalDriveBackupStatusChangedValue() {
        if (this._tag != Tag.EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED, but was Tag." + this._tag.name());
        }
        return externalDriveBackupStatusChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ACCOUNT_CAPTURE_CHANGE_AVAILABILITY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ACCOUNT_CAPTURE_CHANGE_AVAILABILITY}, {@code false} otherwise.
     */
    public boolean isAccountCaptureChangeAvailability() {
        return this._tag == Tag.ACCOUNT_CAPTURE_CHANGE_AVAILABILITY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#ACCOUNT_CAPTURE_CHANGE_AVAILABILITY}.
     *
     * <p> (domains) Granted/revoked option to enable account capture on team
     * domains </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#ACCOUNT_CAPTURE_CHANGE_AVAILABILITY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType accountCaptureChangeAvailability(AccountCaptureChangeAvailabilityType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndAccountCaptureChangeAvailability(Tag.ACCOUNT_CAPTURE_CHANGE_AVAILABILITY, value);
    }

    /**
     * (domains) Granted/revoked option to enable account capture on team
     * domains
     *
     * <p> This instance must be tagged as {@link
     * Tag#ACCOUNT_CAPTURE_CHANGE_AVAILABILITY}. </p>
     *
     * @return The {@link AccountCaptureChangeAvailabilityType} value associated
     *     with this instance if {@link #isAccountCaptureChangeAvailability} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isAccountCaptureChangeAvailability} is {@code false}.
     */
    public AccountCaptureChangeAvailabilityType getAccountCaptureChangeAvailabilityValue() {
        if (this._tag != Tag.ACCOUNT_CAPTURE_CHANGE_AVAILABILITY) {
            throw new IllegalStateException("Invalid tag: required Tag.ACCOUNT_CAPTURE_CHANGE_AVAILABILITY, but was Tag." + this._tag.name());
        }
        return accountCaptureChangeAvailabilityValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ACCOUNT_CAPTURE_MIGRATE_ACCOUNT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ACCOUNT_CAPTURE_MIGRATE_ACCOUNT}, {@code false} otherwise.
     */
    public boolean isAccountCaptureMigrateAccount() {
        return this._tag == Tag.ACCOUNT_CAPTURE_MIGRATE_ACCOUNT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#ACCOUNT_CAPTURE_MIGRATE_ACCOUNT}.
     *
     * <p> (domains) Account-captured user migrated account to team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#ACCOUNT_CAPTURE_MIGRATE_ACCOUNT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType accountCaptureMigrateAccount(AccountCaptureMigrateAccountType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndAccountCaptureMigrateAccount(Tag.ACCOUNT_CAPTURE_MIGRATE_ACCOUNT, value);
    }

    /**
     * (domains) Account-captured user migrated account to team
     *
     * <p> This instance must be tagged as {@link
     * Tag#ACCOUNT_CAPTURE_MIGRATE_ACCOUNT}. </p>
     *
     * @return The {@link AccountCaptureMigrateAccountType} value associated
     *     with this instance if {@link #isAccountCaptureMigrateAccount} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link #isAccountCaptureMigrateAccount}
     *     is {@code false}.
     */
    public AccountCaptureMigrateAccountType getAccountCaptureMigrateAccountValue() {
        if (this._tag != Tag.ACCOUNT_CAPTURE_MIGRATE_ACCOUNT) {
            throw new IllegalStateException("Invalid tag: required Tag.ACCOUNT_CAPTURE_MIGRATE_ACCOUNT, but was Tag." + this._tag.name());
        }
        return accountCaptureMigrateAccountValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT}, {@code false}
     *     otherwise.
     */
    public boolean isAccountCaptureNotificationEmailsSent() {
        return this._tag == Tag.ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT}.
     *
     * <p> (domains) Sent account capture email to all unmanaged members </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType accountCaptureNotificationEmailsSent(AccountCaptureNotificationEmailsSentType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndAccountCaptureNotificationEmailsSent(Tag.ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT, value);
    }

    /**
     * (domains) Sent account capture email to all unmanaged members
     *
     * <p> This instance must be tagged as {@link
     * Tag#ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT}. </p>
     *
     * @return The {@link AccountCaptureNotificationEmailsSentType} value
     *     associated with this instance if {@link
     *     #isAccountCaptureNotificationEmailsSent} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isAccountCaptureNotificationEmailsSent} is {@code false}.
     */
    public AccountCaptureNotificationEmailsSentType getAccountCaptureNotificationEmailsSentValue() {
        if (this._tag != Tag.ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT) {
            throw new IllegalStateException("Invalid tag: required Tag.ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT, but was Tag." + this._tag.name());
        }
        return accountCaptureNotificationEmailsSentValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT}, {@code false} otherwise.
     */
    public boolean isAccountCaptureRelinquishAccount() {
        return this._tag == Tag.ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT}.
     *
     * <p> (domains) Account-captured user changed account email to personal
     * email </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType accountCaptureRelinquishAccount(AccountCaptureRelinquishAccountType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndAccountCaptureRelinquishAccount(Tag.ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT, value);
    }

    /**
     * (domains) Account-captured user changed account email to personal email
     *
     * <p> This instance must be tagged as {@link
     * Tag#ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT}. </p>
     *
     * @return The {@link AccountCaptureRelinquishAccountType} value associated
     *     with this instance if {@link #isAccountCaptureRelinquishAccount} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isAccountCaptureRelinquishAccount} is {@code false}.
     */
    public AccountCaptureRelinquishAccountType getAccountCaptureRelinquishAccountValue() {
        if (this._tag != Tag.ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT) {
            throw new IllegalStateException("Invalid tag: required Tag.ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT, but was Tag." + this._tag.name());
        }
        return accountCaptureRelinquishAccountValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DISABLED_DOMAIN_INVITES}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DISABLED_DOMAIN_INVITES}, {@code false} otherwise.
     */
    public boolean isDisabledDomainInvites() {
        return this._tag == Tag.DISABLED_DOMAIN_INVITES;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DISABLED_DOMAIN_INVITES}.
     *
     * <p> (domains) Disabled domain invites (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DISABLED_DOMAIN_INVITES}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType disabledDomainInvites(DisabledDomainInvitesType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDisabledDomainInvites(Tag.DISABLED_DOMAIN_INVITES, value);
    }

    /**
     * (domains) Disabled domain invites (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#DISABLED_DOMAIN_INVITES}.
     * </p>
     *
     * @return The {@link DisabledDomainInvitesType} value associated with this
     *     instance if {@link #isDisabledDomainInvites} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isDisabledDomainInvites} is
     *     {@code false}.
     */
    public DisabledDomainInvitesType getDisabledDomainInvitesValue() {
        if (this._tag != Tag.DISABLED_DOMAIN_INVITES) {
            throw new IllegalStateException("Invalid tag: required Tag.DISABLED_DOMAIN_INVITES, but was Tag." + this._tag.name());
        }
        return disabledDomainInvitesValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM}, {@code false}
     *     otherwise.
     */
    public boolean isDomainInvitesApproveRequestToJoinTeam() {
        return this._tag == Tag.DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM}.
     *
     * <p> (domains) Approved user's request to join team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType domainInvitesApproveRequestToJoinTeam(DomainInvitesApproveRequestToJoinTeamType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDomainInvitesApproveRequestToJoinTeam(Tag.DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM, value);
    }

    /**
     * (domains) Approved user's request to join team
     *
     * <p> This instance must be tagged as {@link
     * Tag#DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM}. </p>
     *
     * @return The {@link DomainInvitesApproveRequestToJoinTeamType} value
     *     associated with this instance if {@link
     *     #isDomainInvitesApproveRequestToJoinTeam} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDomainInvitesApproveRequestToJoinTeam} is {@code false}.
     */
    public DomainInvitesApproveRequestToJoinTeamType getDomainInvitesApproveRequestToJoinTeamValue() {
        if (this._tag != Tag.DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM) {
            throw new IllegalStateException("Invalid tag: required Tag.DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM, but was Tag." + this._tag.name());
        }
        return domainInvitesApproveRequestToJoinTeamValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM}, {@code false}
     *     otherwise.
     */
    public boolean isDomainInvitesDeclineRequestToJoinTeam() {
        return this._tag == Tag.DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM}.
     *
     * <p> (domains) Declined user's request to join team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType domainInvitesDeclineRequestToJoinTeam(DomainInvitesDeclineRequestToJoinTeamType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDomainInvitesDeclineRequestToJoinTeam(Tag.DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM, value);
    }

    /**
     * (domains) Declined user's request to join team
     *
     * <p> This instance must be tagged as {@link
     * Tag#DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM}. </p>
     *
     * @return The {@link DomainInvitesDeclineRequestToJoinTeamType} value
     *     associated with this instance if {@link
     *     #isDomainInvitesDeclineRequestToJoinTeam} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDomainInvitesDeclineRequestToJoinTeam} is {@code false}.
     */
    public DomainInvitesDeclineRequestToJoinTeamType getDomainInvitesDeclineRequestToJoinTeamValue() {
        if (this._tag != Tag.DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM) {
            throw new IllegalStateException("Invalid tag: required Tag.DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM, but was Tag." + this._tag.name());
        }
        return domainInvitesDeclineRequestToJoinTeamValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DOMAIN_INVITES_EMAIL_EXISTING_USERS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DOMAIN_INVITES_EMAIL_EXISTING_USERS}, {@code false} otherwise.
     */
    public boolean isDomainInvitesEmailExistingUsers() {
        return this._tag == Tag.DOMAIN_INVITES_EMAIL_EXISTING_USERS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DOMAIN_INVITES_EMAIL_EXISTING_USERS}.
     *
     * <p> (domains) Sent domain invites to existing domain accounts
     * (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DOMAIN_INVITES_EMAIL_EXISTING_USERS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType domainInvitesEmailExistingUsers(DomainInvitesEmailExistingUsersType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDomainInvitesEmailExistingUsers(Tag.DOMAIN_INVITES_EMAIL_EXISTING_USERS, value);
    }

    /**
     * (domains) Sent domain invites to existing domain accounts (deprecated, no
     * longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#DOMAIN_INVITES_EMAIL_EXISTING_USERS}. </p>
     *
     * @return The {@link DomainInvitesEmailExistingUsersType} value associated
     *     with this instance if {@link #isDomainInvitesEmailExistingUsers} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDomainInvitesEmailExistingUsers} is {@code false}.
     */
    public DomainInvitesEmailExistingUsersType getDomainInvitesEmailExistingUsersValue() {
        if (this._tag != Tag.DOMAIN_INVITES_EMAIL_EXISTING_USERS) {
            throw new IllegalStateException("Invalid tag: required Tag.DOMAIN_INVITES_EMAIL_EXISTING_USERS, but was Tag." + this._tag.name());
        }
        return domainInvitesEmailExistingUsersValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM}, {@code false} otherwise.
     */
    public boolean isDomainInvitesRequestToJoinTeam() {
        return this._tag == Tag.DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM}.
     *
     * <p> (domains) Requested to join team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType domainInvitesRequestToJoinTeam(DomainInvitesRequestToJoinTeamType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDomainInvitesRequestToJoinTeam(Tag.DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM, value);
    }

    /**
     * (domains) Requested to join team
     *
     * <p> This instance must be tagged as {@link
     * Tag#DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM}. </p>
     *
     * @return The {@link DomainInvitesRequestToJoinTeamType} value associated
     *     with this instance if {@link #isDomainInvitesRequestToJoinTeam} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDomainInvitesRequestToJoinTeam} is {@code false}.
     */
    public DomainInvitesRequestToJoinTeamType getDomainInvitesRequestToJoinTeamValue() {
        if (this._tag != Tag.DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM) {
            throw new IllegalStateException("Invalid tag: required Tag.DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM, but was Tag." + this._tag.name());
        }
        return domainInvitesRequestToJoinTeamValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO}, {@code false}
     *     otherwise.
     */
    public boolean isDomainInvitesSetInviteNewUserPrefToNo() {
        return this._tag == Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO}.
     *
     * <p> (domains) Disabled "Automatically invite new users" (deprecated, no
     * longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType domainInvitesSetInviteNewUserPrefToNo(DomainInvitesSetInviteNewUserPrefToNoType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDomainInvitesSetInviteNewUserPrefToNo(Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO, value);
    }

    /**
     * (domains) Disabled "Automatically invite new users" (deprecated, no
     * longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO}. </p>
     *
     * @return The {@link DomainInvitesSetInviteNewUserPrefToNoType} value
     *     associated with this instance if {@link
     *     #isDomainInvitesSetInviteNewUserPrefToNo} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDomainInvitesSetInviteNewUserPrefToNo} is {@code false}.
     */
    public DomainInvitesSetInviteNewUserPrefToNoType getDomainInvitesSetInviteNewUserPrefToNoValue() {
        if (this._tag != Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO) {
            throw new IllegalStateException("Invalid tag: required Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO, but was Tag." + this._tag.name());
        }
        return domainInvitesSetInviteNewUserPrefToNoValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES}, {@code false}
     *     otherwise.
     */
    public boolean isDomainInvitesSetInviteNewUserPrefToYes() {
        return this._tag == Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES}.
     *
     * <p> (domains) Enabled "Automatically invite new users" (deprecated, no
     * longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType domainInvitesSetInviteNewUserPrefToYes(DomainInvitesSetInviteNewUserPrefToYesType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDomainInvitesSetInviteNewUserPrefToYes(Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES, value);
    }

    /**
     * (domains) Enabled "Automatically invite new users" (deprecated, no longer
     * logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES}. </p>
     *
     * @return The {@link DomainInvitesSetInviteNewUserPrefToYesType} value
     *     associated with this instance if {@link
     *     #isDomainInvitesSetInviteNewUserPrefToYes} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDomainInvitesSetInviteNewUserPrefToYes} is {@code false}.
     */
    public DomainInvitesSetInviteNewUserPrefToYesType getDomainInvitesSetInviteNewUserPrefToYesValue() {
        if (this._tag != Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES) {
            throw new IllegalStateException("Invalid tag: required Tag.DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES, but was Tag." + this._tag.name());
        }
        return domainInvitesSetInviteNewUserPrefToYesValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL}, {@code false} otherwise.
     */
    public boolean isDomainVerificationAddDomainFail() {
        return this._tag == Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL}.
     *
     * <p> (domains) Failed to verify team domain </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType domainVerificationAddDomainFail(DomainVerificationAddDomainFailType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDomainVerificationAddDomainFail(Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL, value);
    }

    /**
     * (domains) Failed to verify team domain
     *
     * <p> This instance must be tagged as {@link
     * Tag#DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL}. </p>
     *
     * @return The {@link DomainVerificationAddDomainFailType} value associated
     *     with this instance if {@link #isDomainVerificationAddDomainFail} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDomainVerificationAddDomainFail} is {@code false}.
     */
    public DomainVerificationAddDomainFailType getDomainVerificationAddDomainFailValue() {
        if (this._tag != Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL) {
            throw new IllegalStateException("Invalid tag: required Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL, but was Tag." + this._tag.name());
        }
        return domainVerificationAddDomainFailValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS}, {@code false} otherwise.
     */
    public boolean isDomainVerificationAddDomainSuccess() {
        return this._tag == Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS}.
     *
     * <p> (domains) Verified team domain </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType domainVerificationAddDomainSuccess(DomainVerificationAddDomainSuccessType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDomainVerificationAddDomainSuccess(Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS, value);
    }

    /**
     * (domains) Verified team domain
     *
     * <p> This instance must be tagged as {@link
     * Tag#DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS}. </p>
     *
     * @return The {@link DomainVerificationAddDomainSuccessType} value
     *     associated with this instance if {@link
     *     #isDomainVerificationAddDomainSuccess} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDomainVerificationAddDomainSuccess} is {@code false}.
     */
    public DomainVerificationAddDomainSuccessType getDomainVerificationAddDomainSuccessValue() {
        if (this._tag != Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS) {
            throw new IllegalStateException("Invalid tag: required Tag.DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS, but was Tag." + this._tag.name());
        }
        return domainVerificationAddDomainSuccessValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DOMAIN_VERIFICATION_REMOVE_DOMAIN}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DOMAIN_VERIFICATION_REMOVE_DOMAIN}, {@code false} otherwise.
     */
    public boolean isDomainVerificationRemoveDomain() {
        return this._tag == Tag.DOMAIN_VERIFICATION_REMOVE_DOMAIN;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DOMAIN_VERIFICATION_REMOVE_DOMAIN}.
     *
     * <p> (domains) Removed domain from list of verified team domains </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DOMAIN_VERIFICATION_REMOVE_DOMAIN}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType domainVerificationRemoveDomain(DomainVerificationRemoveDomainType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDomainVerificationRemoveDomain(Tag.DOMAIN_VERIFICATION_REMOVE_DOMAIN, value);
    }

    /**
     * (domains) Removed domain from list of verified team domains
     *
     * <p> This instance must be tagged as {@link
     * Tag#DOMAIN_VERIFICATION_REMOVE_DOMAIN}. </p>
     *
     * @return The {@link DomainVerificationRemoveDomainType} value associated
     *     with this instance if {@link #isDomainVerificationRemoveDomain} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDomainVerificationRemoveDomain} is {@code false}.
     */
    public DomainVerificationRemoveDomainType getDomainVerificationRemoveDomainValue() {
        if (this._tag != Tag.DOMAIN_VERIFICATION_REMOVE_DOMAIN) {
            throw new IllegalStateException("Invalid tag: required Tag.DOMAIN_VERIFICATION_REMOVE_DOMAIN, but was Tag." + this._tag.name());
        }
        return domainVerificationRemoveDomainValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ENABLED_DOMAIN_INVITES}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ENABLED_DOMAIN_INVITES}, {@code false} otherwise.
     */
    public boolean isEnabledDomainInvites() {
        return this._tag == Tag.ENABLED_DOMAIN_INVITES;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#ENABLED_DOMAIN_INVITES}.
     *
     * <p> (domains) Enabled domain invites (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#ENABLED_DOMAIN_INVITES}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType enabledDomainInvites(EnabledDomainInvitesType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndEnabledDomainInvites(Tag.ENABLED_DOMAIN_INVITES, value);
    }

    /**
     * (domains) Enabled domain invites (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#ENABLED_DOMAIN_INVITES}.
     * </p>
     *
     * @return The {@link EnabledDomainInvitesType} value associated with this
     *     instance if {@link #isEnabledDomainInvites} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isEnabledDomainInvites} is
     *     {@code false}.
     */
    public EnabledDomainInvitesType getEnabledDomainInvitesValue() {
        if (this._tag != Tag.ENABLED_DOMAIN_INVITES) {
            throw new IllegalStateException("Invalid tag: required Tag.ENABLED_DOMAIN_INVITES, but was Tag." + this._tag.name());
        }
        return enabledDomainInvitesValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#APPLY_NAMING_CONVENTION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#APPLY_NAMING_CONVENTION}, {@code false} otherwise.
     */
    public boolean isApplyNamingConvention() {
        return this._tag == Tag.APPLY_NAMING_CONVENTION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#APPLY_NAMING_CONVENTION}.
     *
     * <p> (file_operations) Applied naming convention </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#APPLY_NAMING_CONVENTION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType applyNamingConvention(ApplyNamingConventionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndApplyNamingConvention(Tag.APPLY_NAMING_CONVENTION, value);
    }

    /**
     * (file_operations) Applied naming convention
     *
     * <p> This instance must be tagged as {@link Tag#APPLY_NAMING_CONVENTION}.
     * </p>
     *
     * @return The {@link ApplyNamingConventionType} value associated with this
     *     instance if {@link #isApplyNamingConvention} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isApplyNamingConvention} is
     *     {@code false}.
     */
    public ApplyNamingConventionType getApplyNamingConventionValue() {
        if (this._tag != Tag.APPLY_NAMING_CONVENTION) {
            throw new IllegalStateException("Invalid tag: required Tag.APPLY_NAMING_CONVENTION, but was Tag." + this._tag.name());
        }
        return applyNamingConventionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#CREATE_FOLDER}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#CREATE_FOLDER}, {@code false} otherwise.
     */
    public boolean isCreateFolder() {
        return this._tag == Tag.CREATE_FOLDER;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#CREATE_FOLDER}.
     *
     * <p> (file_operations) Created folders (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#CREATE_FOLDER}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType createFolder(CreateFolderType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndCreateFolder(Tag.CREATE_FOLDER, value);
    }

    /**
     * (file_operations) Created folders (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#CREATE_FOLDER}. </p>
     *
     * @return The {@link CreateFolderType} value associated with this instance
     *     if {@link #isCreateFolder} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isCreateFolder} is {@code
     *     false}.
     */
    public CreateFolderType getCreateFolderValue() {
        if (this._tag != Tag.CREATE_FOLDER) {
            throw new IllegalStateException("Invalid tag: required Tag.CREATE_FOLDER, but was Tag." + this._tag.name());
        }
        return createFolderValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link Tag#FILE_ADD},
     * {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link Tag#FILE_ADD},
     *     {@code false} otherwise.
     */
    public boolean isFileAdd() {
        return this._tag == Tag.FILE_ADD;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_ADD}.
     *
     * <p> (file_operations) Added files and/or folders </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_ADD}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileAdd(FileAddType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileAdd(Tag.FILE_ADD, value);
    }

    /**
     * (file_operations) Added files and/or folders
     *
     * <p> This instance must be tagged as {@link Tag#FILE_ADD}. </p>
     *
     * @return The {@link FileAddType} value associated with this instance if
     *     {@link #isFileAdd} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileAdd} is {@code false}.
     */
    public FileAddType getFileAddValue() {
        if (this._tag != Tag.FILE_ADD) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_ADD, but was Tag." + this._tag.name());
        }
        return fileAddValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link Tag#FILE_COPY},
     * {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link Tag#FILE_COPY},
     *     {@code false} otherwise.
     */
    public boolean isFileCopy() {
        return this._tag == Tag.FILE_COPY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_COPY}.
     *
     * <p> (file_operations) Copied files and/or folders </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_COPY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileCopy(FileCopyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileCopy(Tag.FILE_COPY, value);
    }

    /**
     * (file_operations) Copied files and/or folders
     *
     * <p> This instance must be tagged as {@link Tag#FILE_COPY}. </p>
     *
     * @return The {@link FileCopyType} value associated with this instance if
     *     {@link #isFileCopy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileCopy} is {@code false}.
     */
    public FileCopyType getFileCopyValue() {
        if (this._tag != Tag.FILE_COPY) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_COPY, but was Tag." + this._tag.name());
        }
        return fileCopyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_DELETE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_DELETE}, {@code false} otherwise.
     */
    public boolean isFileDelete() {
        return this._tag == Tag.FILE_DELETE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_DELETE}.
     *
     * <p> (file_operations) Deleted files and/or folders </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_DELETE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileDelete(FileDeleteType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileDelete(Tag.FILE_DELETE, value);
    }

    /**
     * (file_operations) Deleted files and/or folders
     *
     * <p> This instance must be tagged as {@link Tag#FILE_DELETE}. </p>
     *
     * @return The {@link FileDeleteType} value associated with this instance if
     *     {@link #isFileDelete} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileDelete} is {@code false}.
     */
    public FileDeleteType getFileDeleteValue() {
        if (this._tag != Tag.FILE_DELETE) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_DELETE, but was Tag." + this._tag.name());
        }
        return fileDeleteValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_DOWNLOAD}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_DOWNLOAD}, {@code false} otherwise.
     */
    public boolean isFileDownload() {
        return this._tag == Tag.FILE_DOWNLOAD;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_DOWNLOAD}.
     *
     * <p> (file_operations) Downloaded files and/or folders </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_DOWNLOAD}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileDownload(FileDownloadType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileDownload(Tag.FILE_DOWNLOAD, value);
    }

    /**
     * (file_operations) Downloaded files and/or folders
     *
     * <p> This instance must be tagged as {@link Tag#FILE_DOWNLOAD}. </p>
     *
     * @return The {@link FileDownloadType} value associated with this instance
     *     if {@link #isFileDownload} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileDownload} is {@code
     *     false}.
     */
    public FileDownloadType getFileDownloadValue() {
        if (this._tag != Tag.FILE_DOWNLOAD) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_DOWNLOAD, but was Tag." + this._tag.name());
        }
        return fileDownloadValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link Tag#FILE_EDIT},
     * {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link Tag#FILE_EDIT},
     *     {@code false} otherwise.
     */
    public boolean isFileEdit() {
        return this._tag == Tag.FILE_EDIT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_EDIT}.
     *
     * <p> (file_operations) Edited files </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_EDIT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileEdit(FileEditType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileEdit(Tag.FILE_EDIT, value);
    }

    /**
     * (file_operations) Edited files
     *
     * <p> This instance must be tagged as {@link Tag#FILE_EDIT}. </p>
     *
     * @return The {@link FileEditType} value associated with this instance if
     *     {@link #isFileEdit} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileEdit} is {@code false}.
     */
    public FileEditType getFileEditValue() {
        if (this._tag != Tag.FILE_EDIT) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_EDIT, but was Tag." + this._tag.name());
        }
        return fileEditValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_GET_COPY_REFERENCE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_GET_COPY_REFERENCE}, {@code false} otherwise.
     */
    public boolean isFileGetCopyReference() {
        return this._tag == Tag.FILE_GET_COPY_REFERENCE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_GET_COPY_REFERENCE}.
     *
     * <p> (file_operations) Created copy reference to file/folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_GET_COPY_REFERENCE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileGetCopyReference(FileGetCopyReferenceType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileGetCopyReference(Tag.FILE_GET_COPY_REFERENCE, value);
    }

    /**
     * (file_operations) Created copy reference to file/folder
     *
     * <p> This instance must be tagged as {@link Tag#FILE_GET_COPY_REFERENCE}.
     * </p>
     *
     * @return The {@link FileGetCopyReferenceType} value associated with this
     *     instance if {@link #isFileGetCopyReference} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileGetCopyReference} is
     *     {@code false}.
     */
    public FileGetCopyReferenceType getFileGetCopyReferenceValue() {
        if (this._tag != Tag.FILE_GET_COPY_REFERENCE) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_GET_COPY_REFERENCE, but was Tag." + this._tag.name());
        }
        return fileGetCopyReferenceValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_LOCKING_LOCK_STATUS_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_LOCKING_LOCK_STATUS_CHANGED}, {@code false} otherwise.
     */
    public boolean isFileLockingLockStatusChanged() {
        return this._tag == Tag.FILE_LOCKING_LOCK_STATUS_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_LOCKING_LOCK_STATUS_CHANGED}.
     *
     * <p> (file_operations) Locked/unlocked editing for a file </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_LOCKING_LOCK_STATUS_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileLockingLockStatusChanged(FileLockingLockStatusChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileLockingLockStatusChanged(Tag.FILE_LOCKING_LOCK_STATUS_CHANGED, value);
    }

    /**
     * (file_operations) Locked/unlocked editing for a file
     *
     * <p> This instance must be tagged as {@link
     * Tag#FILE_LOCKING_LOCK_STATUS_CHANGED}. </p>
     *
     * @return The {@link FileLockingLockStatusChangedType} value associated
     *     with this instance if {@link #isFileLockingLockStatusChanged} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileLockingLockStatusChanged}
     *     is {@code false}.
     */
    public FileLockingLockStatusChangedType getFileLockingLockStatusChangedValue() {
        if (this._tag != Tag.FILE_LOCKING_LOCK_STATUS_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_LOCKING_LOCK_STATUS_CHANGED, but was Tag." + this._tag.name());
        }
        return fileLockingLockStatusChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link Tag#FILE_MOVE},
     * {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link Tag#FILE_MOVE},
     *     {@code false} otherwise.
     */
    public boolean isFileMove() {
        return this._tag == Tag.FILE_MOVE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_MOVE}.
     *
     * <p> (file_operations) Moved files and/or folders </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_MOVE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileMove(FileMoveType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileMove(Tag.FILE_MOVE, value);
    }

    /**
     * (file_operations) Moved files and/or folders
     *
     * <p> This instance must be tagged as {@link Tag#FILE_MOVE}. </p>
     *
     * @return The {@link FileMoveType} value associated with this instance if
     *     {@link #isFileMove} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileMove} is {@code false}.
     */
    public FileMoveType getFileMoveValue() {
        if (this._tag != Tag.FILE_MOVE) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_MOVE, but was Tag." + this._tag.name());
        }
        return fileMoveValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_PERMANENTLY_DELETE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_PERMANENTLY_DELETE}, {@code false} otherwise.
     */
    public boolean isFilePermanentlyDelete() {
        return this._tag == Tag.FILE_PERMANENTLY_DELETE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_PERMANENTLY_DELETE}.
     *
     * <p> (file_operations) Permanently deleted files and/or folders </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_PERMANENTLY_DELETE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType filePermanentlyDelete(FilePermanentlyDeleteType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFilePermanentlyDelete(Tag.FILE_PERMANENTLY_DELETE, value);
    }

    /**
     * (file_operations) Permanently deleted files and/or folders
     *
     * <p> This instance must be tagged as {@link Tag#FILE_PERMANENTLY_DELETE}.
     * </p>
     *
     * @return The {@link FilePermanentlyDeleteType} value associated with this
     *     instance if {@link #isFilePermanentlyDelete} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFilePermanentlyDelete} is
     *     {@code false}.
     */
    public FilePermanentlyDeleteType getFilePermanentlyDeleteValue() {
        if (this._tag != Tag.FILE_PERMANENTLY_DELETE) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_PERMANENTLY_DELETE, but was Tag." + this._tag.name());
        }
        return filePermanentlyDeleteValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_PREVIEW}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_PREVIEW}, {@code false} otherwise.
     */
    public boolean isFilePreview() {
        return this._tag == Tag.FILE_PREVIEW;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_PREVIEW}.
     *
     * <p> (file_operations) Previewed files and/or folders </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_PREVIEW}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType filePreview(FilePreviewType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFilePreview(Tag.FILE_PREVIEW, value);
    }

    /**
     * (file_operations) Previewed files and/or folders
     *
     * <p> This instance must be tagged as {@link Tag#FILE_PREVIEW}. </p>
     *
     * @return The {@link FilePreviewType} value associated with this instance
     *     if {@link #isFilePreview} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFilePreview} is {@code
     *     false}.
     */
    public FilePreviewType getFilePreviewValue() {
        if (this._tag != Tag.FILE_PREVIEW) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_PREVIEW, but was Tag." + this._tag.name());
        }
        return filePreviewValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_RENAME}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_RENAME}, {@code false} otherwise.
     */
    public boolean isFileRename() {
        return this._tag == Tag.FILE_RENAME;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_RENAME}.
     *
     * <p> (file_operations) Renamed files and/or folders </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_RENAME}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileRename(FileRenameType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileRename(Tag.FILE_RENAME, value);
    }

    /**
     * (file_operations) Renamed files and/or folders
     *
     * <p> This instance must be tagged as {@link Tag#FILE_RENAME}. </p>
     *
     * @return The {@link FileRenameType} value associated with this instance if
     *     {@link #isFileRename} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileRename} is {@code false}.
     */
    public FileRenameType getFileRenameValue() {
        if (this._tag != Tag.FILE_RENAME) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_RENAME, but was Tag." + this._tag.name());
        }
        return fileRenameValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_RESTORE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_RESTORE}, {@code false} otherwise.
     */
    public boolean isFileRestore() {
        return this._tag == Tag.FILE_RESTORE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_RESTORE}.
     *
     * <p> (file_operations) Restored deleted files and/or folders </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_RESTORE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileRestore(FileRestoreType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileRestore(Tag.FILE_RESTORE, value);
    }

    /**
     * (file_operations) Restored deleted files and/or folders
     *
     * <p> This instance must be tagged as {@link Tag#FILE_RESTORE}. </p>
     *
     * @return The {@link FileRestoreType} value associated with this instance
     *     if {@link #isFileRestore} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileRestore} is {@code
     *     false}.
     */
    public FileRestoreType getFileRestoreValue() {
        if (this._tag != Tag.FILE_RESTORE) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_RESTORE, but was Tag." + this._tag.name());
        }
        return fileRestoreValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_REVERT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_REVERT}, {@code false} otherwise.
     */
    public boolean isFileRevert() {
        return this._tag == Tag.FILE_REVERT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_REVERT}.
     *
     * <p> (file_operations) Reverted files to previous version </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_REVERT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileRevert(FileRevertType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileRevert(Tag.FILE_REVERT, value);
    }

    /**
     * (file_operations) Reverted files to previous version
     *
     * <p> This instance must be tagged as {@link Tag#FILE_REVERT}. </p>
     *
     * @return The {@link FileRevertType} value associated with this instance if
     *     {@link #isFileRevert} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileRevert} is {@code false}.
     */
    public FileRevertType getFileRevertValue() {
        if (this._tag != Tag.FILE_REVERT) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_REVERT, but was Tag." + this._tag.name());
        }
        return fileRevertValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_ROLLBACK_CHANGES}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_ROLLBACK_CHANGES}, {@code false} otherwise.
     */
    public boolean isFileRollbackChanges() {
        return this._tag == Tag.FILE_ROLLBACK_CHANGES;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_ROLLBACK_CHANGES}.
     *
     * <p> (file_operations) Rolled back file actions </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_ROLLBACK_CHANGES}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileRollbackChanges(FileRollbackChangesType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileRollbackChanges(Tag.FILE_ROLLBACK_CHANGES, value);
    }

    /**
     * (file_operations) Rolled back file actions
     *
     * <p> This instance must be tagged as {@link Tag#FILE_ROLLBACK_CHANGES}.
     * </p>
     *
     * @return The {@link FileRollbackChangesType} value associated with this
     *     instance if {@link #isFileRollbackChanges} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileRollbackChanges} is
     *     {@code false}.
     */
    public FileRollbackChangesType getFileRollbackChangesValue() {
        if (this._tag != Tag.FILE_ROLLBACK_CHANGES) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_ROLLBACK_CHANGES, but was Tag." + this._tag.name());
        }
        return fileRollbackChangesValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_SAVE_COPY_REFERENCE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_SAVE_COPY_REFERENCE}, {@code false} otherwise.
     */
    public boolean isFileSaveCopyReference() {
        return this._tag == Tag.FILE_SAVE_COPY_REFERENCE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_SAVE_COPY_REFERENCE}.
     *
     * <p> (file_operations) Saved file/folder using copy reference </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_SAVE_COPY_REFERENCE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileSaveCopyReference(FileSaveCopyReferenceType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileSaveCopyReference(Tag.FILE_SAVE_COPY_REFERENCE, value);
    }

    /**
     * (file_operations) Saved file/folder using copy reference
     *
     * <p> This instance must be tagged as {@link Tag#FILE_SAVE_COPY_REFERENCE}.
     * </p>
     *
     * @return The {@link FileSaveCopyReferenceType} value associated with this
     *     instance if {@link #isFileSaveCopyReference} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileSaveCopyReference} is
     *     {@code false}.
     */
    public FileSaveCopyReferenceType getFileSaveCopyReferenceValue() {
        if (this._tag != Tag.FILE_SAVE_COPY_REFERENCE) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_SAVE_COPY_REFERENCE, but was Tag." + this._tag.name());
        }
        return fileSaveCopyReferenceValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FOLDER_OVERVIEW_DESCRIPTION_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FOLDER_OVERVIEW_DESCRIPTION_CHANGED}, {@code false} otherwise.
     */
    public boolean isFolderOverviewDescriptionChanged() {
        return this._tag == Tag.FOLDER_OVERVIEW_DESCRIPTION_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FOLDER_OVERVIEW_DESCRIPTION_CHANGED}.
     *
     * <p> (file_operations) Updated folder overview </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FOLDER_OVERVIEW_DESCRIPTION_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType folderOverviewDescriptionChanged(FolderOverviewDescriptionChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFolderOverviewDescriptionChanged(Tag.FOLDER_OVERVIEW_DESCRIPTION_CHANGED, value);
    }

    /**
     * (file_operations) Updated folder overview
     *
     * <p> This instance must be tagged as {@link
     * Tag#FOLDER_OVERVIEW_DESCRIPTION_CHANGED}. </p>
     *
     * @return The {@link FolderOverviewDescriptionChangedType} value associated
     *     with this instance if {@link #isFolderOverviewDescriptionChanged} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFolderOverviewDescriptionChanged} is {@code false}.
     */
    public FolderOverviewDescriptionChangedType getFolderOverviewDescriptionChangedValue() {
        if (this._tag != Tag.FOLDER_OVERVIEW_DESCRIPTION_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.FOLDER_OVERVIEW_DESCRIPTION_CHANGED, but was Tag." + this._tag.name());
        }
        return folderOverviewDescriptionChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FOLDER_OVERVIEW_ITEM_PINNED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FOLDER_OVERVIEW_ITEM_PINNED}, {@code false} otherwise.
     */
    public boolean isFolderOverviewItemPinned() {
        return this._tag == Tag.FOLDER_OVERVIEW_ITEM_PINNED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FOLDER_OVERVIEW_ITEM_PINNED}.
     *
     * <p> (file_operations) Pinned item to folder overview </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FOLDER_OVERVIEW_ITEM_PINNED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType folderOverviewItemPinned(FolderOverviewItemPinnedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFolderOverviewItemPinned(Tag.FOLDER_OVERVIEW_ITEM_PINNED, value);
    }

    /**
     * (file_operations) Pinned item to folder overview
     *
     * <p> This instance must be tagged as {@link
     * Tag#FOLDER_OVERVIEW_ITEM_PINNED}. </p>
     *
     * @return The {@link FolderOverviewItemPinnedType} value associated with
     *     this instance if {@link #isFolderOverviewItemPinned} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFolderOverviewItemPinned} is
     *     {@code false}.
     */
    public FolderOverviewItemPinnedType getFolderOverviewItemPinnedValue() {
        if (this._tag != Tag.FOLDER_OVERVIEW_ITEM_PINNED) {
            throw new IllegalStateException("Invalid tag: required Tag.FOLDER_OVERVIEW_ITEM_PINNED, but was Tag." + this._tag.name());
        }
        return folderOverviewItemPinnedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FOLDER_OVERVIEW_ITEM_UNPINNED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FOLDER_OVERVIEW_ITEM_UNPINNED}, {@code false} otherwise.
     */
    public boolean isFolderOverviewItemUnpinned() {
        return this._tag == Tag.FOLDER_OVERVIEW_ITEM_UNPINNED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FOLDER_OVERVIEW_ITEM_UNPINNED}.
     *
     * <p> (file_operations) Unpinned item from folder overview </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FOLDER_OVERVIEW_ITEM_UNPINNED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType folderOverviewItemUnpinned(FolderOverviewItemUnpinnedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFolderOverviewItemUnpinned(Tag.FOLDER_OVERVIEW_ITEM_UNPINNED, value);
    }

    /**
     * (file_operations) Unpinned item from folder overview
     *
     * <p> This instance must be tagged as {@link
     * Tag#FOLDER_OVERVIEW_ITEM_UNPINNED}. </p>
     *
     * @return The {@link FolderOverviewItemUnpinnedType} value associated with
     *     this instance if {@link #isFolderOverviewItemUnpinned} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isFolderOverviewItemUnpinned}
     *     is {@code false}.
     */
    public FolderOverviewItemUnpinnedType getFolderOverviewItemUnpinnedValue() {
        if (this._tag != Tag.FOLDER_OVERVIEW_ITEM_UNPINNED) {
            throw new IllegalStateException("Invalid tag: required Tag.FOLDER_OVERVIEW_ITEM_UNPINNED, but was Tag." + this._tag.name());
        }
        return folderOverviewItemUnpinnedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#OBJECT_LABEL_ADDED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#OBJECT_LABEL_ADDED}, {@code false} otherwise.
     */
    public boolean isObjectLabelAdded() {
        return this._tag == Tag.OBJECT_LABEL_ADDED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#OBJECT_LABEL_ADDED}.
     *
     * <p> (file_operations) Added a label </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#OBJECT_LABEL_ADDED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType objectLabelAdded(ObjectLabelAddedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndObjectLabelAdded(Tag.OBJECT_LABEL_ADDED, value);
    }

    /**
     * (file_operations) Added a label
     *
     * <p> This instance must be tagged as {@link Tag#OBJECT_LABEL_ADDED}. </p>
     *
     * @return The {@link ObjectLabelAddedType} value associated with this
     *     instance if {@link #isObjectLabelAdded} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isObjectLabelAdded} is {@code
     *     false}.
     */
    public ObjectLabelAddedType getObjectLabelAddedValue() {
        if (this._tag != Tag.OBJECT_LABEL_ADDED) {
            throw new IllegalStateException("Invalid tag: required Tag.OBJECT_LABEL_ADDED, but was Tag." + this._tag.name());
        }
        return objectLabelAddedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#OBJECT_LABEL_REMOVED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#OBJECT_LABEL_REMOVED}, {@code false} otherwise.
     */
    public boolean isObjectLabelRemoved() {
        return this._tag == Tag.OBJECT_LABEL_REMOVED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#OBJECT_LABEL_REMOVED}.
     *
     * <p> (file_operations) Removed a label </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#OBJECT_LABEL_REMOVED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType objectLabelRemoved(ObjectLabelRemovedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndObjectLabelRemoved(Tag.OBJECT_LABEL_REMOVED, value);
    }

    /**
     * (file_operations) Removed a label
     *
     * <p> This instance must be tagged as {@link Tag#OBJECT_LABEL_REMOVED}.
     * </p>
     *
     * @return The {@link ObjectLabelRemovedType} value associated with this
     *     instance if {@link #isObjectLabelRemoved} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isObjectLabelRemoved} is {@code
     *     false}.
     */
    public ObjectLabelRemovedType getObjectLabelRemovedValue() {
        if (this._tag != Tag.OBJECT_LABEL_REMOVED) {
            throw new IllegalStateException("Invalid tag: required Tag.OBJECT_LABEL_REMOVED, but was Tag." + this._tag.name());
        }
        return objectLabelRemovedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#OBJECT_LABEL_UPDATED_VALUE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#OBJECT_LABEL_UPDATED_VALUE}, {@code false} otherwise.
     */
    public boolean isObjectLabelUpdatedValue() {
        return this._tag == Tag.OBJECT_LABEL_UPDATED_VALUE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#OBJECT_LABEL_UPDATED_VALUE}.
     *
     * <p> (file_operations) Updated a label's value </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#OBJECT_LABEL_UPDATED_VALUE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType objectLabelUpdatedValue(ObjectLabelUpdatedValueType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndObjectLabelUpdatedValue(Tag.OBJECT_LABEL_UPDATED_VALUE, value);
    }

    /**
     * (file_operations) Updated a label's value
     *
     * <p> This instance must be tagged as {@link
     * Tag#OBJECT_LABEL_UPDATED_VALUE}. </p>
     *
     * @return The {@link ObjectLabelUpdatedValueType} value associated with
     *     this instance if {@link #isObjectLabelUpdatedValue} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isObjectLabelUpdatedValue} is
     *     {@code false}.
     */
    public ObjectLabelUpdatedValueType getObjectLabelUpdatedValueValue() {
        if (this._tag != Tag.OBJECT_LABEL_UPDATED_VALUE) {
            throw new IllegalStateException("Invalid tag: required Tag.OBJECT_LABEL_UPDATED_VALUE, but was Tag." + this._tag.name());
        }
        return objectLabelUpdatedValueValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ORGANIZE_FOLDER_WITH_TIDY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ORGANIZE_FOLDER_WITH_TIDY}, {@code false} otherwise.
     */
    public boolean isOrganizeFolderWithTidy() {
        return this._tag == Tag.ORGANIZE_FOLDER_WITH_TIDY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#ORGANIZE_FOLDER_WITH_TIDY}.
     *
     * <p> (file_operations) Organized a folder with multi-file organize </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#ORGANIZE_FOLDER_WITH_TIDY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType organizeFolderWithTidy(OrganizeFolderWithTidyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndOrganizeFolderWithTidy(Tag.ORGANIZE_FOLDER_WITH_TIDY, value);
    }

    /**
     * (file_operations) Organized a folder with multi-file organize
     *
     * <p> This instance must be tagged as {@link
     * Tag#ORGANIZE_FOLDER_WITH_TIDY}. </p>
     *
     * @return The {@link OrganizeFolderWithTidyType} value associated with this
     *     instance if {@link #isOrganizeFolderWithTidy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isOrganizeFolderWithTidy} is
     *     {@code false}.
     */
    public OrganizeFolderWithTidyType getOrganizeFolderWithTidyValue() {
        if (this._tag != Tag.ORGANIZE_FOLDER_WITH_TIDY) {
            throw new IllegalStateException("Invalid tag: required Tag.ORGANIZE_FOLDER_WITH_TIDY, but was Tag." + this._tag.name());
        }
        return organizeFolderWithTidyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#REWIND_FOLDER}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#REWIND_FOLDER}, {@code false} otherwise.
     */
    public boolean isRewindFolder() {
        return this._tag == Tag.REWIND_FOLDER;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#REWIND_FOLDER}.
     *
     * <p> (file_operations) Rewound a folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#REWIND_FOLDER}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType rewindFolder(RewindFolderType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndRewindFolder(Tag.REWIND_FOLDER, value);
    }

    /**
     * (file_operations) Rewound a folder
     *
     * <p> This instance must be tagged as {@link Tag#REWIND_FOLDER}. </p>
     *
     * @return The {@link RewindFolderType} value associated with this instance
     *     if {@link #isRewindFolder} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isRewindFolder} is {@code
     *     false}.
     */
    public RewindFolderType getRewindFolderValue() {
        if (this._tag != Tag.REWIND_FOLDER) {
            throw new IllegalStateException("Invalid tag: required Tag.REWIND_FOLDER, but was Tag." + this._tag.name());
        }
        return rewindFolderValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#UNDO_NAMING_CONVENTION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#UNDO_NAMING_CONVENTION}, {@code false} otherwise.
     */
    public boolean isUndoNamingConvention() {
        return this._tag == Tag.UNDO_NAMING_CONVENTION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#UNDO_NAMING_CONVENTION}.
     *
     * <p> (file_operations) Reverted naming convention </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#UNDO_NAMING_CONVENTION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType undoNamingConvention(UndoNamingConventionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndUndoNamingConvention(Tag.UNDO_NAMING_CONVENTION, value);
    }

    /**
     * (file_operations) Reverted naming convention
     *
     * <p> This instance must be tagged as {@link Tag#UNDO_NAMING_CONVENTION}.
     * </p>
     *
     * @return The {@link UndoNamingConventionType} value associated with this
     *     instance if {@link #isUndoNamingConvention} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isUndoNamingConvention} is
     *     {@code false}.
     */
    public UndoNamingConventionType getUndoNamingConventionValue() {
        if (this._tag != Tag.UNDO_NAMING_CONVENTION) {
            throw new IllegalStateException("Invalid tag: required Tag.UNDO_NAMING_CONVENTION, but was Tag." + this._tag.name());
        }
        return undoNamingConventionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#UNDO_ORGANIZE_FOLDER_WITH_TIDY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#UNDO_ORGANIZE_FOLDER_WITH_TIDY}, {@code false} otherwise.
     */
    public boolean isUndoOrganizeFolderWithTidy() {
        return this._tag == Tag.UNDO_ORGANIZE_FOLDER_WITH_TIDY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#UNDO_ORGANIZE_FOLDER_WITH_TIDY}.
     *
     * <p> (file_operations) Removed multi-file organize </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#UNDO_ORGANIZE_FOLDER_WITH_TIDY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType undoOrganizeFolderWithTidy(UndoOrganizeFolderWithTidyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndUndoOrganizeFolderWithTidy(Tag.UNDO_ORGANIZE_FOLDER_WITH_TIDY, value);
    }

    /**
     * (file_operations) Removed multi-file organize
     *
     * <p> This instance must be tagged as {@link
     * Tag#UNDO_ORGANIZE_FOLDER_WITH_TIDY}. </p>
     *
     * @return The {@link UndoOrganizeFolderWithTidyType} value associated with
     *     this instance if {@link #isUndoOrganizeFolderWithTidy} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isUndoOrganizeFolderWithTidy}
     *     is {@code false}.
     */
    public UndoOrganizeFolderWithTidyType getUndoOrganizeFolderWithTidyValue() {
        if (this._tag != Tag.UNDO_ORGANIZE_FOLDER_WITH_TIDY) {
            throw new IllegalStateException("Invalid tag: required Tag.UNDO_ORGANIZE_FOLDER_WITH_TIDY, but was Tag." + this._tag.name());
        }
        return undoOrganizeFolderWithTidyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#USER_TAGS_ADDED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#USER_TAGS_ADDED}, {@code false} otherwise.
     */
    public boolean isUserTagsAdded() {
        return this._tag == Tag.USER_TAGS_ADDED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#USER_TAGS_ADDED}.
     *
     * <p> (file_operations) Tagged a file </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#USER_TAGS_ADDED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType userTagsAdded(UserTagsAddedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndUserTagsAdded(Tag.USER_TAGS_ADDED, value);
    }

    /**
     * (file_operations) Tagged a file
     *
     * <p> This instance must be tagged as {@link Tag#USER_TAGS_ADDED}. </p>
     *
     * @return The {@link UserTagsAddedType} value associated with this instance
     *     if {@link #isUserTagsAdded} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isUserTagsAdded} is {@code
     *     false}.
     */
    public UserTagsAddedType getUserTagsAddedValue() {
        if (this._tag != Tag.USER_TAGS_ADDED) {
            throw new IllegalStateException("Invalid tag: required Tag.USER_TAGS_ADDED, but was Tag." + this._tag.name());
        }
        return userTagsAddedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#USER_TAGS_REMOVED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#USER_TAGS_REMOVED}, {@code false} otherwise.
     */
    public boolean isUserTagsRemoved() {
        return this._tag == Tag.USER_TAGS_REMOVED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#USER_TAGS_REMOVED}.
     *
     * <p> (file_operations) Removed tags </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#USER_TAGS_REMOVED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType userTagsRemoved(UserTagsRemovedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndUserTagsRemoved(Tag.USER_TAGS_REMOVED, value);
    }

    /**
     * (file_operations) Removed tags
     *
     * <p> This instance must be tagged as {@link Tag#USER_TAGS_REMOVED}. </p>
     *
     * @return The {@link UserTagsRemovedType} value associated with this
     *     instance if {@link #isUserTagsRemoved} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isUserTagsRemoved} is {@code
     *     false}.
     */
    public UserTagsRemovedType getUserTagsRemovedValue() {
        if (this._tag != Tag.USER_TAGS_REMOVED) {
            throw new IllegalStateException("Invalid tag: required Tag.USER_TAGS_REMOVED, but was Tag." + this._tag.name());
        }
        return userTagsRemovedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EMAIL_INGEST_RECEIVE_FILE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EMAIL_INGEST_RECEIVE_FILE}, {@code false} otherwise.
     */
    public boolean isEmailIngestReceiveFile() {
        return this._tag == Tag.EMAIL_INGEST_RECEIVE_FILE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#EMAIL_INGEST_RECEIVE_FILE}.
     *
     * <p> (file_requests) Received files via Email to Dropbox </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#EMAIL_INGEST_RECEIVE_FILE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType emailIngestReceiveFile(EmailIngestReceiveFileType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndEmailIngestReceiveFile(Tag.EMAIL_INGEST_RECEIVE_FILE, value);
    }

    /**
     * (file_requests) Received files via Email to Dropbox
     *
     * <p> This instance must be tagged as {@link
     * Tag#EMAIL_INGEST_RECEIVE_FILE}. </p>
     *
     * @return The {@link EmailIngestReceiveFileType} value associated with this
     *     instance if {@link #isEmailIngestReceiveFile} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isEmailIngestReceiveFile} is
     *     {@code false}.
     */
    public EmailIngestReceiveFileType getEmailIngestReceiveFileValue() {
        if (this._tag != Tag.EMAIL_INGEST_RECEIVE_FILE) {
            throw new IllegalStateException("Invalid tag: required Tag.EMAIL_INGEST_RECEIVE_FILE, but was Tag." + this._tag.name());
        }
        return emailIngestReceiveFileValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_REQUEST_CHANGE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_REQUEST_CHANGE}, {@code false} otherwise.
     */
    public boolean isFileRequestChange() {
        return this._tag == Tag.FILE_REQUEST_CHANGE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_REQUEST_CHANGE}.
     *
     * <p> (file_requests) Changed file request </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_REQUEST_CHANGE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileRequestChange(FileRequestChangeType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileRequestChange(Tag.FILE_REQUEST_CHANGE, value);
    }

    /**
     * (file_requests) Changed file request
     *
     * <p> This instance must be tagged as {@link Tag#FILE_REQUEST_CHANGE}. </p>
     *
     * @return The {@link FileRequestChangeType} value associated with this
     *     instance if {@link #isFileRequestChange} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileRequestChange} is {@code
     *     false}.
     */
    public FileRequestChangeType getFileRequestChangeValue() {
        if (this._tag != Tag.FILE_REQUEST_CHANGE) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_REQUEST_CHANGE, but was Tag." + this._tag.name());
        }
        return fileRequestChangeValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_REQUEST_CLOSE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_REQUEST_CLOSE}, {@code false} otherwise.
     */
    public boolean isFileRequestClose() {
        return this._tag == Tag.FILE_REQUEST_CLOSE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_REQUEST_CLOSE}.
     *
     * <p> (file_requests) Closed file request </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_REQUEST_CLOSE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileRequestClose(FileRequestCloseType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileRequestClose(Tag.FILE_REQUEST_CLOSE, value);
    }

    /**
     * (file_requests) Closed file request
     *
     * <p> This instance must be tagged as {@link Tag#FILE_REQUEST_CLOSE}. </p>
     *
     * @return The {@link FileRequestCloseType} value associated with this
     *     instance if {@link #isFileRequestClose} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileRequestClose} is {@code
     *     false}.
     */
    public FileRequestCloseType getFileRequestCloseValue() {
        if (this._tag != Tag.FILE_REQUEST_CLOSE) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_REQUEST_CLOSE, but was Tag." + this._tag.name());
        }
        return fileRequestCloseValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_REQUEST_CREATE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_REQUEST_CREATE}, {@code false} otherwise.
     */
    public boolean isFileRequestCreate() {
        return this._tag == Tag.FILE_REQUEST_CREATE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_REQUEST_CREATE}.
     *
     * <p> (file_requests) Created file request </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_REQUEST_CREATE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileRequestCreate(FileRequestCreateType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileRequestCreate(Tag.FILE_REQUEST_CREATE, value);
    }

    /**
     * (file_requests) Created file request
     *
     * <p> This instance must be tagged as {@link Tag#FILE_REQUEST_CREATE}. </p>
     *
     * @return The {@link FileRequestCreateType} value associated with this
     *     instance if {@link #isFileRequestCreate} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileRequestCreate} is {@code
     *     false}.
     */
    public FileRequestCreateType getFileRequestCreateValue() {
        if (this._tag != Tag.FILE_REQUEST_CREATE) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_REQUEST_CREATE, but was Tag." + this._tag.name());
        }
        return fileRequestCreateValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_REQUEST_DELETE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_REQUEST_DELETE}, {@code false} otherwise.
     */
    public boolean isFileRequestDelete() {
        return this._tag == Tag.FILE_REQUEST_DELETE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_REQUEST_DELETE}.
     *
     * <p> (file_requests) Delete file request </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_REQUEST_DELETE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileRequestDelete(FileRequestDeleteType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileRequestDelete(Tag.FILE_REQUEST_DELETE, value);
    }

    /**
     * (file_requests) Delete file request
     *
     * <p> This instance must be tagged as {@link Tag#FILE_REQUEST_DELETE}. </p>
     *
     * @return The {@link FileRequestDeleteType} value associated with this
     *     instance if {@link #isFileRequestDelete} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileRequestDelete} is {@code
     *     false}.
     */
    public FileRequestDeleteType getFileRequestDeleteValue() {
        if (this._tag != Tag.FILE_REQUEST_DELETE) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_REQUEST_DELETE, but was Tag." + this._tag.name());
        }
        return fileRequestDeleteValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_REQUEST_RECEIVE_FILE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_REQUEST_RECEIVE_FILE}, {@code false} otherwise.
     */
    public boolean isFileRequestReceiveFile() {
        return this._tag == Tag.FILE_REQUEST_RECEIVE_FILE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_REQUEST_RECEIVE_FILE}.
     *
     * <p> (file_requests) Received files for file request </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_REQUEST_RECEIVE_FILE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileRequestReceiveFile(FileRequestReceiveFileType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileRequestReceiveFile(Tag.FILE_REQUEST_RECEIVE_FILE, value);
    }

    /**
     * (file_requests) Received files for file request
     *
     * <p> This instance must be tagged as {@link
     * Tag#FILE_REQUEST_RECEIVE_FILE}. </p>
     *
     * @return The {@link FileRequestReceiveFileType} value associated with this
     *     instance if {@link #isFileRequestReceiveFile} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileRequestReceiveFile} is
     *     {@code false}.
     */
    public FileRequestReceiveFileType getFileRequestReceiveFileValue() {
        if (this._tag != Tag.FILE_REQUEST_RECEIVE_FILE) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_REQUEST_RECEIVE_FILE, but was Tag." + this._tag.name());
        }
        return fileRequestReceiveFileValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_ADD_EXTERNAL_ID}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_ADD_EXTERNAL_ID}, {@code false} otherwise.
     */
    public boolean isGroupAddExternalId() {
        return this._tag == Tag.GROUP_ADD_EXTERNAL_ID;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GROUP_ADD_EXTERNAL_ID}.
     *
     * <p> (groups) Added external ID for group </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GROUP_ADD_EXTERNAL_ID}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType groupAddExternalId(GroupAddExternalIdType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGroupAddExternalId(Tag.GROUP_ADD_EXTERNAL_ID, value);
    }

    /**
     * (groups) Added external ID for group
     *
     * <p> This instance must be tagged as {@link Tag#GROUP_ADD_EXTERNAL_ID}.
     * </p>
     *
     * @return The {@link GroupAddExternalIdType} value associated with this
     *     instance if {@link #isGroupAddExternalId} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGroupAddExternalId} is {@code
     *     false}.
     */
    public GroupAddExternalIdType getGroupAddExternalIdValue() {
        if (this._tag != Tag.GROUP_ADD_EXTERNAL_ID) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_ADD_EXTERNAL_ID, but was Tag." + this._tag.name());
        }
        return groupAddExternalIdValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_ADD_MEMBER}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_ADD_MEMBER}, {@code false} otherwise.
     */
    public boolean isGroupAddMember() {
        return this._tag == Tag.GROUP_ADD_MEMBER;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GROUP_ADD_MEMBER}.
     *
     * <p> (groups) Added team members to group </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GROUP_ADD_MEMBER}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType groupAddMember(GroupAddMemberType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGroupAddMember(Tag.GROUP_ADD_MEMBER, value);
    }

    /**
     * (groups) Added team members to group
     *
     * <p> This instance must be tagged as {@link Tag#GROUP_ADD_MEMBER}. </p>
     *
     * @return The {@link GroupAddMemberType} value associated with this
     *     instance if {@link #isGroupAddMember} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGroupAddMember} is {@code
     *     false}.
     */
    public GroupAddMemberType getGroupAddMemberValue() {
        if (this._tag != Tag.GROUP_ADD_MEMBER) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_ADD_MEMBER, but was Tag." + this._tag.name());
        }
        return groupAddMemberValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_CHANGE_EXTERNAL_ID}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_CHANGE_EXTERNAL_ID}, {@code false} otherwise.
     */
    public boolean isGroupChangeExternalId() {
        return this._tag == Tag.GROUP_CHANGE_EXTERNAL_ID;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GROUP_CHANGE_EXTERNAL_ID}.
     *
     * <p> (groups) Changed external ID for group </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GROUP_CHANGE_EXTERNAL_ID}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType groupChangeExternalId(GroupChangeExternalIdType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGroupChangeExternalId(Tag.GROUP_CHANGE_EXTERNAL_ID, value);
    }

    /**
     * (groups) Changed external ID for group
     *
     * <p> This instance must be tagged as {@link Tag#GROUP_CHANGE_EXTERNAL_ID}.
     * </p>
     *
     * @return The {@link GroupChangeExternalIdType} value associated with this
     *     instance if {@link #isGroupChangeExternalId} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGroupChangeExternalId} is
     *     {@code false}.
     */
    public GroupChangeExternalIdType getGroupChangeExternalIdValue() {
        if (this._tag != Tag.GROUP_CHANGE_EXTERNAL_ID) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_CHANGE_EXTERNAL_ID, but was Tag." + this._tag.name());
        }
        return groupChangeExternalIdValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_CHANGE_MANAGEMENT_TYPE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_CHANGE_MANAGEMENT_TYPE}, {@code false} otherwise.
     */
    public boolean isGroupChangeManagementType() {
        return this._tag == Tag.GROUP_CHANGE_MANAGEMENT_TYPE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GROUP_CHANGE_MANAGEMENT_TYPE}.
     *
     * <p> (groups) Changed group management type </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GROUP_CHANGE_MANAGEMENT_TYPE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType groupChangeManagementType(GroupChangeManagementTypeType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGroupChangeManagementType(Tag.GROUP_CHANGE_MANAGEMENT_TYPE, value);
    }

    /**
     * (groups) Changed group management type
     *
     * <p> This instance must be tagged as {@link
     * Tag#GROUP_CHANGE_MANAGEMENT_TYPE}. </p>
     *
     * @return The {@link GroupChangeManagementTypeType} value associated with
     *     this instance if {@link #isGroupChangeManagementType} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isGroupChangeManagementType} is
     *     {@code false}.
     */
    public GroupChangeManagementTypeType getGroupChangeManagementTypeValue() {
        if (this._tag != Tag.GROUP_CHANGE_MANAGEMENT_TYPE) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_CHANGE_MANAGEMENT_TYPE, but was Tag." + this._tag.name());
        }
        return groupChangeManagementTypeValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_CHANGE_MEMBER_ROLE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_CHANGE_MEMBER_ROLE}, {@code false} otherwise.
     */
    public boolean isGroupChangeMemberRole() {
        return this._tag == Tag.GROUP_CHANGE_MEMBER_ROLE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GROUP_CHANGE_MEMBER_ROLE}.
     *
     * <p> (groups) Changed manager permissions of group member </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GROUP_CHANGE_MEMBER_ROLE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType groupChangeMemberRole(GroupChangeMemberRoleType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGroupChangeMemberRole(Tag.GROUP_CHANGE_MEMBER_ROLE, value);
    }

    /**
     * (groups) Changed manager permissions of group member
     *
     * <p> This instance must be tagged as {@link Tag#GROUP_CHANGE_MEMBER_ROLE}.
     * </p>
     *
     * @return The {@link GroupChangeMemberRoleType} value associated with this
     *     instance if {@link #isGroupChangeMemberRole} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGroupChangeMemberRole} is
     *     {@code false}.
     */
    public GroupChangeMemberRoleType getGroupChangeMemberRoleValue() {
        if (this._tag != Tag.GROUP_CHANGE_MEMBER_ROLE) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_CHANGE_MEMBER_ROLE, but was Tag." + this._tag.name());
        }
        return groupChangeMemberRoleValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_CREATE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_CREATE}, {@code false} otherwise.
     */
    public boolean isGroupCreate() {
        return this._tag == Tag.GROUP_CREATE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GROUP_CREATE}.
     *
     * <p> (groups) Created group </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GROUP_CREATE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType groupCreate(GroupCreateType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGroupCreate(Tag.GROUP_CREATE, value);
    }

    /**
     * (groups) Created group
     *
     * <p> This instance must be tagged as {@link Tag#GROUP_CREATE}. </p>
     *
     * @return The {@link GroupCreateType} value associated with this instance
     *     if {@link #isGroupCreate} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGroupCreate} is {@code
     *     false}.
     */
    public GroupCreateType getGroupCreateValue() {
        if (this._tag != Tag.GROUP_CREATE) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_CREATE, but was Tag." + this._tag.name());
        }
        return groupCreateValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_DELETE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_DELETE}, {@code false} otherwise.
     */
    public boolean isGroupDelete() {
        return this._tag == Tag.GROUP_DELETE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GROUP_DELETE}.
     *
     * <p> (groups) Deleted group </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GROUP_DELETE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType groupDelete(GroupDeleteType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGroupDelete(Tag.GROUP_DELETE, value);
    }

    /**
     * (groups) Deleted group
     *
     * <p> This instance must be tagged as {@link Tag#GROUP_DELETE}. </p>
     *
     * @return The {@link GroupDeleteType} value associated with this instance
     *     if {@link #isGroupDelete} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGroupDelete} is {@code
     *     false}.
     */
    public GroupDeleteType getGroupDeleteValue() {
        if (this._tag != Tag.GROUP_DELETE) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_DELETE, but was Tag." + this._tag.name());
        }
        return groupDeleteValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_DESCRIPTION_UPDATED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_DESCRIPTION_UPDATED}, {@code false} otherwise.
     */
    public boolean isGroupDescriptionUpdated() {
        return this._tag == Tag.GROUP_DESCRIPTION_UPDATED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GROUP_DESCRIPTION_UPDATED}.
     *
     * <p> (groups) Updated group (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GROUP_DESCRIPTION_UPDATED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType groupDescriptionUpdated(GroupDescriptionUpdatedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGroupDescriptionUpdated(Tag.GROUP_DESCRIPTION_UPDATED, value);
    }

    /**
     * (groups) Updated group (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#GROUP_DESCRIPTION_UPDATED}. </p>
     *
     * @return The {@link GroupDescriptionUpdatedType} value associated with
     *     this instance if {@link #isGroupDescriptionUpdated} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGroupDescriptionUpdated} is
     *     {@code false}.
     */
    public GroupDescriptionUpdatedType getGroupDescriptionUpdatedValue() {
        if (this._tag != Tag.GROUP_DESCRIPTION_UPDATED) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_DESCRIPTION_UPDATED, but was Tag." + this._tag.name());
        }
        return groupDescriptionUpdatedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_JOIN_POLICY_UPDATED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_JOIN_POLICY_UPDATED}, {@code false} otherwise.
     */
    public boolean isGroupJoinPolicyUpdated() {
        return this._tag == Tag.GROUP_JOIN_POLICY_UPDATED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GROUP_JOIN_POLICY_UPDATED}.
     *
     * <p> (groups) Updated group join policy (deprecated, no longer logged)
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GROUP_JOIN_POLICY_UPDATED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType groupJoinPolicyUpdated(GroupJoinPolicyUpdatedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGroupJoinPolicyUpdated(Tag.GROUP_JOIN_POLICY_UPDATED, value);
    }

    /**
     * (groups) Updated group join policy (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#GROUP_JOIN_POLICY_UPDATED}. </p>
     *
     * @return The {@link GroupJoinPolicyUpdatedType} value associated with this
     *     instance if {@link #isGroupJoinPolicyUpdated} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGroupJoinPolicyUpdated} is
     *     {@code false}.
     */
    public GroupJoinPolicyUpdatedType getGroupJoinPolicyUpdatedValue() {
        if (this._tag != Tag.GROUP_JOIN_POLICY_UPDATED) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_JOIN_POLICY_UPDATED, but was Tag." + this._tag.name());
        }
        return groupJoinPolicyUpdatedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_MOVED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_MOVED}, {@code false} otherwise.
     */
    public boolean isGroupMoved() {
        return this._tag == Tag.GROUP_MOVED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GROUP_MOVED}.
     *
     * <p> (groups) Moved group (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GROUP_MOVED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType groupMoved(GroupMovedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGroupMoved(Tag.GROUP_MOVED, value);
    }

    /**
     * (groups) Moved group (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#GROUP_MOVED}. </p>
     *
     * @return The {@link GroupMovedType} value associated with this instance if
     *     {@link #isGroupMoved} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGroupMoved} is {@code false}.
     */
    public GroupMovedType getGroupMovedValue() {
        if (this._tag != Tag.GROUP_MOVED) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_MOVED, but was Tag." + this._tag.name());
        }
        return groupMovedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_REMOVE_EXTERNAL_ID}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_REMOVE_EXTERNAL_ID}, {@code false} otherwise.
     */
    public boolean isGroupRemoveExternalId() {
        return this._tag == Tag.GROUP_REMOVE_EXTERNAL_ID;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GROUP_REMOVE_EXTERNAL_ID}.
     *
     * <p> (groups) Removed external ID for group </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GROUP_REMOVE_EXTERNAL_ID}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType groupRemoveExternalId(GroupRemoveExternalIdType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGroupRemoveExternalId(Tag.GROUP_REMOVE_EXTERNAL_ID, value);
    }

    /**
     * (groups) Removed external ID for group
     *
     * <p> This instance must be tagged as {@link Tag#GROUP_REMOVE_EXTERNAL_ID}.
     * </p>
     *
     * @return The {@link GroupRemoveExternalIdType} value associated with this
     *     instance if {@link #isGroupRemoveExternalId} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGroupRemoveExternalId} is
     *     {@code false}.
     */
    public GroupRemoveExternalIdType getGroupRemoveExternalIdValue() {
        if (this._tag != Tag.GROUP_REMOVE_EXTERNAL_ID) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_REMOVE_EXTERNAL_ID, but was Tag." + this._tag.name());
        }
        return groupRemoveExternalIdValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_REMOVE_MEMBER}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_REMOVE_MEMBER}, {@code false} otherwise.
     */
    public boolean isGroupRemoveMember() {
        return this._tag == Tag.GROUP_REMOVE_MEMBER;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GROUP_REMOVE_MEMBER}.
     *
     * <p> (groups) Removed team members from group </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GROUP_REMOVE_MEMBER}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType groupRemoveMember(GroupRemoveMemberType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGroupRemoveMember(Tag.GROUP_REMOVE_MEMBER, value);
    }

    /**
     * (groups) Removed team members from group
     *
     * <p> This instance must be tagged as {@link Tag#GROUP_REMOVE_MEMBER}. </p>
     *
     * @return The {@link GroupRemoveMemberType} value associated with this
     *     instance if {@link #isGroupRemoveMember} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGroupRemoveMember} is {@code
     *     false}.
     */
    public GroupRemoveMemberType getGroupRemoveMemberValue() {
        if (this._tag != Tag.GROUP_REMOVE_MEMBER) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_REMOVE_MEMBER, but was Tag." + this._tag.name());
        }
        return groupRemoveMemberValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_RENAME}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_RENAME}, {@code false} otherwise.
     */
    public boolean isGroupRename() {
        return this._tag == Tag.GROUP_RENAME;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GROUP_RENAME}.
     *
     * <p> (groups) Renamed group </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GROUP_RENAME}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType groupRename(GroupRenameType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGroupRename(Tag.GROUP_RENAME, value);
    }

    /**
     * (groups) Renamed group
     *
     * <p> This instance must be tagged as {@link Tag#GROUP_RENAME}. </p>
     *
     * @return The {@link GroupRenameType} value associated with this instance
     *     if {@link #isGroupRename} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGroupRename} is {@code
     *     false}.
     */
    public GroupRenameType getGroupRenameValue() {
        if (this._tag != Tag.GROUP_RENAME) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_RENAME, but was Tag." + this._tag.name());
        }
        return groupRenameValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ACCOUNT_LOCK_OR_UNLOCKED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ACCOUNT_LOCK_OR_UNLOCKED}, {@code false} otherwise.
     */
    public boolean isAccountLockOrUnlocked() {
        return this._tag == Tag.ACCOUNT_LOCK_OR_UNLOCKED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#ACCOUNT_LOCK_OR_UNLOCKED}.
     *
     * <p> (logins) Unlocked/locked account after failed sign in attempts </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#ACCOUNT_LOCK_OR_UNLOCKED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType accountLockOrUnlocked(AccountLockOrUnlockedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndAccountLockOrUnlocked(Tag.ACCOUNT_LOCK_OR_UNLOCKED, value);
    }

    /**
     * (logins) Unlocked/locked account after failed sign in attempts
     *
     * <p> This instance must be tagged as {@link Tag#ACCOUNT_LOCK_OR_UNLOCKED}.
     * </p>
     *
     * @return The {@link AccountLockOrUnlockedType} value associated with this
     *     instance if {@link #isAccountLockOrUnlocked} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isAccountLockOrUnlocked} is
     *     {@code false}.
     */
    public AccountLockOrUnlockedType getAccountLockOrUnlockedValue() {
        if (this._tag != Tag.ACCOUNT_LOCK_OR_UNLOCKED) {
            throw new IllegalStateException("Invalid tag: required Tag.ACCOUNT_LOCK_OR_UNLOCKED, but was Tag." + this._tag.name());
        }
        return accountLockOrUnlockedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link Tag#EMM_ERROR},
     * {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link Tag#EMM_ERROR},
     *     {@code false} otherwise.
     */
    public boolean isEmmError() {
        return this._tag == Tag.EMM_ERROR;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#EMM_ERROR}.
     *
     * <p> (logins) Failed to sign in via EMM (deprecated, replaced by 'Failed
     * to sign in') </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#EMM_ERROR}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType emmError(EmmErrorType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndEmmError(Tag.EMM_ERROR, value);
    }

    /**
     * (logins) Failed to sign in via EMM (deprecated, replaced by 'Failed to
     * sign in')
     *
     * <p> This instance must be tagged as {@link Tag#EMM_ERROR}. </p>
     *
     * @return The {@link EmmErrorType} value associated with this instance if
     *     {@link #isEmmError} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isEmmError} is {@code false}.
     */
    public EmmErrorType getEmmErrorValue() {
        if (this._tag != Tag.EMM_ERROR) {
            throw new IllegalStateException("Invalid tag: required Tag.EMM_ERROR, but was Tag." + this._tag.name());
        }
        return emmErrorValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS}, {@code false}
     *     otherwise.
     */
    public boolean isGuestAdminSignedInViaTrustedTeams() {
        return this._tag == Tag.GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS}.
     *
     * <p> (logins) Started trusted team admin session </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType guestAdminSignedInViaTrustedTeams(GuestAdminSignedInViaTrustedTeamsType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGuestAdminSignedInViaTrustedTeams(Tag.GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS, value);
    }

    /**
     * (logins) Started trusted team admin session
     *
     * <p> This instance must be tagged as {@link
     * Tag#GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS}. </p>
     *
     * @return The {@link GuestAdminSignedInViaTrustedTeamsType} value
     *     associated with this instance if {@link
     *     #isGuestAdminSignedInViaTrustedTeams} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGuestAdminSignedInViaTrustedTeams} is {@code false}.
     */
    public GuestAdminSignedInViaTrustedTeamsType getGuestAdminSignedInViaTrustedTeamsValue() {
        if (this._tag != Tag.GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS) {
            throw new IllegalStateException("Invalid tag: required Tag.GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS, but was Tag." + this._tag.name());
        }
        return guestAdminSignedInViaTrustedTeamsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS}, {@code false}
     *     otherwise.
     */
    public boolean isGuestAdminSignedOutViaTrustedTeams() {
        return this._tag == Tag.GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS}.
     *
     * <p> (logins) Ended trusted team admin session </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType guestAdminSignedOutViaTrustedTeams(GuestAdminSignedOutViaTrustedTeamsType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGuestAdminSignedOutViaTrustedTeams(Tag.GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS, value);
    }

    /**
     * (logins) Ended trusted team admin session
     *
     * <p> This instance must be tagged as {@link
     * Tag#GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS}. </p>
     *
     * @return The {@link GuestAdminSignedOutViaTrustedTeamsType} value
     *     associated with this instance if {@link
     *     #isGuestAdminSignedOutViaTrustedTeams} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGuestAdminSignedOutViaTrustedTeams} is {@code false}.
     */
    public GuestAdminSignedOutViaTrustedTeamsType getGuestAdminSignedOutViaTrustedTeamsValue() {
        if (this._tag != Tag.GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS) {
            throw new IllegalStateException("Invalid tag: required Tag.GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS, but was Tag." + this._tag.name());
        }
        return guestAdminSignedOutViaTrustedTeamsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link Tag#LOGIN_FAIL},
     * {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LOGIN_FAIL}, {@code false} otherwise.
     */
    public boolean isLoginFail() {
        return this._tag == Tag.LOGIN_FAIL;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#LOGIN_FAIL}.
     *
     * <p> (logins) Failed to sign in </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#LOGIN_FAIL}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType loginFail(LoginFailType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndLoginFail(Tag.LOGIN_FAIL, value);
    }

    /**
     * (logins) Failed to sign in
     *
     * <p> This instance must be tagged as {@link Tag#LOGIN_FAIL}. </p>
     *
     * @return The {@link LoginFailType} value associated with this instance if
     *     {@link #isLoginFail} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isLoginFail} is {@code false}.
     */
    public LoginFailType getLoginFailValue() {
        if (this._tag != Tag.LOGIN_FAIL) {
            throw new IllegalStateException("Invalid tag: required Tag.LOGIN_FAIL, but was Tag." + this._tag.name());
        }
        return loginFailValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#LOGIN_SUCCESS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#LOGIN_SUCCESS}, {@code false} otherwise.
     */
    public boolean isLoginSuccess() {
        return this._tag == Tag.LOGIN_SUCCESS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#LOGIN_SUCCESS}.
     *
     * <p> (logins) Signed in </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#LOGIN_SUCCESS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType loginSuccess(LoginSuccessType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndLoginSuccess(Tag.LOGIN_SUCCESS, value);
    }

    /**
     * (logins) Signed in
     *
     * <p> This instance must be tagged as {@link Tag#LOGIN_SUCCESS}. </p>
     *
     * @return The {@link LoginSuccessType} value associated with this instance
     *     if {@link #isLoginSuccess} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isLoginSuccess} is {@code
     *     false}.
     */
    public LoginSuccessType getLoginSuccessValue() {
        if (this._tag != Tag.LOGIN_SUCCESS) {
            throw new IllegalStateException("Invalid tag: required Tag.LOGIN_SUCCESS, but was Tag." + this._tag.name());
        }
        return loginSuccessValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link Tag#LOGOUT},
     * {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link Tag#LOGOUT},
     *     {@code false} otherwise.
     */
    public boolean isLogout() {
        return this._tag == Tag.LOGOUT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#LOGOUT}.
     *
     * <p> (logins) Signed out </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#LOGOUT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType logout(LogoutType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndLogout(Tag.LOGOUT, value);
    }

    /**
     * (logins) Signed out
     *
     * <p> This instance must be tagged as {@link Tag#LOGOUT}. </p>
     *
     * @return The {@link LogoutType} value associated with this instance if
     *     {@link #isLogout} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isLogout} is {@code false}.
     */
    public LogoutType getLogoutValue() {
        if (this._tag != Tag.LOGOUT) {
            throw new IllegalStateException("Invalid tag: required Tag.LOGOUT, but was Tag." + this._tag.name());
        }
        return logoutValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#RESELLER_SUPPORT_SESSION_END}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#RESELLER_SUPPORT_SESSION_END}, {@code false} otherwise.
     */
    public boolean isResellerSupportSessionEnd() {
        return this._tag == Tag.RESELLER_SUPPORT_SESSION_END;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#RESELLER_SUPPORT_SESSION_END}.
     *
     * <p> (logins) Ended reseller support session </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#RESELLER_SUPPORT_SESSION_END}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType resellerSupportSessionEnd(ResellerSupportSessionEndType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndResellerSupportSessionEnd(Tag.RESELLER_SUPPORT_SESSION_END, value);
    }

    /**
     * (logins) Ended reseller support session
     *
     * <p> This instance must be tagged as {@link
     * Tag#RESELLER_SUPPORT_SESSION_END}. </p>
     *
     * @return The {@link ResellerSupportSessionEndType} value associated with
     *     this instance if {@link #isResellerSupportSessionEnd} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isResellerSupportSessionEnd} is
     *     {@code false}.
     */
    public ResellerSupportSessionEndType getResellerSupportSessionEndValue() {
        if (this._tag != Tag.RESELLER_SUPPORT_SESSION_END) {
            throw new IllegalStateException("Invalid tag: required Tag.RESELLER_SUPPORT_SESSION_END, but was Tag." + this._tag.name());
        }
        return resellerSupportSessionEndValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#RESELLER_SUPPORT_SESSION_START}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#RESELLER_SUPPORT_SESSION_START}, {@code false} otherwise.
     */
    public boolean isResellerSupportSessionStart() {
        return this._tag == Tag.RESELLER_SUPPORT_SESSION_START;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#RESELLER_SUPPORT_SESSION_START}.
     *
     * <p> (logins) Started reseller support session </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#RESELLER_SUPPORT_SESSION_START}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType resellerSupportSessionStart(ResellerSupportSessionStartType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndResellerSupportSessionStart(Tag.RESELLER_SUPPORT_SESSION_START, value);
    }

    /**
     * (logins) Started reseller support session
     *
     * <p> This instance must be tagged as {@link
     * Tag#RESELLER_SUPPORT_SESSION_START}. </p>
     *
     * @return The {@link ResellerSupportSessionStartType} value associated with
     *     this instance if {@link #isResellerSupportSessionStart} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isResellerSupportSessionStart}
     *     is {@code false}.
     */
    public ResellerSupportSessionStartType getResellerSupportSessionStartValue() {
        if (this._tag != Tag.RESELLER_SUPPORT_SESSION_START) {
            throw new IllegalStateException("Invalid tag: required Tag.RESELLER_SUPPORT_SESSION_START, but was Tag." + this._tag.name());
        }
        return resellerSupportSessionStartValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SIGN_IN_AS_SESSION_END}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SIGN_IN_AS_SESSION_END}, {@code false} otherwise.
     */
    public boolean isSignInAsSessionEnd() {
        return this._tag == Tag.SIGN_IN_AS_SESSION_END;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SIGN_IN_AS_SESSION_END}.
     *
     * <p> (logins) Ended admin sign-in-as session </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SIGN_IN_AS_SESSION_END}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType signInAsSessionEnd(SignInAsSessionEndType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSignInAsSessionEnd(Tag.SIGN_IN_AS_SESSION_END, value);
    }

    /**
     * (logins) Ended admin sign-in-as session
     *
     * <p> This instance must be tagged as {@link Tag#SIGN_IN_AS_SESSION_END}.
     * </p>
     *
     * @return The {@link SignInAsSessionEndType} value associated with this
     *     instance if {@link #isSignInAsSessionEnd} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSignInAsSessionEnd} is {@code
     *     false}.
     */
    public SignInAsSessionEndType getSignInAsSessionEndValue() {
        if (this._tag != Tag.SIGN_IN_AS_SESSION_END) {
            throw new IllegalStateException("Invalid tag: required Tag.SIGN_IN_AS_SESSION_END, but was Tag." + this._tag.name());
        }
        return signInAsSessionEndValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SIGN_IN_AS_SESSION_START}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SIGN_IN_AS_SESSION_START}, {@code false} otherwise.
     */
    public boolean isSignInAsSessionStart() {
        return this._tag == Tag.SIGN_IN_AS_SESSION_START;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SIGN_IN_AS_SESSION_START}.
     *
     * <p> (logins) Started admin sign-in-as session </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SIGN_IN_AS_SESSION_START}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType signInAsSessionStart(SignInAsSessionStartType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSignInAsSessionStart(Tag.SIGN_IN_AS_SESSION_START, value);
    }

    /**
     * (logins) Started admin sign-in-as session
     *
     * <p> This instance must be tagged as {@link Tag#SIGN_IN_AS_SESSION_START}.
     * </p>
     *
     * @return The {@link SignInAsSessionStartType} value associated with this
     *     instance if {@link #isSignInAsSessionStart} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSignInAsSessionStart} is
     *     {@code false}.
     */
    public SignInAsSessionStartType getSignInAsSessionStartValue() {
        if (this._tag != Tag.SIGN_IN_AS_SESSION_START) {
            throw new IllegalStateException("Invalid tag: required Tag.SIGN_IN_AS_SESSION_START, but was Tag." + this._tag.name());
        }
        return signInAsSessionStartValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link Tag#SSO_ERROR},
     * {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link Tag#SSO_ERROR},
     *     {@code false} otherwise.
     */
    public boolean isSsoError() {
        return this._tag == Tag.SSO_ERROR;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SSO_ERROR}.
     *
     * <p> (logins) Failed to sign in via SSO (deprecated, replaced by 'Failed
     * to sign in') </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SSO_ERROR}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType ssoError(SsoErrorType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSsoError(Tag.SSO_ERROR, value);
    }

    /**
     * (logins) Failed to sign in via SSO (deprecated, replaced by 'Failed to
     * sign in')
     *
     * <p> This instance must be tagged as {@link Tag#SSO_ERROR}. </p>
     *
     * @return The {@link SsoErrorType} value associated with this instance if
     *     {@link #isSsoError} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoError} is {@code false}.
     */
    public SsoErrorType getSsoErrorValue() {
        if (this._tag != Tag.SSO_ERROR) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_ERROR, but was Tag." + this._tag.name());
        }
        return ssoErrorValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#CREATE_TEAM_INVITE_LINK}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#CREATE_TEAM_INVITE_LINK}, {@code false} otherwise.
     */
    public boolean isCreateTeamInviteLink() {
        return this._tag == Tag.CREATE_TEAM_INVITE_LINK;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#CREATE_TEAM_INVITE_LINK}.
     *
     * <p> (members) Created team invite link </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#CREATE_TEAM_INVITE_LINK}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType createTeamInviteLink(CreateTeamInviteLinkType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndCreateTeamInviteLink(Tag.CREATE_TEAM_INVITE_LINK, value);
    }

    /**
     * (members) Created team invite link
     *
     * <p> This instance must be tagged as {@link Tag#CREATE_TEAM_INVITE_LINK}.
     * </p>
     *
     * @return The {@link CreateTeamInviteLinkType} value associated with this
     *     instance if {@link #isCreateTeamInviteLink} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isCreateTeamInviteLink} is
     *     {@code false}.
     */
    public CreateTeamInviteLinkType getCreateTeamInviteLinkValue() {
        if (this._tag != Tag.CREATE_TEAM_INVITE_LINK) {
            throw new IllegalStateException("Invalid tag: required Tag.CREATE_TEAM_INVITE_LINK, but was Tag." + this._tag.name());
        }
        return createTeamInviteLinkValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DELETE_TEAM_INVITE_LINK}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DELETE_TEAM_INVITE_LINK}, {@code false} otherwise.
     */
    public boolean isDeleteTeamInviteLink() {
        return this._tag == Tag.DELETE_TEAM_INVITE_LINK;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DELETE_TEAM_INVITE_LINK}.
     *
     * <p> (members) Deleted team invite link </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DELETE_TEAM_INVITE_LINK}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType deleteTeamInviteLink(DeleteTeamInviteLinkType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDeleteTeamInviteLink(Tag.DELETE_TEAM_INVITE_LINK, value);
    }

    /**
     * (members) Deleted team invite link
     *
     * <p> This instance must be tagged as {@link Tag#DELETE_TEAM_INVITE_LINK}.
     * </p>
     *
     * @return The {@link DeleteTeamInviteLinkType} value associated with this
     *     instance if {@link #isDeleteTeamInviteLink} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isDeleteTeamInviteLink} is
     *     {@code false}.
     */
    public DeleteTeamInviteLinkType getDeleteTeamInviteLinkValue() {
        if (this._tag != Tag.DELETE_TEAM_INVITE_LINK) {
            throw new IllegalStateException("Invalid tag: required Tag.DELETE_TEAM_INVITE_LINK, but was Tag." + this._tag.name());
        }
        return deleteTeamInviteLinkValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_ADD_EXTERNAL_ID}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_ADD_EXTERNAL_ID}, {@code false} otherwise.
     */
    public boolean isMemberAddExternalId() {
        return this._tag == Tag.MEMBER_ADD_EXTERNAL_ID;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_ADD_EXTERNAL_ID}.
     *
     * <p> (members) Added an external ID for team member </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_ADD_EXTERNAL_ID}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberAddExternalId(MemberAddExternalIdType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberAddExternalId(Tag.MEMBER_ADD_EXTERNAL_ID, value);
    }

    /**
     * (members) Added an external ID for team member
     *
     * <p> This instance must be tagged as {@link Tag#MEMBER_ADD_EXTERNAL_ID}.
     * </p>
     *
     * @return The {@link MemberAddExternalIdType} value associated with this
     *     instance if {@link #isMemberAddExternalId} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isMemberAddExternalId} is
     *     {@code false}.
     */
    public MemberAddExternalIdType getMemberAddExternalIdValue() {
        if (this._tag != Tag.MEMBER_ADD_EXTERNAL_ID) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_ADD_EXTERNAL_ID, but was Tag." + this._tag.name());
        }
        return memberAddExternalIdValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_ADD_NAME}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_ADD_NAME}, {@code false} otherwise.
     */
    public boolean isMemberAddName() {
        return this._tag == Tag.MEMBER_ADD_NAME;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_ADD_NAME}.
     *
     * <p> (members) Added team member name </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_ADD_NAME}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberAddName(MemberAddNameType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberAddName(Tag.MEMBER_ADD_NAME, value);
    }

    /**
     * (members) Added team member name
     *
     * <p> This instance must be tagged as {@link Tag#MEMBER_ADD_NAME}. </p>
     *
     * @return The {@link MemberAddNameType} value associated with this instance
     *     if {@link #isMemberAddName} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isMemberAddName} is {@code
     *     false}.
     */
    public MemberAddNameType getMemberAddNameValue() {
        if (this._tag != Tag.MEMBER_ADD_NAME) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_ADD_NAME, but was Tag." + this._tag.name());
        }
        return memberAddNameValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_CHANGE_ADMIN_ROLE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_CHANGE_ADMIN_ROLE}, {@code false} otherwise.
     */
    public boolean isMemberChangeAdminRole() {
        return this._tag == Tag.MEMBER_CHANGE_ADMIN_ROLE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_CHANGE_ADMIN_ROLE}.
     *
     * <p> (members) Changed team member admin role </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_CHANGE_ADMIN_ROLE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberChangeAdminRole(MemberChangeAdminRoleType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberChangeAdminRole(Tag.MEMBER_CHANGE_ADMIN_ROLE, value);
    }

    /**
     * (members) Changed team member admin role
     *
     * <p> This instance must be tagged as {@link Tag#MEMBER_CHANGE_ADMIN_ROLE}.
     * </p>
     *
     * @return The {@link MemberChangeAdminRoleType} value associated with this
     *     instance if {@link #isMemberChangeAdminRole} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isMemberChangeAdminRole} is
     *     {@code false}.
     */
    public MemberChangeAdminRoleType getMemberChangeAdminRoleValue() {
        if (this._tag != Tag.MEMBER_CHANGE_ADMIN_ROLE) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_CHANGE_ADMIN_ROLE, but was Tag." + this._tag.name());
        }
        return memberChangeAdminRoleValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_CHANGE_EMAIL}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_CHANGE_EMAIL}, {@code false} otherwise.
     */
    public boolean isMemberChangeEmail() {
        return this._tag == Tag.MEMBER_CHANGE_EMAIL;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_CHANGE_EMAIL}.
     *
     * <p> (members) Changed team member email </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_CHANGE_EMAIL}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberChangeEmail(MemberChangeEmailType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberChangeEmail(Tag.MEMBER_CHANGE_EMAIL, value);
    }

    /**
     * (members) Changed team member email
     *
     * <p> This instance must be tagged as {@link Tag#MEMBER_CHANGE_EMAIL}. </p>
     *
     * @return The {@link MemberChangeEmailType} value associated with this
     *     instance if {@link #isMemberChangeEmail} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isMemberChangeEmail} is {@code
     *     false}.
     */
    public MemberChangeEmailType getMemberChangeEmailValue() {
        if (this._tag != Tag.MEMBER_CHANGE_EMAIL) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_CHANGE_EMAIL, but was Tag." + this._tag.name());
        }
        return memberChangeEmailValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_CHANGE_EXTERNAL_ID}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_CHANGE_EXTERNAL_ID}, {@code false} otherwise.
     */
    public boolean isMemberChangeExternalId() {
        return this._tag == Tag.MEMBER_CHANGE_EXTERNAL_ID;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_CHANGE_EXTERNAL_ID}.
     *
     * <p> (members) Changed the external ID for team member </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_CHANGE_EXTERNAL_ID}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberChangeExternalId(MemberChangeExternalIdType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberChangeExternalId(Tag.MEMBER_CHANGE_EXTERNAL_ID, value);
    }

    /**
     * (members) Changed the external ID for team member
     *
     * <p> This instance must be tagged as {@link
     * Tag#MEMBER_CHANGE_EXTERNAL_ID}. </p>
     *
     * @return The {@link MemberChangeExternalIdType} value associated with this
     *     instance if {@link #isMemberChangeExternalId} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isMemberChangeExternalId} is
     *     {@code false}.
     */
    public MemberChangeExternalIdType getMemberChangeExternalIdValue() {
        if (this._tag != Tag.MEMBER_CHANGE_EXTERNAL_ID) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_CHANGE_EXTERNAL_ID, but was Tag." + this._tag.name());
        }
        return memberChangeExternalIdValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_CHANGE_MEMBERSHIP_TYPE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_CHANGE_MEMBERSHIP_TYPE}, {@code false} otherwise.
     */
    public boolean isMemberChangeMembershipType() {
        return this._tag == Tag.MEMBER_CHANGE_MEMBERSHIP_TYPE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_CHANGE_MEMBERSHIP_TYPE}.
     *
     * <p> (members) Changed membership type (limited/full) of member
     * (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_CHANGE_MEMBERSHIP_TYPE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberChangeMembershipType(MemberChangeMembershipTypeType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberChangeMembershipType(Tag.MEMBER_CHANGE_MEMBERSHIP_TYPE, value);
    }

    /**
     * (members) Changed membership type (limited/full) of member (deprecated,
     * no longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#MEMBER_CHANGE_MEMBERSHIP_TYPE}. </p>
     *
     * @return The {@link MemberChangeMembershipTypeType} value associated with
     *     this instance if {@link #isMemberChangeMembershipType} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isMemberChangeMembershipType}
     *     is {@code false}.
     */
    public MemberChangeMembershipTypeType getMemberChangeMembershipTypeValue() {
        if (this._tag != Tag.MEMBER_CHANGE_MEMBERSHIP_TYPE) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_CHANGE_MEMBERSHIP_TYPE, but was Tag." + this._tag.name());
        }
        return memberChangeMembershipTypeValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_CHANGE_NAME}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_CHANGE_NAME}, {@code false} otherwise.
     */
    public boolean isMemberChangeName() {
        return this._tag == Tag.MEMBER_CHANGE_NAME;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_CHANGE_NAME}.
     *
     * <p> (members) Changed team member name </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_CHANGE_NAME}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberChangeName(MemberChangeNameType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberChangeName(Tag.MEMBER_CHANGE_NAME, value);
    }

    /**
     * (members) Changed team member name
     *
     * <p> This instance must be tagged as {@link Tag#MEMBER_CHANGE_NAME}. </p>
     *
     * @return The {@link MemberChangeNameType} value associated with this
     *     instance if {@link #isMemberChangeName} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isMemberChangeName} is {@code
     *     false}.
     */
    public MemberChangeNameType getMemberChangeNameValue() {
        if (this._tag != Tag.MEMBER_CHANGE_NAME) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_CHANGE_NAME, but was Tag." + this._tag.name());
        }
        return memberChangeNameValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_CHANGE_RESELLER_ROLE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_CHANGE_RESELLER_ROLE}, {@code false} otherwise.
     */
    public boolean isMemberChangeResellerRole() {
        return this._tag == Tag.MEMBER_CHANGE_RESELLER_ROLE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_CHANGE_RESELLER_ROLE}.
     *
     * <p> (members) Changed team member reseller role </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_CHANGE_RESELLER_ROLE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberChangeResellerRole(MemberChangeResellerRoleType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberChangeResellerRole(Tag.MEMBER_CHANGE_RESELLER_ROLE, value);
    }

    /**
     * (members) Changed team member reseller role
     *
     * <p> This instance must be tagged as {@link
     * Tag#MEMBER_CHANGE_RESELLER_ROLE}. </p>
     *
     * @return The {@link MemberChangeResellerRoleType} value associated with
     *     this instance if {@link #isMemberChangeResellerRole} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isMemberChangeResellerRole} is
     *     {@code false}.
     */
    public MemberChangeResellerRoleType getMemberChangeResellerRoleValue() {
        if (this._tag != Tag.MEMBER_CHANGE_RESELLER_ROLE) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_CHANGE_RESELLER_ROLE, but was Tag." + this._tag.name());
        }
        return memberChangeResellerRoleValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_CHANGE_STATUS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_CHANGE_STATUS}, {@code false} otherwise.
     */
    public boolean isMemberChangeStatus() {
        return this._tag == Tag.MEMBER_CHANGE_STATUS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_CHANGE_STATUS}.
     *
     * <p> (members) Changed member status (invited, joined, suspended, etc.)
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_CHANGE_STATUS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberChangeStatus(MemberChangeStatusType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberChangeStatus(Tag.MEMBER_CHANGE_STATUS, value);
    }

    /**
     * (members) Changed member status (invited, joined, suspended, etc.)
     *
     * <p> This instance must be tagged as {@link Tag#MEMBER_CHANGE_STATUS}.
     * </p>
     *
     * @return The {@link MemberChangeStatusType} value associated with this
     *     instance if {@link #isMemberChangeStatus} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isMemberChangeStatus} is {@code
     *     false}.
     */
    public MemberChangeStatusType getMemberChangeStatusValue() {
        if (this._tag != Tag.MEMBER_CHANGE_STATUS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_CHANGE_STATUS, but was Tag." + this._tag.name());
        }
        return memberChangeStatusValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_DELETE_MANUAL_CONTACTS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_DELETE_MANUAL_CONTACTS}, {@code false} otherwise.
     */
    public boolean isMemberDeleteManualContacts() {
        return this._tag == Tag.MEMBER_DELETE_MANUAL_CONTACTS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_DELETE_MANUAL_CONTACTS}.
     *
     * <p> (members) Cleared manually added contacts </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_DELETE_MANUAL_CONTACTS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberDeleteManualContacts(MemberDeleteManualContactsType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberDeleteManualContacts(Tag.MEMBER_DELETE_MANUAL_CONTACTS, value);
    }

    /**
     * (members) Cleared manually added contacts
     *
     * <p> This instance must be tagged as {@link
     * Tag#MEMBER_DELETE_MANUAL_CONTACTS}. </p>
     *
     * @return The {@link MemberDeleteManualContactsType} value associated with
     *     this instance if {@link #isMemberDeleteManualContacts} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isMemberDeleteManualContacts}
     *     is {@code false}.
     */
    public MemberDeleteManualContactsType getMemberDeleteManualContactsValue() {
        if (this._tag != Tag.MEMBER_DELETE_MANUAL_CONTACTS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_DELETE_MANUAL_CONTACTS, but was Tag." + this._tag.name());
        }
        return memberDeleteManualContactsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_DELETE_PROFILE_PHOTO}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_DELETE_PROFILE_PHOTO}, {@code false} otherwise.
     */
    public boolean isMemberDeleteProfilePhoto() {
        return this._tag == Tag.MEMBER_DELETE_PROFILE_PHOTO;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_DELETE_PROFILE_PHOTO}.
     *
     * <p> (members) Deleted team member profile photo </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_DELETE_PROFILE_PHOTO}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberDeleteProfilePhoto(MemberDeleteProfilePhotoType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberDeleteProfilePhoto(Tag.MEMBER_DELETE_PROFILE_PHOTO, value);
    }

    /**
     * (members) Deleted team member profile photo
     *
     * <p> This instance must be tagged as {@link
     * Tag#MEMBER_DELETE_PROFILE_PHOTO}. </p>
     *
     * @return The {@link MemberDeleteProfilePhotoType} value associated with
     *     this instance if {@link #isMemberDeleteProfilePhoto} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isMemberDeleteProfilePhoto} is
     *     {@code false}.
     */
    public MemberDeleteProfilePhotoType getMemberDeleteProfilePhotoValue() {
        if (this._tag != Tag.MEMBER_DELETE_PROFILE_PHOTO) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_DELETE_PROFILE_PHOTO, but was Tag." + this._tag.name());
        }
        return memberDeleteProfilePhotoValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS}, {@code false}
     *     otherwise.
     */
    public boolean isMemberPermanentlyDeleteAccountContents() {
        return this._tag == Tag.MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS}.
     *
     * <p> (members) Permanently deleted contents of deleted team member account
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberPermanentlyDeleteAccountContents(MemberPermanentlyDeleteAccountContentsType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberPermanentlyDeleteAccountContents(Tag.MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS, value);
    }

    /**
     * (members) Permanently deleted contents of deleted team member account
     *
     * <p> This instance must be tagged as {@link
     * Tag#MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS}. </p>
     *
     * @return The {@link MemberPermanentlyDeleteAccountContentsType} value
     *     associated with this instance if {@link
     *     #isMemberPermanentlyDeleteAccountContents} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberPermanentlyDeleteAccountContents} is {@code false}.
     */
    public MemberPermanentlyDeleteAccountContentsType getMemberPermanentlyDeleteAccountContentsValue() {
        if (this._tag != Tag.MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS, but was Tag." + this._tag.name());
        }
        return memberPermanentlyDeleteAccountContentsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_REMOVE_EXTERNAL_ID}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_REMOVE_EXTERNAL_ID}, {@code false} otherwise.
     */
    public boolean isMemberRemoveExternalId() {
        return this._tag == Tag.MEMBER_REMOVE_EXTERNAL_ID;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_REMOVE_EXTERNAL_ID}.
     *
     * <p> (members) Removed the external ID for team member </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_REMOVE_EXTERNAL_ID}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberRemoveExternalId(MemberRemoveExternalIdType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberRemoveExternalId(Tag.MEMBER_REMOVE_EXTERNAL_ID, value);
    }

    /**
     * (members) Removed the external ID for team member
     *
     * <p> This instance must be tagged as {@link
     * Tag#MEMBER_REMOVE_EXTERNAL_ID}. </p>
     *
     * @return The {@link MemberRemoveExternalIdType} value associated with this
     *     instance if {@link #isMemberRemoveExternalId} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isMemberRemoveExternalId} is
     *     {@code false}.
     */
    public MemberRemoveExternalIdType getMemberRemoveExternalIdValue() {
        if (this._tag != Tag.MEMBER_REMOVE_EXTERNAL_ID) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_REMOVE_EXTERNAL_ID, but was Tag." + this._tag.name());
        }
        return memberRemoveExternalIdValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SET_PROFILE_PHOTO}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SET_PROFILE_PHOTO}, {@code false} otherwise.
     */
    public boolean isMemberSetProfilePhoto() {
        return this._tag == Tag.MEMBER_SET_PROFILE_PHOTO;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_SET_PROFILE_PHOTO}.
     *
     * <p> (members) Set team member profile photo </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_SET_PROFILE_PHOTO}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberSetProfilePhoto(MemberSetProfilePhotoType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberSetProfilePhoto(Tag.MEMBER_SET_PROFILE_PHOTO, value);
    }

    /**
     * (members) Set team member profile photo
     *
     * <p> This instance must be tagged as {@link Tag#MEMBER_SET_PROFILE_PHOTO}.
     * </p>
     *
     * @return The {@link MemberSetProfilePhotoType} value associated with this
     *     instance if {@link #isMemberSetProfilePhoto} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isMemberSetProfilePhoto} is
     *     {@code false}.
     */
    public MemberSetProfilePhotoType getMemberSetProfilePhotoValue() {
        if (this._tag != Tag.MEMBER_SET_PROFILE_PHOTO) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SET_PROFILE_PHOTO, but was Tag." + this._tag.name());
        }
        return memberSetProfilePhotoValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA}, {@code false} otherwise.
     */
    public boolean isMemberSpaceLimitsAddCustomQuota() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA}.
     *
     * <p> (members) Set custom member space limit </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberSpaceLimitsAddCustomQuota(MemberSpaceLimitsAddCustomQuotaType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberSpaceLimitsAddCustomQuota(Tag.MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA, value);
    }

    /**
     * (members) Set custom member space limit
     *
     * <p> This instance must be tagged as {@link
     * Tag#MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA}. </p>
     *
     * @return The {@link MemberSpaceLimitsAddCustomQuotaType} value associated
     *     with this instance if {@link #isMemberSpaceLimitsAddCustomQuota} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberSpaceLimitsAddCustomQuota} is {@code false}.
     */
    public MemberSpaceLimitsAddCustomQuotaType getMemberSpaceLimitsAddCustomQuotaValue() {
        if (this._tag != Tag.MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA, but was Tag." + this._tag.name());
        }
        return memberSpaceLimitsAddCustomQuotaValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA}, {@code false}
     *     otherwise.
     */
    public boolean isMemberSpaceLimitsChangeCustomQuota() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA}.
     *
     * <p> (members) Changed custom member space limit </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberSpaceLimitsChangeCustomQuota(MemberSpaceLimitsChangeCustomQuotaType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberSpaceLimitsChangeCustomQuota(Tag.MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA, value);
    }

    /**
     * (members) Changed custom member space limit
     *
     * <p> This instance must be tagged as {@link
     * Tag#MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA}. </p>
     *
     * @return The {@link MemberSpaceLimitsChangeCustomQuotaType} value
     *     associated with this instance if {@link
     *     #isMemberSpaceLimitsChangeCustomQuota} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberSpaceLimitsChangeCustomQuota} is {@code false}.
     */
    public MemberSpaceLimitsChangeCustomQuotaType getMemberSpaceLimitsChangeCustomQuotaValue() {
        if (this._tag != Tag.MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA, but was Tag." + this._tag.name());
        }
        return memberSpaceLimitsChangeCustomQuotaValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SPACE_LIMITS_CHANGE_STATUS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SPACE_LIMITS_CHANGE_STATUS}, {@code false} otherwise.
     */
    public boolean isMemberSpaceLimitsChangeStatus() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_CHANGE_STATUS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_SPACE_LIMITS_CHANGE_STATUS}.
     *
     * <p> (members) Changed space limit status </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_SPACE_LIMITS_CHANGE_STATUS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberSpaceLimitsChangeStatus(MemberSpaceLimitsChangeStatusType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberSpaceLimitsChangeStatus(Tag.MEMBER_SPACE_LIMITS_CHANGE_STATUS, value);
    }

    /**
     * (members) Changed space limit status
     *
     * <p> This instance must be tagged as {@link
     * Tag#MEMBER_SPACE_LIMITS_CHANGE_STATUS}. </p>
     *
     * @return The {@link MemberSpaceLimitsChangeStatusType} value associated
     *     with this instance if {@link #isMemberSpaceLimitsChangeStatus} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberSpaceLimitsChangeStatus} is {@code false}.
     */
    public MemberSpaceLimitsChangeStatusType getMemberSpaceLimitsChangeStatusValue() {
        if (this._tag != Tag.MEMBER_SPACE_LIMITS_CHANGE_STATUS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_CHANGE_STATUS, but was Tag." + this._tag.name());
        }
        return memberSpaceLimitsChangeStatusValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA}, {@code false}
     *     otherwise.
     */
    public boolean isMemberSpaceLimitsRemoveCustomQuota() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA}.
     *
     * <p> (members) Removed custom member space limit </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberSpaceLimitsRemoveCustomQuota(MemberSpaceLimitsRemoveCustomQuotaType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberSpaceLimitsRemoveCustomQuota(Tag.MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA, value);
    }

    /**
     * (members) Removed custom member space limit
     *
     * <p> This instance must be tagged as {@link
     * Tag#MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA}. </p>
     *
     * @return The {@link MemberSpaceLimitsRemoveCustomQuotaType} value
     *     associated with this instance if {@link
     *     #isMemberSpaceLimitsRemoveCustomQuota} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberSpaceLimitsRemoveCustomQuota} is {@code false}.
     */
    public MemberSpaceLimitsRemoveCustomQuotaType getMemberSpaceLimitsRemoveCustomQuotaValue() {
        if (this._tag != Tag.MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA, but was Tag." + this._tag.name());
        }
        return memberSpaceLimitsRemoveCustomQuotaValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SUGGEST}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SUGGEST}, {@code false} otherwise.
     */
    public boolean isMemberSuggest() {
        return this._tag == Tag.MEMBER_SUGGEST;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_SUGGEST}.
     *
     * <p> (members) Suggested person to add to team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_SUGGEST}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberSuggest(MemberSuggestType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberSuggest(Tag.MEMBER_SUGGEST, value);
    }

    /**
     * (members) Suggested person to add to team
     *
     * <p> This instance must be tagged as {@link Tag#MEMBER_SUGGEST}. </p>
     *
     * @return The {@link MemberSuggestType} value associated with this instance
     *     if {@link #isMemberSuggest} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isMemberSuggest} is {@code
     *     false}.
     */
    public MemberSuggestType getMemberSuggestValue() {
        if (this._tag != Tag.MEMBER_SUGGEST) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SUGGEST, but was Tag." + this._tag.name());
        }
        return memberSuggestValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_TRANSFER_ACCOUNT_CONTENTS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_TRANSFER_ACCOUNT_CONTENTS}, {@code false} otherwise.
     */
    public boolean isMemberTransferAccountContents() {
        return this._tag == Tag.MEMBER_TRANSFER_ACCOUNT_CONTENTS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_TRANSFER_ACCOUNT_CONTENTS}.
     *
     * <p> (members) Transferred contents of deleted member account to another
     * member </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_TRANSFER_ACCOUNT_CONTENTS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberTransferAccountContents(MemberTransferAccountContentsType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberTransferAccountContents(Tag.MEMBER_TRANSFER_ACCOUNT_CONTENTS, value);
    }

    /**
     * (members) Transferred contents of deleted member account to another
     * member
     *
     * <p> This instance must be tagged as {@link
     * Tag#MEMBER_TRANSFER_ACCOUNT_CONTENTS}. </p>
     *
     * @return The {@link MemberTransferAccountContentsType} value associated
     *     with this instance if {@link #isMemberTransferAccountContents} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberTransferAccountContents} is {@code false}.
     */
    public MemberTransferAccountContentsType getMemberTransferAccountContentsValue() {
        if (this._tag != Tag.MEMBER_TRANSFER_ACCOUNT_CONTENTS) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_TRANSFER_ACCOUNT_CONTENTS, but was Tag." + this._tag.name());
        }
        return memberTransferAccountContentsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PENDING_SECONDARY_EMAIL_ADDED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PENDING_SECONDARY_EMAIL_ADDED}, {@code false} otherwise.
     */
    public boolean isPendingSecondaryEmailAdded() {
        return this._tag == Tag.PENDING_SECONDARY_EMAIL_ADDED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PENDING_SECONDARY_EMAIL_ADDED}.
     *
     * <p> (members) Added pending secondary email </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PENDING_SECONDARY_EMAIL_ADDED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType pendingSecondaryEmailAdded(PendingSecondaryEmailAddedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPendingSecondaryEmailAdded(Tag.PENDING_SECONDARY_EMAIL_ADDED, value);
    }

    /**
     * (members) Added pending secondary email
     *
     * <p> This instance must be tagged as {@link
     * Tag#PENDING_SECONDARY_EMAIL_ADDED}. </p>
     *
     * @return The {@link PendingSecondaryEmailAddedType} value associated with
     *     this instance if {@link #isPendingSecondaryEmailAdded} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isPendingSecondaryEmailAdded}
     *     is {@code false}.
     */
    public PendingSecondaryEmailAddedType getPendingSecondaryEmailAddedValue() {
        if (this._tag != Tag.PENDING_SECONDARY_EMAIL_ADDED) {
            throw new IllegalStateException("Invalid tag: required Tag.PENDING_SECONDARY_EMAIL_ADDED, but was Tag." + this._tag.name());
        }
        return pendingSecondaryEmailAddedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SECONDARY_EMAIL_DELETED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SECONDARY_EMAIL_DELETED}, {@code false} otherwise.
     */
    public boolean isSecondaryEmailDeleted() {
        return this._tag == Tag.SECONDARY_EMAIL_DELETED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SECONDARY_EMAIL_DELETED}.
     *
     * <p> (members) Deleted secondary email </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SECONDARY_EMAIL_DELETED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType secondaryEmailDeleted(SecondaryEmailDeletedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSecondaryEmailDeleted(Tag.SECONDARY_EMAIL_DELETED, value);
    }

    /**
     * (members) Deleted secondary email
     *
     * <p> This instance must be tagged as {@link Tag#SECONDARY_EMAIL_DELETED}.
     * </p>
     *
     * @return The {@link SecondaryEmailDeletedType} value associated with this
     *     instance if {@link #isSecondaryEmailDeleted} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSecondaryEmailDeleted} is
     *     {@code false}.
     */
    public SecondaryEmailDeletedType getSecondaryEmailDeletedValue() {
        if (this._tag != Tag.SECONDARY_EMAIL_DELETED) {
            throw new IllegalStateException("Invalid tag: required Tag.SECONDARY_EMAIL_DELETED, but was Tag." + this._tag.name());
        }
        return secondaryEmailDeletedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SECONDARY_EMAIL_VERIFIED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SECONDARY_EMAIL_VERIFIED}, {@code false} otherwise.
     */
    public boolean isSecondaryEmailVerified() {
        return this._tag == Tag.SECONDARY_EMAIL_VERIFIED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SECONDARY_EMAIL_VERIFIED}.
     *
     * <p> (members) Verified secondary email </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SECONDARY_EMAIL_VERIFIED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType secondaryEmailVerified(SecondaryEmailVerifiedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSecondaryEmailVerified(Tag.SECONDARY_EMAIL_VERIFIED, value);
    }

    /**
     * (members) Verified secondary email
     *
     * <p> This instance must be tagged as {@link Tag#SECONDARY_EMAIL_VERIFIED}.
     * </p>
     *
     * @return The {@link SecondaryEmailVerifiedType} value associated with this
     *     instance if {@link #isSecondaryEmailVerified} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSecondaryEmailVerified} is
     *     {@code false}.
     */
    public SecondaryEmailVerifiedType getSecondaryEmailVerifiedValue() {
        if (this._tag != Tag.SECONDARY_EMAIL_VERIFIED) {
            throw new IllegalStateException("Invalid tag: required Tag.SECONDARY_EMAIL_VERIFIED, but was Tag." + this._tag.name());
        }
        return secondaryEmailVerifiedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SECONDARY_MAILS_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SECONDARY_MAILS_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isSecondaryMailsPolicyChanged() {
        return this._tag == Tag.SECONDARY_MAILS_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SECONDARY_MAILS_POLICY_CHANGED}.
     *
     * <p> (members) Secondary mails policy changed </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SECONDARY_MAILS_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType secondaryMailsPolicyChanged(SecondaryMailsPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSecondaryMailsPolicyChanged(Tag.SECONDARY_MAILS_POLICY_CHANGED, value);
    }

    /**
     * (members) Secondary mails policy changed
     *
     * <p> This instance must be tagged as {@link
     * Tag#SECONDARY_MAILS_POLICY_CHANGED}. </p>
     *
     * @return The {@link SecondaryMailsPolicyChangedType} value associated with
     *     this instance if {@link #isSecondaryMailsPolicyChanged} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isSecondaryMailsPolicyChanged}
     *     is {@code false}.
     */
    public SecondaryMailsPolicyChangedType getSecondaryMailsPolicyChangedValue() {
        if (this._tag != Tag.SECONDARY_MAILS_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.SECONDARY_MAILS_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return secondaryMailsPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#BINDER_ADD_PAGE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#BINDER_ADD_PAGE}, {@code false} otherwise.
     */
    public boolean isBinderAddPage() {
        return this._tag == Tag.BINDER_ADD_PAGE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#BINDER_ADD_PAGE}.
     *
     * <p> (paper) Added Binder page (deprecated, replaced by 'Edited files')
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#BINDER_ADD_PAGE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType binderAddPage(BinderAddPageType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndBinderAddPage(Tag.BINDER_ADD_PAGE, value);
    }

    /**
     * (paper) Added Binder page (deprecated, replaced by 'Edited files')
     *
     * <p> This instance must be tagged as {@link Tag#BINDER_ADD_PAGE}. </p>
     *
     * @return The {@link BinderAddPageType} value associated with this instance
     *     if {@link #isBinderAddPage} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isBinderAddPage} is {@code
     *     false}.
     */
    public BinderAddPageType getBinderAddPageValue() {
        if (this._tag != Tag.BINDER_ADD_PAGE) {
            throw new IllegalStateException("Invalid tag: required Tag.BINDER_ADD_PAGE, but was Tag." + this._tag.name());
        }
        return binderAddPageValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#BINDER_ADD_SECTION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#BINDER_ADD_SECTION}, {@code false} otherwise.
     */
    public boolean isBinderAddSection() {
        return this._tag == Tag.BINDER_ADD_SECTION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#BINDER_ADD_SECTION}.
     *
     * <p> (paper) Added Binder section (deprecated, replaced by 'Edited files')
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#BINDER_ADD_SECTION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType binderAddSection(BinderAddSectionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndBinderAddSection(Tag.BINDER_ADD_SECTION, value);
    }

    /**
     * (paper) Added Binder section (deprecated, replaced by 'Edited files')
     *
     * <p> This instance must be tagged as {@link Tag#BINDER_ADD_SECTION}. </p>
     *
     * @return The {@link BinderAddSectionType} value associated with this
     *     instance if {@link #isBinderAddSection} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isBinderAddSection} is {@code
     *     false}.
     */
    public BinderAddSectionType getBinderAddSectionValue() {
        if (this._tag != Tag.BINDER_ADD_SECTION) {
            throw new IllegalStateException("Invalid tag: required Tag.BINDER_ADD_SECTION, but was Tag." + this._tag.name());
        }
        return binderAddSectionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#BINDER_REMOVE_PAGE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#BINDER_REMOVE_PAGE}, {@code false} otherwise.
     */
    public boolean isBinderRemovePage() {
        return this._tag == Tag.BINDER_REMOVE_PAGE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#BINDER_REMOVE_PAGE}.
     *
     * <p> (paper) Removed Binder page (deprecated, replaced by 'Edited files')
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#BINDER_REMOVE_PAGE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType binderRemovePage(BinderRemovePageType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndBinderRemovePage(Tag.BINDER_REMOVE_PAGE, value);
    }

    /**
     * (paper) Removed Binder page (deprecated, replaced by 'Edited files')
     *
     * <p> This instance must be tagged as {@link Tag#BINDER_REMOVE_PAGE}. </p>
     *
     * @return The {@link BinderRemovePageType} value associated with this
     *     instance if {@link #isBinderRemovePage} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isBinderRemovePage} is {@code
     *     false}.
     */
    public BinderRemovePageType getBinderRemovePageValue() {
        if (this._tag != Tag.BINDER_REMOVE_PAGE) {
            throw new IllegalStateException("Invalid tag: required Tag.BINDER_REMOVE_PAGE, but was Tag." + this._tag.name());
        }
        return binderRemovePageValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#BINDER_REMOVE_SECTION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#BINDER_REMOVE_SECTION}, {@code false} otherwise.
     */
    public boolean isBinderRemoveSection() {
        return this._tag == Tag.BINDER_REMOVE_SECTION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#BINDER_REMOVE_SECTION}.
     *
     * <p> (paper) Removed Binder section (deprecated, replaced by 'Edited
     * files') </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#BINDER_REMOVE_SECTION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType binderRemoveSection(BinderRemoveSectionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndBinderRemoveSection(Tag.BINDER_REMOVE_SECTION, value);
    }

    /**
     * (paper) Removed Binder section (deprecated, replaced by 'Edited files')
     *
     * <p> This instance must be tagged as {@link Tag#BINDER_REMOVE_SECTION}.
     * </p>
     *
     * @return The {@link BinderRemoveSectionType} value associated with this
     *     instance if {@link #isBinderRemoveSection} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isBinderRemoveSection} is
     *     {@code false}.
     */
    public BinderRemoveSectionType getBinderRemoveSectionValue() {
        if (this._tag != Tag.BINDER_REMOVE_SECTION) {
            throw new IllegalStateException("Invalid tag: required Tag.BINDER_REMOVE_SECTION, but was Tag." + this._tag.name());
        }
        return binderRemoveSectionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#BINDER_RENAME_PAGE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#BINDER_RENAME_PAGE}, {@code false} otherwise.
     */
    public boolean isBinderRenamePage() {
        return this._tag == Tag.BINDER_RENAME_PAGE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#BINDER_RENAME_PAGE}.
     *
     * <p> (paper) Renamed Binder page (deprecated, replaced by 'Edited files')
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#BINDER_RENAME_PAGE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType binderRenamePage(BinderRenamePageType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndBinderRenamePage(Tag.BINDER_RENAME_PAGE, value);
    }

    /**
     * (paper) Renamed Binder page (deprecated, replaced by 'Edited files')
     *
     * <p> This instance must be tagged as {@link Tag#BINDER_RENAME_PAGE}. </p>
     *
     * @return The {@link BinderRenamePageType} value associated with this
     *     instance if {@link #isBinderRenamePage} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isBinderRenamePage} is {@code
     *     false}.
     */
    public BinderRenamePageType getBinderRenamePageValue() {
        if (this._tag != Tag.BINDER_RENAME_PAGE) {
            throw new IllegalStateException("Invalid tag: required Tag.BINDER_RENAME_PAGE, but was Tag." + this._tag.name());
        }
        return binderRenamePageValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#BINDER_RENAME_SECTION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#BINDER_RENAME_SECTION}, {@code false} otherwise.
     */
    public boolean isBinderRenameSection() {
        return this._tag == Tag.BINDER_RENAME_SECTION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#BINDER_RENAME_SECTION}.
     *
     * <p> (paper) Renamed Binder section (deprecated, replaced by 'Edited
     * files') </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#BINDER_RENAME_SECTION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType binderRenameSection(BinderRenameSectionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndBinderRenameSection(Tag.BINDER_RENAME_SECTION, value);
    }

    /**
     * (paper) Renamed Binder section (deprecated, replaced by 'Edited files')
     *
     * <p> This instance must be tagged as {@link Tag#BINDER_RENAME_SECTION}.
     * </p>
     *
     * @return The {@link BinderRenameSectionType} value associated with this
     *     instance if {@link #isBinderRenameSection} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isBinderRenameSection} is
     *     {@code false}.
     */
    public BinderRenameSectionType getBinderRenameSectionValue() {
        if (this._tag != Tag.BINDER_RENAME_SECTION) {
            throw new IllegalStateException("Invalid tag: required Tag.BINDER_RENAME_SECTION, but was Tag." + this._tag.name());
        }
        return binderRenameSectionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#BINDER_REORDER_PAGE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#BINDER_REORDER_PAGE}, {@code false} otherwise.
     */
    public boolean isBinderReorderPage() {
        return this._tag == Tag.BINDER_REORDER_PAGE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#BINDER_REORDER_PAGE}.
     *
     * <p> (paper) Reordered Binder page (deprecated, replaced by 'Edited
     * files') </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#BINDER_REORDER_PAGE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType binderReorderPage(BinderReorderPageType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndBinderReorderPage(Tag.BINDER_REORDER_PAGE, value);
    }

    /**
     * (paper) Reordered Binder page (deprecated, replaced by 'Edited files')
     *
     * <p> This instance must be tagged as {@link Tag#BINDER_REORDER_PAGE}. </p>
     *
     * @return The {@link BinderReorderPageType} value associated with this
     *     instance if {@link #isBinderReorderPage} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isBinderReorderPage} is {@code
     *     false}.
     */
    public BinderReorderPageType getBinderReorderPageValue() {
        if (this._tag != Tag.BINDER_REORDER_PAGE) {
            throw new IllegalStateException("Invalid tag: required Tag.BINDER_REORDER_PAGE, but was Tag." + this._tag.name());
        }
        return binderReorderPageValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#BINDER_REORDER_SECTION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#BINDER_REORDER_SECTION}, {@code false} otherwise.
     */
    public boolean isBinderReorderSection() {
        return this._tag == Tag.BINDER_REORDER_SECTION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#BINDER_REORDER_SECTION}.
     *
     * <p> (paper) Reordered Binder section (deprecated, replaced by 'Edited
     * files') </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#BINDER_REORDER_SECTION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType binderReorderSection(BinderReorderSectionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndBinderReorderSection(Tag.BINDER_REORDER_SECTION, value);
    }

    /**
     * (paper) Reordered Binder section (deprecated, replaced by 'Edited files')
     *
     * <p> This instance must be tagged as {@link Tag#BINDER_REORDER_SECTION}.
     * </p>
     *
     * @return The {@link BinderReorderSectionType} value associated with this
     *     instance if {@link #isBinderReorderSection} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isBinderReorderSection} is
     *     {@code false}.
     */
    public BinderReorderSectionType getBinderReorderSectionValue() {
        if (this._tag != Tag.BINDER_REORDER_SECTION) {
            throw new IllegalStateException("Invalid tag: required Tag.BINDER_REORDER_SECTION, but was Tag." + this._tag.name());
        }
        return binderReorderSectionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CONTENT_ADD_MEMBER}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CONTENT_ADD_MEMBER}, {@code false} otherwise.
     */
    public boolean isPaperContentAddMember() {
        return this._tag == Tag.PAPER_CONTENT_ADD_MEMBER;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_CONTENT_ADD_MEMBER}.
     *
     * <p> (paper) Added users and/or groups to Paper doc/folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_CONTENT_ADD_MEMBER}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperContentAddMember(PaperContentAddMemberType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperContentAddMember(Tag.PAPER_CONTENT_ADD_MEMBER, value);
    }

    /**
     * (paper) Added users and/or groups to Paper doc/folder
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_CONTENT_ADD_MEMBER}.
     * </p>
     *
     * @return The {@link PaperContentAddMemberType} value associated with this
     *     instance if {@link #isPaperContentAddMember} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperContentAddMember} is
     *     {@code false}.
     */
    public PaperContentAddMemberType getPaperContentAddMemberValue() {
        if (this._tag != Tag.PAPER_CONTENT_ADD_MEMBER) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CONTENT_ADD_MEMBER, but was Tag." + this._tag.name());
        }
        return paperContentAddMemberValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CONTENT_ADD_TO_FOLDER}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CONTENT_ADD_TO_FOLDER}, {@code false} otherwise.
     */
    public boolean isPaperContentAddToFolder() {
        return this._tag == Tag.PAPER_CONTENT_ADD_TO_FOLDER;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_CONTENT_ADD_TO_FOLDER}.
     *
     * <p> (paper) Added Paper doc/folder to folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_CONTENT_ADD_TO_FOLDER}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperContentAddToFolder(PaperContentAddToFolderType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperContentAddToFolder(Tag.PAPER_CONTENT_ADD_TO_FOLDER, value);
    }

    /**
     * (paper) Added Paper doc/folder to folder
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_CONTENT_ADD_TO_FOLDER}. </p>
     *
     * @return The {@link PaperContentAddToFolderType} value associated with
     *     this instance if {@link #isPaperContentAddToFolder} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperContentAddToFolder} is
     *     {@code false}.
     */
    public PaperContentAddToFolderType getPaperContentAddToFolderValue() {
        if (this._tag != Tag.PAPER_CONTENT_ADD_TO_FOLDER) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CONTENT_ADD_TO_FOLDER, but was Tag." + this._tag.name());
        }
        return paperContentAddToFolderValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CONTENT_ARCHIVE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CONTENT_ARCHIVE}, {@code false} otherwise.
     */
    public boolean isPaperContentArchive() {
        return this._tag == Tag.PAPER_CONTENT_ARCHIVE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_CONTENT_ARCHIVE}.
     *
     * <p> (paper) Archived Paper doc/folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_CONTENT_ARCHIVE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperContentArchive(PaperContentArchiveType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperContentArchive(Tag.PAPER_CONTENT_ARCHIVE, value);
    }

    /**
     * (paper) Archived Paper doc/folder
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_CONTENT_ARCHIVE}.
     * </p>
     *
     * @return The {@link PaperContentArchiveType} value associated with this
     *     instance if {@link #isPaperContentArchive} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperContentArchive} is
     *     {@code false}.
     */
    public PaperContentArchiveType getPaperContentArchiveValue() {
        if (this._tag != Tag.PAPER_CONTENT_ARCHIVE) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CONTENT_ARCHIVE, but was Tag." + this._tag.name());
        }
        return paperContentArchiveValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CONTENT_CREATE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CONTENT_CREATE}, {@code false} otherwise.
     */
    public boolean isPaperContentCreate() {
        return this._tag == Tag.PAPER_CONTENT_CREATE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_CONTENT_CREATE}.
     *
     * <p> (paper) Created Paper doc/folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_CONTENT_CREATE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperContentCreate(PaperContentCreateType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperContentCreate(Tag.PAPER_CONTENT_CREATE, value);
    }

    /**
     * (paper) Created Paper doc/folder
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_CONTENT_CREATE}.
     * </p>
     *
     * @return The {@link PaperContentCreateType} value associated with this
     *     instance if {@link #isPaperContentCreate} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperContentCreate} is {@code
     *     false}.
     */
    public PaperContentCreateType getPaperContentCreateValue() {
        if (this._tag != Tag.PAPER_CONTENT_CREATE) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CONTENT_CREATE, but was Tag." + this._tag.name());
        }
        return paperContentCreateValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CONTENT_PERMANENTLY_DELETE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CONTENT_PERMANENTLY_DELETE}, {@code false} otherwise.
     */
    public boolean isPaperContentPermanentlyDelete() {
        return this._tag == Tag.PAPER_CONTENT_PERMANENTLY_DELETE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_CONTENT_PERMANENTLY_DELETE}.
     *
     * <p> (paper) Permanently deleted Paper doc/folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_CONTENT_PERMANENTLY_DELETE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperContentPermanentlyDelete(PaperContentPermanentlyDeleteType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperContentPermanentlyDelete(Tag.PAPER_CONTENT_PERMANENTLY_DELETE, value);
    }

    /**
     * (paper) Permanently deleted Paper doc/folder
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_CONTENT_PERMANENTLY_DELETE}. </p>
     *
     * @return The {@link PaperContentPermanentlyDeleteType} value associated
     *     with this instance if {@link #isPaperContentPermanentlyDelete} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperContentPermanentlyDelete} is {@code false}.
     */
    public PaperContentPermanentlyDeleteType getPaperContentPermanentlyDeleteValue() {
        if (this._tag != Tag.PAPER_CONTENT_PERMANENTLY_DELETE) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CONTENT_PERMANENTLY_DELETE, but was Tag." + this._tag.name());
        }
        return paperContentPermanentlyDeleteValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CONTENT_REMOVE_FROM_FOLDER}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CONTENT_REMOVE_FROM_FOLDER}, {@code false} otherwise.
     */
    public boolean isPaperContentRemoveFromFolder() {
        return this._tag == Tag.PAPER_CONTENT_REMOVE_FROM_FOLDER;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_CONTENT_REMOVE_FROM_FOLDER}.
     *
     * <p> (paper) Removed Paper doc/folder from folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_CONTENT_REMOVE_FROM_FOLDER}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperContentRemoveFromFolder(PaperContentRemoveFromFolderType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperContentRemoveFromFolder(Tag.PAPER_CONTENT_REMOVE_FROM_FOLDER, value);
    }

    /**
     * (paper) Removed Paper doc/folder from folder
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_CONTENT_REMOVE_FROM_FOLDER}. </p>
     *
     * @return The {@link PaperContentRemoveFromFolderType} value associated
     *     with this instance if {@link #isPaperContentRemoveFromFolder} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperContentRemoveFromFolder}
     *     is {@code false}.
     */
    public PaperContentRemoveFromFolderType getPaperContentRemoveFromFolderValue() {
        if (this._tag != Tag.PAPER_CONTENT_REMOVE_FROM_FOLDER) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CONTENT_REMOVE_FROM_FOLDER, but was Tag." + this._tag.name());
        }
        return paperContentRemoveFromFolderValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CONTENT_REMOVE_MEMBER}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CONTENT_REMOVE_MEMBER}, {@code false} otherwise.
     */
    public boolean isPaperContentRemoveMember() {
        return this._tag == Tag.PAPER_CONTENT_REMOVE_MEMBER;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_CONTENT_REMOVE_MEMBER}.
     *
     * <p> (paper) Removed users and/or groups from Paper doc/folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_CONTENT_REMOVE_MEMBER}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperContentRemoveMember(PaperContentRemoveMemberType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperContentRemoveMember(Tag.PAPER_CONTENT_REMOVE_MEMBER, value);
    }

    /**
     * (paper) Removed users and/or groups from Paper doc/folder
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_CONTENT_REMOVE_MEMBER}. </p>
     *
     * @return The {@link PaperContentRemoveMemberType} value associated with
     *     this instance if {@link #isPaperContentRemoveMember} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperContentRemoveMember} is
     *     {@code false}.
     */
    public PaperContentRemoveMemberType getPaperContentRemoveMemberValue() {
        if (this._tag != Tag.PAPER_CONTENT_REMOVE_MEMBER) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CONTENT_REMOVE_MEMBER, but was Tag." + this._tag.name());
        }
        return paperContentRemoveMemberValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CONTENT_RENAME}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CONTENT_RENAME}, {@code false} otherwise.
     */
    public boolean isPaperContentRename() {
        return this._tag == Tag.PAPER_CONTENT_RENAME;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_CONTENT_RENAME}.
     *
     * <p> (paper) Renamed Paper doc/folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_CONTENT_RENAME}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperContentRename(PaperContentRenameType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperContentRename(Tag.PAPER_CONTENT_RENAME, value);
    }

    /**
     * (paper) Renamed Paper doc/folder
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_CONTENT_RENAME}.
     * </p>
     *
     * @return The {@link PaperContentRenameType} value associated with this
     *     instance if {@link #isPaperContentRename} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperContentRename} is {@code
     *     false}.
     */
    public PaperContentRenameType getPaperContentRenameValue() {
        if (this._tag != Tag.PAPER_CONTENT_RENAME) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CONTENT_RENAME, but was Tag." + this._tag.name());
        }
        return paperContentRenameValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CONTENT_RESTORE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CONTENT_RESTORE}, {@code false} otherwise.
     */
    public boolean isPaperContentRestore() {
        return this._tag == Tag.PAPER_CONTENT_RESTORE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_CONTENT_RESTORE}.
     *
     * <p> (paper) Restored archived Paper doc/folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_CONTENT_RESTORE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperContentRestore(PaperContentRestoreType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperContentRestore(Tag.PAPER_CONTENT_RESTORE, value);
    }

    /**
     * (paper) Restored archived Paper doc/folder
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_CONTENT_RESTORE}.
     * </p>
     *
     * @return The {@link PaperContentRestoreType} value associated with this
     *     instance if {@link #isPaperContentRestore} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperContentRestore} is
     *     {@code false}.
     */
    public PaperContentRestoreType getPaperContentRestoreValue() {
        if (this._tag != Tag.PAPER_CONTENT_RESTORE) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CONTENT_RESTORE, but was Tag." + this._tag.name());
        }
        return paperContentRestoreValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_ADD_COMMENT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_ADD_COMMENT}, {@code false} otherwise.
     */
    public boolean isPaperDocAddComment() {
        return this._tag == Tag.PAPER_DOC_ADD_COMMENT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_ADD_COMMENT}.
     *
     * <p> (paper) Added Paper doc comment </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_ADD_COMMENT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocAddComment(PaperDocAddCommentType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocAddComment(Tag.PAPER_DOC_ADD_COMMENT, value);
    }

    /**
     * (paper) Added Paper doc comment
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_DOC_ADD_COMMENT}.
     * </p>
     *
     * @return The {@link PaperDocAddCommentType} value associated with this
     *     instance if {@link #isPaperDocAddComment} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocAddComment} is {@code
     *     false}.
     */
    public PaperDocAddCommentType getPaperDocAddCommentValue() {
        if (this._tag != Tag.PAPER_DOC_ADD_COMMENT) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_ADD_COMMENT, but was Tag." + this._tag.name());
        }
        return paperDocAddCommentValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_CHANGE_MEMBER_ROLE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_CHANGE_MEMBER_ROLE}, {@code false} otherwise.
     */
    public boolean isPaperDocChangeMemberRole() {
        return this._tag == Tag.PAPER_DOC_CHANGE_MEMBER_ROLE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_CHANGE_MEMBER_ROLE}.
     *
     * <p> (paper) Changed member permissions for Paper doc </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_CHANGE_MEMBER_ROLE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocChangeMemberRole(PaperDocChangeMemberRoleType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocChangeMemberRole(Tag.PAPER_DOC_CHANGE_MEMBER_ROLE, value);
    }

    /**
     * (paper) Changed member permissions for Paper doc
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_DOC_CHANGE_MEMBER_ROLE}. </p>
     *
     * @return The {@link PaperDocChangeMemberRoleType} value associated with
     *     this instance if {@link #isPaperDocChangeMemberRole} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocChangeMemberRole} is
     *     {@code false}.
     */
    public PaperDocChangeMemberRoleType getPaperDocChangeMemberRoleValue() {
        if (this._tag != Tag.PAPER_DOC_CHANGE_MEMBER_ROLE) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_CHANGE_MEMBER_ROLE, but was Tag." + this._tag.name());
        }
        return paperDocChangeMemberRoleValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_CHANGE_SHARING_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_CHANGE_SHARING_POLICY}, {@code false} otherwise.
     */
    public boolean isPaperDocChangeSharingPolicy() {
        return this._tag == Tag.PAPER_DOC_CHANGE_SHARING_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_CHANGE_SHARING_POLICY}.
     *
     * <p> (paper) Changed sharing setting for Paper doc </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_CHANGE_SHARING_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocChangeSharingPolicy(PaperDocChangeSharingPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocChangeSharingPolicy(Tag.PAPER_DOC_CHANGE_SHARING_POLICY, value);
    }

    /**
     * (paper) Changed sharing setting for Paper doc
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_DOC_CHANGE_SHARING_POLICY}. </p>
     *
     * @return The {@link PaperDocChangeSharingPolicyType} value associated with
     *     this instance if {@link #isPaperDocChangeSharingPolicy} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocChangeSharingPolicy}
     *     is {@code false}.
     */
    public PaperDocChangeSharingPolicyType getPaperDocChangeSharingPolicyValue() {
        if (this._tag != Tag.PAPER_DOC_CHANGE_SHARING_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_CHANGE_SHARING_POLICY, but was Tag." + this._tag.name());
        }
        return paperDocChangeSharingPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_CHANGE_SUBSCRIPTION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_CHANGE_SUBSCRIPTION}, {@code false} otherwise.
     */
    public boolean isPaperDocChangeSubscription() {
        return this._tag == Tag.PAPER_DOC_CHANGE_SUBSCRIPTION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_CHANGE_SUBSCRIPTION}.
     *
     * <p> (paper) Followed/unfollowed Paper doc </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_CHANGE_SUBSCRIPTION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocChangeSubscription(PaperDocChangeSubscriptionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocChangeSubscription(Tag.PAPER_DOC_CHANGE_SUBSCRIPTION, value);
    }

    /**
     * (paper) Followed/unfollowed Paper doc
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_DOC_CHANGE_SUBSCRIPTION}. </p>
     *
     * @return The {@link PaperDocChangeSubscriptionType} value associated with
     *     this instance if {@link #isPaperDocChangeSubscription} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocChangeSubscription}
     *     is {@code false}.
     */
    public PaperDocChangeSubscriptionType getPaperDocChangeSubscriptionValue() {
        if (this._tag != Tag.PAPER_DOC_CHANGE_SUBSCRIPTION) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_CHANGE_SUBSCRIPTION, but was Tag." + this._tag.name());
        }
        return paperDocChangeSubscriptionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_DELETED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_DELETED}, {@code false} otherwise.
     */
    public boolean isPaperDocDeleted() {
        return this._tag == Tag.PAPER_DOC_DELETED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_DELETED}.
     *
     * <p> (paper) Archived Paper doc (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_DELETED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocDeleted(PaperDocDeletedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocDeleted(Tag.PAPER_DOC_DELETED, value);
    }

    /**
     * (paper) Archived Paper doc (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_DOC_DELETED}. </p>
     *
     * @return The {@link PaperDocDeletedType} value associated with this
     *     instance if {@link #isPaperDocDeleted} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocDeleted} is {@code
     *     false}.
     */
    public PaperDocDeletedType getPaperDocDeletedValue() {
        if (this._tag != Tag.PAPER_DOC_DELETED) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_DELETED, but was Tag." + this._tag.name());
        }
        return paperDocDeletedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_DELETE_COMMENT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_DELETE_COMMENT}, {@code false} otherwise.
     */
    public boolean isPaperDocDeleteComment() {
        return this._tag == Tag.PAPER_DOC_DELETE_COMMENT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_DELETE_COMMENT}.
     *
     * <p> (paper) Deleted Paper doc comment </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_DELETE_COMMENT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocDeleteComment(PaperDocDeleteCommentType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocDeleteComment(Tag.PAPER_DOC_DELETE_COMMENT, value);
    }

    /**
     * (paper) Deleted Paper doc comment
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_DOC_DELETE_COMMENT}.
     * </p>
     *
     * @return The {@link PaperDocDeleteCommentType} value associated with this
     *     instance if {@link #isPaperDocDeleteComment} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocDeleteComment} is
     *     {@code false}.
     */
    public PaperDocDeleteCommentType getPaperDocDeleteCommentValue() {
        if (this._tag != Tag.PAPER_DOC_DELETE_COMMENT) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_DELETE_COMMENT, but was Tag." + this._tag.name());
        }
        return paperDocDeleteCommentValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_DOWNLOAD}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_DOWNLOAD}, {@code false} otherwise.
     */
    public boolean isPaperDocDownload() {
        return this._tag == Tag.PAPER_DOC_DOWNLOAD;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_DOWNLOAD}.
     *
     * <p> (paper) Downloaded Paper doc in specific format </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_DOWNLOAD}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocDownload(PaperDocDownloadType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocDownload(Tag.PAPER_DOC_DOWNLOAD, value);
    }

    /**
     * (paper) Downloaded Paper doc in specific format
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_DOC_DOWNLOAD}. </p>
     *
     * @return The {@link PaperDocDownloadType} value associated with this
     *     instance if {@link #isPaperDocDownload} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocDownload} is {@code
     *     false}.
     */
    public PaperDocDownloadType getPaperDocDownloadValue() {
        if (this._tag != Tag.PAPER_DOC_DOWNLOAD) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_DOWNLOAD, but was Tag." + this._tag.name());
        }
        return paperDocDownloadValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_EDIT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_EDIT}, {@code false} otherwise.
     */
    public boolean isPaperDocEdit() {
        return this._tag == Tag.PAPER_DOC_EDIT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_EDIT}.
     *
     * <p> (paper) Edited Paper doc </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_EDIT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocEdit(PaperDocEditType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocEdit(Tag.PAPER_DOC_EDIT, value);
    }

    /**
     * (paper) Edited Paper doc
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_DOC_EDIT}. </p>
     *
     * @return The {@link PaperDocEditType} value associated with this instance
     *     if {@link #isPaperDocEdit} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocEdit} is {@code
     *     false}.
     */
    public PaperDocEditType getPaperDocEditValue() {
        if (this._tag != Tag.PAPER_DOC_EDIT) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_EDIT, but was Tag." + this._tag.name());
        }
        return paperDocEditValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_EDIT_COMMENT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_EDIT_COMMENT}, {@code false} otherwise.
     */
    public boolean isPaperDocEditComment() {
        return this._tag == Tag.PAPER_DOC_EDIT_COMMENT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_EDIT_COMMENT}.
     *
     * <p> (paper) Edited Paper doc comment </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_EDIT_COMMENT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocEditComment(PaperDocEditCommentType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocEditComment(Tag.PAPER_DOC_EDIT_COMMENT, value);
    }

    /**
     * (paper) Edited Paper doc comment
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_DOC_EDIT_COMMENT}.
     * </p>
     *
     * @return The {@link PaperDocEditCommentType} value associated with this
     *     instance if {@link #isPaperDocEditComment} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocEditComment} is
     *     {@code false}.
     */
    public PaperDocEditCommentType getPaperDocEditCommentValue() {
        if (this._tag != Tag.PAPER_DOC_EDIT_COMMENT) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_EDIT_COMMENT, but was Tag." + this._tag.name());
        }
        return paperDocEditCommentValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_FOLLOWED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_FOLLOWED}, {@code false} otherwise.
     */
    public boolean isPaperDocFollowed() {
        return this._tag == Tag.PAPER_DOC_FOLLOWED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_FOLLOWED}.
     *
     * <p> (paper) Followed Paper doc (deprecated, replaced by
     * 'Followed/unfollowed Paper doc') </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_FOLLOWED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocFollowed(PaperDocFollowedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocFollowed(Tag.PAPER_DOC_FOLLOWED, value);
    }

    /**
     * (paper) Followed Paper doc (deprecated, replaced by 'Followed/unfollowed
     * Paper doc')
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_DOC_FOLLOWED}. </p>
     *
     * @return The {@link PaperDocFollowedType} value associated with this
     *     instance if {@link #isPaperDocFollowed} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocFollowed} is {@code
     *     false}.
     */
    public PaperDocFollowedType getPaperDocFollowedValue() {
        if (this._tag != Tag.PAPER_DOC_FOLLOWED) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_FOLLOWED, but was Tag." + this._tag.name());
        }
        return paperDocFollowedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_MENTION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_MENTION}, {@code false} otherwise.
     */
    public boolean isPaperDocMention() {
        return this._tag == Tag.PAPER_DOC_MENTION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_MENTION}.
     *
     * <p> (paper) Mentioned user in Paper doc </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_MENTION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocMention(PaperDocMentionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocMention(Tag.PAPER_DOC_MENTION, value);
    }

    /**
     * (paper) Mentioned user in Paper doc
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_DOC_MENTION}. </p>
     *
     * @return The {@link PaperDocMentionType} value associated with this
     *     instance if {@link #isPaperDocMention} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocMention} is {@code
     *     false}.
     */
    public PaperDocMentionType getPaperDocMentionValue() {
        if (this._tag != Tag.PAPER_DOC_MENTION) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_MENTION, but was Tag." + this._tag.name());
        }
        return paperDocMentionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_OWNERSHIP_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_OWNERSHIP_CHANGED}, {@code false} otherwise.
     */
    public boolean isPaperDocOwnershipChanged() {
        return this._tag == Tag.PAPER_DOC_OWNERSHIP_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_OWNERSHIP_CHANGED}.
     *
     * <p> (paper) Transferred ownership of Paper doc </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_OWNERSHIP_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocOwnershipChanged(PaperDocOwnershipChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocOwnershipChanged(Tag.PAPER_DOC_OWNERSHIP_CHANGED, value);
    }

    /**
     * (paper) Transferred ownership of Paper doc
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_DOC_OWNERSHIP_CHANGED}. </p>
     *
     * @return The {@link PaperDocOwnershipChangedType} value associated with
     *     this instance if {@link #isPaperDocOwnershipChanged} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocOwnershipChanged} is
     *     {@code false}.
     */
    public PaperDocOwnershipChangedType getPaperDocOwnershipChangedValue() {
        if (this._tag != Tag.PAPER_DOC_OWNERSHIP_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_OWNERSHIP_CHANGED, but was Tag." + this._tag.name());
        }
        return paperDocOwnershipChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_REQUEST_ACCESS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_REQUEST_ACCESS}, {@code false} otherwise.
     */
    public boolean isPaperDocRequestAccess() {
        return this._tag == Tag.PAPER_DOC_REQUEST_ACCESS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_REQUEST_ACCESS}.
     *
     * <p> (paper) Requested access to Paper doc </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_REQUEST_ACCESS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocRequestAccess(PaperDocRequestAccessType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocRequestAccess(Tag.PAPER_DOC_REQUEST_ACCESS, value);
    }

    /**
     * (paper) Requested access to Paper doc
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_DOC_REQUEST_ACCESS}.
     * </p>
     *
     * @return The {@link PaperDocRequestAccessType} value associated with this
     *     instance if {@link #isPaperDocRequestAccess} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocRequestAccess} is
     *     {@code false}.
     */
    public PaperDocRequestAccessType getPaperDocRequestAccessValue() {
        if (this._tag != Tag.PAPER_DOC_REQUEST_ACCESS) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_REQUEST_ACCESS, but was Tag." + this._tag.name());
        }
        return paperDocRequestAccessValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_RESOLVE_COMMENT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_RESOLVE_COMMENT}, {@code false} otherwise.
     */
    public boolean isPaperDocResolveComment() {
        return this._tag == Tag.PAPER_DOC_RESOLVE_COMMENT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_RESOLVE_COMMENT}.
     *
     * <p> (paper) Resolved Paper doc comment </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_RESOLVE_COMMENT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocResolveComment(PaperDocResolveCommentType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocResolveComment(Tag.PAPER_DOC_RESOLVE_COMMENT, value);
    }

    /**
     * (paper) Resolved Paper doc comment
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_DOC_RESOLVE_COMMENT}. </p>
     *
     * @return The {@link PaperDocResolveCommentType} value associated with this
     *     instance if {@link #isPaperDocResolveComment} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocResolveComment} is
     *     {@code false}.
     */
    public PaperDocResolveCommentType getPaperDocResolveCommentValue() {
        if (this._tag != Tag.PAPER_DOC_RESOLVE_COMMENT) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_RESOLVE_COMMENT, but was Tag." + this._tag.name());
        }
        return paperDocResolveCommentValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_REVERT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_REVERT}, {@code false} otherwise.
     */
    public boolean isPaperDocRevert() {
        return this._tag == Tag.PAPER_DOC_REVERT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_REVERT}.
     *
     * <p> (paper) Restored Paper doc to previous version </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_REVERT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocRevert(PaperDocRevertType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocRevert(Tag.PAPER_DOC_REVERT, value);
    }

    /**
     * (paper) Restored Paper doc to previous version
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_DOC_REVERT}. </p>
     *
     * @return The {@link PaperDocRevertType} value associated with this
     *     instance if {@link #isPaperDocRevert} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocRevert} is {@code
     *     false}.
     */
    public PaperDocRevertType getPaperDocRevertValue() {
        if (this._tag != Tag.PAPER_DOC_REVERT) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_REVERT, but was Tag." + this._tag.name());
        }
        return paperDocRevertValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_SLACK_SHARE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_SLACK_SHARE}, {@code false} otherwise.
     */
    public boolean isPaperDocSlackShare() {
        return this._tag == Tag.PAPER_DOC_SLACK_SHARE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_SLACK_SHARE}.
     *
     * <p> (paper) Shared Paper doc via Slack </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_SLACK_SHARE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocSlackShare(PaperDocSlackShareType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocSlackShare(Tag.PAPER_DOC_SLACK_SHARE, value);
    }

    /**
     * (paper) Shared Paper doc via Slack
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_DOC_SLACK_SHARE}.
     * </p>
     *
     * @return The {@link PaperDocSlackShareType} value associated with this
     *     instance if {@link #isPaperDocSlackShare} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocSlackShare} is {@code
     *     false}.
     */
    public PaperDocSlackShareType getPaperDocSlackShareValue() {
        if (this._tag != Tag.PAPER_DOC_SLACK_SHARE) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_SLACK_SHARE, but was Tag." + this._tag.name());
        }
        return paperDocSlackShareValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_TEAM_INVITE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_TEAM_INVITE}, {@code false} otherwise.
     */
    public boolean isPaperDocTeamInvite() {
        return this._tag == Tag.PAPER_DOC_TEAM_INVITE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_TEAM_INVITE}.
     *
     * <p> (paper) Shared Paper doc with users and/or groups (deprecated, no
     * longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_TEAM_INVITE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocTeamInvite(PaperDocTeamInviteType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocTeamInvite(Tag.PAPER_DOC_TEAM_INVITE, value);
    }

    /**
     * (paper) Shared Paper doc with users and/or groups (deprecated, no longer
     * logged)
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_DOC_TEAM_INVITE}.
     * </p>
     *
     * @return The {@link PaperDocTeamInviteType} value associated with this
     *     instance if {@link #isPaperDocTeamInvite} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocTeamInvite} is {@code
     *     false}.
     */
    public PaperDocTeamInviteType getPaperDocTeamInviteValue() {
        if (this._tag != Tag.PAPER_DOC_TEAM_INVITE) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_TEAM_INVITE, but was Tag." + this._tag.name());
        }
        return paperDocTeamInviteValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_TRASHED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_TRASHED}, {@code false} otherwise.
     */
    public boolean isPaperDocTrashed() {
        return this._tag == Tag.PAPER_DOC_TRASHED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_TRASHED}.
     *
     * <p> (paper) Deleted Paper doc </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_TRASHED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocTrashed(PaperDocTrashedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocTrashed(Tag.PAPER_DOC_TRASHED, value);
    }

    /**
     * (paper) Deleted Paper doc
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_DOC_TRASHED}. </p>
     *
     * @return The {@link PaperDocTrashedType} value associated with this
     *     instance if {@link #isPaperDocTrashed} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocTrashed} is {@code
     *     false}.
     */
    public PaperDocTrashedType getPaperDocTrashedValue() {
        if (this._tag != Tag.PAPER_DOC_TRASHED) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_TRASHED, but was Tag." + this._tag.name());
        }
        return paperDocTrashedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_UNRESOLVE_COMMENT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_UNRESOLVE_COMMENT}, {@code false} otherwise.
     */
    public boolean isPaperDocUnresolveComment() {
        return this._tag == Tag.PAPER_DOC_UNRESOLVE_COMMENT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_UNRESOLVE_COMMENT}.
     *
     * <p> (paper) Unresolved Paper doc comment </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_UNRESOLVE_COMMENT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocUnresolveComment(PaperDocUnresolveCommentType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocUnresolveComment(Tag.PAPER_DOC_UNRESOLVE_COMMENT, value);
    }

    /**
     * (paper) Unresolved Paper doc comment
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_DOC_UNRESOLVE_COMMENT}. </p>
     *
     * @return The {@link PaperDocUnresolveCommentType} value associated with
     *     this instance if {@link #isPaperDocUnresolveComment} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocUnresolveComment} is
     *     {@code false}.
     */
    public PaperDocUnresolveCommentType getPaperDocUnresolveCommentValue() {
        if (this._tag != Tag.PAPER_DOC_UNRESOLVE_COMMENT) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_UNRESOLVE_COMMENT, but was Tag." + this._tag.name());
        }
        return paperDocUnresolveCommentValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_UNTRASHED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_UNTRASHED}, {@code false} otherwise.
     */
    public boolean isPaperDocUntrashed() {
        return this._tag == Tag.PAPER_DOC_UNTRASHED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_UNTRASHED}.
     *
     * <p> (paper) Restored Paper doc </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_UNTRASHED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocUntrashed(PaperDocUntrashedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocUntrashed(Tag.PAPER_DOC_UNTRASHED, value);
    }

    /**
     * (paper) Restored Paper doc
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_DOC_UNTRASHED}. </p>
     *
     * @return The {@link PaperDocUntrashedType} value associated with this
     *     instance if {@link #isPaperDocUntrashed} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocUntrashed} is {@code
     *     false}.
     */
    public PaperDocUntrashedType getPaperDocUntrashedValue() {
        if (this._tag != Tag.PAPER_DOC_UNTRASHED) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_UNTRASHED, but was Tag." + this._tag.name());
        }
        return paperDocUntrashedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DOC_VIEW}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DOC_VIEW}, {@code false} otherwise.
     */
    public boolean isPaperDocView() {
        return this._tag == Tag.PAPER_DOC_VIEW;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DOC_VIEW}.
     *
     * <p> (paper) Viewed Paper doc </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DOC_VIEW}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDocView(PaperDocViewType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDocView(Tag.PAPER_DOC_VIEW, value);
    }

    /**
     * (paper) Viewed Paper doc
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_DOC_VIEW}. </p>
     *
     * @return The {@link PaperDocViewType} value associated with this instance
     *     if {@link #isPaperDocView} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDocView} is {@code
     *     false}.
     */
    public PaperDocViewType getPaperDocViewValue() {
        if (this._tag != Tag.PAPER_DOC_VIEW) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DOC_VIEW, but was Tag." + this._tag.name());
        }
        return paperDocViewValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_EXTERNAL_VIEW_ALLOW}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_EXTERNAL_VIEW_ALLOW}, {@code false} otherwise.
     */
    public boolean isPaperExternalViewAllow() {
        return this._tag == Tag.PAPER_EXTERNAL_VIEW_ALLOW;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_EXTERNAL_VIEW_ALLOW}.
     *
     * <p> (paper) Changed Paper external sharing setting to anyone (deprecated,
     * no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_EXTERNAL_VIEW_ALLOW}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperExternalViewAllow(PaperExternalViewAllowType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperExternalViewAllow(Tag.PAPER_EXTERNAL_VIEW_ALLOW, value);
    }

    /**
     * (paper) Changed Paper external sharing setting to anyone (deprecated, no
     * longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_EXTERNAL_VIEW_ALLOW}. </p>
     *
     * @return The {@link PaperExternalViewAllowType} value associated with this
     *     instance if {@link #isPaperExternalViewAllow} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperExternalViewAllow} is
     *     {@code false}.
     */
    public PaperExternalViewAllowType getPaperExternalViewAllowValue() {
        if (this._tag != Tag.PAPER_EXTERNAL_VIEW_ALLOW) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_EXTERNAL_VIEW_ALLOW, but was Tag." + this._tag.name());
        }
        return paperExternalViewAllowValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_EXTERNAL_VIEW_DEFAULT_TEAM}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_EXTERNAL_VIEW_DEFAULT_TEAM}, {@code false} otherwise.
     */
    public boolean isPaperExternalViewDefaultTeam() {
        return this._tag == Tag.PAPER_EXTERNAL_VIEW_DEFAULT_TEAM;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_EXTERNAL_VIEW_DEFAULT_TEAM}.
     *
     * <p> (paper) Changed Paper external sharing setting to default team
     * (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_EXTERNAL_VIEW_DEFAULT_TEAM}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperExternalViewDefaultTeam(PaperExternalViewDefaultTeamType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperExternalViewDefaultTeam(Tag.PAPER_EXTERNAL_VIEW_DEFAULT_TEAM, value);
    }

    /**
     * (paper) Changed Paper external sharing setting to default team
     * (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_EXTERNAL_VIEW_DEFAULT_TEAM}. </p>
     *
     * @return The {@link PaperExternalViewDefaultTeamType} value associated
     *     with this instance if {@link #isPaperExternalViewDefaultTeam} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperExternalViewDefaultTeam}
     *     is {@code false}.
     */
    public PaperExternalViewDefaultTeamType getPaperExternalViewDefaultTeamValue() {
        if (this._tag != Tag.PAPER_EXTERNAL_VIEW_DEFAULT_TEAM) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_EXTERNAL_VIEW_DEFAULT_TEAM, but was Tag." + this._tag.name());
        }
        return paperExternalViewDefaultTeamValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_EXTERNAL_VIEW_FORBID}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_EXTERNAL_VIEW_FORBID}, {@code false} otherwise.
     */
    public boolean isPaperExternalViewForbid() {
        return this._tag == Tag.PAPER_EXTERNAL_VIEW_FORBID;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_EXTERNAL_VIEW_FORBID}.
     *
     * <p> (paper) Changed Paper external sharing setting to team-only
     * (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_EXTERNAL_VIEW_FORBID}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperExternalViewForbid(PaperExternalViewForbidType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperExternalViewForbid(Tag.PAPER_EXTERNAL_VIEW_FORBID, value);
    }

    /**
     * (paper) Changed Paper external sharing setting to team-only (deprecated,
     * no longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_EXTERNAL_VIEW_FORBID}. </p>
     *
     * @return The {@link PaperExternalViewForbidType} value associated with
     *     this instance if {@link #isPaperExternalViewForbid} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperExternalViewForbid} is
     *     {@code false}.
     */
    public PaperExternalViewForbidType getPaperExternalViewForbidValue() {
        if (this._tag != Tag.PAPER_EXTERNAL_VIEW_FORBID) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_EXTERNAL_VIEW_FORBID, but was Tag." + this._tag.name());
        }
        return paperExternalViewForbidValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_FOLDER_CHANGE_SUBSCRIPTION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_FOLDER_CHANGE_SUBSCRIPTION}, {@code false} otherwise.
     */
    public boolean isPaperFolderChangeSubscription() {
        return this._tag == Tag.PAPER_FOLDER_CHANGE_SUBSCRIPTION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_FOLDER_CHANGE_SUBSCRIPTION}.
     *
     * <p> (paper) Followed/unfollowed Paper folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_FOLDER_CHANGE_SUBSCRIPTION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperFolderChangeSubscription(PaperFolderChangeSubscriptionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperFolderChangeSubscription(Tag.PAPER_FOLDER_CHANGE_SUBSCRIPTION, value);
    }

    /**
     * (paper) Followed/unfollowed Paper folder
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_FOLDER_CHANGE_SUBSCRIPTION}. </p>
     *
     * @return The {@link PaperFolderChangeSubscriptionType} value associated
     *     with this instance if {@link #isPaperFolderChangeSubscription} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperFolderChangeSubscription} is {@code false}.
     */
    public PaperFolderChangeSubscriptionType getPaperFolderChangeSubscriptionValue() {
        if (this._tag != Tag.PAPER_FOLDER_CHANGE_SUBSCRIPTION) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_FOLDER_CHANGE_SUBSCRIPTION, but was Tag." + this._tag.name());
        }
        return paperFolderChangeSubscriptionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_FOLDER_DELETED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_FOLDER_DELETED}, {@code false} otherwise.
     */
    public boolean isPaperFolderDeleted() {
        return this._tag == Tag.PAPER_FOLDER_DELETED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_FOLDER_DELETED}.
     *
     * <p> (paper) Archived Paper folder (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_FOLDER_DELETED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperFolderDeleted(PaperFolderDeletedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperFolderDeleted(Tag.PAPER_FOLDER_DELETED, value);
    }

    /**
     * (paper) Archived Paper folder (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_FOLDER_DELETED}.
     * </p>
     *
     * @return The {@link PaperFolderDeletedType} value associated with this
     *     instance if {@link #isPaperFolderDeleted} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperFolderDeleted} is {@code
     *     false}.
     */
    public PaperFolderDeletedType getPaperFolderDeletedValue() {
        if (this._tag != Tag.PAPER_FOLDER_DELETED) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_FOLDER_DELETED, but was Tag." + this._tag.name());
        }
        return paperFolderDeletedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_FOLDER_FOLLOWED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_FOLDER_FOLLOWED}, {@code false} otherwise.
     */
    public boolean isPaperFolderFollowed() {
        return this._tag == Tag.PAPER_FOLDER_FOLLOWED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_FOLDER_FOLLOWED}.
     *
     * <p> (paper) Followed Paper folder (deprecated, replaced by
     * 'Followed/unfollowed Paper folder') </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_FOLDER_FOLLOWED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperFolderFollowed(PaperFolderFollowedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperFolderFollowed(Tag.PAPER_FOLDER_FOLLOWED, value);
    }

    /**
     * (paper) Followed Paper folder (deprecated, replaced by
     * 'Followed/unfollowed Paper folder')
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_FOLDER_FOLLOWED}.
     * </p>
     *
     * @return The {@link PaperFolderFollowedType} value associated with this
     *     instance if {@link #isPaperFolderFollowed} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperFolderFollowed} is
     *     {@code false}.
     */
    public PaperFolderFollowedType getPaperFolderFollowedValue() {
        if (this._tag != Tag.PAPER_FOLDER_FOLLOWED) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_FOLDER_FOLLOWED, but was Tag." + this._tag.name());
        }
        return paperFolderFollowedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_FOLDER_TEAM_INVITE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_FOLDER_TEAM_INVITE}, {@code false} otherwise.
     */
    public boolean isPaperFolderTeamInvite() {
        return this._tag == Tag.PAPER_FOLDER_TEAM_INVITE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_FOLDER_TEAM_INVITE}.
     *
     * <p> (paper) Shared Paper folder with users and/or groups (deprecated, no
     * longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_FOLDER_TEAM_INVITE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperFolderTeamInvite(PaperFolderTeamInviteType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperFolderTeamInvite(Tag.PAPER_FOLDER_TEAM_INVITE, value);
    }

    /**
     * (paper) Shared Paper folder with users and/or groups (deprecated, no
     * longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_FOLDER_TEAM_INVITE}.
     * </p>
     *
     * @return The {@link PaperFolderTeamInviteType} value associated with this
     *     instance if {@link #isPaperFolderTeamInvite} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperFolderTeamInvite} is
     *     {@code false}.
     */
    public PaperFolderTeamInviteType getPaperFolderTeamInviteValue() {
        if (this._tag != Tag.PAPER_FOLDER_TEAM_INVITE) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_FOLDER_TEAM_INVITE, but was Tag." + this._tag.name());
        }
        return paperFolderTeamInviteValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_PUBLISHED_LINK_CHANGE_PERMISSION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_PUBLISHED_LINK_CHANGE_PERMISSION}, {@code false} otherwise.
     */
    public boolean isPaperPublishedLinkChangePermission() {
        return this._tag == Tag.PAPER_PUBLISHED_LINK_CHANGE_PERMISSION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_PUBLISHED_LINK_CHANGE_PERMISSION}.
     *
     * <p> (paper) Changed permissions for published doc </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_PUBLISHED_LINK_CHANGE_PERMISSION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperPublishedLinkChangePermission(PaperPublishedLinkChangePermissionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperPublishedLinkChangePermission(Tag.PAPER_PUBLISHED_LINK_CHANGE_PERMISSION, value);
    }

    /**
     * (paper) Changed permissions for published doc
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_PUBLISHED_LINK_CHANGE_PERMISSION}. </p>
     *
     * @return The {@link PaperPublishedLinkChangePermissionType} value
     *     associated with this instance if {@link
     *     #isPaperPublishedLinkChangePermission} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperPublishedLinkChangePermission} is {@code false}.
     */
    public PaperPublishedLinkChangePermissionType getPaperPublishedLinkChangePermissionValue() {
        if (this._tag != Tag.PAPER_PUBLISHED_LINK_CHANGE_PERMISSION) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_PUBLISHED_LINK_CHANGE_PERMISSION, but was Tag." + this._tag.name());
        }
        return paperPublishedLinkChangePermissionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_PUBLISHED_LINK_CREATE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_PUBLISHED_LINK_CREATE}, {@code false} otherwise.
     */
    public boolean isPaperPublishedLinkCreate() {
        return this._tag == Tag.PAPER_PUBLISHED_LINK_CREATE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_PUBLISHED_LINK_CREATE}.
     *
     * <p> (paper) Published doc </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_PUBLISHED_LINK_CREATE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperPublishedLinkCreate(PaperPublishedLinkCreateType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperPublishedLinkCreate(Tag.PAPER_PUBLISHED_LINK_CREATE, value);
    }

    /**
     * (paper) Published doc
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_PUBLISHED_LINK_CREATE}. </p>
     *
     * @return The {@link PaperPublishedLinkCreateType} value associated with
     *     this instance if {@link #isPaperPublishedLinkCreate} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperPublishedLinkCreate} is
     *     {@code false}.
     */
    public PaperPublishedLinkCreateType getPaperPublishedLinkCreateValue() {
        if (this._tag != Tag.PAPER_PUBLISHED_LINK_CREATE) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_PUBLISHED_LINK_CREATE, but was Tag." + this._tag.name());
        }
        return paperPublishedLinkCreateValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_PUBLISHED_LINK_DISABLED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_PUBLISHED_LINK_DISABLED}, {@code false} otherwise.
     */
    public boolean isPaperPublishedLinkDisabled() {
        return this._tag == Tag.PAPER_PUBLISHED_LINK_DISABLED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_PUBLISHED_LINK_DISABLED}.
     *
     * <p> (paper) Unpublished doc </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_PUBLISHED_LINK_DISABLED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperPublishedLinkDisabled(PaperPublishedLinkDisabledType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperPublishedLinkDisabled(Tag.PAPER_PUBLISHED_LINK_DISABLED, value);
    }

    /**
     * (paper) Unpublished doc
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_PUBLISHED_LINK_DISABLED}. </p>
     *
     * @return The {@link PaperPublishedLinkDisabledType} value associated with
     *     this instance if {@link #isPaperPublishedLinkDisabled} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isPaperPublishedLinkDisabled}
     *     is {@code false}.
     */
    public PaperPublishedLinkDisabledType getPaperPublishedLinkDisabledValue() {
        if (this._tag != Tag.PAPER_PUBLISHED_LINK_DISABLED) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_PUBLISHED_LINK_DISABLED, but was Tag." + this._tag.name());
        }
        return paperPublishedLinkDisabledValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_PUBLISHED_LINK_VIEW}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_PUBLISHED_LINK_VIEW}, {@code false} otherwise.
     */
    public boolean isPaperPublishedLinkView() {
        return this._tag == Tag.PAPER_PUBLISHED_LINK_VIEW;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_PUBLISHED_LINK_VIEW}.
     *
     * <p> (paper) Viewed published doc </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_PUBLISHED_LINK_VIEW}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperPublishedLinkView(PaperPublishedLinkViewType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperPublishedLinkView(Tag.PAPER_PUBLISHED_LINK_VIEW, value);
    }

    /**
     * (paper) Viewed published doc
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_PUBLISHED_LINK_VIEW}. </p>
     *
     * @return The {@link PaperPublishedLinkViewType} value associated with this
     *     instance if {@link #isPaperPublishedLinkView} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperPublishedLinkView} is
     *     {@code false}.
     */
    public PaperPublishedLinkViewType getPaperPublishedLinkViewValue() {
        if (this._tag != Tag.PAPER_PUBLISHED_LINK_VIEW) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_PUBLISHED_LINK_VIEW, but was Tag." + this._tag.name());
        }
        return paperPublishedLinkViewValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PASSWORD_CHANGE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PASSWORD_CHANGE}, {@code false} otherwise.
     */
    public boolean isPasswordChange() {
        return this._tag == Tag.PASSWORD_CHANGE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PASSWORD_CHANGE}.
     *
     * <p> (passwords) Changed password </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PASSWORD_CHANGE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType passwordChange(PasswordChangeType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPasswordChange(Tag.PASSWORD_CHANGE, value);
    }

    /**
     * (passwords) Changed password
     *
     * <p> This instance must be tagged as {@link Tag#PASSWORD_CHANGE}. </p>
     *
     * @return The {@link PasswordChangeType} value associated with this
     *     instance if {@link #isPasswordChange} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPasswordChange} is {@code
     *     false}.
     */
    public PasswordChangeType getPasswordChangeValue() {
        if (this._tag != Tag.PASSWORD_CHANGE) {
            throw new IllegalStateException("Invalid tag: required Tag.PASSWORD_CHANGE, but was Tag." + this._tag.name());
        }
        return passwordChangeValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PASSWORD_RESET}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PASSWORD_RESET}, {@code false} otherwise.
     */
    public boolean isPasswordReset() {
        return this._tag == Tag.PASSWORD_RESET;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PASSWORD_RESET}.
     *
     * <p> (passwords) Reset password </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PASSWORD_RESET}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType passwordReset(PasswordResetType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPasswordReset(Tag.PASSWORD_RESET, value);
    }

    /**
     * (passwords) Reset password
     *
     * <p> This instance must be tagged as {@link Tag#PASSWORD_RESET}. </p>
     *
     * @return The {@link PasswordResetType} value associated with this instance
     *     if {@link #isPasswordReset} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPasswordReset} is {@code
     *     false}.
     */
    public PasswordResetType getPasswordResetValue() {
        if (this._tag != Tag.PASSWORD_RESET) {
            throw new IllegalStateException("Invalid tag: required Tag.PASSWORD_RESET, but was Tag." + this._tag.name());
        }
        return passwordResetValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PASSWORD_RESET_ALL}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PASSWORD_RESET_ALL}, {@code false} otherwise.
     */
    public boolean isPasswordResetAll() {
        return this._tag == Tag.PASSWORD_RESET_ALL;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PASSWORD_RESET_ALL}.
     *
     * <p> (passwords) Reset all team member passwords </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PASSWORD_RESET_ALL}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType passwordResetAll(PasswordResetAllType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPasswordResetAll(Tag.PASSWORD_RESET_ALL, value);
    }

    /**
     * (passwords) Reset all team member passwords
     *
     * <p> This instance must be tagged as {@link Tag#PASSWORD_RESET_ALL}. </p>
     *
     * @return The {@link PasswordResetAllType} value associated with this
     *     instance if {@link #isPasswordResetAll} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPasswordResetAll} is {@code
     *     false}.
     */
    public PasswordResetAllType getPasswordResetAllValue() {
        if (this._tag != Tag.PASSWORD_RESET_ALL) {
            throw new IllegalStateException("Invalid tag: required Tag.PASSWORD_RESET_ALL, but was Tag." + this._tag.name());
        }
        return passwordResetAllValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#CLASSIFICATION_CREATE_REPORT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#CLASSIFICATION_CREATE_REPORT}, {@code false} otherwise.
     */
    public boolean isClassificationCreateReport() {
        return this._tag == Tag.CLASSIFICATION_CREATE_REPORT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#CLASSIFICATION_CREATE_REPORT}.
     *
     * <p> (reports) Created Classification report </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#CLASSIFICATION_CREATE_REPORT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType classificationCreateReport(ClassificationCreateReportType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndClassificationCreateReport(Tag.CLASSIFICATION_CREATE_REPORT, value);
    }

    /**
     * (reports) Created Classification report
     *
     * <p> This instance must be tagged as {@link
     * Tag#CLASSIFICATION_CREATE_REPORT}. </p>
     *
     * @return The {@link ClassificationCreateReportType} value associated with
     *     this instance if {@link #isClassificationCreateReport} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isClassificationCreateReport}
     *     is {@code false}.
     */
    public ClassificationCreateReportType getClassificationCreateReportValue() {
        if (this._tag != Tag.CLASSIFICATION_CREATE_REPORT) {
            throw new IllegalStateException("Invalid tag: required Tag.CLASSIFICATION_CREATE_REPORT, but was Tag." + this._tag.name());
        }
        return classificationCreateReportValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#CLASSIFICATION_CREATE_REPORT_FAIL}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#CLASSIFICATION_CREATE_REPORT_FAIL}, {@code false} otherwise.
     */
    public boolean isClassificationCreateReportFail() {
        return this._tag == Tag.CLASSIFICATION_CREATE_REPORT_FAIL;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#CLASSIFICATION_CREATE_REPORT_FAIL}.
     *
     * <p> (reports) Couldn't create Classification report </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#CLASSIFICATION_CREATE_REPORT_FAIL}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType classificationCreateReportFail(ClassificationCreateReportFailType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndClassificationCreateReportFail(Tag.CLASSIFICATION_CREATE_REPORT_FAIL, value);
    }

    /**
     * (reports) Couldn't create Classification report
     *
     * <p> This instance must be tagged as {@link
     * Tag#CLASSIFICATION_CREATE_REPORT_FAIL}. </p>
     *
     * @return The {@link ClassificationCreateReportFailType} value associated
     *     with this instance if {@link #isClassificationCreateReportFail} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isClassificationCreateReportFail} is {@code false}.
     */
    public ClassificationCreateReportFailType getClassificationCreateReportFailValue() {
        if (this._tag != Tag.CLASSIFICATION_CREATE_REPORT_FAIL) {
            throw new IllegalStateException("Invalid tag: required Tag.CLASSIFICATION_CREATE_REPORT_FAIL, but was Tag." + this._tag.name());
        }
        return classificationCreateReportFailValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EMM_CREATE_EXCEPTIONS_REPORT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EMM_CREATE_EXCEPTIONS_REPORT}, {@code false} otherwise.
     */
    public boolean isEmmCreateExceptionsReport() {
        return this._tag == Tag.EMM_CREATE_EXCEPTIONS_REPORT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#EMM_CREATE_EXCEPTIONS_REPORT}.
     *
     * <p> (reports) Created EMM-excluded users report </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#EMM_CREATE_EXCEPTIONS_REPORT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType emmCreateExceptionsReport(EmmCreateExceptionsReportType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndEmmCreateExceptionsReport(Tag.EMM_CREATE_EXCEPTIONS_REPORT, value);
    }

    /**
     * (reports) Created EMM-excluded users report
     *
     * <p> This instance must be tagged as {@link
     * Tag#EMM_CREATE_EXCEPTIONS_REPORT}. </p>
     *
     * @return The {@link EmmCreateExceptionsReportType} value associated with
     *     this instance if {@link #isEmmCreateExceptionsReport} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isEmmCreateExceptionsReport} is
     *     {@code false}.
     */
    public EmmCreateExceptionsReportType getEmmCreateExceptionsReportValue() {
        if (this._tag != Tag.EMM_CREATE_EXCEPTIONS_REPORT) {
            throw new IllegalStateException("Invalid tag: required Tag.EMM_CREATE_EXCEPTIONS_REPORT, but was Tag." + this._tag.name());
        }
        return emmCreateExceptionsReportValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EMM_CREATE_USAGE_REPORT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EMM_CREATE_USAGE_REPORT}, {@code false} otherwise.
     */
    public boolean isEmmCreateUsageReport() {
        return this._tag == Tag.EMM_CREATE_USAGE_REPORT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#EMM_CREATE_USAGE_REPORT}.
     *
     * <p> (reports) Created EMM mobile app usage report </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#EMM_CREATE_USAGE_REPORT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType emmCreateUsageReport(EmmCreateUsageReportType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndEmmCreateUsageReport(Tag.EMM_CREATE_USAGE_REPORT, value);
    }

    /**
     * (reports) Created EMM mobile app usage report
     *
     * <p> This instance must be tagged as {@link Tag#EMM_CREATE_USAGE_REPORT}.
     * </p>
     *
     * @return The {@link EmmCreateUsageReportType} value associated with this
     *     instance if {@link #isEmmCreateUsageReport} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isEmmCreateUsageReport} is
     *     {@code false}.
     */
    public EmmCreateUsageReportType getEmmCreateUsageReportValue() {
        if (this._tag != Tag.EMM_CREATE_USAGE_REPORT) {
            throw new IllegalStateException("Invalid tag: required Tag.EMM_CREATE_USAGE_REPORT, but was Tag." + this._tag.name());
        }
        return emmCreateUsageReportValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EXPORT_MEMBERS_REPORT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EXPORT_MEMBERS_REPORT}, {@code false} otherwise.
     */
    public boolean isExportMembersReport() {
        return this._tag == Tag.EXPORT_MEMBERS_REPORT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#EXPORT_MEMBERS_REPORT}.
     *
     * <p> (reports) Created member data report </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#EXPORT_MEMBERS_REPORT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType exportMembersReport(ExportMembersReportType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndExportMembersReport(Tag.EXPORT_MEMBERS_REPORT, value);
    }

    /**
     * (reports) Created member data report
     *
     * <p> This instance must be tagged as {@link Tag#EXPORT_MEMBERS_REPORT}.
     * </p>
     *
     * @return The {@link ExportMembersReportType} value associated with this
     *     instance if {@link #isExportMembersReport} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isExportMembersReport} is
     *     {@code false}.
     */
    public ExportMembersReportType getExportMembersReportValue() {
        if (this._tag != Tag.EXPORT_MEMBERS_REPORT) {
            throw new IllegalStateException("Invalid tag: required Tag.EXPORT_MEMBERS_REPORT, but was Tag." + this._tag.name());
        }
        return exportMembersReportValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EXPORT_MEMBERS_REPORT_FAIL}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EXPORT_MEMBERS_REPORT_FAIL}, {@code false} otherwise.
     */
    public boolean isExportMembersReportFail() {
        return this._tag == Tag.EXPORT_MEMBERS_REPORT_FAIL;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#EXPORT_MEMBERS_REPORT_FAIL}.
     *
     * <p> (reports) Failed to create members data report </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#EXPORT_MEMBERS_REPORT_FAIL}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType exportMembersReportFail(ExportMembersReportFailType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndExportMembersReportFail(Tag.EXPORT_MEMBERS_REPORT_FAIL, value);
    }

    /**
     * (reports) Failed to create members data report
     *
     * <p> This instance must be tagged as {@link
     * Tag#EXPORT_MEMBERS_REPORT_FAIL}. </p>
     *
     * @return The {@link ExportMembersReportFailType} value associated with
     *     this instance if {@link #isExportMembersReportFail} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isExportMembersReportFail} is
     *     {@code false}.
     */
    public ExportMembersReportFailType getExportMembersReportFailValue() {
        if (this._tag != Tag.EXPORT_MEMBERS_REPORT_FAIL) {
            throw new IllegalStateException("Invalid tag: required Tag.EXPORT_MEMBERS_REPORT_FAIL, but was Tag." + this._tag.name());
        }
        return exportMembersReportFailValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EXTERNAL_SHARING_CREATE_REPORT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EXTERNAL_SHARING_CREATE_REPORT}, {@code false} otherwise.
     */
    public boolean isExternalSharingCreateReport() {
        return this._tag == Tag.EXTERNAL_SHARING_CREATE_REPORT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#EXTERNAL_SHARING_CREATE_REPORT}.
     *
     * <p> (reports) Created External sharing report </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#EXTERNAL_SHARING_CREATE_REPORT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType externalSharingCreateReport(ExternalSharingCreateReportType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndExternalSharingCreateReport(Tag.EXTERNAL_SHARING_CREATE_REPORT, value);
    }

    /**
     * (reports) Created External sharing report
     *
     * <p> This instance must be tagged as {@link
     * Tag#EXTERNAL_SHARING_CREATE_REPORT}. </p>
     *
     * @return The {@link ExternalSharingCreateReportType} value associated with
     *     this instance if {@link #isExternalSharingCreateReport} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isExternalSharingCreateReport}
     *     is {@code false}.
     */
    public ExternalSharingCreateReportType getExternalSharingCreateReportValue() {
        if (this._tag != Tag.EXTERNAL_SHARING_CREATE_REPORT) {
            throw new IllegalStateException("Invalid tag: required Tag.EXTERNAL_SHARING_CREATE_REPORT, but was Tag." + this._tag.name());
        }
        return externalSharingCreateReportValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EXTERNAL_SHARING_REPORT_FAILED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EXTERNAL_SHARING_REPORT_FAILED}, {@code false} otherwise.
     */
    public boolean isExternalSharingReportFailed() {
        return this._tag == Tag.EXTERNAL_SHARING_REPORT_FAILED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#EXTERNAL_SHARING_REPORT_FAILED}.
     *
     * <p> (reports) Couldn't create External sharing report </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#EXTERNAL_SHARING_REPORT_FAILED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType externalSharingReportFailed(ExternalSharingReportFailedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndExternalSharingReportFailed(Tag.EXTERNAL_SHARING_REPORT_FAILED, value);
    }

    /**
     * (reports) Couldn't create External sharing report
     *
     * <p> This instance must be tagged as {@link
     * Tag#EXTERNAL_SHARING_REPORT_FAILED}. </p>
     *
     * @return The {@link ExternalSharingReportFailedType} value associated with
     *     this instance if {@link #isExternalSharingReportFailed} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isExternalSharingReportFailed}
     *     is {@code false}.
     */
    public ExternalSharingReportFailedType getExternalSharingReportFailedValue() {
        if (this._tag != Tag.EXTERNAL_SHARING_REPORT_FAILED) {
            throw new IllegalStateException("Invalid tag: required Tag.EXTERNAL_SHARING_REPORT_FAILED, but was Tag." + this._tag.name());
        }
        return externalSharingReportFailedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NO_EXPIRATION_LINK_GEN_CREATE_REPORT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NO_EXPIRATION_LINK_GEN_CREATE_REPORT}, {@code false} otherwise.
     */
    public boolean isNoExpirationLinkGenCreateReport() {
        return this._tag == Tag.NO_EXPIRATION_LINK_GEN_CREATE_REPORT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#NO_EXPIRATION_LINK_GEN_CREATE_REPORT}.
     *
     * <p> (reports) Report created: Links created with no expiration </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#NO_EXPIRATION_LINK_GEN_CREATE_REPORT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType noExpirationLinkGenCreateReport(NoExpirationLinkGenCreateReportType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndNoExpirationLinkGenCreateReport(Tag.NO_EXPIRATION_LINK_GEN_CREATE_REPORT, value);
    }

    /**
     * (reports) Report created: Links created with no expiration
     *
     * <p> This instance must be tagged as {@link
     * Tag#NO_EXPIRATION_LINK_GEN_CREATE_REPORT}. </p>
     *
     * @return The {@link NoExpirationLinkGenCreateReportType} value associated
     *     with this instance if {@link #isNoExpirationLinkGenCreateReport} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isNoExpirationLinkGenCreateReport} is {@code false}.
     */
    public NoExpirationLinkGenCreateReportType getNoExpirationLinkGenCreateReportValue() {
        if (this._tag != Tag.NO_EXPIRATION_LINK_GEN_CREATE_REPORT) {
            throw new IllegalStateException("Invalid tag: required Tag.NO_EXPIRATION_LINK_GEN_CREATE_REPORT, but was Tag." + this._tag.name());
        }
        return noExpirationLinkGenCreateReportValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NO_EXPIRATION_LINK_GEN_REPORT_FAILED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NO_EXPIRATION_LINK_GEN_REPORT_FAILED}, {@code false} otherwise.
     */
    public boolean isNoExpirationLinkGenReportFailed() {
        return this._tag == Tag.NO_EXPIRATION_LINK_GEN_REPORT_FAILED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#NO_EXPIRATION_LINK_GEN_REPORT_FAILED}.
     *
     * <p> (reports) Couldn't create report: Links created with no expiration
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#NO_EXPIRATION_LINK_GEN_REPORT_FAILED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType noExpirationLinkGenReportFailed(NoExpirationLinkGenReportFailedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndNoExpirationLinkGenReportFailed(Tag.NO_EXPIRATION_LINK_GEN_REPORT_FAILED, value);
    }

    /**
     * (reports) Couldn't create report: Links created with no expiration
     *
     * <p> This instance must be tagged as {@link
     * Tag#NO_EXPIRATION_LINK_GEN_REPORT_FAILED}. </p>
     *
     * @return The {@link NoExpirationLinkGenReportFailedType} value associated
     *     with this instance if {@link #isNoExpirationLinkGenReportFailed} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isNoExpirationLinkGenReportFailed} is {@code false}.
     */
    public NoExpirationLinkGenReportFailedType getNoExpirationLinkGenReportFailedValue() {
        if (this._tag != Tag.NO_EXPIRATION_LINK_GEN_REPORT_FAILED) {
            throw new IllegalStateException("Invalid tag: required Tag.NO_EXPIRATION_LINK_GEN_REPORT_FAILED, but was Tag." + this._tag.name());
        }
        return noExpirationLinkGenReportFailedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NO_PASSWORD_LINK_GEN_CREATE_REPORT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NO_PASSWORD_LINK_GEN_CREATE_REPORT}, {@code false} otherwise.
     */
    public boolean isNoPasswordLinkGenCreateReport() {
        return this._tag == Tag.NO_PASSWORD_LINK_GEN_CREATE_REPORT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#NO_PASSWORD_LINK_GEN_CREATE_REPORT}.
     *
     * <p> (reports) Report created: Links created without passwords </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#NO_PASSWORD_LINK_GEN_CREATE_REPORT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType noPasswordLinkGenCreateReport(NoPasswordLinkGenCreateReportType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndNoPasswordLinkGenCreateReport(Tag.NO_PASSWORD_LINK_GEN_CREATE_REPORT, value);
    }

    /**
     * (reports) Report created: Links created without passwords
     *
     * <p> This instance must be tagged as {@link
     * Tag#NO_PASSWORD_LINK_GEN_CREATE_REPORT}. </p>
     *
     * @return The {@link NoPasswordLinkGenCreateReportType} value associated
     *     with this instance if {@link #isNoPasswordLinkGenCreateReport} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isNoPasswordLinkGenCreateReport} is {@code false}.
     */
    public NoPasswordLinkGenCreateReportType getNoPasswordLinkGenCreateReportValue() {
        if (this._tag != Tag.NO_PASSWORD_LINK_GEN_CREATE_REPORT) {
            throw new IllegalStateException("Invalid tag: required Tag.NO_PASSWORD_LINK_GEN_CREATE_REPORT, but was Tag." + this._tag.name());
        }
        return noPasswordLinkGenCreateReportValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NO_PASSWORD_LINK_GEN_REPORT_FAILED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NO_PASSWORD_LINK_GEN_REPORT_FAILED}, {@code false} otherwise.
     */
    public boolean isNoPasswordLinkGenReportFailed() {
        return this._tag == Tag.NO_PASSWORD_LINK_GEN_REPORT_FAILED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#NO_PASSWORD_LINK_GEN_REPORT_FAILED}.
     *
     * <p> (reports) Couldn't create report: Links created without passwords
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#NO_PASSWORD_LINK_GEN_REPORT_FAILED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType noPasswordLinkGenReportFailed(NoPasswordLinkGenReportFailedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndNoPasswordLinkGenReportFailed(Tag.NO_PASSWORD_LINK_GEN_REPORT_FAILED, value);
    }

    /**
     * (reports) Couldn't create report: Links created without passwords
     *
     * <p> This instance must be tagged as {@link
     * Tag#NO_PASSWORD_LINK_GEN_REPORT_FAILED}. </p>
     *
     * @return The {@link NoPasswordLinkGenReportFailedType} value associated
     *     with this instance if {@link #isNoPasswordLinkGenReportFailed} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isNoPasswordLinkGenReportFailed} is {@code false}.
     */
    public NoPasswordLinkGenReportFailedType getNoPasswordLinkGenReportFailedValue() {
        if (this._tag != Tag.NO_PASSWORD_LINK_GEN_REPORT_FAILED) {
            throw new IllegalStateException("Invalid tag: required Tag.NO_PASSWORD_LINK_GEN_REPORT_FAILED, but was Tag." + this._tag.name());
        }
        return noPasswordLinkGenReportFailedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NO_PASSWORD_LINK_VIEW_CREATE_REPORT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NO_PASSWORD_LINK_VIEW_CREATE_REPORT}, {@code false} otherwise.
     */
    public boolean isNoPasswordLinkViewCreateReport() {
        return this._tag == Tag.NO_PASSWORD_LINK_VIEW_CREATE_REPORT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#NO_PASSWORD_LINK_VIEW_CREATE_REPORT}.
     *
     * <p> (reports) Report created: Views of links without passwords </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#NO_PASSWORD_LINK_VIEW_CREATE_REPORT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType noPasswordLinkViewCreateReport(NoPasswordLinkViewCreateReportType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndNoPasswordLinkViewCreateReport(Tag.NO_PASSWORD_LINK_VIEW_CREATE_REPORT, value);
    }

    /**
     * (reports) Report created: Views of links without passwords
     *
     * <p> This instance must be tagged as {@link
     * Tag#NO_PASSWORD_LINK_VIEW_CREATE_REPORT}. </p>
     *
     * @return The {@link NoPasswordLinkViewCreateReportType} value associated
     *     with this instance if {@link #isNoPasswordLinkViewCreateReport} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isNoPasswordLinkViewCreateReport} is {@code false}.
     */
    public NoPasswordLinkViewCreateReportType getNoPasswordLinkViewCreateReportValue() {
        if (this._tag != Tag.NO_PASSWORD_LINK_VIEW_CREATE_REPORT) {
            throw new IllegalStateException("Invalid tag: required Tag.NO_PASSWORD_LINK_VIEW_CREATE_REPORT, but was Tag." + this._tag.name());
        }
        return noPasswordLinkViewCreateReportValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NO_PASSWORD_LINK_VIEW_REPORT_FAILED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NO_PASSWORD_LINK_VIEW_REPORT_FAILED}, {@code false} otherwise.
     */
    public boolean isNoPasswordLinkViewReportFailed() {
        return this._tag == Tag.NO_PASSWORD_LINK_VIEW_REPORT_FAILED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#NO_PASSWORD_LINK_VIEW_REPORT_FAILED}.
     *
     * <p> (reports) Couldn't create report: Views of links without passwords
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#NO_PASSWORD_LINK_VIEW_REPORT_FAILED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType noPasswordLinkViewReportFailed(NoPasswordLinkViewReportFailedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndNoPasswordLinkViewReportFailed(Tag.NO_PASSWORD_LINK_VIEW_REPORT_FAILED, value);
    }

    /**
     * (reports) Couldn't create report: Views of links without passwords
     *
     * <p> This instance must be tagged as {@link
     * Tag#NO_PASSWORD_LINK_VIEW_REPORT_FAILED}. </p>
     *
     * @return The {@link NoPasswordLinkViewReportFailedType} value associated
     *     with this instance if {@link #isNoPasswordLinkViewReportFailed} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isNoPasswordLinkViewReportFailed} is {@code false}.
     */
    public NoPasswordLinkViewReportFailedType getNoPasswordLinkViewReportFailedValue() {
        if (this._tag != Tag.NO_PASSWORD_LINK_VIEW_REPORT_FAILED) {
            throw new IllegalStateException("Invalid tag: required Tag.NO_PASSWORD_LINK_VIEW_REPORT_FAILED, but was Tag." + this._tag.name());
        }
        return noPasswordLinkViewReportFailedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#OUTDATED_LINK_VIEW_CREATE_REPORT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#OUTDATED_LINK_VIEW_CREATE_REPORT}, {@code false} otherwise.
     */
    public boolean isOutdatedLinkViewCreateReport() {
        return this._tag == Tag.OUTDATED_LINK_VIEW_CREATE_REPORT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#OUTDATED_LINK_VIEW_CREATE_REPORT}.
     *
     * <p> (reports) Report created: Views of old links </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#OUTDATED_LINK_VIEW_CREATE_REPORT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType outdatedLinkViewCreateReport(OutdatedLinkViewCreateReportType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndOutdatedLinkViewCreateReport(Tag.OUTDATED_LINK_VIEW_CREATE_REPORT, value);
    }

    /**
     * (reports) Report created: Views of old links
     *
     * <p> This instance must be tagged as {@link
     * Tag#OUTDATED_LINK_VIEW_CREATE_REPORT}. </p>
     *
     * @return The {@link OutdatedLinkViewCreateReportType} value associated
     *     with this instance if {@link #isOutdatedLinkViewCreateReport} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link #isOutdatedLinkViewCreateReport}
     *     is {@code false}.
     */
    public OutdatedLinkViewCreateReportType getOutdatedLinkViewCreateReportValue() {
        if (this._tag != Tag.OUTDATED_LINK_VIEW_CREATE_REPORT) {
            throw new IllegalStateException("Invalid tag: required Tag.OUTDATED_LINK_VIEW_CREATE_REPORT, but was Tag." + this._tag.name());
        }
        return outdatedLinkViewCreateReportValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#OUTDATED_LINK_VIEW_REPORT_FAILED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#OUTDATED_LINK_VIEW_REPORT_FAILED}, {@code false} otherwise.
     */
    public boolean isOutdatedLinkViewReportFailed() {
        return this._tag == Tag.OUTDATED_LINK_VIEW_REPORT_FAILED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#OUTDATED_LINK_VIEW_REPORT_FAILED}.
     *
     * <p> (reports) Couldn't create report: Views of old links </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#OUTDATED_LINK_VIEW_REPORT_FAILED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType outdatedLinkViewReportFailed(OutdatedLinkViewReportFailedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndOutdatedLinkViewReportFailed(Tag.OUTDATED_LINK_VIEW_REPORT_FAILED, value);
    }

    /**
     * (reports) Couldn't create report: Views of old links
     *
     * <p> This instance must be tagged as {@link
     * Tag#OUTDATED_LINK_VIEW_REPORT_FAILED}. </p>
     *
     * @return The {@link OutdatedLinkViewReportFailedType} value associated
     *     with this instance if {@link #isOutdatedLinkViewReportFailed} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link #isOutdatedLinkViewReportFailed}
     *     is {@code false}.
     */
    public OutdatedLinkViewReportFailedType getOutdatedLinkViewReportFailedValue() {
        if (this._tag != Tag.OUTDATED_LINK_VIEW_REPORT_FAILED) {
            throw new IllegalStateException("Invalid tag: required Tag.OUTDATED_LINK_VIEW_REPORT_FAILED, but was Tag." + this._tag.name());
        }
        return outdatedLinkViewReportFailedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_ADMIN_EXPORT_START}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_ADMIN_EXPORT_START}, {@code false} otherwise.
     */
    public boolean isPaperAdminExportStart() {
        return this._tag == Tag.PAPER_ADMIN_EXPORT_START;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_ADMIN_EXPORT_START}.
     *
     * <p> (reports) Exported all team Paper docs </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_ADMIN_EXPORT_START}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperAdminExportStart(PaperAdminExportStartType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperAdminExportStart(Tag.PAPER_ADMIN_EXPORT_START, value);
    }

    /**
     * (reports) Exported all team Paper docs
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_ADMIN_EXPORT_START}.
     * </p>
     *
     * @return The {@link PaperAdminExportStartType} value associated with this
     *     instance if {@link #isPaperAdminExportStart} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperAdminExportStart} is
     *     {@code false}.
     */
    public PaperAdminExportStartType getPaperAdminExportStartValue() {
        if (this._tag != Tag.PAPER_ADMIN_EXPORT_START) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_ADMIN_EXPORT_START, but was Tag." + this._tag.name());
        }
        return paperAdminExportStartValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT}, {@code false}
     *     otherwise.
     */
    public boolean isSmartSyncCreateAdminPrivilegeReport() {
        return this._tag == Tag.SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT}.
     *
     * <p> (reports) Created Smart Sync non-admin devices report </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType smartSyncCreateAdminPrivilegeReport(SmartSyncCreateAdminPrivilegeReportType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSmartSyncCreateAdminPrivilegeReport(Tag.SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT, value);
    }

    /**
     * (reports) Created Smart Sync non-admin devices report
     *
     * <p> This instance must be tagged as {@link
     * Tag#SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT}. </p>
     *
     * @return The {@link SmartSyncCreateAdminPrivilegeReportType} value
     *     associated with this instance if {@link
     *     #isSmartSyncCreateAdminPrivilegeReport} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSmartSyncCreateAdminPrivilegeReport} is {@code false}.
     */
    public SmartSyncCreateAdminPrivilegeReportType getSmartSyncCreateAdminPrivilegeReportValue() {
        if (this._tag != Tag.SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT) {
            throw new IllegalStateException("Invalid tag: required Tag.SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT, but was Tag." + this._tag.name());
        }
        return smartSyncCreateAdminPrivilegeReportValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_ACTIVITY_CREATE_REPORT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_ACTIVITY_CREATE_REPORT}, {@code false} otherwise.
     */
    public boolean isTeamActivityCreateReport() {
        return this._tag == Tag.TEAM_ACTIVITY_CREATE_REPORT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_ACTIVITY_CREATE_REPORT}.
     *
     * <p> (reports) Created team activity report </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_ACTIVITY_CREATE_REPORT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamActivityCreateReport(TeamActivityCreateReportType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamActivityCreateReport(Tag.TEAM_ACTIVITY_CREATE_REPORT, value);
    }

    /**
     * (reports) Created team activity report
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_ACTIVITY_CREATE_REPORT}. </p>
     *
     * @return The {@link TeamActivityCreateReportType} value associated with
     *     this instance if {@link #isTeamActivityCreateReport} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamActivityCreateReport} is
     *     {@code false}.
     */
    public TeamActivityCreateReportType getTeamActivityCreateReportValue() {
        if (this._tag != Tag.TEAM_ACTIVITY_CREATE_REPORT) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_ACTIVITY_CREATE_REPORT, but was Tag." + this._tag.name());
        }
        return teamActivityCreateReportValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_ACTIVITY_CREATE_REPORT_FAIL}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_ACTIVITY_CREATE_REPORT_FAIL}, {@code false} otherwise.
     */
    public boolean isTeamActivityCreateReportFail() {
        return this._tag == Tag.TEAM_ACTIVITY_CREATE_REPORT_FAIL;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_ACTIVITY_CREATE_REPORT_FAIL}.
     *
     * <p> (reports) Couldn't generate team activity report </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_ACTIVITY_CREATE_REPORT_FAIL}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamActivityCreateReportFail(TeamActivityCreateReportFailType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamActivityCreateReportFail(Tag.TEAM_ACTIVITY_CREATE_REPORT_FAIL, value);
    }

    /**
     * (reports) Couldn't generate team activity report
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_ACTIVITY_CREATE_REPORT_FAIL}. </p>
     *
     * @return The {@link TeamActivityCreateReportFailType} value associated
     *     with this instance if {@link #isTeamActivityCreateReportFail} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamActivityCreateReportFail}
     *     is {@code false}.
     */
    public TeamActivityCreateReportFailType getTeamActivityCreateReportFailValue() {
        if (this._tag != Tag.TEAM_ACTIVITY_CREATE_REPORT_FAIL) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_ACTIVITY_CREATE_REPORT_FAIL, but was Tag." + this._tag.name());
        }
        return teamActivityCreateReportFailValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#COLLECTION_SHARE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#COLLECTION_SHARE}, {@code false} otherwise.
     */
    public boolean isCollectionShare() {
        return this._tag == Tag.COLLECTION_SHARE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#COLLECTION_SHARE}.
     *
     * <p> (sharing) Shared album </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#COLLECTION_SHARE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType collectionShare(CollectionShareType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndCollectionShare(Tag.COLLECTION_SHARE, value);
    }

    /**
     * (sharing) Shared album
     *
     * <p> This instance must be tagged as {@link Tag#COLLECTION_SHARE}. </p>
     *
     * @return The {@link CollectionShareType} value associated with this
     *     instance if {@link #isCollectionShare} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isCollectionShare} is {@code
     *     false}.
     */
    public CollectionShareType getCollectionShareValue() {
        if (this._tag != Tag.COLLECTION_SHARE) {
            throw new IllegalStateException("Invalid tag: required Tag.COLLECTION_SHARE, but was Tag." + this._tag.name());
        }
        return collectionShareValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_TRANSFERS_FILE_ADD}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_TRANSFERS_FILE_ADD}, {@code false} otherwise.
     */
    public boolean isFileTransfersFileAdd() {
        return this._tag == Tag.FILE_TRANSFERS_FILE_ADD;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_TRANSFERS_FILE_ADD}.
     *
     * <p> (sharing) Transfer files added </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_TRANSFERS_FILE_ADD}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileTransfersFileAdd(FileTransfersFileAddType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileTransfersFileAdd(Tag.FILE_TRANSFERS_FILE_ADD, value);
    }

    /**
     * (sharing) Transfer files added
     *
     * <p> This instance must be tagged as {@link Tag#FILE_TRANSFERS_FILE_ADD}.
     * </p>
     *
     * @return The {@link FileTransfersFileAddType} value associated with this
     *     instance if {@link #isFileTransfersFileAdd} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileTransfersFileAdd} is
     *     {@code false}.
     */
    public FileTransfersFileAddType getFileTransfersFileAddValue() {
        if (this._tag != Tag.FILE_TRANSFERS_FILE_ADD) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_TRANSFERS_FILE_ADD, but was Tag." + this._tag.name());
        }
        return fileTransfersFileAddValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_TRANSFERS_TRANSFER_DELETE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_TRANSFERS_TRANSFER_DELETE}, {@code false} otherwise.
     */
    public boolean isFileTransfersTransferDelete() {
        return this._tag == Tag.FILE_TRANSFERS_TRANSFER_DELETE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_TRANSFERS_TRANSFER_DELETE}.
     *
     * <p> (sharing) Deleted transfer </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_TRANSFERS_TRANSFER_DELETE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileTransfersTransferDelete(FileTransfersTransferDeleteType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileTransfersTransferDelete(Tag.FILE_TRANSFERS_TRANSFER_DELETE, value);
    }

    /**
     * (sharing) Deleted transfer
     *
     * <p> This instance must be tagged as {@link
     * Tag#FILE_TRANSFERS_TRANSFER_DELETE}. </p>
     *
     * @return The {@link FileTransfersTransferDeleteType} value associated with
     *     this instance if {@link #isFileTransfersTransferDelete} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isFileTransfersTransferDelete}
     *     is {@code false}.
     */
    public FileTransfersTransferDeleteType getFileTransfersTransferDeleteValue() {
        if (this._tag != Tag.FILE_TRANSFERS_TRANSFER_DELETE) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_TRANSFERS_TRANSFER_DELETE, but was Tag." + this._tag.name());
        }
        return fileTransfersTransferDeleteValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_TRANSFERS_TRANSFER_DOWNLOAD}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_TRANSFERS_TRANSFER_DOWNLOAD}, {@code false} otherwise.
     */
    public boolean isFileTransfersTransferDownload() {
        return this._tag == Tag.FILE_TRANSFERS_TRANSFER_DOWNLOAD;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_TRANSFERS_TRANSFER_DOWNLOAD}.
     *
     * <p> (sharing) Transfer downloaded </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_TRANSFERS_TRANSFER_DOWNLOAD}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileTransfersTransferDownload(FileTransfersTransferDownloadType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileTransfersTransferDownload(Tag.FILE_TRANSFERS_TRANSFER_DOWNLOAD, value);
    }

    /**
     * (sharing) Transfer downloaded
     *
     * <p> This instance must be tagged as {@link
     * Tag#FILE_TRANSFERS_TRANSFER_DOWNLOAD}. </p>
     *
     * @return The {@link FileTransfersTransferDownloadType} value associated
     *     with this instance if {@link #isFileTransfersTransferDownload} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFileTransfersTransferDownload} is {@code false}.
     */
    public FileTransfersTransferDownloadType getFileTransfersTransferDownloadValue() {
        if (this._tag != Tag.FILE_TRANSFERS_TRANSFER_DOWNLOAD) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_TRANSFERS_TRANSFER_DOWNLOAD, but was Tag." + this._tag.name());
        }
        return fileTransfersTransferDownloadValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_TRANSFERS_TRANSFER_SEND}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_TRANSFERS_TRANSFER_SEND}, {@code false} otherwise.
     */
    public boolean isFileTransfersTransferSend() {
        return this._tag == Tag.FILE_TRANSFERS_TRANSFER_SEND;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_TRANSFERS_TRANSFER_SEND}.
     *
     * <p> (sharing) Sent transfer </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_TRANSFERS_TRANSFER_SEND}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileTransfersTransferSend(FileTransfersTransferSendType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileTransfersTransferSend(Tag.FILE_TRANSFERS_TRANSFER_SEND, value);
    }

    /**
     * (sharing) Sent transfer
     *
     * <p> This instance must be tagged as {@link
     * Tag#FILE_TRANSFERS_TRANSFER_SEND}. </p>
     *
     * @return The {@link FileTransfersTransferSendType} value associated with
     *     this instance if {@link #isFileTransfersTransferSend} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isFileTransfersTransferSend} is
     *     {@code false}.
     */
    public FileTransfersTransferSendType getFileTransfersTransferSendValue() {
        if (this._tag != Tag.FILE_TRANSFERS_TRANSFER_SEND) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_TRANSFERS_TRANSFER_SEND, but was Tag." + this._tag.name());
        }
        return fileTransfersTransferSendValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_TRANSFERS_TRANSFER_VIEW}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_TRANSFERS_TRANSFER_VIEW}, {@code false} otherwise.
     */
    public boolean isFileTransfersTransferView() {
        return this._tag == Tag.FILE_TRANSFERS_TRANSFER_VIEW;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_TRANSFERS_TRANSFER_VIEW}.
     *
     * <p> (sharing) Viewed transfer </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_TRANSFERS_TRANSFER_VIEW}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileTransfersTransferView(FileTransfersTransferViewType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileTransfersTransferView(Tag.FILE_TRANSFERS_TRANSFER_VIEW, value);
    }

    /**
     * (sharing) Viewed transfer
     *
     * <p> This instance must be tagged as {@link
     * Tag#FILE_TRANSFERS_TRANSFER_VIEW}. </p>
     *
     * @return The {@link FileTransfersTransferViewType} value associated with
     *     this instance if {@link #isFileTransfersTransferView} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isFileTransfersTransferView} is
     *     {@code false}.
     */
    public FileTransfersTransferViewType getFileTransfersTransferViewValue() {
        if (this._tag != Tag.FILE_TRANSFERS_TRANSFER_VIEW) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_TRANSFERS_TRANSFER_VIEW, but was Tag." + this._tag.name());
        }
        return fileTransfersTransferViewValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NOTE_ACL_INVITE_ONLY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NOTE_ACL_INVITE_ONLY}, {@code false} otherwise.
     */
    public boolean isNoteAclInviteOnly() {
        return this._tag == Tag.NOTE_ACL_INVITE_ONLY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#NOTE_ACL_INVITE_ONLY}.
     *
     * <p> (sharing) Changed Paper doc to invite-only (deprecated, no longer
     * logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#NOTE_ACL_INVITE_ONLY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType noteAclInviteOnly(NoteAclInviteOnlyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndNoteAclInviteOnly(Tag.NOTE_ACL_INVITE_ONLY, value);
    }

    /**
     * (sharing) Changed Paper doc to invite-only (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#NOTE_ACL_INVITE_ONLY}.
     * </p>
     *
     * @return The {@link NoteAclInviteOnlyType} value associated with this
     *     instance if {@link #isNoteAclInviteOnly} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isNoteAclInviteOnly} is {@code
     *     false}.
     */
    public NoteAclInviteOnlyType getNoteAclInviteOnlyValue() {
        if (this._tag != Tag.NOTE_ACL_INVITE_ONLY) {
            throw new IllegalStateException("Invalid tag: required Tag.NOTE_ACL_INVITE_ONLY, but was Tag." + this._tag.name());
        }
        return noteAclInviteOnlyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NOTE_ACL_LINK}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NOTE_ACL_LINK}, {@code false} otherwise.
     */
    public boolean isNoteAclLink() {
        return this._tag == Tag.NOTE_ACL_LINK;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#NOTE_ACL_LINK}.
     *
     * <p> (sharing) Changed Paper doc to link-accessible (deprecated, no longer
     * logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#NOTE_ACL_LINK}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType noteAclLink(NoteAclLinkType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndNoteAclLink(Tag.NOTE_ACL_LINK, value);
    }

    /**
     * (sharing) Changed Paper doc to link-accessible (deprecated, no longer
     * logged)
     *
     * <p> This instance must be tagged as {@link Tag#NOTE_ACL_LINK}. </p>
     *
     * @return The {@link NoteAclLinkType} value associated with this instance
     *     if {@link #isNoteAclLink} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isNoteAclLink} is {@code
     *     false}.
     */
    public NoteAclLinkType getNoteAclLinkValue() {
        if (this._tag != Tag.NOTE_ACL_LINK) {
            throw new IllegalStateException("Invalid tag: required Tag.NOTE_ACL_LINK, but was Tag." + this._tag.name());
        }
        return noteAclLinkValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NOTE_ACL_TEAM_LINK}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NOTE_ACL_TEAM_LINK}, {@code false} otherwise.
     */
    public boolean isNoteAclTeamLink() {
        return this._tag == Tag.NOTE_ACL_TEAM_LINK;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#NOTE_ACL_TEAM_LINK}.
     *
     * <p> (sharing) Changed Paper doc to link-accessible for team (deprecated,
     * no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#NOTE_ACL_TEAM_LINK}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType noteAclTeamLink(NoteAclTeamLinkType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndNoteAclTeamLink(Tag.NOTE_ACL_TEAM_LINK, value);
    }

    /**
     * (sharing) Changed Paper doc to link-accessible for team (deprecated, no
     * longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#NOTE_ACL_TEAM_LINK}. </p>
     *
     * @return The {@link NoteAclTeamLinkType} value associated with this
     *     instance if {@link #isNoteAclTeamLink} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isNoteAclTeamLink} is {@code
     *     false}.
     */
    public NoteAclTeamLinkType getNoteAclTeamLinkValue() {
        if (this._tag != Tag.NOTE_ACL_TEAM_LINK) {
            throw new IllegalStateException("Invalid tag: required Tag.NOTE_ACL_TEAM_LINK, but was Tag." + this._tag.name());
        }
        return noteAclTeamLinkValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NOTE_SHARED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NOTE_SHARED}, {@code false} otherwise.
     */
    public boolean isNoteShared() {
        return this._tag == Tag.NOTE_SHARED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#NOTE_SHARED}.
     *
     * <p> (sharing) Shared Paper doc (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#NOTE_SHARED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType noteShared(NoteSharedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndNoteShared(Tag.NOTE_SHARED, value);
    }

    /**
     * (sharing) Shared Paper doc (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#NOTE_SHARED}. </p>
     *
     * @return The {@link NoteSharedType} value associated with this instance if
     *     {@link #isNoteShared} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isNoteShared} is {@code false}.
     */
    public NoteSharedType getNoteSharedValue() {
        if (this._tag != Tag.NOTE_SHARED) {
            throw new IllegalStateException("Invalid tag: required Tag.NOTE_SHARED, but was Tag." + this._tag.name());
        }
        return noteSharedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NOTE_SHARE_RECEIVE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NOTE_SHARE_RECEIVE}, {@code false} otherwise.
     */
    public boolean isNoteShareReceive() {
        return this._tag == Tag.NOTE_SHARE_RECEIVE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#NOTE_SHARE_RECEIVE}.
     *
     * <p> (sharing) Shared received Paper doc (deprecated, no longer logged)
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#NOTE_SHARE_RECEIVE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType noteShareReceive(NoteShareReceiveType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndNoteShareReceive(Tag.NOTE_SHARE_RECEIVE, value);
    }

    /**
     * (sharing) Shared received Paper doc (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#NOTE_SHARE_RECEIVE}. </p>
     *
     * @return The {@link NoteShareReceiveType} value associated with this
     *     instance if {@link #isNoteShareReceive} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isNoteShareReceive} is {@code
     *     false}.
     */
    public NoteShareReceiveType getNoteShareReceiveValue() {
        if (this._tag != Tag.NOTE_SHARE_RECEIVE) {
            throw new IllegalStateException("Invalid tag: required Tag.NOTE_SHARE_RECEIVE, but was Tag." + this._tag.name());
        }
        return noteShareReceiveValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#OPEN_NOTE_SHARED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#OPEN_NOTE_SHARED}, {@code false} otherwise.
     */
    public boolean isOpenNoteShared() {
        return this._tag == Tag.OPEN_NOTE_SHARED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#OPEN_NOTE_SHARED}.
     *
     * <p> (sharing) Opened shared Paper doc (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#OPEN_NOTE_SHARED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType openNoteShared(OpenNoteSharedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndOpenNoteShared(Tag.OPEN_NOTE_SHARED, value);
    }

    /**
     * (sharing) Opened shared Paper doc (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#OPEN_NOTE_SHARED}. </p>
     *
     * @return The {@link OpenNoteSharedType} value associated with this
     *     instance if {@link #isOpenNoteShared} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isOpenNoteShared} is {@code
     *     false}.
     */
    public OpenNoteSharedType getOpenNoteSharedValue() {
        if (this._tag != Tag.OPEN_NOTE_SHARED) {
            throw new IllegalStateException("Invalid tag: required Tag.OPEN_NOTE_SHARED, but was Tag." + this._tag.name());
        }
        return openNoteSharedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_ADD_GROUP}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_ADD_GROUP}, {@code false} otherwise.
     */
    public boolean isSfAddGroup() {
        return this._tag == Tag.SF_ADD_GROUP;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SF_ADD_GROUP}.
     *
     * <p> (sharing) Added team to shared folder (deprecated, no longer logged)
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SF_ADD_GROUP}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sfAddGroup(SfAddGroupType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSfAddGroup(Tag.SF_ADD_GROUP, value);
    }

    /**
     * (sharing) Added team to shared folder (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#SF_ADD_GROUP}. </p>
     *
     * @return The {@link SfAddGroupType} value associated with this instance if
     *     {@link #isSfAddGroup} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSfAddGroup} is {@code false}.
     */
    public SfAddGroupType getSfAddGroupValue() {
        if (this._tag != Tag.SF_ADD_GROUP) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_ADD_GROUP, but was Tag." + this._tag.name());
        }
        return sfAddGroupValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS}, {@code false}
     *     otherwise.
     */
    public boolean isSfAllowNonMembersToViewSharedLinks() {
        return this._tag == Tag.SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS}.
     *
     * <p> (sharing) Allowed non-collaborators to view links to files in shared
     * folder (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sfAllowNonMembersToViewSharedLinks(SfAllowNonMembersToViewSharedLinksType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSfAllowNonMembersToViewSharedLinks(Tag.SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS, value);
    }

    /**
     * (sharing) Allowed non-collaborators to view links to files in shared
     * folder (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS}. </p>
     *
     * @return The {@link SfAllowNonMembersToViewSharedLinksType} value
     *     associated with this instance if {@link
     *     #isSfAllowNonMembersToViewSharedLinks} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSfAllowNonMembersToViewSharedLinks} is {@code false}.
     */
    public SfAllowNonMembersToViewSharedLinksType getSfAllowNonMembersToViewSharedLinksValue() {
        if (this._tag != Tag.SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS, but was Tag." + this._tag.name());
        }
        return sfAllowNonMembersToViewSharedLinksValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_EXTERNAL_INVITE_WARN}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_EXTERNAL_INVITE_WARN}, {@code false} otherwise.
     */
    public boolean isSfExternalInviteWarn() {
        return this._tag == Tag.SF_EXTERNAL_INVITE_WARN;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SF_EXTERNAL_INVITE_WARN}.
     *
     * <p> (sharing) Set team members to see warning before sharing folders
     * outside team (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SF_EXTERNAL_INVITE_WARN}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sfExternalInviteWarn(SfExternalInviteWarnType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSfExternalInviteWarn(Tag.SF_EXTERNAL_INVITE_WARN, value);
    }

    /**
     * (sharing) Set team members to see warning before sharing folders outside
     * team (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#SF_EXTERNAL_INVITE_WARN}.
     * </p>
     *
     * @return The {@link SfExternalInviteWarnType} value associated with this
     *     instance if {@link #isSfExternalInviteWarn} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSfExternalInviteWarn} is
     *     {@code false}.
     */
    public SfExternalInviteWarnType getSfExternalInviteWarnValue() {
        if (this._tag != Tag.SF_EXTERNAL_INVITE_WARN) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_EXTERNAL_INVITE_WARN, but was Tag." + this._tag.name());
        }
        return sfExternalInviteWarnValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_FB_INVITE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_FB_INVITE}, {@code false} otherwise.
     */
    public boolean isSfFbInvite() {
        return this._tag == Tag.SF_FB_INVITE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SF_FB_INVITE}.
     *
     * <p> (sharing) Invited Facebook users to shared folder (deprecated, no
     * longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SF_FB_INVITE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sfFbInvite(SfFbInviteType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSfFbInvite(Tag.SF_FB_INVITE, value);
    }

    /**
     * (sharing) Invited Facebook users to shared folder (deprecated, no longer
     * logged)
     *
     * <p> This instance must be tagged as {@link Tag#SF_FB_INVITE}. </p>
     *
     * @return The {@link SfFbInviteType} value associated with this instance if
     *     {@link #isSfFbInvite} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSfFbInvite} is {@code false}.
     */
    public SfFbInviteType getSfFbInviteValue() {
        if (this._tag != Tag.SF_FB_INVITE) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_FB_INVITE, but was Tag." + this._tag.name());
        }
        return sfFbInviteValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_FB_INVITE_CHANGE_ROLE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_FB_INVITE_CHANGE_ROLE}, {@code false} otherwise.
     */
    public boolean isSfFbInviteChangeRole() {
        return this._tag == Tag.SF_FB_INVITE_CHANGE_ROLE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SF_FB_INVITE_CHANGE_ROLE}.
     *
     * <p> (sharing) Changed Facebook user's role in shared folder (deprecated,
     * no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SF_FB_INVITE_CHANGE_ROLE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sfFbInviteChangeRole(SfFbInviteChangeRoleType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSfFbInviteChangeRole(Tag.SF_FB_INVITE_CHANGE_ROLE, value);
    }

    /**
     * (sharing) Changed Facebook user's role in shared folder (deprecated, no
     * longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#SF_FB_INVITE_CHANGE_ROLE}.
     * </p>
     *
     * @return The {@link SfFbInviteChangeRoleType} value associated with this
     *     instance if {@link #isSfFbInviteChangeRole} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSfFbInviteChangeRole} is
     *     {@code false}.
     */
    public SfFbInviteChangeRoleType getSfFbInviteChangeRoleValue() {
        if (this._tag != Tag.SF_FB_INVITE_CHANGE_ROLE) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_FB_INVITE_CHANGE_ROLE, but was Tag." + this._tag.name());
        }
        return sfFbInviteChangeRoleValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_FB_UNINVITE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_FB_UNINVITE}, {@code false} otherwise.
     */
    public boolean isSfFbUninvite() {
        return this._tag == Tag.SF_FB_UNINVITE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SF_FB_UNINVITE}.
     *
     * <p> (sharing) Uninvited Facebook user from shared folder (deprecated, no
     * longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SF_FB_UNINVITE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sfFbUninvite(SfFbUninviteType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSfFbUninvite(Tag.SF_FB_UNINVITE, value);
    }

    /**
     * (sharing) Uninvited Facebook user from shared folder (deprecated, no
     * longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#SF_FB_UNINVITE}. </p>
     *
     * @return The {@link SfFbUninviteType} value associated with this instance
     *     if {@link #isSfFbUninvite} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSfFbUninvite} is {@code
     *     false}.
     */
    public SfFbUninviteType getSfFbUninviteValue() {
        if (this._tag != Tag.SF_FB_UNINVITE) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_FB_UNINVITE, but was Tag." + this._tag.name());
        }
        return sfFbUninviteValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_INVITE_GROUP}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_INVITE_GROUP}, {@code false} otherwise.
     */
    public boolean isSfInviteGroup() {
        return this._tag == Tag.SF_INVITE_GROUP;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SF_INVITE_GROUP}.
     *
     * <p> (sharing) Invited group to shared folder (deprecated, no longer
     * logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SF_INVITE_GROUP}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sfInviteGroup(SfInviteGroupType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSfInviteGroup(Tag.SF_INVITE_GROUP, value);
    }

    /**
     * (sharing) Invited group to shared folder (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#SF_INVITE_GROUP}. </p>
     *
     * @return The {@link SfInviteGroupType} value associated with this instance
     *     if {@link #isSfInviteGroup} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSfInviteGroup} is {@code
     *     false}.
     */
    public SfInviteGroupType getSfInviteGroupValue() {
        if (this._tag != Tag.SF_INVITE_GROUP) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_INVITE_GROUP, but was Tag." + this._tag.name());
        }
        return sfInviteGroupValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_TEAM_GRANT_ACCESS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_TEAM_GRANT_ACCESS}, {@code false} otherwise.
     */
    public boolean isSfTeamGrantAccess() {
        return this._tag == Tag.SF_TEAM_GRANT_ACCESS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SF_TEAM_GRANT_ACCESS}.
     *
     * <p> (sharing) Granted access to shared folder (deprecated, no longer
     * logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SF_TEAM_GRANT_ACCESS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sfTeamGrantAccess(SfTeamGrantAccessType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSfTeamGrantAccess(Tag.SF_TEAM_GRANT_ACCESS, value);
    }

    /**
     * (sharing) Granted access to shared folder (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#SF_TEAM_GRANT_ACCESS}.
     * </p>
     *
     * @return The {@link SfTeamGrantAccessType} value associated with this
     *     instance if {@link #isSfTeamGrantAccess} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSfTeamGrantAccess} is {@code
     *     false}.
     */
    public SfTeamGrantAccessType getSfTeamGrantAccessValue() {
        if (this._tag != Tag.SF_TEAM_GRANT_ACCESS) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_TEAM_GRANT_ACCESS, but was Tag." + this._tag.name());
        }
        return sfTeamGrantAccessValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_TEAM_INVITE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_TEAM_INVITE}, {@code false} otherwise.
     */
    public boolean isSfTeamInvite() {
        return this._tag == Tag.SF_TEAM_INVITE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SF_TEAM_INVITE}.
     *
     * <p> (sharing) Invited team members to shared folder (deprecated, replaced
     * by 'Invited user to Dropbox and added them to shared file/folder') </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SF_TEAM_INVITE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sfTeamInvite(SfTeamInviteType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSfTeamInvite(Tag.SF_TEAM_INVITE, value);
    }

    /**
     * (sharing) Invited team members to shared folder (deprecated, replaced by
     * 'Invited user to Dropbox and added them to shared file/folder')
     *
     * <p> This instance must be tagged as {@link Tag#SF_TEAM_INVITE}. </p>
     *
     * @return The {@link SfTeamInviteType} value associated with this instance
     *     if {@link #isSfTeamInvite} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSfTeamInvite} is {@code
     *     false}.
     */
    public SfTeamInviteType getSfTeamInviteValue() {
        if (this._tag != Tag.SF_TEAM_INVITE) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_TEAM_INVITE, but was Tag." + this._tag.name());
        }
        return sfTeamInviteValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_TEAM_INVITE_CHANGE_ROLE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_TEAM_INVITE_CHANGE_ROLE}, {@code false} otherwise.
     */
    public boolean isSfTeamInviteChangeRole() {
        return this._tag == Tag.SF_TEAM_INVITE_CHANGE_ROLE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SF_TEAM_INVITE_CHANGE_ROLE}.
     *
     * <p> (sharing) Changed team member's role in shared folder (deprecated, no
     * longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SF_TEAM_INVITE_CHANGE_ROLE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sfTeamInviteChangeRole(SfTeamInviteChangeRoleType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSfTeamInviteChangeRole(Tag.SF_TEAM_INVITE_CHANGE_ROLE, value);
    }

    /**
     * (sharing) Changed team member's role in shared folder (deprecated, no
     * longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#SF_TEAM_INVITE_CHANGE_ROLE}. </p>
     *
     * @return The {@link SfTeamInviteChangeRoleType} value associated with this
     *     instance if {@link #isSfTeamInviteChangeRole} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSfTeamInviteChangeRole} is
     *     {@code false}.
     */
    public SfTeamInviteChangeRoleType getSfTeamInviteChangeRoleValue() {
        if (this._tag != Tag.SF_TEAM_INVITE_CHANGE_ROLE) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_TEAM_INVITE_CHANGE_ROLE, but was Tag." + this._tag.name());
        }
        return sfTeamInviteChangeRoleValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_TEAM_JOIN}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_TEAM_JOIN}, {@code false} otherwise.
     */
    public boolean isSfTeamJoin() {
        return this._tag == Tag.SF_TEAM_JOIN;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SF_TEAM_JOIN}.
     *
     * <p> (sharing) Joined team member's shared folder (deprecated, no longer
     * logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SF_TEAM_JOIN}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sfTeamJoin(SfTeamJoinType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSfTeamJoin(Tag.SF_TEAM_JOIN, value);
    }

    /**
     * (sharing) Joined team member's shared folder (deprecated, no longer
     * logged)
     *
     * <p> This instance must be tagged as {@link Tag#SF_TEAM_JOIN}. </p>
     *
     * @return The {@link SfTeamJoinType} value associated with this instance if
     *     {@link #isSfTeamJoin} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSfTeamJoin} is {@code false}.
     */
    public SfTeamJoinType getSfTeamJoinValue() {
        if (this._tag != Tag.SF_TEAM_JOIN) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_TEAM_JOIN, but was Tag." + this._tag.name());
        }
        return sfTeamJoinValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_TEAM_JOIN_FROM_OOB_LINK}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_TEAM_JOIN_FROM_OOB_LINK}, {@code false} otherwise.
     */
    public boolean isSfTeamJoinFromOobLink() {
        return this._tag == Tag.SF_TEAM_JOIN_FROM_OOB_LINK;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SF_TEAM_JOIN_FROM_OOB_LINK}.
     *
     * <p> (sharing) Joined team member's shared folder from link (deprecated,
     * no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SF_TEAM_JOIN_FROM_OOB_LINK}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sfTeamJoinFromOobLink(SfTeamJoinFromOobLinkType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSfTeamJoinFromOobLink(Tag.SF_TEAM_JOIN_FROM_OOB_LINK, value);
    }

    /**
     * (sharing) Joined team member's shared folder from link (deprecated, no
     * longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#SF_TEAM_JOIN_FROM_OOB_LINK}. </p>
     *
     * @return The {@link SfTeamJoinFromOobLinkType} value associated with this
     *     instance if {@link #isSfTeamJoinFromOobLink} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSfTeamJoinFromOobLink} is
     *     {@code false}.
     */
    public SfTeamJoinFromOobLinkType getSfTeamJoinFromOobLinkValue() {
        if (this._tag != Tag.SF_TEAM_JOIN_FROM_OOB_LINK) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_TEAM_JOIN_FROM_OOB_LINK, but was Tag." + this._tag.name());
        }
        return sfTeamJoinFromOobLinkValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SF_TEAM_UNINVITE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SF_TEAM_UNINVITE}, {@code false} otherwise.
     */
    public boolean isSfTeamUninvite() {
        return this._tag == Tag.SF_TEAM_UNINVITE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SF_TEAM_UNINVITE}.
     *
     * <p> (sharing) Unshared folder with team member (deprecated, replaced by
     * 'Removed invitee from shared file/folder before invite was accepted')
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SF_TEAM_UNINVITE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sfTeamUninvite(SfTeamUninviteType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSfTeamUninvite(Tag.SF_TEAM_UNINVITE, value);
    }

    /**
     * (sharing) Unshared folder with team member (deprecated, replaced by
     * 'Removed invitee from shared file/folder before invite was accepted')
     *
     * <p> This instance must be tagged as {@link Tag#SF_TEAM_UNINVITE}. </p>
     *
     * @return The {@link SfTeamUninviteType} value associated with this
     *     instance if {@link #isSfTeamUninvite} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSfTeamUninvite} is {@code
     *     false}.
     */
    public SfTeamUninviteType getSfTeamUninviteValue() {
        if (this._tag != Tag.SF_TEAM_UNINVITE) {
            throw new IllegalStateException("Invalid tag: required Tag.SF_TEAM_UNINVITE, but was Tag." + this._tag.name());
        }
        return sfTeamUninviteValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_ADD_INVITEES}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_ADD_INVITEES}, {@code false} otherwise.
     */
    public boolean isSharedContentAddInvitees() {
        return this._tag == Tag.SHARED_CONTENT_ADD_INVITEES;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_ADD_INVITEES}.
     *
     * <p> (sharing) Invited user to Dropbox and added them to shared
     * file/folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_ADD_INVITEES}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentAddInvitees(SharedContentAddInviteesType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentAddInvitees(Tag.SHARED_CONTENT_ADD_INVITEES, value);
    }

    /**
     * (sharing) Invited user to Dropbox and added them to shared file/folder
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_ADD_INVITEES}. </p>
     *
     * @return The {@link SharedContentAddInviteesType} value associated with
     *     this instance if {@link #isSharedContentAddInvitees} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedContentAddInvitees} is
     *     {@code false}.
     */
    public SharedContentAddInviteesType getSharedContentAddInviteesValue() {
        if (this._tag != Tag.SHARED_CONTENT_ADD_INVITEES) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_ADD_INVITEES, but was Tag." + this._tag.name());
        }
        return sharedContentAddInviteesValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_ADD_LINK_EXPIRY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_ADD_LINK_EXPIRY}, {@code false} otherwise.
     */
    public boolean isSharedContentAddLinkExpiry() {
        return this._tag == Tag.SHARED_CONTENT_ADD_LINK_EXPIRY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_ADD_LINK_EXPIRY}.
     *
     * <p> (sharing) Added expiration date to link for shared file/folder
     * (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_ADD_LINK_EXPIRY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentAddLinkExpiry(SharedContentAddLinkExpiryType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentAddLinkExpiry(Tag.SHARED_CONTENT_ADD_LINK_EXPIRY, value);
    }

    /**
     * (sharing) Added expiration date to link for shared file/folder
     * (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_ADD_LINK_EXPIRY}. </p>
     *
     * @return The {@link SharedContentAddLinkExpiryType} value associated with
     *     this instance if {@link #isSharedContentAddLinkExpiry} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isSharedContentAddLinkExpiry}
     *     is {@code false}.
     */
    public SharedContentAddLinkExpiryType getSharedContentAddLinkExpiryValue() {
        if (this._tag != Tag.SHARED_CONTENT_ADD_LINK_EXPIRY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_ADD_LINK_EXPIRY, but was Tag." + this._tag.name());
        }
        return sharedContentAddLinkExpiryValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_ADD_LINK_PASSWORD}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_ADD_LINK_PASSWORD}, {@code false} otherwise.
     */
    public boolean isSharedContentAddLinkPassword() {
        return this._tag == Tag.SHARED_CONTENT_ADD_LINK_PASSWORD;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_ADD_LINK_PASSWORD}.
     *
     * <p> (sharing) Added password to link for shared file/folder (deprecated,
     * no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_ADD_LINK_PASSWORD}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentAddLinkPassword(SharedContentAddLinkPasswordType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentAddLinkPassword(Tag.SHARED_CONTENT_ADD_LINK_PASSWORD, value);
    }

    /**
     * (sharing) Added password to link for shared file/folder (deprecated, no
     * longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_ADD_LINK_PASSWORD}. </p>
     *
     * @return The {@link SharedContentAddLinkPasswordType} value associated
     *     with this instance if {@link #isSharedContentAddLinkPassword} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedContentAddLinkPassword}
     *     is {@code false}.
     */
    public SharedContentAddLinkPasswordType getSharedContentAddLinkPasswordValue() {
        if (this._tag != Tag.SHARED_CONTENT_ADD_LINK_PASSWORD) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_ADD_LINK_PASSWORD, but was Tag." + this._tag.name());
        }
        return sharedContentAddLinkPasswordValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_ADD_MEMBER}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_ADD_MEMBER}, {@code false} otherwise.
     */
    public boolean isSharedContentAddMember() {
        return this._tag == Tag.SHARED_CONTENT_ADD_MEMBER;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_ADD_MEMBER}.
     *
     * <p> (sharing) Added users and/or groups to shared file/folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_ADD_MEMBER}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentAddMember(SharedContentAddMemberType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentAddMember(Tag.SHARED_CONTENT_ADD_MEMBER, value);
    }

    /**
     * (sharing) Added users and/or groups to shared file/folder
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_ADD_MEMBER}. </p>
     *
     * @return The {@link SharedContentAddMemberType} value associated with this
     *     instance if {@link #isSharedContentAddMember} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedContentAddMember} is
     *     {@code false}.
     */
    public SharedContentAddMemberType getSharedContentAddMemberValue() {
        if (this._tag != Tag.SHARED_CONTENT_ADD_MEMBER) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_ADD_MEMBER, but was Tag." + this._tag.name());
        }
        return sharedContentAddMemberValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY}, {@code false} otherwise.
     */
    public boolean isSharedContentChangeDownloadsPolicy() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY}.
     *
     * <p> (sharing) Changed whether members can download shared file/folder
     * (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentChangeDownloadsPolicy(SharedContentChangeDownloadsPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentChangeDownloadsPolicy(Tag.SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY, value);
    }

    /**
     * (sharing) Changed whether members can download shared file/folder
     * (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY}. </p>
     *
     * @return The {@link SharedContentChangeDownloadsPolicyType} value
     *     associated with this instance if {@link
     *     #isSharedContentChangeDownloadsPolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentChangeDownloadsPolicy} is {@code false}.
     */
    public SharedContentChangeDownloadsPolicyType getSharedContentChangeDownloadsPolicyValue() {
        if (this._tag != Tag.SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY, but was Tag." + this._tag.name());
        }
        return sharedContentChangeDownloadsPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_CHANGE_INVITEE_ROLE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_CHANGE_INVITEE_ROLE}, {@code false} otherwise.
     */
    public boolean isSharedContentChangeInviteeRole() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_INVITEE_ROLE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_CHANGE_INVITEE_ROLE}.
     *
     * <p> (sharing) Changed access type of invitee to shared file/folder before
     * invite was accepted </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_CHANGE_INVITEE_ROLE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentChangeInviteeRole(SharedContentChangeInviteeRoleType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentChangeInviteeRole(Tag.SHARED_CONTENT_CHANGE_INVITEE_ROLE, value);
    }

    /**
     * (sharing) Changed access type of invitee to shared file/folder before
     * invite was accepted
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_CHANGE_INVITEE_ROLE}. </p>
     *
     * @return The {@link SharedContentChangeInviteeRoleType} value associated
     *     with this instance if {@link #isSharedContentChangeInviteeRole} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentChangeInviteeRole} is {@code false}.
     */
    public SharedContentChangeInviteeRoleType getSharedContentChangeInviteeRoleValue() {
        if (this._tag != Tag.SHARED_CONTENT_CHANGE_INVITEE_ROLE) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_INVITEE_ROLE, but was Tag." + this._tag.name());
        }
        return sharedContentChangeInviteeRoleValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_CHANGE_LINK_AUDIENCE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_CHANGE_LINK_AUDIENCE}, {@code false} otherwise.
     */
    public boolean isSharedContentChangeLinkAudience() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_LINK_AUDIENCE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_CHANGE_LINK_AUDIENCE}.
     *
     * <p> (sharing) Changed link audience of shared file/folder (deprecated, no
     * longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_CHANGE_LINK_AUDIENCE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentChangeLinkAudience(SharedContentChangeLinkAudienceType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentChangeLinkAudience(Tag.SHARED_CONTENT_CHANGE_LINK_AUDIENCE, value);
    }

    /**
     * (sharing) Changed link audience of shared file/folder (deprecated, no
     * longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_CHANGE_LINK_AUDIENCE}. </p>
     *
     * @return The {@link SharedContentChangeLinkAudienceType} value associated
     *     with this instance if {@link #isSharedContentChangeLinkAudience} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentChangeLinkAudience} is {@code false}.
     */
    public SharedContentChangeLinkAudienceType getSharedContentChangeLinkAudienceValue() {
        if (this._tag != Tag.SHARED_CONTENT_CHANGE_LINK_AUDIENCE) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_LINK_AUDIENCE, but was Tag." + this._tag.name());
        }
        return sharedContentChangeLinkAudienceValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_CHANGE_LINK_EXPIRY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_CHANGE_LINK_EXPIRY}, {@code false} otherwise.
     */
    public boolean isSharedContentChangeLinkExpiry() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_LINK_EXPIRY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_CHANGE_LINK_EXPIRY}.
     *
     * <p> (sharing) Changed link expiration of shared file/folder (deprecated,
     * no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_CHANGE_LINK_EXPIRY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentChangeLinkExpiry(SharedContentChangeLinkExpiryType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentChangeLinkExpiry(Tag.SHARED_CONTENT_CHANGE_LINK_EXPIRY, value);
    }

    /**
     * (sharing) Changed link expiration of shared file/folder (deprecated, no
     * longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_CHANGE_LINK_EXPIRY}. </p>
     *
     * @return The {@link SharedContentChangeLinkExpiryType} value associated
     *     with this instance if {@link #isSharedContentChangeLinkExpiry} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentChangeLinkExpiry} is {@code false}.
     */
    public SharedContentChangeLinkExpiryType getSharedContentChangeLinkExpiryValue() {
        if (this._tag != Tag.SHARED_CONTENT_CHANGE_LINK_EXPIRY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_LINK_EXPIRY, but was Tag." + this._tag.name());
        }
        return sharedContentChangeLinkExpiryValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_CHANGE_LINK_PASSWORD}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_CHANGE_LINK_PASSWORD}, {@code false} otherwise.
     */
    public boolean isSharedContentChangeLinkPassword() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_LINK_PASSWORD;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_CHANGE_LINK_PASSWORD}.
     *
     * <p> (sharing) Changed link password of shared file/folder (deprecated, no
     * longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_CHANGE_LINK_PASSWORD}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentChangeLinkPassword(SharedContentChangeLinkPasswordType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentChangeLinkPassword(Tag.SHARED_CONTENT_CHANGE_LINK_PASSWORD, value);
    }

    /**
     * (sharing) Changed link password of shared file/folder (deprecated, no
     * longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_CHANGE_LINK_PASSWORD}. </p>
     *
     * @return The {@link SharedContentChangeLinkPasswordType} value associated
     *     with this instance if {@link #isSharedContentChangeLinkPassword} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentChangeLinkPassword} is {@code false}.
     */
    public SharedContentChangeLinkPasswordType getSharedContentChangeLinkPasswordValue() {
        if (this._tag != Tag.SHARED_CONTENT_CHANGE_LINK_PASSWORD) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_LINK_PASSWORD, but was Tag." + this._tag.name());
        }
        return sharedContentChangeLinkPasswordValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_CHANGE_MEMBER_ROLE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_CHANGE_MEMBER_ROLE}, {@code false} otherwise.
     */
    public boolean isSharedContentChangeMemberRole() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_MEMBER_ROLE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_CHANGE_MEMBER_ROLE}.
     *
     * <p> (sharing) Changed access type of shared file/folder member </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_CHANGE_MEMBER_ROLE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentChangeMemberRole(SharedContentChangeMemberRoleType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentChangeMemberRole(Tag.SHARED_CONTENT_CHANGE_MEMBER_ROLE, value);
    }

    /**
     * (sharing) Changed access type of shared file/folder member
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_CHANGE_MEMBER_ROLE}. </p>
     *
     * @return The {@link SharedContentChangeMemberRoleType} value associated
     *     with this instance if {@link #isSharedContentChangeMemberRole} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentChangeMemberRole} is {@code false}.
     */
    public SharedContentChangeMemberRoleType getSharedContentChangeMemberRoleValue() {
        if (this._tag != Tag.SHARED_CONTENT_CHANGE_MEMBER_ROLE) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_MEMBER_ROLE, but was Tag." + this._tag.name());
        }
        return sharedContentChangeMemberRoleValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY}, {@code false}
     *     otherwise.
     */
    public boolean isSharedContentChangeViewerInfoPolicy() {
        return this._tag == Tag.SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY}.
     *
     * <p> (sharing) Changed whether members can see who viewed shared
     * file/folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentChangeViewerInfoPolicy(SharedContentChangeViewerInfoPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentChangeViewerInfoPolicy(Tag.SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY, value);
    }

    /**
     * (sharing) Changed whether members can see who viewed shared file/folder
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY}. </p>
     *
     * @return The {@link SharedContentChangeViewerInfoPolicyType} value
     *     associated with this instance if {@link
     *     #isSharedContentChangeViewerInfoPolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentChangeViewerInfoPolicy} is {@code false}.
     */
    public SharedContentChangeViewerInfoPolicyType getSharedContentChangeViewerInfoPolicyValue() {
        if (this._tag != Tag.SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY, but was Tag." + this._tag.name());
        }
        return sharedContentChangeViewerInfoPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_CLAIM_INVITATION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_CLAIM_INVITATION}, {@code false} otherwise.
     */
    public boolean isSharedContentClaimInvitation() {
        return this._tag == Tag.SHARED_CONTENT_CLAIM_INVITATION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_CLAIM_INVITATION}.
     *
     * <p> (sharing) Acquired membership of shared file/folder by accepting
     * invite </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_CLAIM_INVITATION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentClaimInvitation(SharedContentClaimInvitationType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentClaimInvitation(Tag.SHARED_CONTENT_CLAIM_INVITATION, value);
    }

    /**
     * (sharing) Acquired membership of shared file/folder by accepting invite
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_CLAIM_INVITATION}. </p>
     *
     * @return The {@link SharedContentClaimInvitationType} value associated
     *     with this instance if {@link #isSharedContentClaimInvitation} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedContentClaimInvitation}
     *     is {@code false}.
     */
    public SharedContentClaimInvitationType getSharedContentClaimInvitationValue() {
        if (this._tag != Tag.SHARED_CONTENT_CLAIM_INVITATION) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_CLAIM_INVITATION, but was Tag." + this._tag.name());
        }
        return sharedContentClaimInvitationValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_COPY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_COPY}, {@code false} otherwise.
     */
    public boolean isSharedContentCopy() {
        return this._tag == Tag.SHARED_CONTENT_COPY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_COPY}.
     *
     * <p> (sharing) Copied shared file/folder to own Dropbox </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_COPY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentCopy(SharedContentCopyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentCopy(Tag.SHARED_CONTENT_COPY, value);
    }

    /**
     * (sharing) Copied shared file/folder to own Dropbox
     *
     * <p> This instance must be tagged as {@link Tag#SHARED_CONTENT_COPY}. </p>
     *
     * @return The {@link SharedContentCopyType} value associated with this
     *     instance if {@link #isSharedContentCopy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedContentCopy} is {@code
     *     false}.
     */
    public SharedContentCopyType getSharedContentCopyValue() {
        if (this._tag != Tag.SHARED_CONTENT_COPY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_COPY, but was Tag." + this._tag.name());
        }
        return sharedContentCopyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_DOWNLOAD}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_DOWNLOAD}, {@code false} otherwise.
     */
    public boolean isSharedContentDownload() {
        return this._tag == Tag.SHARED_CONTENT_DOWNLOAD;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_DOWNLOAD}.
     *
     * <p> (sharing) Downloaded shared file/folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_DOWNLOAD}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentDownload(SharedContentDownloadType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentDownload(Tag.SHARED_CONTENT_DOWNLOAD, value);
    }

    /**
     * (sharing) Downloaded shared file/folder
     *
     * <p> This instance must be tagged as {@link Tag#SHARED_CONTENT_DOWNLOAD}.
     * </p>
     *
     * @return The {@link SharedContentDownloadType} value associated with this
     *     instance if {@link #isSharedContentDownload} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedContentDownload} is
     *     {@code false}.
     */
    public SharedContentDownloadType getSharedContentDownloadValue() {
        if (this._tag != Tag.SHARED_CONTENT_DOWNLOAD) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_DOWNLOAD, but was Tag." + this._tag.name());
        }
        return sharedContentDownloadValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_RELINQUISH_MEMBERSHIP}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_RELINQUISH_MEMBERSHIP}, {@code false} otherwise.
     */
    public boolean isSharedContentRelinquishMembership() {
        return this._tag == Tag.SHARED_CONTENT_RELINQUISH_MEMBERSHIP;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_RELINQUISH_MEMBERSHIP}.
     *
     * <p> (sharing) Left shared file/folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_RELINQUISH_MEMBERSHIP}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentRelinquishMembership(SharedContentRelinquishMembershipType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentRelinquishMembership(Tag.SHARED_CONTENT_RELINQUISH_MEMBERSHIP, value);
    }

    /**
     * (sharing) Left shared file/folder
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_RELINQUISH_MEMBERSHIP}. </p>
     *
     * @return The {@link SharedContentRelinquishMembershipType} value
     *     associated with this instance if {@link
     *     #isSharedContentRelinquishMembership} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentRelinquishMembership} is {@code false}.
     */
    public SharedContentRelinquishMembershipType getSharedContentRelinquishMembershipValue() {
        if (this._tag != Tag.SHARED_CONTENT_RELINQUISH_MEMBERSHIP) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_RELINQUISH_MEMBERSHIP, but was Tag." + this._tag.name());
        }
        return sharedContentRelinquishMembershipValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_REMOVE_INVITEES}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_REMOVE_INVITEES}, {@code false} otherwise.
     */
    public boolean isSharedContentRemoveInvitees() {
        return this._tag == Tag.SHARED_CONTENT_REMOVE_INVITEES;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_REMOVE_INVITEES}.
     *
     * <p> (sharing) Removed invitee from shared file/folder before invite was
     * accepted </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_REMOVE_INVITEES}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentRemoveInvitees(SharedContentRemoveInviteesType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentRemoveInvitees(Tag.SHARED_CONTENT_REMOVE_INVITEES, value);
    }

    /**
     * (sharing) Removed invitee from shared file/folder before invite was
     * accepted
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_REMOVE_INVITEES}. </p>
     *
     * @return The {@link SharedContentRemoveInviteesType} value associated with
     *     this instance if {@link #isSharedContentRemoveInvitees} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isSharedContentRemoveInvitees}
     *     is {@code false}.
     */
    public SharedContentRemoveInviteesType getSharedContentRemoveInviteesValue() {
        if (this._tag != Tag.SHARED_CONTENT_REMOVE_INVITEES) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_REMOVE_INVITEES, but was Tag." + this._tag.name());
        }
        return sharedContentRemoveInviteesValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_REMOVE_LINK_EXPIRY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_REMOVE_LINK_EXPIRY}, {@code false} otherwise.
     */
    public boolean isSharedContentRemoveLinkExpiry() {
        return this._tag == Tag.SHARED_CONTENT_REMOVE_LINK_EXPIRY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_REMOVE_LINK_EXPIRY}.
     *
     * <p> (sharing) Removed link expiration date of shared file/folder
     * (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_REMOVE_LINK_EXPIRY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentRemoveLinkExpiry(SharedContentRemoveLinkExpiryType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentRemoveLinkExpiry(Tag.SHARED_CONTENT_REMOVE_LINK_EXPIRY, value);
    }

    /**
     * (sharing) Removed link expiration date of shared file/folder (deprecated,
     * no longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_REMOVE_LINK_EXPIRY}. </p>
     *
     * @return The {@link SharedContentRemoveLinkExpiryType} value associated
     *     with this instance if {@link #isSharedContentRemoveLinkExpiry} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentRemoveLinkExpiry} is {@code false}.
     */
    public SharedContentRemoveLinkExpiryType getSharedContentRemoveLinkExpiryValue() {
        if (this._tag != Tag.SHARED_CONTENT_REMOVE_LINK_EXPIRY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_REMOVE_LINK_EXPIRY, but was Tag." + this._tag.name());
        }
        return sharedContentRemoveLinkExpiryValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_REMOVE_LINK_PASSWORD}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_REMOVE_LINK_PASSWORD}, {@code false} otherwise.
     */
    public boolean isSharedContentRemoveLinkPassword() {
        return this._tag == Tag.SHARED_CONTENT_REMOVE_LINK_PASSWORD;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_REMOVE_LINK_PASSWORD}.
     *
     * <p> (sharing) Removed link password of shared file/folder (deprecated, no
     * longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_REMOVE_LINK_PASSWORD}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentRemoveLinkPassword(SharedContentRemoveLinkPasswordType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentRemoveLinkPassword(Tag.SHARED_CONTENT_REMOVE_LINK_PASSWORD, value);
    }

    /**
     * (sharing) Removed link password of shared file/folder (deprecated, no
     * longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_REMOVE_LINK_PASSWORD}. </p>
     *
     * @return The {@link SharedContentRemoveLinkPasswordType} value associated
     *     with this instance if {@link #isSharedContentRemoveLinkPassword} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedContentRemoveLinkPassword} is {@code false}.
     */
    public SharedContentRemoveLinkPasswordType getSharedContentRemoveLinkPasswordValue() {
        if (this._tag != Tag.SHARED_CONTENT_REMOVE_LINK_PASSWORD) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_REMOVE_LINK_PASSWORD, but was Tag." + this._tag.name());
        }
        return sharedContentRemoveLinkPasswordValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_REMOVE_MEMBER}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_REMOVE_MEMBER}, {@code false} otherwise.
     */
    public boolean isSharedContentRemoveMember() {
        return this._tag == Tag.SHARED_CONTENT_REMOVE_MEMBER;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_REMOVE_MEMBER}.
     *
     * <p> (sharing) Removed user/group from shared file/folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_REMOVE_MEMBER}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentRemoveMember(SharedContentRemoveMemberType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentRemoveMember(Tag.SHARED_CONTENT_REMOVE_MEMBER, value);
    }

    /**
     * (sharing) Removed user/group from shared file/folder
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_REMOVE_MEMBER}. </p>
     *
     * @return The {@link SharedContentRemoveMemberType} value associated with
     *     this instance if {@link #isSharedContentRemoveMember} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isSharedContentRemoveMember} is
     *     {@code false}.
     */
    public SharedContentRemoveMemberType getSharedContentRemoveMemberValue() {
        if (this._tag != Tag.SHARED_CONTENT_REMOVE_MEMBER) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_REMOVE_MEMBER, but was Tag." + this._tag.name());
        }
        return sharedContentRemoveMemberValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_REQUEST_ACCESS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_REQUEST_ACCESS}, {@code false} otherwise.
     */
    public boolean isSharedContentRequestAccess() {
        return this._tag == Tag.SHARED_CONTENT_REQUEST_ACCESS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_REQUEST_ACCESS}.
     *
     * <p> (sharing) Requested access to shared file/folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_REQUEST_ACCESS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentRequestAccess(SharedContentRequestAccessType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentRequestAccess(Tag.SHARED_CONTENT_REQUEST_ACCESS, value);
    }

    /**
     * (sharing) Requested access to shared file/folder
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_REQUEST_ACCESS}. </p>
     *
     * @return The {@link SharedContentRequestAccessType} value associated with
     *     this instance if {@link #isSharedContentRequestAccess} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isSharedContentRequestAccess}
     *     is {@code false}.
     */
    public SharedContentRequestAccessType getSharedContentRequestAccessValue() {
        if (this._tag != Tag.SHARED_CONTENT_REQUEST_ACCESS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_REQUEST_ACCESS, but was Tag." + this._tag.name());
        }
        return sharedContentRequestAccessValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_RESTORE_INVITEES}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_RESTORE_INVITEES}, {@code false} otherwise.
     */
    public boolean isSharedContentRestoreInvitees() {
        return this._tag == Tag.SHARED_CONTENT_RESTORE_INVITEES;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_RESTORE_INVITEES}.
     *
     * <p> (sharing) Restored shared file/folder invitees </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_RESTORE_INVITEES}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentRestoreInvitees(SharedContentRestoreInviteesType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentRestoreInvitees(Tag.SHARED_CONTENT_RESTORE_INVITEES, value);
    }

    /**
     * (sharing) Restored shared file/folder invitees
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_RESTORE_INVITEES}. </p>
     *
     * @return The {@link SharedContentRestoreInviteesType} value associated
     *     with this instance if {@link #isSharedContentRestoreInvitees} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedContentRestoreInvitees}
     *     is {@code false}.
     */
    public SharedContentRestoreInviteesType getSharedContentRestoreInviteesValue() {
        if (this._tag != Tag.SHARED_CONTENT_RESTORE_INVITEES) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_RESTORE_INVITEES, but was Tag." + this._tag.name());
        }
        return sharedContentRestoreInviteesValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_RESTORE_MEMBER}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_RESTORE_MEMBER}, {@code false} otherwise.
     */
    public boolean isSharedContentRestoreMember() {
        return this._tag == Tag.SHARED_CONTENT_RESTORE_MEMBER;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_RESTORE_MEMBER}.
     *
     * <p> (sharing) Restored users and/or groups to membership of shared
     * file/folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_RESTORE_MEMBER}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentRestoreMember(SharedContentRestoreMemberType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentRestoreMember(Tag.SHARED_CONTENT_RESTORE_MEMBER, value);
    }

    /**
     * (sharing) Restored users and/or groups to membership of shared
     * file/folder
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_CONTENT_RESTORE_MEMBER}. </p>
     *
     * @return The {@link SharedContentRestoreMemberType} value associated with
     *     this instance if {@link #isSharedContentRestoreMember} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isSharedContentRestoreMember}
     *     is {@code false}.
     */
    public SharedContentRestoreMemberType getSharedContentRestoreMemberValue() {
        if (this._tag != Tag.SHARED_CONTENT_RESTORE_MEMBER) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_RESTORE_MEMBER, but was Tag." + this._tag.name());
        }
        return sharedContentRestoreMemberValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_UNSHARE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_UNSHARE}, {@code false} otherwise.
     */
    public boolean isSharedContentUnshare() {
        return this._tag == Tag.SHARED_CONTENT_UNSHARE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_UNSHARE}.
     *
     * <p> (sharing) Unshared file/folder by clearing membership </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_UNSHARE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentUnshare(SharedContentUnshareType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentUnshare(Tag.SHARED_CONTENT_UNSHARE, value);
    }

    /**
     * (sharing) Unshared file/folder by clearing membership
     *
     * <p> This instance must be tagged as {@link Tag#SHARED_CONTENT_UNSHARE}.
     * </p>
     *
     * @return The {@link SharedContentUnshareType} value associated with this
     *     instance if {@link #isSharedContentUnshare} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedContentUnshare} is
     *     {@code false}.
     */
    public SharedContentUnshareType getSharedContentUnshareValue() {
        if (this._tag != Tag.SHARED_CONTENT_UNSHARE) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_UNSHARE, but was Tag." + this._tag.name());
        }
        return sharedContentUnshareValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_CONTENT_VIEW}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_CONTENT_VIEW}, {@code false} otherwise.
     */
    public boolean isSharedContentView() {
        return this._tag == Tag.SHARED_CONTENT_VIEW;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_CONTENT_VIEW}.
     *
     * <p> (sharing) Previewed shared file/folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_CONTENT_VIEW}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedContentView(SharedContentViewType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedContentView(Tag.SHARED_CONTENT_VIEW, value);
    }

    /**
     * (sharing) Previewed shared file/folder
     *
     * <p> This instance must be tagged as {@link Tag#SHARED_CONTENT_VIEW}. </p>
     *
     * @return The {@link SharedContentViewType} value associated with this
     *     instance if {@link #isSharedContentView} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedContentView} is {@code
     *     false}.
     */
    public SharedContentViewType getSharedContentViewValue() {
        if (this._tag != Tag.SHARED_CONTENT_VIEW) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_CONTENT_VIEW, but was Tag." + this._tag.name());
        }
        return sharedContentViewValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_FOLDER_CHANGE_LINK_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_FOLDER_CHANGE_LINK_POLICY}, {@code false} otherwise.
     */
    public boolean isSharedFolderChangeLinkPolicy() {
        return this._tag == Tag.SHARED_FOLDER_CHANGE_LINK_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_FOLDER_CHANGE_LINK_POLICY}.
     *
     * <p> (sharing) Changed who can access shared folder via link </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_FOLDER_CHANGE_LINK_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedFolderChangeLinkPolicy(SharedFolderChangeLinkPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedFolderChangeLinkPolicy(Tag.SHARED_FOLDER_CHANGE_LINK_POLICY, value);
    }

    /**
     * (sharing) Changed who can access shared folder via link
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_FOLDER_CHANGE_LINK_POLICY}. </p>
     *
     * @return The {@link SharedFolderChangeLinkPolicyType} value associated
     *     with this instance if {@link #isSharedFolderChangeLinkPolicy} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedFolderChangeLinkPolicy}
     *     is {@code false}.
     */
    public SharedFolderChangeLinkPolicyType getSharedFolderChangeLinkPolicyValue() {
        if (this._tag != Tag.SHARED_FOLDER_CHANGE_LINK_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_FOLDER_CHANGE_LINK_POLICY, but was Tag." + this._tag.name());
        }
        return sharedFolderChangeLinkPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY}, {@code false}
     *     otherwise.
     */
    public boolean isSharedFolderChangeMembersInheritancePolicy() {
        return this._tag == Tag.SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY}.
     *
     * <p> (sharing) Changed whether shared folder inherits members from parent
     * folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedFolderChangeMembersInheritancePolicy(SharedFolderChangeMembersInheritancePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedFolderChangeMembersInheritancePolicy(Tag.SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY, value);
    }

    /**
     * (sharing) Changed whether shared folder inherits members from parent
     * folder
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY}. </p>
     *
     * @return The {@link SharedFolderChangeMembersInheritancePolicyType} value
     *     associated with this instance if {@link
     *     #isSharedFolderChangeMembersInheritancePolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedFolderChangeMembersInheritancePolicy} is {@code false}.
     */
    public SharedFolderChangeMembersInheritancePolicyType getSharedFolderChangeMembersInheritancePolicyValue() {
        if (this._tag != Tag.SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY, but was Tag." + this._tag.name());
        }
        return sharedFolderChangeMembersInheritancePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY}, {@code false}
     *     otherwise.
     */
    public boolean isSharedFolderChangeMembersManagementPolicy() {
        return this._tag == Tag.SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY}.
     *
     * <p> (sharing) Changed who can add/remove members of shared folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedFolderChangeMembersManagementPolicy(SharedFolderChangeMembersManagementPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedFolderChangeMembersManagementPolicy(Tag.SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY, value);
    }

    /**
     * (sharing) Changed who can add/remove members of shared folder
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY}. </p>
     *
     * @return The {@link SharedFolderChangeMembersManagementPolicyType} value
     *     associated with this instance if {@link
     *     #isSharedFolderChangeMembersManagementPolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedFolderChangeMembersManagementPolicy} is {@code false}.
     */
    public SharedFolderChangeMembersManagementPolicyType getSharedFolderChangeMembersManagementPolicyValue() {
        if (this._tag != Tag.SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY, but was Tag." + this._tag.name());
        }
        return sharedFolderChangeMembersManagementPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_FOLDER_CHANGE_MEMBERS_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_FOLDER_CHANGE_MEMBERS_POLICY}, {@code false} otherwise.
     */
    public boolean isSharedFolderChangeMembersPolicy() {
        return this._tag == Tag.SHARED_FOLDER_CHANGE_MEMBERS_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_FOLDER_CHANGE_MEMBERS_POLICY}.
     *
     * <p> (sharing) Changed who can become member of shared folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_FOLDER_CHANGE_MEMBERS_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedFolderChangeMembersPolicy(SharedFolderChangeMembersPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedFolderChangeMembersPolicy(Tag.SHARED_FOLDER_CHANGE_MEMBERS_POLICY, value);
    }

    /**
     * (sharing) Changed who can become member of shared folder
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_FOLDER_CHANGE_MEMBERS_POLICY}. </p>
     *
     * @return The {@link SharedFolderChangeMembersPolicyType} value associated
     *     with this instance if {@link #isSharedFolderChangeMembersPolicy} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedFolderChangeMembersPolicy} is {@code false}.
     */
    public SharedFolderChangeMembersPolicyType getSharedFolderChangeMembersPolicyValue() {
        if (this._tag != Tag.SHARED_FOLDER_CHANGE_MEMBERS_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_FOLDER_CHANGE_MEMBERS_POLICY, but was Tag." + this._tag.name());
        }
        return sharedFolderChangeMembersPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_FOLDER_CREATE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_FOLDER_CREATE}, {@code false} otherwise.
     */
    public boolean isSharedFolderCreate() {
        return this._tag == Tag.SHARED_FOLDER_CREATE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_FOLDER_CREATE}.
     *
     * <p> (sharing) Created shared folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_FOLDER_CREATE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedFolderCreate(SharedFolderCreateType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedFolderCreate(Tag.SHARED_FOLDER_CREATE, value);
    }

    /**
     * (sharing) Created shared folder
     *
     * <p> This instance must be tagged as {@link Tag#SHARED_FOLDER_CREATE}.
     * </p>
     *
     * @return The {@link SharedFolderCreateType} value associated with this
     *     instance if {@link #isSharedFolderCreate} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedFolderCreate} is {@code
     *     false}.
     */
    public SharedFolderCreateType getSharedFolderCreateValue() {
        if (this._tag != Tag.SHARED_FOLDER_CREATE) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_FOLDER_CREATE, but was Tag." + this._tag.name());
        }
        return sharedFolderCreateValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_FOLDER_DECLINE_INVITATION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_FOLDER_DECLINE_INVITATION}, {@code false} otherwise.
     */
    public boolean isSharedFolderDeclineInvitation() {
        return this._tag == Tag.SHARED_FOLDER_DECLINE_INVITATION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_FOLDER_DECLINE_INVITATION}.
     *
     * <p> (sharing) Declined team member's invite to shared folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_FOLDER_DECLINE_INVITATION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedFolderDeclineInvitation(SharedFolderDeclineInvitationType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedFolderDeclineInvitation(Tag.SHARED_FOLDER_DECLINE_INVITATION, value);
    }

    /**
     * (sharing) Declined team member's invite to shared folder
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_FOLDER_DECLINE_INVITATION}. </p>
     *
     * @return The {@link SharedFolderDeclineInvitationType} value associated
     *     with this instance if {@link #isSharedFolderDeclineInvitation} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedFolderDeclineInvitation} is {@code false}.
     */
    public SharedFolderDeclineInvitationType getSharedFolderDeclineInvitationValue() {
        if (this._tag != Tag.SHARED_FOLDER_DECLINE_INVITATION) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_FOLDER_DECLINE_INVITATION, but was Tag." + this._tag.name());
        }
        return sharedFolderDeclineInvitationValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_FOLDER_MOUNT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_FOLDER_MOUNT}, {@code false} otherwise.
     */
    public boolean isSharedFolderMount() {
        return this._tag == Tag.SHARED_FOLDER_MOUNT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_FOLDER_MOUNT}.
     *
     * <p> (sharing) Added shared folder to own Dropbox </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_FOLDER_MOUNT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedFolderMount(SharedFolderMountType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedFolderMount(Tag.SHARED_FOLDER_MOUNT, value);
    }

    /**
     * (sharing) Added shared folder to own Dropbox
     *
     * <p> This instance must be tagged as {@link Tag#SHARED_FOLDER_MOUNT}. </p>
     *
     * @return The {@link SharedFolderMountType} value associated with this
     *     instance if {@link #isSharedFolderMount} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedFolderMount} is {@code
     *     false}.
     */
    public SharedFolderMountType getSharedFolderMountValue() {
        if (this._tag != Tag.SHARED_FOLDER_MOUNT) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_FOLDER_MOUNT, but was Tag." + this._tag.name());
        }
        return sharedFolderMountValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_FOLDER_NEST}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_FOLDER_NEST}, {@code false} otherwise.
     */
    public boolean isSharedFolderNest() {
        return this._tag == Tag.SHARED_FOLDER_NEST;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_FOLDER_NEST}.
     *
     * <p> (sharing) Changed parent of shared folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_FOLDER_NEST}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedFolderNest(SharedFolderNestType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedFolderNest(Tag.SHARED_FOLDER_NEST, value);
    }

    /**
     * (sharing) Changed parent of shared folder
     *
     * <p> This instance must be tagged as {@link Tag#SHARED_FOLDER_NEST}. </p>
     *
     * @return The {@link SharedFolderNestType} value associated with this
     *     instance if {@link #isSharedFolderNest} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedFolderNest} is {@code
     *     false}.
     */
    public SharedFolderNestType getSharedFolderNestValue() {
        if (this._tag != Tag.SHARED_FOLDER_NEST) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_FOLDER_NEST, but was Tag." + this._tag.name());
        }
        return sharedFolderNestValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_FOLDER_TRANSFER_OWNERSHIP}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_FOLDER_TRANSFER_OWNERSHIP}, {@code false} otherwise.
     */
    public boolean isSharedFolderTransferOwnership() {
        return this._tag == Tag.SHARED_FOLDER_TRANSFER_OWNERSHIP;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_FOLDER_TRANSFER_OWNERSHIP}.
     *
     * <p> (sharing) Transferred ownership of shared folder to another member
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_FOLDER_TRANSFER_OWNERSHIP}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedFolderTransferOwnership(SharedFolderTransferOwnershipType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedFolderTransferOwnership(Tag.SHARED_FOLDER_TRANSFER_OWNERSHIP, value);
    }

    /**
     * (sharing) Transferred ownership of shared folder to another member
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_FOLDER_TRANSFER_OWNERSHIP}. </p>
     *
     * @return The {@link SharedFolderTransferOwnershipType} value associated
     *     with this instance if {@link #isSharedFolderTransferOwnership} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedFolderTransferOwnership} is {@code false}.
     */
    public SharedFolderTransferOwnershipType getSharedFolderTransferOwnershipValue() {
        if (this._tag != Tag.SHARED_FOLDER_TRANSFER_OWNERSHIP) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_FOLDER_TRANSFER_OWNERSHIP, but was Tag." + this._tag.name());
        }
        return sharedFolderTransferOwnershipValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_FOLDER_UNMOUNT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_FOLDER_UNMOUNT}, {@code false} otherwise.
     */
    public boolean isSharedFolderUnmount() {
        return this._tag == Tag.SHARED_FOLDER_UNMOUNT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_FOLDER_UNMOUNT}.
     *
     * <p> (sharing) Deleted shared folder from Dropbox </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_FOLDER_UNMOUNT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedFolderUnmount(SharedFolderUnmountType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedFolderUnmount(Tag.SHARED_FOLDER_UNMOUNT, value);
    }

    /**
     * (sharing) Deleted shared folder from Dropbox
     *
     * <p> This instance must be tagged as {@link Tag#SHARED_FOLDER_UNMOUNT}.
     * </p>
     *
     * @return The {@link SharedFolderUnmountType} value associated with this
     *     instance if {@link #isSharedFolderUnmount} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedFolderUnmount} is
     *     {@code false}.
     */
    public SharedFolderUnmountType getSharedFolderUnmountValue() {
        if (this._tag != Tag.SHARED_FOLDER_UNMOUNT) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_FOLDER_UNMOUNT, but was Tag." + this._tag.name());
        }
        return sharedFolderUnmountValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_ADD_EXPIRY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_ADD_EXPIRY}, {@code false} otherwise.
     */
    public boolean isSharedLinkAddExpiry() {
        return this._tag == Tag.SHARED_LINK_ADD_EXPIRY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_LINK_ADD_EXPIRY}.
     *
     * <p> (sharing) Added shared link expiration date </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_LINK_ADD_EXPIRY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedLinkAddExpiry(SharedLinkAddExpiryType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedLinkAddExpiry(Tag.SHARED_LINK_ADD_EXPIRY, value);
    }

    /**
     * (sharing) Added shared link expiration date
     *
     * <p> This instance must be tagged as {@link Tag#SHARED_LINK_ADD_EXPIRY}.
     * </p>
     *
     * @return The {@link SharedLinkAddExpiryType} value associated with this
     *     instance if {@link #isSharedLinkAddExpiry} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedLinkAddExpiry} is
     *     {@code false}.
     */
    public SharedLinkAddExpiryType getSharedLinkAddExpiryValue() {
        if (this._tag != Tag.SHARED_LINK_ADD_EXPIRY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_ADD_EXPIRY, but was Tag." + this._tag.name());
        }
        return sharedLinkAddExpiryValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_CHANGE_EXPIRY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_CHANGE_EXPIRY}, {@code false} otherwise.
     */
    public boolean isSharedLinkChangeExpiry() {
        return this._tag == Tag.SHARED_LINK_CHANGE_EXPIRY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_LINK_CHANGE_EXPIRY}.
     *
     * <p> (sharing) Changed shared link expiration date </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_LINK_CHANGE_EXPIRY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedLinkChangeExpiry(SharedLinkChangeExpiryType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedLinkChangeExpiry(Tag.SHARED_LINK_CHANGE_EXPIRY, value);
    }

    /**
     * (sharing) Changed shared link expiration date
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_LINK_CHANGE_EXPIRY}. </p>
     *
     * @return The {@link SharedLinkChangeExpiryType} value associated with this
     *     instance if {@link #isSharedLinkChangeExpiry} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedLinkChangeExpiry} is
     *     {@code false}.
     */
    public SharedLinkChangeExpiryType getSharedLinkChangeExpiryValue() {
        if (this._tag != Tag.SHARED_LINK_CHANGE_EXPIRY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_CHANGE_EXPIRY, but was Tag." + this._tag.name());
        }
        return sharedLinkChangeExpiryValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_CHANGE_VISIBILITY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_CHANGE_VISIBILITY}, {@code false} otherwise.
     */
    public boolean isSharedLinkChangeVisibility() {
        return this._tag == Tag.SHARED_LINK_CHANGE_VISIBILITY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_LINK_CHANGE_VISIBILITY}.
     *
     * <p> (sharing) Changed visibility of shared link </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_LINK_CHANGE_VISIBILITY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedLinkChangeVisibility(SharedLinkChangeVisibilityType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedLinkChangeVisibility(Tag.SHARED_LINK_CHANGE_VISIBILITY, value);
    }

    /**
     * (sharing) Changed visibility of shared link
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_LINK_CHANGE_VISIBILITY}. </p>
     *
     * @return The {@link SharedLinkChangeVisibilityType} value associated with
     *     this instance if {@link #isSharedLinkChangeVisibility} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isSharedLinkChangeVisibility}
     *     is {@code false}.
     */
    public SharedLinkChangeVisibilityType getSharedLinkChangeVisibilityValue() {
        if (this._tag != Tag.SHARED_LINK_CHANGE_VISIBILITY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_CHANGE_VISIBILITY, but was Tag." + this._tag.name());
        }
        return sharedLinkChangeVisibilityValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_COPY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_COPY}, {@code false} otherwise.
     */
    public boolean isSharedLinkCopy() {
        return this._tag == Tag.SHARED_LINK_COPY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_LINK_COPY}.
     *
     * <p> (sharing) Added file/folder to Dropbox from shared link </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_LINK_COPY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedLinkCopy(SharedLinkCopyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedLinkCopy(Tag.SHARED_LINK_COPY, value);
    }

    /**
     * (sharing) Added file/folder to Dropbox from shared link
     *
     * <p> This instance must be tagged as {@link Tag#SHARED_LINK_COPY}. </p>
     *
     * @return The {@link SharedLinkCopyType} value associated with this
     *     instance if {@link #isSharedLinkCopy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedLinkCopy} is {@code
     *     false}.
     */
    public SharedLinkCopyType getSharedLinkCopyValue() {
        if (this._tag != Tag.SHARED_LINK_COPY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_COPY, but was Tag." + this._tag.name());
        }
        return sharedLinkCopyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_CREATE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_CREATE}, {@code false} otherwise.
     */
    public boolean isSharedLinkCreate() {
        return this._tag == Tag.SHARED_LINK_CREATE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_LINK_CREATE}.
     *
     * <p> (sharing) Created shared link </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_LINK_CREATE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedLinkCreate(SharedLinkCreateType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedLinkCreate(Tag.SHARED_LINK_CREATE, value);
    }

    /**
     * (sharing) Created shared link
     *
     * <p> This instance must be tagged as {@link Tag#SHARED_LINK_CREATE}. </p>
     *
     * @return The {@link SharedLinkCreateType} value associated with this
     *     instance if {@link #isSharedLinkCreate} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedLinkCreate} is {@code
     *     false}.
     */
    public SharedLinkCreateType getSharedLinkCreateValue() {
        if (this._tag != Tag.SHARED_LINK_CREATE) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_CREATE, but was Tag." + this._tag.name());
        }
        return sharedLinkCreateValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_DISABLE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_DISABLE}, {@code false} otherwise.
     */
    public boolean isSharedLinkDisable() {
        return this._tag == Tag.SHARED_LINK_DISABLE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_LINK_DISABLE}.
     *
     * <p> (sharing) Removed shared link </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_LINK_DISABLE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedLinkDisable(SharedLinkDisableType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedLinkDisable(Tag.SHARED_LINK_DISABLE, value);
    }

    /**
     * (sharing) Removed shared link
     *
     * <p> This instance must be tagged as {@link Tag#SHARED_LINK_DISABLE}. </p>
     *
     * @return The {@link SharedLinkDisableType} value associated with this
     *     instance if {@link #isSharedLinkDisable} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedLinkDisable} is {@code
     *     false}.
     */
    public SharedLinkDisableType getSharedLinkDisableValue() {
        if (this._tag != Tag.SHARED_LINK_DISABLE) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_DISABLE, but was Tag." + this._tag.name());
        }
        return sharedLinkDisableValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_DOWNLOAD}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_DOWNLOAD}, {@code false} otherwise.
     */
    public boolean isSharedLinkDownload() {
        return this._tag == Tag.SHARED_LINK_DOWNLOAD;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_LINK_DOWNLOAD}.
     *
     * <p> (sharing) Downloaded file/folder from shared link </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_LINK_DOWNLOAD}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedLinkDownload(SharedLinkDownloadType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedLinkDownload(Tag.SHARED_LINK_DOWNLOAD, value);
    }

    /**
     * (sharing) Downloaded file/folder from shared link
     *
     * <p> This instance must be tagged as {@link Tag#SHARED_LINK_DOWNLOAD}.
     * </p>
     *
     * @return The {@link SharedLinkDownloadType} value associated with this
     *     instance if {@link #isSharedLinkDownload} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedLinkDownload} is {@code
     *     false}.
     */
    public SharedLinkDownloadType getSharedLinkDownloadValue() {
        if (this._tag != Tag.SHARED_LINK_DOWNLOAD) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_DOWNLOAD, but was Tag." + this._tag.name());
        }
        return sharedLinkDownloadValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_REMOVE_EXPIRY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_REMOVE_EXPIRY}, {@code false} otherwise.
     */
    public boolean isSharedLinkRemoveExpiry() {
        return this._tag == Tag.SHARED_LINK_REMOVE_EXPIRY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_LINK_REMOVE_EXPIRY}.
     *
     * <p> (sharing) Removed shared link expiration date </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_LINK_REMOVE_EXPIRY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedLinkRemoveExpiry(SharedLinkRemoveExpiryType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedLinkRemoveExpiry(Tag.SHARED_LINK_REMOVE_EXPIRY, value);
    }

    /**
     * (sharing) Removed shared link expiration date
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_LINK_REMOVE_EXPIRY}. </p>
     *
     * @return The {@link SharedLinkRemoveExpiryType} value associated with this
     *     instance if {@link #isSharedLinkRemoveExpiry} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedLinkRemoveExpiry} is
     *     {@code false}.
     */
    public SharedLinkRemoveExpiryType getSharedLinkRemoveExpiryValue() {
        if (this._tag != Tag.SHARED_LINK_REMOVE_EXPIRY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_REMOVE_EXPIRY, but was Tag." + this._tag.name());
        }
        return sharedLinkRemoveExpiryValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_SETTINGS_ADD_EXPIRATION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_SETTINGS_ADD_EXPIRATION}, {@code false} otherwise.
     */
    public boolean isSharedLinkSettingsAddExpiration() {
        return this._tag == Tag.SHARED_LINK_SETTINGS_ADD_EXPIRATION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_LINK_SETTINGS_ADD_EXPIRATION}.
     *
     * <p> (sharing) Added an expiration date to the shared link </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_LINK_SETTINGS_ADD_EXPIRATION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedLinkSettingsAddExpiration(SharedLinkSettingsAddExpirationType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedLinkSettingsAddExpiration(Tag.SHARED_LINK_SETTINGS_ADD_EXPIRATION, value);
    }

    /**
     * (sharing) Added an expiration date to the shared link
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_LINK_SETTINGS_ADD_EXPIRATION}. </p>
     *
     * @return The {@link SharedLinkSettingsAddExpirationType} value associated
     *     with this instance if {@link #isSharedLinkSettingsAddExpiration} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkSettingsAddExpiration} is {@code false}.
     */
    public SharedLinkSettingsAddExpirationType getSharedLinkSettingsAddExpirationValue() {
        if (this._tag != Tag.SHARED_LINK_SETTINGS_ADD_EXPIRATION) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_SETTINGS_ADD_EXPIRATION, but was Tag." + this._tag.name());
        }
        return sharedLinkSettingsAddExpirationValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_SETTINGS_ADD_PASSWORD}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_SETTINGS_ADD_PASSWORD}, {@code false} otherwise.
     */
    public boolean isSharedLinkSettingsAddPassword() {
        return this._tag == Tag.SHARED_LINK_SETTINGS_ADD_PASSWORD;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_LINK_SETTINGS_ADD_PASSWORD}.
     *
     * <p> (sharing) Added a password to the shared link </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_LINK_SETTINGS_ADD_PASSWORD}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedLinkSettingsAddPassword(SharedLinkSettingsAddPasswordType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedLinkSettingsAddPassword(Tag.SHARED_LINK_SETTINGS_ADD_PASSWORD, value);
    }

    /**
     * (sharing) Added a password to the shared link
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_LINK_SETTINGS_ADD_PASSWORD}. </p>
     *
     * @return The {@link SharedLinkSettingsAddPasswordType} value associated
     *     with this instance if {@link #isSharedLinkSettingsAddPassword} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkSettingsAddPassword} is {@code false}.
     */
    public SharedLinkSettingsAddPasswordType getSharedLinkSettingsAddPasswordValue() {
        if (this._tag != Tag.SHARED_LINK_SETTINGS_ADD_PASSWORD) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_SETTINGS_ADD_PASSWORD, but was Tag." + this._tag.name());
        }
        return sharedLinkSettingsAddPasswordValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED}, {@code false}
     *     otherwise.
     */
    public boolean isSharedLinkSettingsAllowDownloadDisabled() {
        return this._tag == Tag.SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED}.
     *
     * <p> (sharing) Disabled downloads </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedLinkSettingsAllowDownloadDisabled(SharedLinkSettingsAllowDownloadDisabledType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedLinkSettingsAllowDownloadDisabled(Tag.SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED, value);
    }

    /**
     * (sharing) Disabled downloads
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED}. </p>
     *
     * @return The {@link SharedLinkSettingsAllowDownloadDisabledType} value
     *     associated with this instance if {@link
     *     #isSharedLinkSettingsAllowDownloadDisabled} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkSettingsAllowDownloadDisabled} is {@code false}.
     */
    public SharedLinkSettingsAllowDownloadDisabledType getSharedLinkSettingsAllowDownloadDisabledValue() {
        if (this._tag != Tag.SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED, but was Tag." + this._tag.name());
        }
        return sharedLinkSettingsAllowDownloadDisabledValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED}, {@code false}
     *     otherwise.
     */
    public boolean isSharedLinkSettingsAllowDownloadEnabled() {
        return this._tag == Tag.SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED}.
     *
     * <p> (sharing) Enabled downloads </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedLinkSettingsAllowDownloadEnabled(SharedLinkSettingsAllowDownloadEnabledType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedLinkSettingsAllowDownloadEnabled(Tag.SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED, value);
    }

    /**
     * (sharing) Enabled downloads
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED}. </p>
     *
     * @return The {@link SharedLinkSettingsAllowDownloadEnabledType} value
     *     associated with this instance if {@link
     *     #isSharedLinkSettingsAllowDownloadEnabled} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkSettingsAllowDownloadEnabled} is {@code false}.
     */
    public SharedLinkSettingsAllowDownloadEnabledType getSharedLinkSettingsAllowDownloadEnabledValue() {
        if (this._tag != Tag.SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED, but was Tag." + this._tag.name());
        }
        return sharedLinkSettingsAllowDownloadEnabledValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_SETTINGS_CHANGE_AUDIENCE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_SETTINGS_CHANGE_AUDIENCE}, {@code false} otherwise.
     */
    public boolean isSharedLinkSettingsChangeAudience() {
        return this._tag == Tag.SHARED_LINK_SETTINGS_CHANGE_AUDIENCE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_LINK_SETTINGS_CHANGE_AUDIENCE}.
     *
     * <p> (sharing) Changed the audience of the shared link </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_LINK_SETTINGS_CHANGE_AUDIENCE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedLinkSettingsChangeAudience(SharedLinkSettingsChangeAudienceType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedLinkSettingsChangeAudience(Tag.SHARED_LINK_SETTINGS_CHANGE_AUDIENCE, value);
    }

    /**
     * (sharing) Changed the audience of the shared link
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_LINK_SETTINGS_CHANGE_AUDIENCE}. </p>
     *
     * @return The {@link SharedLinkSettingsChangeAudienceType} value associated
     *     with this instance if {@link #isSharedLinkSettingsChangeAudience} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkSettingsChangeAudience} is {@code false}.
     */
    public SharedLinkSettingsChangeAudienceType getSharedLinkSettingsChangeAudienceValue() {
        if (this._tag != Tag.SHARED_LINK_SETTINGS_CHANGE_AUDIENCE) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_SETTINGS_CHANGE_AUDIENCE, but was Tag." + this._tag.name());
        }
        return sharedLinkSettingsChangeAudienceValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_SETTINGS_CHANGE_EXPIRATION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_SETTINGS_CHANGE_EXPIRATION}, {@code false} otherwise.
     */
    public boolean isSharedLinkSettingsChangeExpiration() {
        return this._tag == Tag.SHARED_LINK_SETTINGS_CHANGE_EXPIRATION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_LINK_SETTINGS_CHANGE_EXPIRATION}.
     *
     * <p> (sharing) Changed the expiration date of the shared link </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_LINK_SETTINGS_CHANGE_EXPIRATION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedLinkSettingsChangeExpiration(SharedLinkSettingsChangeExpirationType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedLinkSettingsChangeExpiration(Tag.SHARED_LINK_SETTINGS_CHANGE_EXPIRATION, value);
    }

    /**
     * (sharing) Changed the expiration date of the shared link
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_LINK_SETTINGS_CHANGE_EXPIRATION}. </p>
     *
     * @return The {@link SharedLinkSettingsChangeExpirationType} value
     *     associated with this instance if {@link
     *     #isSharedLinkSettingsChangeExpiration} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkSettingsChangeExpiration} is {@code false}.
     */
    public SharedLinkSettingsChangeExpirationType getSharedLinkSettingsChangeExpirationValue() {
        if (this._tag != Tag.SHARED_LINK_SETTINGS_CHANGE_EXPIRATION) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_SETTINGS_CHANGE_EXPIRATION, but was Tag." + this._tag.name());
        }
        return sharedLinkSettingsChangeExpirationValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_SETTINGS_CHANGE_PASSWORD}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_SETTINGS_CHANGE_PASSWORD}, {@code false} otherwise.
     */
    public boolean isSharedLinkSettingsChangePassword() {
        return this._tag == Tag.SHARED_LINK_SETTINGS_CHANGE_PASSWORD;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_LINK_SETTINGS_CHANGE_PASSWORD}.
     *
     * <p> (sharing) Changed the password of the shared link </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_LINK_SETTINGS_CHANGE_PASSWORD}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedLinkSettingsChangePassword(SharedLinkSettingsChangePasswordType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedLinkSettingsChangePassword(Tag.SHARED_LINK_SETTINGS_CHANGE_PASSWORD, value);
    }

    /**
     * (sharing) Changed the password of the shared link
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_LINK_SETTINGS_CHANGE_PASSWORD}. </p>
     *
     * @return The {@link SharedLinkSettingsChangePasswordType} value associated
     *     with this instance if {@link #isSharedLinkSettingsChangePassword} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkSettingsChangePassword} is {@code false}.
     */
    public SharedLinkSettingsChangePasswordType getSharedLinkSettingsChangePasswordValue() {
        if (this._tag != Tag.SHARED_LINK_SETTINGS_CHANGE_PASSWORD) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_SETTINGS_CHANGE_PASSWORD, but was Tag." + this._tag.name());
        }
        return sharedLinkSettingsChangePasswordValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_SETTINGS_REMOVE_EXPIRATION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_SETTINGS_REMOVE_EXPIRATION}, {@code false} otherwise.
     */
    public boolean isSharedLinkSettingsRemoveExpiration() {
        return this._tag == Tag.SHARED_LINK_SETTINGS_REMOVE_EXPIRATION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_LINK_SETTINGS_REMOVE_EXPIRATION}.
     *
     * <p> (sharing) Removed the expiration date from the shared link </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_LINK_SETTINGS_REMOVE_EXPIRATION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedLinkSettingsRemoveExpiration(SharedLinkSettingsRemoveExpirationType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedLinkSettingsRemoveExpiration(Tag.SHARED_LINK_SETTINGS_REMOVE_EXPIRATION, value);
    }

    /**
     * (sharing) Removed the expiration date from the shared link
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_LINK_SETTINGS_REMOVE_EXPIRATION}. </p>
     *
     * @return The {@link SharedLinkSettingsRemoveExpirationType} value
     *     associated with this instance if {@link
     *     #isSharedLinkSettingsRemoveExpiration} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkSettingsRemoveExpiration} is {@code false}.
     */
    public SharedLinkSettingsRemoveExpirationType getSharedLinkSettingsRemoveExpirationValue() {
        if (this._tag != Tag.SHARED_LINK_SETTINGS_REMOVE_EXPIRATION) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_SETTINGS_REMOVE_EXPIRATION, but was Tag." + this._tag.name());
        }
        return sharedLinkSettingsRemoveExpirationValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_SETTINGS_REMOVE_PASSWORD}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_SETTINGS_REMOVE_PASSWORD}, {@code false} otherwise.
     */
    public boolean isSharedLinkSettingsRemovePassword() {
        return this._tag == Tag.SHARED_LINK_SETTINGS_REMOVE_PASSWORD;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_LINK_SETTINGS_REMOVE_PASSWORD}.
     *
     * <p> (sharing) Removed the password from the shared link </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_LINK_SETTINGS_REMOVE_PASSWORD}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedLinkSettingsRemovePassword(SharedLinkSettingsRemovePasswordType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedLinkSettingsRemovePassword(Tag.SHARED_LINK_SETTINGS_REMOVE_PASSWORD, value);
    }

    /**
     * (sharing) Removed the password from the shared link
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARED_LINK_SETTINGS_REMOVE_PASSWORD}. </p>
     *
     * @return The {@link SharedLinkSettingsRemovePasswordType} value associated
     *     with this instance if {@link #isSharedLinkSettingsRemovePassword} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharedLinkSettingsRemovePassword} is {@code false}.
     */
    public SharedLinkSettingsRemovePasswordType getSharedLinkSettingsRemovePasswordValue() {
        if (this._tag != Tag.SHARED_LINK_SETTINGS_REMOVE_PASSWORD) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_SETTINGS_REMOVE_PASSWORD, but was Tag." + this._tag.name());
        }
        return sharedLinkSettingsRemovePasswordValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_SHARE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_SHARE}, {@code false} otherwise.
     */
    public boolean isSharedLinkShare() {
        return this._tag == Tag.SHARED_LINK_SHARE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_LINK_SHARE}.
     *
     * <p> (sharing) Added members as audience of shared link </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_LINK_SHARE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedLinkShare(SharedLinkShareType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedLinkShare(Tag.SHARED_LINK_SHARE, value);
    }

    /**
     * (sharing) Added members as audience of shared link
     *
     * <p> This instance must be tagged as {@link Tag#SHARED_LINK_SHARE}. </p>
     *
     * @return The {@link SharedLinkShareType} value associated with this
     *     instance if {@link #isSharedLinkShare} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedLinkShare} is {@code
     *     false}.
     */
    public SharedLinkShareType getSharedLinkShareValue() {
        if (this._tag != Tag.SHARED_LINK_SHARE) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_SHARE, but was Tag." + this._tag.name());
        }
        return sharedLinkShareValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_LINK_VIEW}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_LINK_VIEW}, {@code false} otherwise.
     */
    public boolean isSharedLinkView() {
        return this._tag == Tag.SHARED_LINK_VIEW;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_LINK_VIEW}.
     *
     * <p> (sharing) Opened shared link </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_LINK_VIEW}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedLinkView(SharedLinkViewType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedLinkView(Tag.SHARED_LINK_VIEW, value);
    }

    /**
     * (sharing) Opened shared link
     *
     * <p> This instance must be tagged as {@link Tag#SHARED_LINK_VIEW}. </p>
     *
     * @return The {@link SharedLinkViewType} value associated with this
     *     instance if {@link #isSharedLinkView} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedLinkView} is {@code
     *     false}.
     */
    public SharedLinkViewType getSharedLinkViewValue() {
        if (this._tag != Tag.SHARED_LINK_VIEW) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_LINK_VIEW, but was Tag." + this._tag.name());
        }
        return sharedLinkViewValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARED_NOTE_OPENED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARED_NOTE_OPENED}, {@code false} otherwise.
     */
    public boolean isSharedNoteOpened() {
        return this._tag == Tag.SHARED_NOTE_OPENED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARED_NOTE_OPENED}.
     *
     * <p> (sharing) Opened shared Paper doc (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARED_NOTE_OPENED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharedNoteOpened(SharedNoteOpenedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharedNoteOpened(Tag.SHARED_NOTE_OPENED, value);
    }

    /**
     * (sharing) Opened shared Paper doc (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#SHARED_NOTE_OPENED}. </p>
     *
     * @return The {@link SharedNoteOpenedType} value associated with this
     *     instance if {@link #isSharedNoteOpened} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharedNoteOpened} is {@code
     *     false}.
     */
    public SharedNoteOpenedType getSharedNoteOpenedValue() {
        if (this._tag != Tag.SHARED_NOTE_OPENED) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARED_NOTE_OPENED, but was Tag." + this._tag.name());
        }
        return sharedNoteOpenedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHMODEL_DISABLE_DOWNLOADS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHMODEL_DISABLE_DOWNLOADS}, {@code false} otherwise.
     */
    public boolean isShmodelDisableDownloads() {
        return this._tag == Tag.SHMODEL_DISABLE_DOWNLOADS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHMODEL_DISABLE_DOWNLOADS}.
     *
     * <p> (sharing) Disabled downloads for link (deprecated, no longer logged)
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHMODEL_DISABLE_DOWNLOADS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType shmodelDisableDownloads(ShmodelDisableDownloadsType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShmodelDisableDownloads(Tag.SHMODEL_DISABLE_DOWNLOADS, value);
    }

    /**
     * (sharing) Disabled downloads for link (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHMODEL_DISABLE_DOWNLOADS}. </p>
     *
     * @return The {@link ShmodelDisableDownloadsType} value associated with
     *     this instance if {@link #isShmodelDisableDownloads} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShmodelDisableDownloads} is
     *     {@code false}.
     */
    public ShmodelDisableDownloadsType getShmodelDisableDownloadsValue() {
        if (this._tag != Tag.SHMODEL_DISABLE_DOWNLOADS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHMODEL_DISABLE_DOWNLOADS, but was Tag." + this._tag.name());
        }
        return shmodelDisableDownloadsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHMODEL_ENABLE_DOWNLOADS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHMODEL_ENABLE_DOWNLOADS}, {@code false} otherwise.
     */
    public boolean isShmodelEnableDownloads() {
        return this._tag == Tag.SHMODEL_ENABLE_DOWNLOADS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHMODEL_ENABLE_DOWNLOADS}.
     *
     * <p> (sharing) Enabled downloads for link (deprecated, no longer logged)
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHMODEL_ENABLE_DOWNLOADS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType shmodelEnableDownloads(ShmodelEnableDownloadsType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShmodelEnableDownloads(Tag.SHMODEL_ENABLE_DOWNLOADS, value);
    }

    /**
     * (sharing) Enabled downloads for link (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#SHMODEL_ENABLE_DOWNLOADS}.
     * </p>
     *
     * @return The {@link ShmodelEnableDownloadsType} value associated with this
     *     instance if {@link #isShmodelEnableDownloads} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShmodelEnableDownloads} is
     *     {@code false}.
     */
    public ShmodelEnableDownloadsType getShmodelEnableDownloadsValue() {
        if (this._tag != Tag.SHMODEL_ENABLE_DOWNLOADS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHMODEL_ENABLE_DOWNLOADS, but was Tag." + this._tag.name());
        }
        return shmodelEnableDownloadsValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHMODEL_GROUP_SHARE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHMODEL_GROUP_SHARE}, {@code false} otherwise.
     */
    public boolean isShmodelGroupShare() {
        return this._tag == Tag.SHMODEL_GROUP_SHARE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHMODEL_GROUP_SHARE}.
     *
     * <p> (sharing) Shared link with group (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHMODEL_GROUP_SHARE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType shmodelGroupShare(ShmodelGroupShareType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShmodelGroupShare(Tag.SHMODEL_GROUP_SHARE, value);
    }

    /**
     * (sharing) Shared link with group (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#SHMODEL_GROUP_SHARE}. </p>
     *
     * @return The {@link ShmodelGroupShareType} value associated with this
     *     instance if {@link #isShmodelGroupShare} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShmodelGroupShare} is {@code
     *     false}.
     */
    public ShmodelGroupShareType getShmodelGroupShareValue() {
        if (this._tag != Tag.SHMODEL_GROUP_SHARE) {
            throw new IllegalStateException("Invalid tag: required Tag.SHMODEL_GROUP_SHARE, but was Tag." + this._tag.name());
        }
        return shmodelGroupShareValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_ACCESS_GRANTED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_ACCESS_GRANTED}, {@code false} otherwise.
     */
    public boolean isShowcaseAccessGranted() {
        return this._tag == Tag.SHOWCASE_ACCESS_GRANTED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_ACCESS_GRANTED}.
     *
     * <p> (showcase) Granted access to showcase </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_ACCESS_GRANTED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseAccessGranted(ShowcaseAccessGrantedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseAccessGranted(Tag.SHOWCASE_ACCESS_GRANTED, value);
    }

    /**
     * (showcase) Granted access to showcase
     *
     * <p> This instance must be tagged as {@link Tag#SHOWCASE_ACCESS_GRANTED}.
     * </p>
     *
     * @return The {@link ShowcaseAccessGrantedType} value associated with this
     *     instance if {@link #isShowcaseAccessGranted} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseAccessGranted} is
     *     {@code false}.
     */
    public ShowcaseAccessGrantedType getShowcaseAccessGrantedValue() {
        if (this._tag != Tag.SHOWCASE_ACCESS_GRANTED) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_ACCESS_GRANTED, but was Tag." + this._tag.name());
        }
        return showcaseAccessGrantedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_ADD_MEMBER}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_ADD_MEMBER}, {@code false} otherwise.
     */
    public boolean isShowcaseAddMember() {
        return this._tag == Tag.SHOWCASE_ADD_MEMBER;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_ADD_MEMBER}.
     *
     * <p> (showcase) Added member to showcase </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_ADD_MEMBER}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseAddMember(ShowcaseAddMemberType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseAddMember(Tag.SHOWCASE_ADD_MEMBER, value);
    }

    /**
     * (showcase) Added member to showcase
     *
     * <p> This instance must be tagged as {@link Tag#SHOWCASE_ADD_MEMBER}. </p>
     *
     * @return The {@link ShowcaseAddMemberType} value associated with this
     *     instance if {@link #isShowcaseAddMember} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseAddMember} is {@code
     *     false}.
     */
    public ShowcaseAddMemberType getShowcaseAddMemberValue() {
        if (this._tag != Tag.SHOWCASE_ADD_MEMBER) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_ADD_MEMBER, but was Tag." + this._tag.name());
        }
        return showcaseAddMemberValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_ARCHIVED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_ARCHIVED}, {@code false} otherwise.
     */
    public boolean isShowcaseArchived() {
        return this._tag == Tag.SHOWCASE_ARCHIVED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_ARCHIVED}.
     *
     * <p> (showcase) Archived showcase </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_ARCHIVED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseArchived(ShowcaseArchivedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseArchived(Tag.SHOWCASE_ARCHIVED, value);
    }

    /**
     * (showcase) Archived showcase
     *
     * <p> This instance must be tagged as {@link Tag#SHOWCASE_ARCHIVED}. </p>
     *
     * @return The {@link ShowcaseArchivedType} value associated with this
     *     instance if {@link #isShowcaseArchived} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseArchived} is {@code
     *     false}.
     */
    public ShowcaseArchivedType getShowcaseArchivedValue() {
        if (this._tag != Tag.SHOWCASE_ARCHIVED) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_ARCHIVED, but was Tag." + this._tag.name());
        }
        return showcaseArchivedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_CREATED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_CREATED}, {@code false} otherwise.
     */
    public boolean isShowcaseCreated() {
        return this._tag == Tag.SHOWCASE_CREATED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_CREATED}.
     *
     * <p> (showcase) Created showcase </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_CREATED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseCreated(ShowcaseCreatedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseCreated(Tag.SHOWCASE_CREATED, value);
    }

    /**
     * (showcase) Created showcase
     *
     * <p> This instance must be tagged as {@link Tag#SHOWCASE_CREATED}. </p>
     *
     * @return The {@link ShowcaseCreatedType} value associated with this
     *     instance if {@link #isShowcaseCreated} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseCreated} is {@code
     *     false}.
     */
    public ShowcaseCreatedType getShowcaseCreatedValue() {
        if (this._tag != Tag.SHOWCASE_CREATED) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_CREATED, but was Tag." + this._tag.name());
        }
        return showcaseCreatedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_DELETE_COMMENT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_DELETE_COMMENT}, {@code false} otherwise.
     */
    public boolean isShowcaseDeleteComment() {
        return this._tag == Tag.SHOWCASE_DELETE_COMMENT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_DELETE_COMMENT}.
     *
     * <p> (showcase) Deleted showcase comment </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_DELETE_COMMENT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseDeleteComment(ShowcaseDeleteCommentType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseDeleteComment(Tag.SHOWCASE_DELETE_COMMENT, value);
    }

    /**
     * (showcase) Deleted showcase comment
     *
     * <p> This instance must be tagged as {@link Tag#SHOWCASE_DELETE_COMMENT}.
     * </p>
     *
     * @return The {@link ShowcaseDeleteCommentType} value associated with this
     *     instance if {@link #isShowcaseDeleteComment} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseDeleteComment} is
     *     {@code false}.
     */
    public ShowcaseDeleteCommentType getShowcaseDeleteCommentValue() {
        if (this._tag != Tag.SHOWCASE_DELETE_COMMENT) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_DELETE_COMMENT, but was Tag." + this._tag.name());
        }
        return showcaseDeleteCommentValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_EDITED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_EDITED}, {@code false} otherwise.
     */
    public boolean isShowcaseEdited() {
        return this._tag == Tag.SHOWCASE_EDITED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_EDITED}.
     *
     * <p> (showcase) Edited showcase </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_EDITED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseEdited(ShowcaseEditedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseEdited(Tag.SHOWCASE_EDITED, value);
    }

    /**
     * (showcase) Edited showcase
     *
     * <p> This instance must be tagged as {@link Tag#SHOWCASE_EDITED}. </p>
     *
     * @return The {@link ShowcaseEditedType} value associated with this
     *     instance if {@link #isShowcaseEdited} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseEdited} is {@code
     *     false}.
     */
    public ShowcaseEditedType getShowcaseEditedValue() {
        if (this._tag != Tag.SHOWCASE_EDITED) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_EDITED, but was Tag." + this._tag.name());
        }
        return showcaseEditedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_EDIT_COMMENT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_EDIT_COMMENT}, {@code false} otherwise.
     */
    public boolean isShowcaseEditComment() {
        return this._tag == Tag.SHOWCASE_EDIT_COMMENT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_EDIT_COMMENT}.
     *
     * <p> (showcase) Edited showcase comment </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_EDIT_COMMENT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseEditComment(ShowcaseEditCommentType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseEditComment(Tag.SHOWCASE_EDIT_COMMENT, value);
    }

    /**
     * (showcase) Edited showcase comment
     *
     * <p> This instance must be tagged as {@link Tag#SHOWCASE_EDIT_COMMENT}.
     * </p>
     *
     * @return The {@link ShowcaseEditCommentType} value associated with this
     *     instance if {@link #isShowcaseEditComment} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseEditComment} is
     *     {@code false}.
     */
    public ShowcaseEditCommentType getShowcaseEditCommentValue() {
        if (this._tag != Tag.SHOWCASE_EDIT_COMMENT) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_EDIT_COMMENT, but was Tag." + this._tag.name());
        }
        return showcaseEditCommentValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_FILE_ADDED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_FILE_ADDED}, {@code false} otherwise.
     */
    public boolean isShowcaseFileAdded() {
        return this._tag == Tag.SHOWCASE_FILE_ADDED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_FILE_ADDED}.
     *
     * <p> (showcase) Added file to showcase </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_FILE_ADDED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseFileAdded(ShowcaseFileAddedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseFileAdded(Tag.SHOWCASE_FILE_ADDED, value);
    }

    /**
     * (showcase) Added file to showcase
     *
     * <p> This instance must be tagged as {@link Tag#SHOWCASE_FILE_ADDED}. </p>
     *
     * @return The {@link ShowcaseFileAddedType} value associated with this
     *     instance if {@link #isShowcaseFileAdded} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseFileAdded} is {@code
     *     false}.
     */
    public ShowcaseFileAddedType getShowcaseFileAddedValue() {
        if (this._tag != Tag.SHOWCASE_FILE_ADDED) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_FILE_ADDED, but was Tag." + this._tag.name());
        }
        return showcaseFileAddedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_FILE_DOWNLOAD}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_FILE_DOWNLOAD}, {@code false} otherwise.
     */
    public boolean isShowcaseFileDownload() {
        return this._tag == Tag.SHOWCASE_FILE_DOWNLOAD;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_FILE_DOWNLOAD}.
     *
     * <p> (showcase) Downloaded file from showcase </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_FILE_DOWNLOAD}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseFileDownload(ShowcaseFileDownloadType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseFileDownload(Tag.SHOWCASE_FILE_DOWNLOAD, value);
    }

    /**
     * (showcase) Downloaded file from showcase
     *
     * <p> This instance must be tagged as {@link Tag#SHOWCASE_FILE_DOWNLOAD}.
     * </p>
     *
     * @return The {@link ShowcaseFileDownloadType} value associated with this
     *     instance if {@link #isShowcaseFileDownload} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseFileDownload} is
     *     {@code false}.
     */
    public ShowcaseFileDownloadType getShowcaseFileDownloadValue() {
        if (this._tag != Tag.SHOWCASE_FILE_DOWNLOAD) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_FILE_DOWNLOAD, but was Tag." + this._tag.name());
        }
        return showcaseFileDownloadValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_FILE_REMOVED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_FILE_REMOVED}, {@code false} otherwise.
     */
    public boolean isShowcaseFileRemoved() {
        return this._tag == Tag.SHOWCASE_FILE_REMOVED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_FILE_REMOVED}.
     *
     * <p> (showcase) Removed file from showcase </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_FILE_REMOVED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseFileRemoved(ShowcaseFileRemovedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseFileRemoved(Tag.SHOWCASE_FILE_REMOVED, value);
    }

    /**
     * (showcase) Removed file from showcase
     *
     * <p> This instance must be tagged as {@link Tag#SHOWCASE_FILE_REMOVED}.
     * </p>
     *
     * @return The {@link ShowcaseFileRemovedType} value associated with this
     *     instance if {@link #isShowcaseFileRemoved} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseFileRemoved} is
     *     {@code false}.
     */
    public ShowcaseFileRemovedType getShowcaseFileRemovedValue() {
        if (this._tag != Tag.SHOWCASE_FILE_REMOVED) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_FILE_REMOVED, but was Tag." + this._tag.name());
        }
        return showcaseFileRemovedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_FILE_VIEW}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_FILE_VIEW}, {@code false} otherwise.
     */
    public boolean isShowcaseFileView() {
        return this._tag == Tag.SHOWCASE_FILE_VIEW;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_FILE_VIEW}.
     *
     * <p> (showcase) Viewed file in showcase </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_FILE_VIEW}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseFileView(ShowcaseFileViewType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseFileView(Tag.SHOWCASE_FILE_VIEW, value);
    }

    /**
     * (showcase) Viewed file in showcase
     *
     * <p> This instance must be tagged as {@link Tag#SHOWCASE_FILE_VIEW}. </p>
     *
     * @return The {@link ShowcaseFileViewType} value associated with this
     *     instance if {@link #isShowcaseFileView} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseFileView} is {@code
     *     false}.
     */
    public ShowcaseFileViewType getShowcaseFileViewValue() {
        if (this._tag != Tag.SHOWCASE_FILE_VIEW) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_FILE_VIEW, but was Tag." + this._tag.name());
        }
        return showcaseFileViewValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_PERMANENTLY_DELETED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_PERMANENTLY_DELETED}, {@code false} otherwise.
     */
    public boolean isShowcasePermanentlyDeleted() {
        return this._tag == Tag.SHOWCASE_PERMANENTLY_DELETED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_PERMANENTLY_DELETED}.
     *
     * <p> (showcase) Permanently deleted showcase </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_PERMANENTLY_DELETED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcasePermanentlyDeleted(ShowcasePermanentlyDeletedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcasePermanentlyDeleted(Tag.SHOWCASE_PERMANENTLY_DELETED, value);
    }

    /**
     * (showcase) Permanently deleted showcase
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHOWCASE_PERMANENTLY_DELETED}. </p>
     *
     * @return The {@link ShowcasePermanentlyDeletedType} value associated with
     *     this instance if {@link #isShowcasePermanentlyDeleted} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isShowcasePermanentlyDeleted}
     *     is {@code false}.
     */
    public ShowcasePermanentlyDeletedType getShowcasePermanentlyDeletedValue() {
        if (this._tag != Tag.SHOWCASE_PERMANENTLY_DELETED) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_PERMANENTLY_DELETED, but was Tag." + this._tag.name());
        }
        return showcasePermanentlyDeletedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_POST_COMMENT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_POST_COMMENT}, {@code false} otherwise.
     */
    public boolean isShowcasePostComment() {
        return this._tag == Tag.SHOWCASE_POST_COMMENT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_POST_COMMENT}.
     *
     * <p> (showcase) Added showcase comment </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_POST_COMMENT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcasePostComment(ShowcasePostCommentType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcasePostComment(Tag.SHOWCASE_POST_COMMENT, value);
    }

    /**
     * (showcase) Added showcase comment
     *
     * <p> This instance must be tagged as {@link Tag#SHOWCASE_POST_COMMENT}.
     * </p>
     *
     * @return The {@link ShowcasePostCommentType} value associated with this
     *     instance if {@link #isShowcasePostComment} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcasePostComment} is
     *     {@code false}.
     */
    public ShowcasePostCommentType getShowcasePostCommentValue() {
        if (this._tag != Tag.SHOWCASE_POST_COMMENT) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_POST_COMMENT, but was Tag." + this._tag.name());
        }
        return showcasePostCommentValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_REMOVE_MEMBER}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_REMOVE_MEMBER}, {@code false} otherwise.
     */
    public boolean isShowcaseRemoveMember() {
        return this._tag == Tag.SHOWCASE_REMOVE_MEMBER;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_REMOVE_MEMBER}.
     *
     * <p> (showcase) Removed member from showcase </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_REMOVE_MEMBER}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseRemoveMember(ShowcaseRemoveMemberType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseRemoveMember(Tag.SHOWCASE_REMOVE_MEMBER, value);
    }

    /**
     * (showcase) Removed member from showcase
     *
     * <p> This instance must be tagged as {@link Tag#SHOWCASE_REMOVE_MEMBER}.
     * </p>
     *
     * @return The {@link ShowcaseRemoveMemberType} value associated with this
     *     instance if {@link #isShowcaseRemoveMember} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseRemoveMember} is
     *     {@code false}.
     */
    public ShowcaseRemoveMemberType getShowcaseRemoveMemberValue() {
        if (this._tag != Tag.SHOWCASE_REMOVE_MEMBER) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_REMOVE_MEMBER, but was Tag." + this._tag.name());
        }
        return showcaseRemoveMemberValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_RENAMED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_RENAMED}, {@code false} otherwise.
     */
    public boolean isShowcaseRenamed() {
        return this._tag == Tag.SHOWCASE_RENAMED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_RENAMED}.
     *
     * <p> (showcase) Renamed showcase </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_RENAMED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseRenamed(ShowcaseRenamedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseRenamed(Tag.SHOWCASE_RENAMED, value);
    }

    /**
     * (showcase) Renamed showcase
     *
     * <p> This instance must be tagged as {@link Tag#SHOWCASE_RENAMED}. </p>
     *
     * @return The {@link ShowcaseRenamedType} value associated with this
     *     instance if {@link #isShowcaseRenamed} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseRenamed} is {@code
     *     false}.
     */
    public ShowcaseRenamedType getShowcaseRenamedValue() {
        if (this._tag != Tag.SHOWCASE_RENAMED) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_RENAMED, but was Tag." + this._tag.name());
        }
        return showcaseRenamedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_REQUEST_ACCESS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_REQUEST_ACCESS}, {@code false} otherwise.
     */
    public boolean isShowcaseRequestAccess() {
        return this._tag == Tag.SHOWCASE_REQUEST_ACCESS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_REQUEST_ACCESS}.
     *
     * <p> (showcase) Requested access to showcase </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_REQUEST_ACCESS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseRequestAccess(ShowcaseRequestAccessType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseRequestAccess(Tag.SHOWCASE_REQUEST_ACCESS, value);
    }

    /**
     * (showcase) Requested access to showcase
     *
     * <p> This instance must be tagged as {@link Tag#SHOWCASE_REQUEST_ACCESS}.
     * </p>
     *
     * @return The {@link ShowcaseRequestAccessType} value associated with this
     *     instance if {@link #isShowcaseRequestAccess} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseRequestAccess} is
     *     {@code false}.
     */
    public ShowcaseRequestAccessType getShowcaseRequestAccessValue() {
        if (this._tag != Tag.SHOWCASE_REQUEST_ACCESS) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_REQUEST_ACCESS, but was Tag." + this._tag.name());
        }
        return showcaseRequestAccessValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_RESOLVE_COMMENT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_RESOLVE_COMMENT}, {@code false} otherwise.
     */
    public boolean isShowcaseResolveComment() {
        return this._tag == Tag.SHOWCASE_RESOLVE_COMMENT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_RESOLVE_COMMENT}.
     *
     * <p> (showcase) Resolved showcase comment </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_RESOLVE_COMMENT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseResolveComment(ShowcaseResolveCommentType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseResolveComment(Tag.SHOWCASE_RESOLVE_COMMENT, value);
    }

    /**
     * (showcase) Resolved showcase comment
     *
     * <p> This instance must be tagged as {@link Tag#SHOWCASE_RESOLVE_COMMENT}.
     * </p>
     *
     * @return The {@link ShowcaseResolveCommentType} value associated with this
     *     instance if {@link #isShowcaseResolveComment} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseResolveComment} is
     *     {@code false}.
     */
    public ShowcaseResolveCommentType getShowcaseResolveCommentValue() {
        if (this._tag != Tag.SHOWCASE_RESOLVE_COMMENT) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_RESOLVE_COMMENT, but was Tag." + this._tag.name());
        }
        return showcaseResolveCommentValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_RESTORED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_RESTORED}, {@code false} otherwise.
     */
    public boolean isShowcaseRestored() {
        return this._tag == Tag.SHOWCASE_RESTORED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_RESTORED}.
     *
     * <p> (showcase) Unarchived showcase </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_RESTORED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseRestored(ShowcaseRestoredType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseRestored(Tag.SHOWCASE_RESTORED, value);
    }

    /**
     * (showcase) Unarchived showcase
     *
     * <p> This instance must be tagged as {@link Tag#SHOWCASE_RESTORED}. </p>
     *
     * @return The {@link ShowcaseRestoredType} value associated with this
     *     instance if {@link #isShowcaseRestored} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseRestored} is {@code
     *     false}.
     */
    public ShowcaseRestoredType getShowcaseRestoredValue() {
        if (this._tag != Tag.SHOWCASE_RESTORED) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_RESTORED, but was Tag." + this._tag.name());
        }
        return showcaseRestoredValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_TRASHED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_TRASHED}, {@code false} otherwise.
     */
    public boolean isShowcaseTrashed() {
        return this._tag == Tag.SHOWCASE_TRASHED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_TRASHED}.
     *
     * <p> (showcase) Deleted showcase </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_TRASHED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseTrashed(ShowcaseTrashedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseTrashed(Tag.SHOWCASE_TRASHED, value);
    }

    /**
     * (showcase) Deleted showcase
     *
     * <p> This instance must be tagged as {@link Tag#SHOWCASE_TRASHED}. </p>
     *
     * @return The {@link ShowcaseTrashedType} value associated with this
     *     instance if {@link #isShowcaseTrashed} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseTrashed} is {@code
     *     false}.
     */
    public ShowcaseTrashedType getShowcaseTrashedValue() {
        if (this._tag != Tag.SHOWCASE_TRASHED) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_TRASHED, but was Tag." + this._tag.name());
        }
        return showcaseTrashedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_TRASHED_DEPRECATED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_TRASHED_DEPRECATED}, {@code false} otherwise.
     */
    public boolean isShowcaseTrashedDeprecated() {
        return this._tag == Tag.SHOWCASE_TRASHED_DEPRECATED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_TRASHED_DEPRECATED}.
     *
     * <p> (showcase) Deleted showcase (old version) (deprecated, replaced by
     * 'Deleted showcase') </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_TRASHED_DEPRECATED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseTrashedDeprecated(ShowcaseTrashedDeprecatedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseTrashedDeprecated(Tag.SHOWCASE_TRASHED_DEPRECATED, value);
    }

    /**
     * (showcase) Deleted showcase (old version) (deprecated, replaced by
     * 'Deleted showcase')
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHOWCASE_TRASHED_DEPRECATED}. </p>
     *
     * @return The {@link ShowcaseTrashedDeprecatedType} value associated with
     *     this instance if {@link #isShowcaseTrashedDeprecated} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseTrashedDeprecated} is
     *     {@code false}.
     */
    public ShowcaseTrashedDeprecatedType getShowcaseTrashedDeprecatedValue() {
        if (this._tag != Tag.SHOWCASE_TRASHED_DEPRECATED) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_TRASHED_DEPRECATED, but was Tag." + this._tag.name());
        }
        return showcaseTrashedDeprecatedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_UNRESOLVE_COMMENT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_UNRESOLVE_COMMENT}, {@code false} otherwise.
     */
    public boolean isShowcaseUnresolveComment() {
        return this._tag == Tag.SHOWCASE_UNRESOLVE_COMMENT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_UNRESOLVE_COMMENT}.
     *
     * <p> (showcase) Unresolved showcase comment </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_UNRESOLVE_COMMENT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseUnresolveComment(ShowcaseUnresolveCommentType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseUnresolveComment(Tag.SHOWCASE_UNRESOLVE_COMMENT, value);
    }

    /**
     * (showcase) Unresolved showcase comment
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHOWCASE_UNRESOLVE_COMMENT}. </p>
     *
     * @return The {@link ShowcaseUnresolveCommentType} value associated with
     *     this instance if {@link #isShowcaseUnresolveComment} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseUnresolveComment} is
     *     {@code false}.
     */
    public ShowcaseUnresolveCommentType getShowcaseUnresolveCommentValue() {
        if (this._tag != Tag.SHOWCASE_UNRESOLVE_COMMENT) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_UNRESOLVE_COMMENT, but was Tag." + this._tag.name());
        }
        return showcaseUnresolveCommentValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_UNTRASHED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_UNTRASHED}, {@code false} otherwise.
     */
    public boolean isShowcaseUntrashed() {
        return this._tag == Tag.SHOWCASE_UNTRASHED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_UNTRASHED}.
     *
     * <p> (showcase) Restored showcase </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_UNTRASHED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseUntrashed(ShowcaseUntrashedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseUntrashed(Tag.SHOWCASE_UNTRASHED, value);
    }

    /**
     * (showcase) Restored showcase
     *
     * <p> This instance must be tagged as {@link Tag#SHOWCASE_UNTRASHED}. </p>
     *
     * @return The {@link ShowcaseUntrashedType} value associated with this
     *     instance if {@link #isShowcaseUntrashed} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseUntrashed} is {@code
     *     false}.
     */
    public ShowcaseUntrashedType getShowcaseUntrashedValue() {
        if (this._tag != Tag.SHOWCASE_UNTRASHED) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_UNTRASHED, but was Tag." + this._tag.name());
        }
        return showcaseUntrashedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_UNTRASHED_DEPRECATED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_UNTRASHED_DEPRECATED}, {@code false} otherwise.
     */
    public boolean isShowcaseUntrashedDeprecated() {
        return this._tag == Tag.SHOWCASE_UNTRASHED_DEPRECATED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_UNTRASHED_DEPRECATED}.
     *
     * <p> (showcase) Restored showcase (old version) (deprecated, replaced by
     * 'Restored showcase') </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_UNTRASHED_DEPRECATED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseUntrashedDeprecated(ShowcaseUntrashedDeprecatedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseUntrashedDeprecated(Tag.SHOWCASE_UNTRASHED_DEPRECATED, value);
    }

    /**
     * (showcase) Restored showcase (old version) (deprecated, replaced by
     * 'Restored showcase')
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHOWCASE_UNTRASHED_DEPRECATED}. </p>
     *
     * @return The {@link ShowcaseUntrashedDeprecatedType} value associated with
     *     this instance if {@link #isShowcaseUntrashedDeprecated} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseUntrashedDeprecated}
     *     is {@code false}.
     */
    public ShowcaseUntrashedDeprecatedType getShowcaseUntrashedDeprecatedValue() {
        if (this._tag != Tag.SHOWCASE_UNTRASHED_DEPRECATED) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_UNTRASHED_DEPRECATED, but was Tag." + this._tag.name());
        }
        return showcaseUntrashedDeprecatedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_VIEW}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_VIEW}, {@code false} otherwise.
     */
    public boolean isShowcaseView() {
        return this._tag == Tag.SHOWCASE_VIEW;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_VIEW}.
     *
     * <p> (showcase) Viewed showcase </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_VIEW}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseView(ShowcaseViewType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseView(Tag.SHOWCASE_VIEW, value);
    }

    /**
     * (showcase) Viewed showcase
     *
     * <p> This instance must be tagged as {@link Tag#SHOWCASE_VIEW}. </p>
     *
     * @return The {@link ShowcaseViewType} value associated with this instance
     *     if {@link #isShowcaseView} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseView} is {@code
     *     false}.
     */
    public ShowcaseViewType getShowcaseViewValue() {
        if (this._tag != Tag.SHOWCASE_VIEW) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_VIEW, but was Tag." + this._tag.name());
        }
        return showcaseViewValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_ADD_CERT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_ADD_CERT}, {@code false} otherwise.
     */
    public boolean isSsoAddCert() {
        return this._tag == Tag.SSO_ADD_CERT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SSO_ADD_CERT}.
     *
     * <p> (sso) Added X.509 certificate for SSO </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SSO_ADD_CERT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType ssoAddCert(SsoAddCertType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSsoAddCert(Tag.SSO_ADD_CERT, value);
    }

    /**
     * (sso) Added X.509 certificate for SSO
     *
     * <p> This instance must be tagged as {@link Tag#SSO_ADD_CERT}. </p>
     *
     * @return The {@link SsoAddCertType} value associated with this instance if
     *     {@link #isSsoAddCert} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoAddCert} is {@code false}.
     */
    public SsoAddCertType getSsoAddCertValue() {
        if (this._tag != Tag.SSO_ADD_CERT) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_ADD_CERT, but was Tag." + this._tag.name());
        }
        return ssoAddCertValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_ADD_LOGIN_URL}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_ADD_LOGIN_URL}, {@code false} otherwise.
     */
    public boolean isSsoAddLoginUrl() {
        return this._tag == Tag.SSO_ADD_LOGIN_URL;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SSO_ADD_LOGIN_URL}.
     *
     * <p> (sso) Added sign-in URL for SSO </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SSO_ADD_LOGIN_URL}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType ssoAddLoginUrl(SsoAddLoginUrlType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSsoAddLoginUrl(Tag.SSO_ADD_LOGIN_URL, value);
    }

    /**
     * (sso) Added sign-in URL for SSO
     *
     * <p> This instance must be tagged as {@link Tag#SSO_ADD_LOGIN_URL}. </p>
     *
     * @return The {@link SsoAddLoginUrlType} value associated with this
     *     instance if {@link #isSsoAddLoginUrl} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoAddLoginUrl} is {@code
     *     false}.
     */
    public SsoAddLoginUrlType getSsoAddLoginUrlValue() {
        if (this._tag != Tag.SSO_ADD_LOGIN_URL) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_ADD_LOGIN_URL, but was Tag." + this._tag.name());
        }
        return ssoAddLoginUrlValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_ADD_LOGOUT_URL}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_ADD_LOGOUT_URL}, {@code false} otherwise.
     */
    public boolean isSsoAddLogoutUrl() {
        return this._tag == Tag.SSO_ADD_LOGOUT_URL;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SSO_ADD_LOGOUT_URL}.
     *
     * <p> (sso) Added sign-out URL for SSO </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SSO_ADD_LOGOUT_URL}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType ssoAddLogoutUrl(SsoAddLogoutUrlType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSsoAddLogoutUrl(Tag.SSO_ADD_LOGOUT_URL, value);
    }

    /**
     * (sso) Added sign-out URL for SSO
     *
     * <p> This instance must be tagged as {@link Tag#SSO_ADD_LOGOUT_URL}. </p>
     *
     * @return The {@link SsoAddLogoutUrlType} value associated with this
     *     instance if {@link #isSsoAddLogoutUrl} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoAddLogoutUrl} is {@code
     *     false}.
     */
    public SsoAddLogoutUrlType getSsoAddLogoutUrlValue() {
        if (this._tag != Tag.SSO_ADD_LOGOUT_URL) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_ADD_LOGOUT_URL, but was Tag." + this._tag.name());
        }
        return ssoAddLogoutUrlValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_CHANGE_CERT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_CHANGE_CERT}, {@code false} otherwise.
     */
    public boolean isSsoChangeCert() {
        return this._tag == Tag.SSO_CHANGE_CERT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SSO_CHANGE_CERT}.
     *
     * <p> (sso) Changed X.509 certificate for SSO </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SSO_CHANGE_CERT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType ssoChangeCert(SsoChangeCertType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSsoChangeCert(Tag.SSO_CHANGE_CERT, value);
    }

    /**
     * (sso) Changed X.509 certificate for SSO
     *
     * <p> This instance must be tagged as {@link Tag#SSO_CHANGE_CERT}. </p>
     *
     * @return The {@link SsoChangeCertType} value associated with this instance
     *     if {@link #isSsoChangeCert} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoChangeCert} is {@code
     *     false}.
     */
    public SsoChangeCertType getSsoChangeCertValue() {
        if (this._tag != Tag.SSO_CHANGE_CERT) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_CHANGE_CERT, but was Tag." + this._tag.name());
        }
        return ssoChangeCertValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_CHANGE_LOGIN_URL}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_CHANGE_LOGIN_URL}, {@code false} otherwise.
     */
    public boolean isSsoChangeLoginUrl() {
        return this._tag == Tag.SSO_CHANGE_LOGIN_URL;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SSO_CHANGE_LOGIN_URL}.
     *
     * <p> (sso) Changed sign-in URL for SSO </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SSO_CHANGE_LOGIN_URL}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType ssoChangeLoginUrl(SsoChangeLoginUrlType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSsoChangeLoginUrl(Tag.SSO_CHANGE_LOGIN_URL, value);
    }

    /**
     * (sso) Changed sign-in URL for SSO
     *
     * <p> This instance must be tagged as {@link Tag#SSO_CHANGE_LOGIN_URL}.
     * </p>
     *
     * @return The {@link SsoChangeLoginUrlType} value associated with this
     *     instance if {@link #isSsoChangeLoginUrl} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoChangeLoginUrl} is {@code
     *     false}.
     */
    public SsoChangeLoginUrlType getSsoChangeLoginUrlValue() {
        if (this._tag != Tag.SSO_CHANGE_LOGIN_URL) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_CHANGE_LOGIN_URL, but was Tag." + this._tag.name());
        }
        return ssoChangeLoginUrlValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_CHANGE_LOGOUT_URL}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_CHANGE_LOGOUT_URL}, {@code false} otherwise.
     */
    public boolean isSsoChangeLogoutUrl() {
        return this._tag == Tag.SSO_CHANGE_LOGOUT_URL;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SSO_CHANGE_LOGOUT_URL}.
     *
     * <p> (sso) Changed sign-out URL for SSO </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SSO_CHANGE_LOGOUT_URL}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType ssoChangeLogoutUrl(SsoChangeLogoutUrlType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSsoChangeLogoutUrl(Tag.SSO_CHANGE_LOGOUT_URL, value);
    }

    /**
     * (sso) Changed sign-out URL for SSO
     *
     * <p> This instance must be tagged as {@link Tag#SSO_CHANGE_LOGOUT_URL}.
     * </p>
     *
     * @return The {@link SsoChangeLogoutUrlType} value associated with this
     *     instance if {@link #isSsoChangeLogoutUrl} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoChangeLogoutUrl} is {@code
     *     false}.
     */
    public SsoChangeLogoutUrlType getSsoChangeLogoutUrlValue() {
        if (this._tag != Tag.SSO_CHANGE_LOGOUT_URL) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_CHANGE_LOGOUT_URL, but was Tag." + this._tag.name());
        }
        return ssoChangeLogoutUrlValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_CHANGE_SAML_IDENTITY_MODE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_CHANGE_SAML_IDENTITY_MODE}, {@code false} otherwise.
     */
    public boolean isSsoChangeSamlIdentityMode() {
        return this._tag == Tag.SSO_CHANGE_SAML_IDENTITY_MODE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SSO_CHANGE_SAML_IDENTITY_MODE}.
     *
     * <p> (sso) Changed SAML identity mode for SSO </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SSO_CHANGE_SAML_IDENTITY_MODE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType ssoChangeSamlIdentityMode(SsoChangeSamlIdentityModeType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSsoChangeSamlIdentityMode(Tag.SSO_CHANGE_SAML_IDENTITY_MODE, value);
    }

    /**
     * (sso) Changed SAML identity mode for SSO
     *
     * <p> This instance must be tagged as {@link
     * Tag#SSO_CHANGE_SAML_IDENTITY_MODE}. </p>
     *
     * @return The {@link SsoChangeSamlIdentityModeType} value associated with
     *     this instance if {@link #isSsoChangeSamlIdentityMode} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isSsoChangeSamlIdentityMode} is
     *     {@code false}.
     */
    public SsoChangeSamlIdentityModeType getSsoChangeSamlIdentityModeValue() {
        if (this._tag != Tag.SSO_CHANGE_SAML_IDENTITY_MODE) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_CHANGE_SAML_IDENTITY_MODE, but was Tag." + this._tag.name());
        }
        return ssoChangeSamlIdentityModeValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_REMOVE_CERT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_REMOVE_CERT}, {@code false} otherwise.
     */
    public boolean isSsoRemoveCert() {
        return this._tag == Tag.SSO_REMOVE_CERT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SSO_REMOVE_CERT}.
     *
     * <p> (sso) Removed X.509 certificate for SSO </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SSO_REMOVE_CERT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType ssoRemoveCert(SsoRemoveCertType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSsoRemoveCert(Tag.SSO_REMOVE_CERT, value);
    }

    /**
     * (sso) Removed X.509 certificate for SSO
     *
     * <p> This instance must be tagged as {@link Tag#SSO_REMOVE_CERT}. </p>
     *
     * @return The {@link SsoRemoveCertType} value associated with this instance
     *     if {@link #isSsoRemoveCert} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoRemoveCert} is {@code
     *     false}.
     */
    public SsoRemoveCertType getSsoRemoveCertValue() {
        if (this._tag != Tag.SSO_REMOVE_CERT) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_REMOVE_CERT, but was Tag." + this._tag.name());
        }
        return ssoRemoveCertValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_REMOVE_LOGIN_URL}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_REMOVE_LOGIN_URL}, {@code false} otherwise.
     */
    public boolean isSsoRemoveLoginUrl() {
        return this._tag == Tag.SSO_REMOVE_LOGIN_URL;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SSO_REMOVE_LOGIN_URL}.
     *
     * <p> (sso) Removed sign-in URL for SSO </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SSO_REMOVE_LOGIN_URL}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType ssoRemoveLoginUrl(SsoRemoveLoginUrlType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSsoRemoveLoginUrl(Tag.SSO_REMOVE_LOGIN_URL, value);
    }

    /**
     * (sso) Removed sign-in URL for SSO
     *
     * <p> This instance must be tagged as {@link Tag#SSO_REMOVE_LOGIN_URL}.
     * </p>
     *
     * @return The {@link SsoRemoveLoginUrlType} value associated with this
     *     instance if {@link #isSsoRemoveLoginUrl} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoRemoveLoginUrl} is {@code
     *     false}.
     */
    public SsoRemoveLoginUrlType getSsoRemoveLoginUrlValue() {
        if (this._tag != Tag.SSO_REMOVE_LOGIN_URL) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_REMOVE_LOGIN_URL, but was Tag." + this._tag.name());
        }
        return ssoRemoveLoginUrlValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_REMOVE_LOGOUT_URL}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_REMOVE_LOGOUT_URL}, {@code false} otherwise.
     */
    public boolean isSsoRemoveLogoutUrl() {
        return this._tag == Tag.SSO_REMOVE_LOGOUT_URL;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SSO_REMOVE_LOGOUT_URL}.
     *
     * <p> (sso) Removed sign-out URL for SSO </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SSO_REMOVE_LOGOUT_URL}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType ssoRemoveLogoutUrl(SsoRemoveLogoutUrlType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSsoRemoveLogoutUrl(Tag.SSO_REMOVE_LOGOUT_URL, value);
    }

    /**
     * (sso) Removed sign-out URL for SSO
     *
     * <p> This instance must be tagged as {@link Tag#SSO_REMOVE_LOGOUT_URL}.
     * </p>
     *
     * @return The {@link SsoRemoveLogoutUrlType} value associated with this
     *     instance if {@link #isSsoRemoveLogoutUrl} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoRemoveLogoutUrl} is {@code
     *     false}.
     */
    public SsoRemoveLogoutUrlType getSsoRemoveLogoutUrlValue() {
        if (this._tag != Tag.SSO_REMOVE_LOGOUT_URL) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_REMOVE_LOGOUT_URL, but was Tag." + this._tag.name());
        }
        return ssoRemoveLogoutUrlValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_FOLDER_CHANGE_STATUS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_FOLDER_CHANGE_STATUS}, {@code false} otherwise.
     */
    public boolean isTeamFolderChangeStatus() {
        return this._tag == Tag.TEAM_FOLDER_CHANGE_STATUS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_FOLDER_CHANGE_STATUS}.
     *
     * <p> (team_folders) Changed archival status of team folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_FOLDER_CHANGE_STATUS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamFolderChangeStatus(TeamFolderChangeStatusType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamFolderChangeStatus(Tag.TEAM_FOLDER_CHANGE_STATUS, value);
    }

    /**
     * (team_folders) Changed archival status of team folder
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_FOLDER_CHANGE_STATUS}. </p>
     *
     * @return The {@link TeamFolderChangeStatusType} value associated with this
     *     instance if {@link #isTeamFolderChangeStatus} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamFolderChangeStatus} is
     *     {@code false}.
     */
    public TeamFolderChangeStatusType getTeamFolderChangeStatusValue() {
        if (this._tag != Tag.TEAM_FOLDER_CHANGE_STATUS) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_FOLDER_CHANGE_STATUS, but was Tag." + this._tag.name());
        }
        return teamFolderChangeStatusValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_FOLDER_CREATE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_FOLDER_CREATE}, {@code false} otherwise.
     */
    public boolean isTeamFolderCreate() {
        return this._tag == Tag.TEAM_FOLDER_CREATE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_FOLDER_CREATE}.
     *
     * <p> (team_folders) Created team folder in active status </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_FOLDER_CREATE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamFolderCreate(TeamFolderCreateType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamFolderCreate(Tag.TEAM_FOLDER_CREATE, value);
    }

    /**
     * (team_folders) Created team folder in active status
     *
     * <p> This instance must be tagged as {@link Tag#TEAM_FOLDER_CREATE}. </p>
     *
     * @return The {@link TeamFolderCreateType} value associated with this
     *     instance if {@link #isTeamFolderCreate} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamFolderCreate} is {@code
     *     false}.
     */
    public TeamFolderCreateType getTeamFolderCreateValue() {
        if (this._tag != Tag.TEAM_FOLDER_CREATE) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_FOLDER_CREATE, but was Tag." + this._tag.name());
        }
        return teamFolderCreateValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_FOLDER_DOWNGRADE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_FOLDER_DOWNGRADE}, {@code false} otherwise.
     */
    public boolean isTeamFolderDowngrade() {
        return this._tag == Tag.TEAM_FOLDER_DOWNGRADE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_FOLDER_DOWNGRADE}.
     *
     * <p> (team_folders) Downgraded team folder to regular shared folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_FOLDER_DOWNGRADE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamFolderDowngrade(TeamFolderDowngradeType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamFolderDowngrade(Tag.TEAM_FOLDER_DOWNGRADE, value);
    }

    /**
     * (team_folders) Downgraded team folder to regular shared folder
     *
     * <p> This instance must be tagged as {@link Tag#TEAM_FOLDER_DOWNGRADE}.
     * </p>
     *
     * @return The {@link TeamFolderDowngradeType} value associated with this
     *     instance if {@link #isTeamFolderDowngrade} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamFolderDowngrade} is
     *     {@code false}.
     */
    public TeamFolderDowngradeType getTeamFolderDowngradeValue() {
        if (this._tag != Tag.TEAM_FOLDER_DOWNGRADE) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_FOLDER_DOWNGRADE, but was Tag." + this._tag.name());
        }
        return teamFolderDowngradeValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_FOLDER_PERMANENTLY_DELETE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_FOLDER_PERMANENTLY_DELETE}, {@code false} otherwise.
     */
    public boolean isTeamFolderPermanentlyDelete() {
        return this._tag == Tag.TEAM_FOLDER_PERMANENTLY_DELETE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_FOLDER_PERMANENTLY_DELETE}.
     *
     * <p> (team_folders) Permanently deleted archived team folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_FOLDER_PERMANENTLY_DELETE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamFolderPermanentlyDelete(TeamFolderPermanentlyDeleteType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamFolderPermanentlyDelete(Tag.TEAM_FOLDER_PERMANENTLY_DELETE, value);
    }

    /**
     * (team_folders) Permanently deleted archived team folder
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_FOLDER_PERMANENTLY_DELETE}. </p>
     *
     * @return The {@link TeamFolderPermanentlyDeleteType} value associated with
     *     this instance if {@link #isTeamFolderPermanentlyDelete} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isTeamFolderPermanentlyDelete}
     *     is {@code false}.
     */
    public TeamFolderPermanentlyDeleteType getTeamFolderPermanentlyDeleteValue() {
        if (this._tag != Tag.TEAM_FOLDER_PERMANENTLY_DELETE) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_FOLDER_PERMANENTLY_DELETE, but was Tag." + this._tag.name());
        }
        return teamFolderPermanentlyDeleteValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_FOLDER_RENAME}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_FOLDER_RENAME}, {@code false} otherwise.
     */
    public boolean isTeamFolderRename() {
        return this._tag == Tag.TEAM_FOLDER_RENAME;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_FOLDER_RENAME}.
     *
     * <p> (team_folders) Renamed active/archived team folder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_FOLDER_RENAME}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamFolderRename(TeamFolderRenameType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamFolderRename(Tag.TEAM_FOLDER_RENAME, value);
    }

    /**
     * (team_folders) Renamed active/archived team folder
     *
     * <p> This instance must be tagged as {@link Tag#TEAM_FOLDER_RENAME}. </p>
     *
     * @return The {@link TeamFolderRenameType} value associated with this
     *     instance if {@link #isTeamFolderRename} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamFolderRename} is {@code
     *     false}.
     */
    public TeamFolderRenameType getTeamFolderRenameValue() {
        if (this._tag != Tag.TEAM_FOLDER_RENAME) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_FOLDER_RENAME, but was Tag." + this._tag.name());
        }
        return teamFolderRenameValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED}, {@code false} otherwise.
     */
    public boolean isTeamSelectiveSyncSettingsChanged() {
        return this._tag == Tag.TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED}.
     *
     * <p> (team_folders) Changed sync default </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamSelectiveSyncSettingsChanged(TeamSelectiveSyncSettingsChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamSelectiveSyncSettingsChanged(Tag.TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED, value);
    }

    /**
     * (team_folders) Changed sync default
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED}. </p>
     *
     * @return The {@link TeamSelectiveSyncSettingsChangedType} value associated
     *     with this instance if {@link #isTeamSelectiveSyncSettingsChanged} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamSelectiveSyncSettingsChanged} is {@code false}.
     */
    public TeamSelectiveSyncSettingsChangedType getTeamSelectiveSyncSettingsChangedValue() {
        if (this._tag != Tag.TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED, but was Tag." + this._tag.name());
        }
        return teamSelectiveSyncSettingsChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ACCOUNT_CAPTURE_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ACCOUNT_CAPTURE_CHANGE_POLICY}, {@code false} otherwise.
     */
    public boolean isAccountCaptureChangePolicy() {
        return this._tag == Tag.ACCOUNT_CAPTURE_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#ACCOUNT_CAPTURE_CHANGE_POLICY}.
     *
     * <p> (team_policies) Changed account capture setting on team domain </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#ACCOUNT_CAPTURE_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType accountCaptureChangePolicy(AccountCaptureChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndAccountCaptureChangePolicy(Tag.ACCOUNT_CAPTURE_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Changed account capture setting on team domain
     *
     * <p> This instance must be tagged as {@link
     * Tag#ACCOUNT_CAPTURE_CHANGE_POLICY}. </p>
     *
     * @return The {@link AccountCaptureChangePolicyType} value associated with
     *     this instance if {@link #isAccountCaptureChangePolicy} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isAccountCaptureChangePolicy}
     *     is {@code false}.
     */
    public AccountCaptureChangePolicyType getAccountCaptureChangePolicyValue() {
        if (this._tag != Tag.ACCOUNT_CAPTURE_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.ACCOUNT_CAPTURE_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return accountCaptureChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ADMIN_EMAIL_REMINDERS_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ADMIN_EMAIL_REMINDERS_CHANGED}, {@code false} otherwise.
     */
    public boolean isAdminEmailRemindersChanged() {
        return this._tag == Tag.ADMIN_EMAIL_REMINDERS_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#ADMIN_EMAIL_REMINDERS_CHANGED}.
     *
     * <p> (team_policies) Changed admin reminder settings for requests to join
     * the team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#ADMIN_EMAIL_REMINDERS_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType adminEmailRemindersChanged(AdminEmailRemindersChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndAdminEmailRemindersChanged(Tag.ADMIN_EMAIL_REMINDERS_CHANGED, value);
    }

    /**
     * (team_policies) Changed admin reminder settings for requests to join the
     * team
     *
     * <p> This instance must be tagged as {@link
     * Tag#ADMIN_EMAIL_REMINDERS_CHANGED}. </p>
     *
     * @return The {@link AdminEmailRemindersChangedType} value associated with
     *     this instance if {@link #isAdminEmailRemindersChanged} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isAdminEmailRemindersChanged}
     *     is {@code false}.
     */
    public AdminEmailRemindersChangedType getAdminEmailRemindersChangedValue() {
        if (this._tag != Tag.ADMIN_EMAIL_REMINDERS_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.ADMIN_EMAIL_REMINDERS_CHANGED, but was Tag." + this._tag.name());
        }
        return adminEmailRemindersChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ALLOW_DOWNLOAD_DISABLED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ALLOW_DOWNLOAD_DISABLED}, {@code false} otherwise.
     */
    public boolean isAllowDownloadDisabled() {
        return this._tag == Tag.ALLOW_DOWNLOAD_DISABLED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#ALLOW_DOWNLOAD_DISABLED}.
     *
     * <p> (team_policies) Disabled downloads (deprecated, no longer logged)
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#ALLOW_DOWNLOAD_DISABLED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType allowDownloadDisabled(AllowDownloadDisabledType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndAllowDownloadDisabled(Tag.ALLOW_DOWNLOAD_DISABLED, value);
    }

    /**
     * (team_policies) Disabled downloads (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#ALLOW_DOWNLOAD_DISABLED}.
     * </p>
     *
     * @return The {@link AllowDownloadDisabledType} value associated with this
     *     instance if {@link #isAllowDownloadDisabled} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isAllowDownloadDisabled} is
     *     {@code false}.
     */
    public AllowDownloadDisabledType getAllowDownloadDisabledValue() {
        if (this._tag != Tag.ALLOW_DOWNLOAD_DISABLED) {
            throw new IllegalStateException("Invalid tag: required Tag.ALLOW_DOWNLOAD_DISABLED, but was Tag." + this._tag.name());
        }
        return allowDownloadDisabledValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ALLOW_DOWNLOAD_ENABLED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ALLOW_DOWNLOAD_ENABLED}, {@code false} otherwise.
     */
    public boolean isAllowDownloadEnabled() {
        return this._tag == Tag.ALLOW_DOWNLOAD_ENABLED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#ALLOW_DOWNLOAD_ENABLED}.
     *
     * <p> (team_policies) Enabled downloads (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#ALLOW_DOWNLOAD_ENABLED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType allowDownloadEnabled(AllowDownloadEnabledType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndAllowDownloadEnabled(Tag.ALLOW_DOWNLOAD_ENABLED, value);
    }

    /**
     * (team_policies) Enabled downloads (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link Tag#ALLOW_DOWNLOAD_ENABLED}.
     * </p>
     *
     * @return The {@link AllowDownloadEnabledType} value associated with this
     *     instance if {@link #isAllowDownloadEnabled} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isAllowDownloadEnabled} is
     *     {@code false}.
     */
    public AllowDownloadEnabledType getAllowDownloadEnabledValue() {
        if (this._tag != Tag.ALLOW_DOWNLOAD_ENABLED) {
            throw new IllegalStateException("Invalid tag: required Tag.ALLOW_DOWNLOAD_ENABLED, but was Tag." + this._tag.name());
        }
        return allowDownloadEnabledValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#APP_PERMISSIONS_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#APP_PERMISSIONS_CHANGED}, {@code false} otherwise.
     */
    public boolean isAppPermissionsChanged() {
        return this._tag == Tag.APP_PERMISSIONS_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#APP_PERMISSIONS_CHANGED}.
     *
     * <p> (team_policies) Changed app permissions </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#APP_PERMISSIONS_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType appPermissionsChanged(AppPermissionsChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndAppPermissionsChanged(Tag.APP_PERMISSIONS_CHANGED, value);
    }

    /**
     * (team_policies) Changed app permissions
     *
     * <p> This instance must be tagged as {@link Tag#APP_PERMISSIONS_CHANGED}.
     * </p>
     *
     * @return The {@link AppPermissionsChangedType} value associated with this
     *     instance if {@link #isAppPermissionsChanged} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isAppPermissionsChanged} is
     *     {@code false}.
     */
    public AppPermissionsChangedType getAppPermissionsChangedValue() {
        if (this._tag != Tag.APP_PERMISSIONS_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.APP_PERMISSIONS_CHANGED, but was Tag." + this._tag.name());
        }
        return appPermissionsChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#CAMERA_UPLOADS_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#CAMERA_UPLOADS_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isCameraUploadsPolicyChanged() {
        return this._tag == Tag.CAMERA_UPLOADS_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#CAMERA_UPLOADS_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed camera uploads setting for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#CAMERA_UPLOADS_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType cameraUploadsPolicyChanged(CameraUploadsPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndCameraUploadsPolicyChanged(Tag.CAMERA_UPLOADS_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed camera uploads setting for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#CAMERA_UPLOADS_POLICY_CHANGED}. </p>
     *
     * @return The {@link CameraUploadsPolicyChangedType} value associated with
     *     this instance if {@link #isCameraUploadsPolicyChanged} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isCameraUploadsPolicyChanged}
     *     is {@code false}.
     */
    public CameraUploadsPolicyChangedType getCameraUploadsPolicyChangedValue() {
        if (this._tag != Tag.CAMERA_UPLOADS_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.CAMERA_UPLOADS_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return cameraUploadsPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#CAPTURE_TRANSCRIPT_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#CAPTURE_TRANSCRIPT_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isCaptureTranscriptPolicyChanged() {
        return this._tag == Tag.CAPTURE_TRANSCRIPT_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#CAPTURE_TRANSCRIPT_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed Capture transcription policy for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#CAPTURE_TRANSCRIPT_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType captureTranscriptPolicyChanged(CaptureTranscriptPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndCaptureTranscriptPolicyChanged(Tag.CAPTURE_TRANSCRIPT_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed Capture transcription policy for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#CAPTURE_TRANSCRIPT_POLICY_CHANGED}. </p>
     *
     * @return The {@link CaptureTranscriptPolicyChangedType} value associated
     *     with this instance if {@link #isCaptureTranscriptPolicyChanged} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isCaptureTranscriptPolicyChanged} is {@code false}.
     */
    public CaptureTranscriptPolicyChangedType getCaptureTranscriptPolicyChangedValue() {
        if (this._tag != Tag.CAPTURE_TRANSCRIPT_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.CAPTURE_TRANSCRIPT_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return captureTranscriptPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#CLASSIFICATION_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#CLASSIFICATION_CHANGE_POLICY}, {@code false} otherwise.
     */
    public boolean isClassificationChangePolicy() {
        return this._tag == Tag.CLASSIFICATION_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#CLASSIFICATION_CHANGE_POLICY}.
     *
     * <p> (team_policies) Changed classification policy for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#CLASSIFICATION_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType classificationChangePolicy(ClassificationChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndClassificationChangePolicy(Tag.CLASSIFICATION_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Changed classification policy for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#CLASSIFICATION_CHANGE_POLICY}. </p>
     *
     * @return The {@link ClassificationChangePolicyType} value associated with
     *     this instance if {@link #isClassificationChangePolicy} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isClassificationChangePolicy}
     *     is {@code false}.
     */
    public ClassificationChangePolicyType getClassificationChangePolicyValue() {
        if (this._tag != Tag.CLASSIFICATION_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.CLASSIFICATION_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return classificationChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#COMPUTER_BACKUP_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#COMPUTER_BACKUP_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isComputerBackupPolicyChanged() {
        return this._tag == Tag.COMPUTER_BACKUP_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#COMPUTER_BACKUP_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed computer backup policy for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#COMPUTER_BACKUP_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType computerBackupPolicyChanged(ComputerBackupPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndComputerBackupPolicyChanged(Tag.COMPUTER_BACKUP_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed computer backup policy for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#COMPUTER_BACKUP_POLICY_CHANGED}. </p>
     *
     * @return The {@link ComputerBackupPolicyChangedType} value associated with
     *     this instance if {@link #isComputerBackupPolicyChanged} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isComputerBackupPolicyChanged}
     *     is {@code false}.
     */
    public ComputerBackupPolicyChangedType getComputerBackupPolicyChangedValue() {
        if (this._tag != Tag.COMPUTER_BACKUP_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.COMPUTER_BACKUP_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return computerBackupPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#CONTENT_ADMINISTRATION_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#CONTENT_ADMINISTRATION_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isContentAdministrationPolicyChanged() {
        return this._tag == Tag.CONTENT_ADMINISTRATION_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#CONTENT_ADMINISTRATION_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed content management setting </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#CONTENT_ADMINISTRATION_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType contentAdministrationPolicyChanged(ContentAdministrationPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndContentAdministrationPolicyChanged(Tag.CONTENT_ADMINISTRATION_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed content management setting
     *
     * <p> This instance must be tagged as {@link
     * Tag#CONTENT_ADMINISTRATION_POLICY_CHANGED}. </p>
     *
     * @return The {@link ContentAdministrationPolicyChangedType} value
     *     associated with this instance if {@link
     *     #isContentAdministrationPolicyChanged} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isContentAdministrationPolicyChanged} is {@code false}.
     */
    public ContentAdministrationPolicyChangedType getContentAdministrationPolicyChangedValue() {
        if (this._tag != Tag.CONTENT_ADMINISTRATION_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.CONTENT_ADMINISTRATION_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return contentAdministrationPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY}, {@code false}
     *     otherwise.
     */
    public boolean isDataPlacementRestrictionChangePolicy() {
        return this._tag == Tag.DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY}.
     *
     * <p> (team_policies) Set restrictions on data center locations where team
     * data resides </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType dataPlacementRestrictionChangePolicy(DataPlacementRestrictionChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDataPlacementRestrictionChangePolicy(Tag.DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Set restrictions on data center locations where team data
     * resides
     *
     * <p> This instance must be tagged as {@link
     * Tag#DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY}. </p>
     *
     * @return The {@link DataPlacementRestrictionChangePolicyType} value
     *     associated with this instance if {@link
     *     #isDataPlacementRestrictionChangePolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDataPlacementRestrictionChangePolicy} is {@code false}.
     */
    public DataPlacementRestrictionChangePolicyType getDataPlacementRestrictionChangePolicyValue() {
        if (this._tag != Tag.DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return dataPlacementRestrictionChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY}, {@code false}
     *     otherwise.
     */
    public boolean isDataPlacementRestrictionSatisfyPolicy() {
        return this._tag == Tag.DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY}.
     *
     * <p> (team_policies) Completed restrictions on data center locations where
     * team data resides </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType dataPlacementRestrictionSatisfyPolicy(DataPlacementRestrictionSatisfyPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDataPlacementRestrictionSatisfyPolicy(Tag.DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY, value);
    }

    /**
     * (team_policies) Completed restrictions on data center locations where
     * team data resides
     *
     * <p> This instance must be tagged as {@link
     * Tag#DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY}. </p>
     *
     * @return The {@link DataPlacementRestrictionSatisfyPolicyType} value
     *     associated with this instance if {@link
     *     #isDataPlacementRestrictionSatisfyPolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDataPlacementRestrictionSatisfyPolicy} is {@code false}.
     */
    public DataPlacementRestrictionSatisfyPolicyType getDataPlacementRestrictionSatisfyPolicyValue() {
        if (this._tag != Tag.DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY, but was Tag." + this._tag.name());
        }
        return dataPlacementRestrictionSatisfyPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_APPROVALS_ADD_EXCEPTION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_APPROVALS_ADD_EXCEPTION}, {@code false} otherwise.
     */
    public boolean isDeviceApprovalsAddException() {
        return this._tag == Tag.DEVICE_APPROVALS_ADD_EXCEPTION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DEVICE_APPROVALS_ADD_EXCEPTION}.
     *
     * <p> (team_policies) Added members to device approvals exception list </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DEVICE_APPROVALS_ADD_EXCEPTION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType deviceApprovalsAddException(DeviceApprovalsAddExceptionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDeviceApprovalsAddException(Tag.DEVICE_APPROVALS_ADD_EXCEPTION, value);
    }

    /**
     * (team_policies) Added members to device approvals exception list
     *
     * <p> This instance must be tagged as {@link
     * Tag#DEVICE_APPROVALS_ADD_EXCEPTION}. </p>
     *
     * @return The {@link DeviceApprovalsAddExceptionType} value associated with
     *     this instance if {@link #isDeviceApprovalsAddException} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isDeviceApprovalsAddException}
     *     is {@code false}.
     */
    public DeviceApprovalsAddExceptionType getDeviceApprovalsAddExceptionValue() {
        if (this._tag != Tag.DEVICE_APPROVALS_ADD_EXCEPTION) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_APPROVALS_ADD_EXCEPTION, but was Tag." + this._tag.name());
        }
        return deviceApprovalsAddExceptionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY}, {@code false} otherwise.
     */
    public boolean isDeviceApprovalsChangeDesktopPolicy() {
        return this._tag == Tag.DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY}.
     *
     * <p> (team_policies) Set/removed limit on number of computers member can
     * link to team Dropbox account </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType deviceApprovalsChangeDesktopPolicy(DeviceApprovalsChangeDesktopPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDeviceApprovalsChangeDesktopPolicy(Tag.DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY, value);
    }

    /**
     * (team_policies) Set/removed limit on number of computers member can link
     * to team Dropbox account
     *
     * <p> This instance must be tagged as {@link
     * Tag#DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY}. </p>
     *
     * @return The {@link DeviceApprovalsChangeDesktopPolicyType} value
     *     associated with this instance if {@link
     *     #isDeviceApprovalsChangeDesktopPolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDeviceApprovalsChangeDesktopPolicy} is {@code false}.
     */
    public DeviceApprovalsChangeDesktopPolicyType getDeviceApprovalsChangeDesktopPolicyValue() {
        if (this._tag != Tag.DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY, but was Tag." + this._tag.name());
        }
        return deviceApprovalsChangeDesktopPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_APPROVALS_CHANGE_MOBILE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_APPROVALS_CHANGE_MOBILE_POLICY}, {@code false} otherwise.
     */
    public boolean isDeviceApprovalsChangeMobilePolicy() {
        return this._tag == Tag.DEVICE_APPROVALS_CHANGE_MOBILE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DEVICE_APPROVALS_CHANGE_MOBILE_POLICY}.
     *
     * <p> (team_policies) Set/removed limit on number of mobile devices member
     * can link to team Dropbox account </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DEVICE_APPROVALS_CHANGE_MOBILE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType deviceApprovalsChangeMobilePolicy(DeviceApprovalsChangeMobilePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDeviceApprovalsChangeMobilePolicy(Tag.DEVICE_APPROVALS_CHANGE_MOBILE_POLICY, value);
    }

    /**
     * (team_policies) Set/removed limit on number of mobile devices member can
     * link to team Dropbox account
     *
     * <p> This instance must be tagged as {@link
     * Tag#DEVICE_APPROVALS_CHANGE_MOBILE_POLICY}. </p>
     *
     * @return The {@link DeviceApprovalsChangeMobilePolicyType} value
     *     associated with this instance if {@link
     *     #isDeviceApprovalsChangeMobilePolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDeviceApprovalsChangeMobilePolicy} is {@code false}.
     */
    public DeviceApprovalsChangeMobilePolicyType getDeviceApprovalsChangeMobilePolicyValue() {
        if (this._tag != Tag.DEVICE_APPROVALS_CHANGE_MOBILE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_APPROVALS_CHANGE_MOBILE_POLICY, but was Tag." + this._tag.name());
        }
        return deviceApprovalsChangeMobilePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION}, {@code false} otherwise.
     */
    public boolean isDeviceApprovalsChangeOverageAction() {
        return this._tag == Tag.DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION}.
     *
     * <p> (team_policies) Changed device approvals setting when member is over
     * limit </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType deviceApprovalsChangeOverageAction(DeviceApprovalsChangeOverageActionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDeviceApprovalsChangeOverageAction(Tag.DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION, value);
    }

    /**
     * (team_policies) Changed device approvals setting when member is over
     * limit
     *
     * <p> This instance must be tagged as {@link
     * Tag#DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION}. </p>
     *
     * @return The {@link DeviceApprovalsChangeOverageActionType} value
     *     associated with this instance if {@link
     *     #isDeviceApprovalsChangeOverageAction} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDeviceApprovalsChangeOverageAction} is {@code false}.
     */
    public DeviceApprovalsChangeOverageActionType getDeviceApprovalsChangeOverageActionValue() {
        if (this._tag != Tag.DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION, but was Tag." + this._tag.name());
        }
        return deviceApprovalsChangeOverageActionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_APPROVALS_CHANGE_UNLINK_ACTION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_APPROVALS_CHANGE_UNLINK_ACTION}, {@code false} otherwise.
     */
    public boolean isDeviceApprovalsChangeUnlinkAction() {
        return this._tag == Tag.DEVICE_APPROVALS_CHANGE_UNLINK_ACTION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DEVICE_APPROVALS_CHANGE_UNLINK_ACTION}.
     *
     * <p> (team_policies) Changed device approvals setting when member unlinks
     * approved device </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DEVICE_APPROVALS_CHANGE_UNLINK_ACTION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType deviceApprovalsChangeUnlinkAction(DeviceApprovalsChangeUnlinkActionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDeviceApprovalsChangeUnlinkAction(Tag.DEVICE_APPROVALS_CHANGE_UNLINK_ACTION, value);
    }

    /**
     * (team_policies) Changed device approvals setting when member unlinks
     * approved device
     *
     * <p> This instance must be tagged as {@link
     * Tag#DEVICE_APPROVALS_CHANGE_UNLINK_ACTION}. </p>
     *
     * @return The {@link DeviceApprovalsChangeUnlinkActionType} value
     *     associated with this instance if {@link
     *     #isDeviceApprovalsChangeUnlinkAction} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDeviceApprovalsChangeUnlinkAction} is {@code false}.
     */
    public DeviceApprovalsChangeUnlinkActionType getDeviceApprovalsChangeUnlinkActionValue() {
        if (this._tag != Tag.DEVICE_APPROVALS_CHANGE_UNLINK_ACTION) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_APPROVALS_CHANGE_UNLINK_ACTION, but was Tag." + this._tag.name());
        }
        return deviceApprovalsChangeUnlinkActionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DEVICE_APPROVALS_REMOVE_EXCEPTION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DEVICE_APPROVALS_REMOVE_EXCEPTION}, {@code false} otherwise.
     */
    public boolean isDeviceApprovalsRemoveException() {
        return this._tag == Tag.DEVICE_APPROVALS_REMOVE_EXCEPTION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DEVICE_APPROVALS_REMOVE_EXCEPTION}.
     *
     * <p> (team_policies) Removed members from device approvals exception list
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DEVICE_APPROVALS_REMOVE_EXCEPTION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType deviceApprovalsRemoveException(DeviceApprovalsRemoveExceptionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDeviceApprovalsRemoveException(Tag.DEVICE_APPROVALS_REMOVE_EXCEPTION, value);
    }

    /**
     * (team_policies) Removed members from device approvals exception list
     *
     * <p> This instance must be tagged as {@link
     * Tag#DEVICE_APPROVALS_REMOVE_EXCEPTION}. </p>
     *
     * @return The {@link DeviceApprovalsRemoveExceptionType} value associated
     *     with this instance if {@link #isDeviceApprovalsRemoveException} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDeviceApprovalsRemoveException} is {@code false}.
     */
    public DeviceApprovalsRemoveExceptionType getDeviceApprovalsRemoveExceptionValue() {
        if (this._tag != Tag.DEVICE_APPROVALS_REMOVE_EXCEPTION) {
            throw new IllegalStateException("Invalid tag: required Tag.DEVICE_APPROVALS_REMOVE_EXCEPTION, but was Tag." + this._tag.name());
        }
        return deviceApprovalsRemoveExceptionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DIRECTORY_RESTRICTIONS_ADD_MEMBERS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DIRECTORY_RESTRICTIONS_ADD_MEMBERS}, {@code false} otherwise.
     */
    public boolean isDirectoryRestrictionsAddMembers() {
        return this._tag == Tag.DIRECTORY_RESTRICTIONS_ADD_MEMBERS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DIRECTORY_RESTRICTIONS_ADD_MEMBERS}.
     *
     * <p> (team_policies) Added members to directory restrictions list </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DIRECTORY_RESTRICTIONS_ADD_MEMBERS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType directoryRestrictionsAddMembers(DirectoryRestrictionsAddMembersType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDirectoryRestrictionsAddMembers(Tag.DIRECTORY_RESTRICTIONS_ADD_MEMBERS, value);
    }

    /**
     * (team_policies) Added members to directory restrictions list
     *
     * <p> This instance must be tagged as {@link
     * Tag#DIRECTORY_RESTRICTIONS_ADD_MEMBERS}. </p>
     *
     * @return The {@link DirectoryRestrictionsAddMembersType} value associated
     *     with this instance if {@link #isDirectoryRestrictionsAddMembers} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDirectoryRestrictionsAddMembers} is {@code false}.
     */
    public DirectoryRestrictionsAddMembersType getDirectoryRestrictionsAddMembersValue() {
        if (this._tag != Tag.DIRECTORY_RESTRICTIONS_ADD_MEMBERS) {
            throw new IllegalStateException("Invalid tag: required Tag.DIRECTORY_RESTRICTIONS_ADD_MEMBERS, but was Tag." + this._tag.name());
        }
        return directoryRestrictionsAddMembersValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS}, {@code false} otherwise.
     */
    public boolean isDirectoryRestrictionsRemoveMembers() {
        return this._tag == Tag.DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS}.
     *
     * <p> (team_policies) Removed members from directory restrictions list </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType directoryRestrictionsRemoveMembers(DirectoryRestrictionsRemoveMembersType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDirectoryRestrictionsRemoveMembers(Tag.DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS, value);
    }

    /**
     * (team_policies) Removed members from directory restrictions list
     *
     * <p> This instance must be tagged as {@link
     * Tag#DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS}. </p>
     *
     * @return The {@link DirectoryRestrictionsRemoveMembersType} value
     *     associated with this instance if {@link
     *     #isDirectoryRestrictionsRemoveMembers} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDirectoryRestrictionsRemoveMembers} is {@code false}.
     */
    public DirectoryRestrictionsRemoveMembersType getDirectoryRestrictionsRemoveMembersValue() {
        if (this._tag != Tag.DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS) {
            throw new IllegalStateException("Invalid tag: required Tag.DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS, but was Tag." + this._tag.name());
        }
        return directoryRestrictionsRemoveMembersValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DROPBOX_PASSWORDS_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DROPBOX_PASSWORDS_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isDropboxPasswordsPolicyChanged() {
        return this._tag == Tag.DROPBOX_PASSWORDS_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DROPBOX_PASSWORDS_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed Dropbox Passwords policy for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DROPBOX_PASSWORDS_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType dropboxPasswordsPolicyChanged(DropboxPasswordsPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDropboxPasswordsPolicyChanged(Tag.DROPBOX_PASSWORDS_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed Dropbox Passwords policy for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#DROPBOX_PASSWORDS_POLICY_CHANGED}. </p>
     *
     * @return The {@link DropboxPasswordsPolicyChangedType} value associated
     *     with this instance if {@link #isDropboxPasswordsPolicyChanged} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDropboxPasswordsPolicyChanged} is {@code false}.
     */
    public DropboxPasswordsPolicyChangedType getDropboxPasswordsPolicyChangedValue() {
        if (this._tag != Tag.DROPBOX_PASSWORDS_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.DROPBOX_PASSWORDS_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return dropboxPasswordsPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EMAIL_INGEST_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EMAIL_INGEST_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isEmailIngestPolicyChanged() {
        return this._tag == Tag.EMAIL_INGEST_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#EMAIL_INGEST_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed email to Dropbox policy for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#EMAIL_INGEST_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType emailIngestPolicyChanged(EmailIngestPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndEmailIngestPolicyChanged(Tag.EMAIL_INGEST_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed email to Dropbox policy for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#EMAIL_INGEST_POLICY_CHANGED}. </p>
     *
     * @return The {@link EmailIngestPolicyChangedType} value associated with
     *     this instance if {@link #isEmailIngestPolicyChanged} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isEmailIngestPolicyChanged} is
     *     {@code false}.
     */
    public EmailIngestPolicyChangedType getEmailIngestPolicyChangedValue() {
        if (this._tag != Tag.EMAIL_INGEST_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.EMAIL_INGEST_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return emailIngestPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EMM_ADD_EXCEPTION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EMM_ADD_EXCEPTION}, {@code false} otherwise.
     */
    public boolean isEmmAddException() {
        return this._tag == Tag.EMM_ADD_EXCEPTION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#EMM_ADD_EXCEPTION}.
     *
     * <p> (team_policies) Added members to EMM exception list </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#EMM_ADD_EXCEPTION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType emmAddException(EmmAddExceptionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndEmmAddException(Tag.EMM_ADD_EXCEPTION, value);
    }

    /**
     * (team_policies) Added members to EMM exception list
     *
     * <p> This instance must be tagged as {@link Tag#EMM_ADD_EXCEPTION}. </p>
     *
     * @return The {@link EmmAddExceptionType} value associated with this
     *     instance if {@link #isEmmAddException} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isEmmAddException} is {@code
     *     false}.
     */
    public EmmAddExceptionType getEmmAddExceptionValue() {
        if (this._tag != Tag.EMM_ADD_EXCEPTION) {
            throw new IllegalStateException("Invalid tag: required Tag.EMM_ADD_EXCEPTION, but was Tag." + this._tag.name());
        }
        return emmAddExceptionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EMM_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EMM_CHANGE_POLICY}, {@code false} otherwise.
     */
    public boolean isEmmChangePolicy() {
        return this._tag == Tag.EMM_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#EMM_CHANGE_POLICY}.
     *
     * <p> (team_policies) Enabled/disabled enterprise mobility management for
     * members </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#EMM_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType emmChangePolicy(EmmChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndEmmChangePolicy(Tag.EMM_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Enabled/disabled enterprise mobility management for
     * members
     *
     * <p> This instance must be tagged as {@link Tag#EMM_CHANGE_POLICY}. </p>
     *
     * @return The {@link EmmChangePolicyType} value associated with this
     *     instance if {@link #isEmmChangePolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isEmmChangePolicy} is {@code
     *     false}.
     */
    public EmmChangePolicyType getEmmChangePolicyValue() {
        if (this._tag != Tag.EMM_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.EMM_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return emmChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EMM_REMOVE_EXCEPTION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EMM_REMOVE_EXCEPTION}, {@code false} otherwise.
     */
    public boolean isEmmRemoveException() {
        return this._tag == Tag.EMM_REMOVE_EXCEPTION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#EMM_REMOVE_EXCEPTION}.
     *
     * <p> (team_policies) Removed members from EMM exception list </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#EMM_REMOVE_EXCEPTION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType emmRemoveException(EmmRemoveExceptionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndEmmRemoveException(Tag.EMM_REMOVE_EXCEPTION, value);
    }

    /**
     * (team_policies) Removed members from EMM exception list
     *
     * <p> This instance must be tagged as {@link Tag#EMM_REMOVE_EXCEPTION}.
     * </p>
     *
     * @return The {@link EmmRemoveExceptionType} value associated with this
     *     instance if {@link #isEmmRemoveException} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isEmmRemoveException} is {@code
     *     false}.
     */
    public EmmRemoveExceptionType getEmmRemoveExceptionValue() {
        if (this._tag != Tag.EMM_REMOVE_EXCEPTION) {
            throw new IllegalStateException("Invalid tag: required Tag.EMM_REMOVE_EXCEPTION, but was Tag." + this._tag.name());
        }
        return emmRemoveExceptionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EXTENDED_VERSION_HISTORY_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EXTENDED_VERSION_HISTORY_CHANGE_POLICY}, {@code false} otherwise.
     */
    public boolean isExtendedVersionHistoryChangePolicy() {
        return this._tag == Tag.EXTENDED_VERSION_HISTORY_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#EXTENDED_VERSION_HISTORY_CHANGE_POLICY}.
     *
     * <p> (team_policies) Accepted/opted out of extended version history </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#EXTENDED_VERSION_HISTORY_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType extendedVersionHistoryChangePolicy(ExtendedVersionHistoryChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndExtendedVersionHistoryChangePolicy(Tag.EXTENDED_VERSION_HISTORY_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Accepted/opted out of extended version history
     *
     * <p> This instance must be tagged as {@link
     * Tag#EXTENDED_VERSION_HISTORY_CHANGE_POLICY}. </p>
     *
     * @return The {@link ExtendedVersionHistoryChangePolicyType} value
     *     associated with this instance if {@link
     *     #isExtendedVersionHistoryChangePolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isExtendedVersionHistoryChangePolicy} is {@code false}.
     */
    public ExtendedVersionHistoryChangePolicyType getExtendedVersionHistoryChangePolicyValue() {
        if (this._tag != Tag.EXTENDED_VERSION_HISTORY_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.EXTENDED_VERSION_HISTORY_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return extendedVersionHistoryChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isExternalDriveBackupPolicyChanged() {
        return this._tag == Tag.EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed external drive backup policy for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType externalDriveBackupPolicyChanged(ExternalDriveBackupPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndExternalDriveBackupPolicyChanged(Tag.EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed external drive backup policy for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED}. </p>
     *
     * @return The {@link ExternalDriveBackupPolicyChangedType} value associated
     *     with this instance if {@link #isExternalDriveBackupPolicyChanged} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isExternalDriveBackupPolicyChanged} is {@code false}.
     */
    public ExternalDriveBackupPolicyChangedType getExternalDriveBackupPolicyChangedValue() {
        if (this._tag != Tag.EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return externalDriveBackupPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_COMMENTS_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_COMMENTS_CHANGE_POLICY}, {@code false} otherwise.
     */
    public boolean isFileCommentsChangePolicy() {
        return this._tag == Tag.FILE_COMMENTS_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_COMMENTS_CHANGE_POLICY}.
     *
     * <p> (team_policies) Enabled/disabled commenting on team files </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_COMMENTS_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileCommentsChangePolicy(FileCommentsChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileCommentsChangePolicy(Tag.FILE_COMMENTS_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Enabled/disabled commenting on team files
     *
     * <p> This instance must be tagged as {@link
     * Tag#FILE_COMMENTS_CHANGE_POLICY}. </p>
     *
     * @return The {@link FileCommentsChangePolicyType} value associated with
     *     this instance if {@link #isFileCommentsChangePolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileCommentsChangePolicy} is
     *     {@code false}.
     */
    public FileCommentsChangePolicyType getFileCommentsChangePolicyValue() {
        if (this._tag != Tag.FILE_COMMENTS_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_COMMENTS_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return fileCommentsChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_LOCKING_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_LOCKING_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isFileLockingPolicyChanged() {
        return this._tag == Tag.FILE_LOCKING_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_LOCKING_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed file locking policy for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_LOCKING_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileLockingPolicyChanged(FileLockingPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileLockingPolicyChanged(Tag.FILE_LOCKING_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed file locking policy for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#FILE_LOCKING_POLICY_CHANGED}. </p>
     *
     * @return The {@link FileLockingPolicyChangedType} value associated with
     *     this instance if {@link #isFileLockingPolicyChanged} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileLockingPolicyChanged} is
     *     {@code false}.
     */
    public FileLockingPolicyChangedType getFileLockingPolicyChangedValue() {
        if (this._tag != Tag.FILE_LOCKING_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_LOCKING_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return fileLockingPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_PROVIDER_MIGRATION_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_PROVIDER_MIGRATION_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isFileProviderMigrationPolicyChanged() {
        return this._tag == Tag.FILE_PROVIDER_MIGRATION_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_PROVIDER_MIGRATION_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed File Provider Migration policy for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_PROVIDER_MIGRATION_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileProviderMigrationPolicyChanged(FileProviderMigrationPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileProviderMigrationPolicyChanged(Tag.FILE_PROVIDER_MIGRATION_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed File Provider Migration policy for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#FILE_PROVIDER_MIGRATION_POLICY_CHANGED}. </p>
     *
     * @return The {@link FileProviderMigrationPolicyChangedType} value
     *     associated with this instance if {@link
     *     #isFileProviderMigrationPolicyChanged} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFileProviderMigrationPolicyChanged} is {@code false}.
     */
    public FileProviderMigrationPolicyChangedType getFileProviderMigrationPolicyChangedValue() {
        if (this._tag != Tag.FILE_PROVIDER_MIGRATION_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_PROVIDER_MIGRATION_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return fileProviderMigrationPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_REQUESTS_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_REQUESTS_CHANGE_POLICY}, {@code false} otherwise.
     */
    public boolean isFileRequestsChangePolicy() {
        return this._tag == Tag.FILE_REQUESTS_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_REQUESTS_CHANGE_POLICY}.
     *
     * <p> (team_policies) Enabled/disabled file requests </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_REQUESTS_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileRequestsChangePolicy(FileRequestsChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileRequestsChangePolicy(Tag.FILE_REQUESTS_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Enabled/disabled file requests
     *
     * <p> This instance must be tagged as {@link
     * Tag#FILE_REQUESTS_CHANGE_POLICY}. </p>
     *
     * @return The {@link FileRequestsChangePolicyType} value associated with
     *     this instance if {@link #isFileRequestsChangePolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isFileRequestsChangePolicy} is
     *     {@code false}.
     */
    public FileRequestsChangePolicyType getFileRequestsChangePolicyValue() {
        if (this._tag != Tag.FILE_REQUESTS_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_REQUESTS_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return fileRequestsChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_REQUESTS_EMAILS_ENABLED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_REQUESTS_EMAILS_ENABLED}, {@code false} otherwise.
     */
    public boolean isFileRequestsEmailsEnabled() {
        return this._tag == Tag.FILE_REQUESTS_EMAILS_ENABLED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_REQUESTS_EMAILS_ENABLED}.
     *
     * <p> (team_policies) Enabled file request emails for everyone (deprecated,
     * no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_REQUESTS_EMAILS_ENABLED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileRequestsEmailsEnabled(FileRequestsEmailsEnabledType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileRequestsEmailsEnabled(Tag.FILE_REQUESTS_EMAILS_ENABLED, value);
    }

    /**
     * (team_policies) Enabled file request emails for everyone (deprecated, no
     * longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#FILE_REQUESTS_EMAILS_ENABLED}. </p>
     *
     * @return The {@link FileRequestsEmailsEnabledType} value associated with
     *     this instance if {@link #isFileRequestsEmailsEnabled} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isFileRequestsEmailsEnabled} is
     *     {@code false}.
     */
    public FileRequestsEmailsEnabledType getFileRequestsEmailsEnabledValue() {
        if (this._tag != Tag.FILE_REQUESTS_EMAILS_ENABLED) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_REQUESTS_EMAILS_ENABLED, but was Tag." + this._tag.name());
        }
        return fileRequestsEmailsEnabledValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY}, {@code false}
     *     otherwise.
     */
    public boolean isFileRequestsEmailsRestrictedToTeamOnly() {
        return this._tag == Tag.FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY}.
     *
     * <p> (team_policies) Enabled file request emails for team (deprecated, no
     * longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileRequestsEmailsRestrictedToTeamOnly(FileRequestsEmailsRestrictedToTeamOnlyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileRequestsEmailsRestrictedToTeamOnly(Tag.FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY, value);
    }

    /**
     * (team_policies) Enabled file request emails for team (deprecated, no
     * longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY}. </p>
     *
     * @return The {@link FileRequestsEmailsRestrictedToTeamOnlyType} value
     *     associated with this instance if {@link
     *     #isFileRequestsEmailsRestrictedToTeamOnly} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isFileRequestsEmailsRestrictedToTeamOnly} is {@code false}.
     */
    public FileRequestsEmailsRestrictedToTeamOnlyType getFileRequestsEmailsRestrictedToTeamOnlyValue() {
        if (this._tag != Tag.FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY, but was Tag." + this._tag.name());
        }
        return fileRequestsEmailsRestrictedToTeamOnlyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#FILE_TRANSFERS_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#FILE_TRANSFERS_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isFileTransfersPolicyChanged() {
        return this._tag == Tag.FILE_TRANSFERS_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#FILE_TRANSFERS_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed file transfers policy for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#FILE_TRANSFERS_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType fileTransfersPolicyChanged(FileTransfersPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndFileTransfersPolicyChanged(Tag.FILE_TRANSFERS_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed file transfers policy for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#FILE_TRANSFERS_POLICY_CHANGED}. </p>
     *
     * @return The {@link FileTransfersPolicyChangedType} value associated with
     *     this instance if {@link #isFileTransfersPolicyChanged} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isFileTransfersPolicyChanged}
     *     is {@code false}.
     */
    public FileTransfersPolicyChangedType getFileTransfersPolicyChangedValue() {
        if (this._tag != Tag.FILE_TRANSFERS_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.FILE_TRANSFERS_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return fileTransfersPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GOOGLE_SSO_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GOOGLE_SSO_CHANGE_POLICY}, {@code false} otherwise.
     */
    public boolean isGoogleSsoChangePolicy() {
        return this._tag == Tag.GOOGLE_SSO_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GOOGLE_SSO_CHANGE_POLICY}.
     *
     * <p> (team_policies) Enabled/disabled Google single sign-on for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GOOGLE_SSO_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType googleSsoChangePolicy(GoogleSsoChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGoogleSsoChangePolicy(Tag.GOOGLE_SSO_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Enabled/disabled Google single sign-on for team
     *
     * <p> This instance must be tagged as {@link Tag#GOOGLE_SSO_CHANGE_POLICY}.
     * </p>
     *
     * @return The {@link GoogleSsoChangePolicyType} value associated with this
     *     instance if {@link #isGoogleSsoChangePolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGoogleSsoChangePolicy} is
     *     {@code false}.
     */
    public GoogleSsoChangePolicyType getGoogleSsoChangePolicyValue() {
        if (this._tag != Tag.GOOGLE_SSO_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.GOOGLE_SSO_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return googleSsoChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GROUP_USER_MANAGEMENT_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GROUP_USER_MANAGEMENT_CHANGE_POLICY}, {@code false} otherwise.
     */
    public boolean isGroupUserManagementChangePolicy() {
        return this._tag == Tag.GROUP_USER_MANAGEMENT_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GROUP_USER_MANAGEMENT_CHANGE_POLICY}.
     *
     * <p> (team_policies) Changed who can create groups </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GROUP_USER_MANAGEMENT_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType groupUserManagementChangePolicy(GroupUserManagementChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGroupUserManagementChangePolicy(Tag.GROUP_USER_MANAGEMENT_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Changed who can create groups
     *
     * <p> This instance must be tagged as {@link
     * Tag#GROUP_USER_MANAGEMENT_CHANGE_POLICY}. </p>
     *
     * @return The {@link GroupUserManagementChangePolicyType} value associated
     *     with this instance if {@link #isGroupUserManagementChangePolicy} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isGroupUserManagementChangePolicy} is {@code false}.
     */
    public GroupUserManagementChangePolicyType getGroupUserManagementChangePolicyValue() {
        if (this._tag != Tag.GROUP_USER_MANAGEMENT_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.GROUP_USER_MANAGEMENT_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return groupUserManagementChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#INTEGRATION_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#INTEGRATION_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isIntegrationPolicyChanged() {
        return this._tag == Tag.INTEGRATION_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#INTEGRATION_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed integration policy for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#INTEGRATION_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType integrationPolicyChanged(IntegrationPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndIntegrationPolicyChanged(Tag.INTEGRATION_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed integration policy for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#INTEGRATION_POLICY_CHANGED}. </p>
     *
     * @return The {@link IntegrationPolicyChangedType} value associated with
     *     this instance if {@link #isIntegrationPolicyChanged} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isIntegrationPolicyChanged} is
     *     {@code false}.
     */
    public IntegrationPolicyChangedType getIntegrationPolicyChangedValue() {
        if (this._tag != Tag.INTEGRATION_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.INTEGRATION_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return integrationPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isInviteAcceptanceEmailPolicyChanged() {
        return this._tag == Tag.INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed invite accept email policy for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType inviteAcceptanceEmailPolicyChanged(InviteAcceptanceEmailPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndInviteAcceptanceEmailPolicyChanged(Tag.INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed invite accept email policy for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED}. </p>
     *
     * @return The {@link InviteAcceptanceEmailPolicyChangedType} value
     *     associated with this instance if {@link
     *     #isInviteAcceptanceEmailPolicyChanged} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isInviteAcceptanceEmailPolicyChanged} is {@code false}.
     */
    public InviteAcceptanceEmailPolicyChangedType getInviteAcceptanceEmailPolicyChangedValue() {
        if (this._tag != Tag.INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return inviteAcceptanceEmailPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_REQUESTS_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_REQUESTS_CHANGE_POLICY}, {@code false} otherwise.
     */
    public boolean isMemberRequestsChangePolicy() {
        return this._tag == Tag.MEMBER_REQUESTS_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_REQUESTS_CHANGE_POLICY}.
     *
     * <p> (team_policies) Changed whether users can find team when not invited
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_REQUESTS_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberRequestsChangePolicy(MemberRequestsChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberRequestsChangePolicy(Tag.MEMBER_REQUESTS_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Changed whether users can find team when not invited
     *
     * <p> This instance must be tagged as {@link
     * Tag#MEMBER_REQUESTS_CHANGE_POLICY}. </p>
     *
     * @return The {@link MemberRequestsChangePolicyType} value associated with
     *     this instance if {@link #isMemberRequestsChangePolicy} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isMemberRequestsChangePolicy}
     *     is {@code false}.
     */
    public MemberRequestsChangePolicyType getMemberRequestsChangePolicyValue() {
        if (this._tag != Tag.MEMBER_REQUESTS_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_REQUESTS_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return memberRequestsChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SEND_INVITE_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SEND_INVITE_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isMemberSendInvitePolicyChanged() {
        return this._tag == Tag.MEMBER_SEND_INVITE_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_SEND_INVITE_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed member send invite policy for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_SEND_INVITE_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberSendInvitePolicyChanged(MemberSendInvitePolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberSendInvitePolicyChanged(Tag.MEMBER_SEND_INVITE_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed member send invite policy for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#MEMBER_SEND_INVITE_POLICY_CHANGED}. </p>
     *
     * @return The {@link MemberSendInvitePolicyChangedType} value associated
     *     with this instance if {@link #isMemberSendInvitePolicyChanged} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberSendInvitePolicyChanged} is {@code false}.
     */
    public MemberSendInvitePolicyChangedType getMemberSendInvitePolicyChangedValue() {
        if (this._tag != Tag.MEMBER_SEND_INVITE_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SEND_INVITE_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return memberSendInvitePolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SPACE_LIMITS_ADD_EXCEPTION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SPACE_LIMITS_ADD_EXCEPTION}, {@code false} otherwise.
     */
    public boolean isMemberSpaceLimitsAddException() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_ADD_EXCEPTION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_SPACE_LIMITS_ADD_EXCEPTION}.
     *
     * <p> (team_policies) Added members to member space limit exception list
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_SPACE_LIMITS_ADD_EXCEPTION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberSpaceLimitsAddException(MemberSpaceLimitsAddExceptionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberSpaceLimitsAddException(Tag.MEMBER_SPACE_LIMITS_ADD_EXCEPTION, value);
    }

    /**
     * (team_policies) Added members to member space limit exception list
     *
     * <p> This instance must be tagged as {@link
     * Tag#MEMBER_SPACE_LIMITS_ADD_EXCEPTION}. </p>
     *
     * @return The {@link MemberSpaceLimitsAddExceptionType} value associated
     *     with this instance if {@link #isMemberSpaceLimitsAddException} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberSpaceLimitsAddException} is {@code false}.
     */
    public MemberSpaceLimitsAddExceptionType getMemberSpaceLimitsAddExceptionValue() {
        if (this._tag != Tag.MEMBER_SPACE_LIMITS_ADD_EXCEPTION) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_ADD_EXCEPTION, but was Tag." + this._tag.name());
        }
        return memberSpaceLimitsAddExceptionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY}, {@code false}
     *     otherwise.
     */
    public boolean isMemberSpaceLimitsChangeCapsTypePolicy() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY}.
     *
     * <p> (team_policies) Changed member space limit type for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberSpaceLimitsChangeCapsTypePolicy(MemberSpaceLimitsChangeCapsTypePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberSpaceLimitsChangeCapsTypePolicy(Tag.MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY, value);
    }

    /**
     * (team_policies) Changed member space limit type for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY}. </p>
     *
     * @return The {@link MemberSpaceLimitsChangeCapsTypePolicyType} value
     *     associated with this instance if {@link
     *     #isMemberSpaceLimitsChangeCapsTypePolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberSpaceLimitsChangeCapsTypePolicy} is {@code false}.
     */
    public MemberSpaceLimitsChangeCapsTypePolicyType getMemberSpaceLimitsChangeCapsTypePolicyValue() {
        if (this._tag != Tag.MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY, but was Tag." + this._tag.name());
        }
        return memberSpaceLimitsChangeCapsTypePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SPACE_LIMITS_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SPACE_LIMITS_CHANGE_POLICY}, {@code false} otherwise.
     */
    public boolean isMemberSpaceLimitsChangePolicy() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_SPACE_LIMITS_CHANGE_POLICY}.
     *
     * <p> (team_policies) Changed team default member space limit </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_SPACE_LIMITS_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberSpaceLimitsChangePolicy(MemberSpaceLimitsChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberSpaceLimitsChangePolicy(Tag.MEMBER_SPACE_LIMITS_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Changed team default member space limit
     *
     * <p> This instance must be tagged as {@link
     * Tag#MEMBER_SPACE_LIMITS_CHANGE_POLICY}. </p>
     *
     * @return The {@link MemberSpaceLimitsChangePolicyType} value associated
     *     with this instance if {@link #isMemberSpaceLimitsChangePolicy} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberSpaceLimitsChangePolicy} is {@code false}.
     */
    public MemberSpaceLimitsChangePolicyType getMemberSpaceLimitsChangePolicyValue() {
        if (this._tag != Tag.MEMBER_SPACE_LIMITS_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return memberSpaceLimitsChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION}, {@code false} otherwise.
     */
    public boolean isMemberSpaceLimitsRemoveException() {
        return this._tag == Tag.MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION}.
     *
     * <p> (team_policies) Removed members from member space limit exception
     * list </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberSpaceLimitsRemoveException(MemberSpaceLimitsRemoveExceptionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberSpaceLimitsRemoveException(Tag.MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION, value);
    }

    /**
     * (team_policies) Removed members from member space limit exception list
     *
     * <p> This instance must be tagged as {@link
     * Tag#MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION}. </p>
     *
     * @return The {@link MemberSpaceLimitsRemoveExceptionType} value associated
     *     with this instance if {@link #isMemberSpaceLimitsRemoveException} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberSpaceLimitsRemoveException} is {@code false}.
     */
    public MemberSpaceLimitsRemoveExceptionType getMemberSpaceLimitsRemoveExceptionValue() {
        if (this._tag != Tag.MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION, but was Tag." + this._tag.name());
        }
        return memberSpaceLimitsRemoveExceptionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MEMBER_SUGGESTIONS_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MEMBER_SUGGESTIONS_CHANGE_POLICY}, {@code false} otherwise.
     */
    public boolean isMemberSuggestionsChangePolicy() {
        return this._tag == Tag.MEMBER_SUGGESTIONS_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MEMBER_SUGGESTIONS_CHANGE_POLICY}.
     *
     * <p> (team_policies) Enabled/disabled option for team members to suggest
     * people to add to team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MEMBER_SUGGESTIONS_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType memberSuggestionsChangePolicy(MemberSuggestionsChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMemberSuggestionsChangePolicy(Tag.MEMBER_SUGGESTIONS_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Enabled/disabled option for team members to suggest
     * people to add to team
     *
     * <p> This instance must be tagged as {@link
     * Tag#MEMBER_SUGGESTIONS_CHANGE_POLICY}. </p>
     *
     * @return The {@link MemberSuggestionsChangePolicyType} value associated
     *     with this instance if {@link #isMemberSuggestionsChangePolicy} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMemberSuggestionsChangePolicy} is {@code false}.
     */
    public MemberSuggestionsChangePolicyType getMemberSuggestionsChangePolicyValue() {
        if (this._tag != Tag.MEMBER_SUGGESTIONS_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.MEMBER_SUGGESTIONS_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return memberSuggestionsChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY}, {@code false} otherwise.
     */
    public boolean isMicrosoftOfficeAddinChangePolicy() {
        return this._tag == Tag.MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY}.
     *
     * <p> (team_policies) Enabled/disabled Microsoft Office add-in </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType microsoftOfficeAddinChangePolicy(MicrosoftOfficeAddinChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndMicrosoftOfficeAddinChangePolicy(Tag.MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Enabled/disabled Microsoft Office add-in
     *
     * <p> This instance must be tagged as {@link
     * Tag#MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY}. </p>
     *
     * @return The {@link MicrosoftOfficeAddinChangePolicyType} value associated
     *     with this instance if {@link #isMicrosoftOfficeAddinChangePolicy} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isMicrosoftOfficeAddinChangePolicy} is {@code false}.
     */
    public MicrosoftOfficeAddinChangePolicyType getMicrosoftOfficeAddinChangePolicyValue() {
        if (this._tag != Tag.MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return microsoftOfficeAddinChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#NETWORK_CONTROL_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#NETWORK_CONTROL_CHANGE_POLICY}, {@code false} otherwise.
     */
    public boolean isNetworkControlChangePolicy() {
        return this._tag == Tag.NETWORK_CONTROL_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#NETWORK_CONTROL_CHANGE_POLICY}.
     *
     * <p> (team_policies) Enabled/disabled network control </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#NETWORK_CONTROL_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType networkControlChangePolicy(NetworkControlChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndNetworkControlChangePolicy(Tag.NETWORK_CONTROL_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Enabled/disabled network control
     *
     * <p> This instance must be tagged as {@link
     * Tag#NETWORK_CONTROL_CHANGE_POLICY}. </p>
     *
     * @return The {@link NetworkControlChangePolicyType} value associated with
     *     this instance if {@link #isNetworkControlChangePolicy} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isNetworkControlChangePolicy}
     *     is {@code false}.
     */
    public NetworkControlChangePolicyType getNetworkControlChangePolicyValue() {
        if (this._tag != Tag.NETWORK_CONTROL_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.NETWORK_CONTROL_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return networkControlChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CHANGE_DEPLOYMENT_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CHANGE_DEPLOYMENT_POLICY}, {@code false} otherwise.
     */
    public boolean isPaperChangeDeploymentPolicy() {
        return this._tag == Tag.PAPER_CHANGE_DEPLOYMENT_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_CHANGE_DEPLOYMENT_POLICY}.
     *
     * <p> (team_policies) Changed whether Dropbox Paper, when enabled, is
     * deployed to all members or to specific members </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_CHANGE_DEPLOYMENT_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperChangeDeploymentPolicy(PaperChangeDeploymentPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperChangeDeploymentPolicy(Tag.PAPER_CHANGE_DEPLOYMENT_POLICY, value);
    }

    /**
     * (team_policies) Changed whether Dropbox Paper, when enabled, is deployed
     * to all members or to specific members
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_CHANGE_DEPLOYMENT_POLICY}. </p>
     *
     * @return The {@link PaperChangeDeploymentPolicyType} value associated with
     *     this instance if {@link #isPaperChangeDeploymentPolicy} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isPaperChangeDeploymentPolicy}
     *     is {@code false}.
     */
    public PaperChangeDeploymentPolicyType getPaperChangeDeploymentPolicyValue() {
        if (this._tag != Tag.PAPER_CHANGE_DEPLOYMENT_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CHANGE_DEPLOYMENT_POLICY, but was Tag." + this._tag.name());
        }
        return paperChangeDeploymentPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CHANGE_MEMBER_LINK_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CHANGE_MEMBER_LINK_POLICY}, {@code false} otherwise.
     */
    public boolean isPaperChangeMemberLinkPolicy() {
        return this._tag == Tag.PAPER_CHANGE_MEMBER_LINK_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_CHANGE_MEMBER_LINK_POLICY}.
     *
     * <p> (team_policies) Changed whether non-members can view Paper docs with
     * link (deprecated, no longer logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_CHANGE_MEMBER_LINK_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperChangeMemberLinkPolicy(PaperChangeMemberLinkPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperChangeMemberLinkPolicy(Tag.PAPER_CHANGE_MEMBER_LINK_POLICY, value);
    }

    /**
     * (team_policies) Changed whether non-members can view Paper docs with link
     * (deprecated, no longer logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_CHANGE_MEMBER_LINK_POLICY}. </p>
     *
     * @return The {@link PaperChangeMemberLinkPolicyType} value associated with
     *     this instance if {@link #isPaperChangeMemberLinkPolicy} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isPaperChangeMemberLinkPolicy}
     *     is {@code false}.
     */
    public PaperChangeMemberLinkPolicyType getPaperChangeMemberLinkPolicyValue() {
        if (this._tag != Tag.PAPER_CHANGE_MEMBER_LINK_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CHANGE_MEMBER_LINK_POLICY, but was Tag." + this._tag.name());
        }
        return paperChangeMemberLinkPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CHANGE_MEMBER_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CHANGE_MEMBER_POLICY}, {@code false} otherwise.
     */
    public boolean isPaperChangeMemberPolicy() {
        return this._tag == Tag.PAPER_CHANGE_MEMBER_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_CHANGE_MEMBER_POLICY}.
     *
     * <p> (team_policies) Changed whether members can share Paper docs outside
     * team, and if docs are accessible only by team members or anyone by
     * default </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_CHANGE_MEMBER_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperChangeMemberPolicy(PaperChangeMemberPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperChangeMemberPolicy(Tag.PAPER_CHANGE_MEMBER_POLICY, value);
    }

    /**
     * (team_policies) Changed whether members can share Paper docs outside
     * team, and if docs are accessible only by team members or anyone by
     * default
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_CHANGE_MEMBER_POLICY}. </p>
     *
     * @return The {@link PaperChangeMemberPolicyType} value associated with
     *     this instance if {@link #isPaperChangeMemberPolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperChangeMemberPolicy} is
     *     {@code false}.
     */
    public PaperChangeMemberPolicyType getPaperChangeMemberPolicyValue() {
        if (this._tag != Tag.PAPER_CHANGE_MEMBER_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CHANGE_MEMBER_POLICY, but was Tag." + this._tag.name());
        }
        return paperChangeMemberPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_CHANGE_POLICY}, {@code false} otherwise.
     */
    public boolean isPaperChangePolicy() {
        return this._tag == Tag.PAPER_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_CHANGE_POLICY}.
     *
     * <p> (team_policies) Enabled/disabled Dropbox Paper for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperChangePolicy(PaperChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperChangePolicy(Tag.PAPER_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Enabled/disabled Dropbox Paper for team
     *
     * <p> This instance must be tagged as {@link Tag#PAPER_CHANGE_POLICY}. </p>
     *
     * @return The {@link PaperChangePolicyType} value associated with this
     *     instance if {@link #isPaperChangePolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isPaperChangePolicy} is {@code
     *     false}.
     */
    public PaperChangePolicyType getPaperChangePolicyValue() {
        if (this._tag != Tag.PAPER_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return paperChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DEFAULT_FOLDER_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DEFAULT_FOLDER_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isPaperDefaultFolderPolicyChanged() {
        return this._tag == Tag.PAPER_DEFAULT_FOLDER_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DEFAULT_FOLDER_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed Paper Default Folder Policy setting for team
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DEFAULT_FOLDER_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDefaultFolderPolicyChanged(PaperDefaultFolderPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDefaultFolderPolicyChanged(Tag.PAPER_DEFAULT_FOLDER_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed Paper Default Folder Policy setting for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_DEFAULT_FOLDER_POLICY_CHANGED}. </p>
     *
     * @return The {@link PaperDefaultFolderPolicyChangedType} value associated
     *     with this instance if {@link #isPaperDefaultFolderPolicyChanged} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperDefaultFolderPolicyChanged} is {@code false}.
     */
    public PaperDefaultFolderPolicyChangedType getPaperDefaultFolderPolicyChangedValue() {
        if (this._tag != Tag.PAPER_DEFAULT_FOLDER_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DEFAULT_FOLDER_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return paperDefaultFolderPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_DESKTOP_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_DESKTOP_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isPaperDesktopPolicyChanged() {
        return this._tag == Tag.PAPER_DESKTOP_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_DESKTOP_POLICY_CHANGED}.
     *
     * <p> (team_policies) Enabled/disabled Paper Desktop for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_DESKTOP_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperDesktopPolicyChanged(PaperDesktopPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperDesktopPolicyChanged(Tag.PAPER_DESKTOP_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Enabled/disabled Paper Desktop for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_DESKTOP_POLICY_CHANGED}. </p>
     *
     * @return The {@link PaperDesktopPolicyChangedType} value associated with
     *     this instance if {@link #isPaperDesktopPolicyChanged} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isPaperDesktopPolicyChanged} is
     *     {@code false}.
     */
    public PaperDesktopPolicyChangedType getPaperDesktopPolicyChangedValue() {
        if (this._tag != Tag.PAPER_DESKTOP_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_DESKTOP_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return paperDesktopPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_ENABLED_USERS_GROUP_ADDITION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_ENABLED_USERS_GROUP_ADDITION}, {@code false} otherwise.
     */
    public boolean isPaperEnabledUsersGroupAddition() {
        return this._tag == Tag.PAPER_ENABLED_USERS_GROUP_ADDITION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_ENABLED_USERS_GROUP_ADDITION}.
     *
     * <p> (team_policies) Added users to Paper-enabled users list </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_ENABLED_USERS_GROUP_ADDITION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperEnabledUsersGroupAddition(PaperEnabledUsersGroupAdditionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperEnabledUsersGroupAddition(Tag.PAPER_ENABLED_USERS_GROUP_ADDITION, value);
    }

    /**
     * (team_policies) Added users to Paper-enabled users list
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_ENABLED_USERS_GROUP_ADDITION}. </p>
     *
     * @return The {@link PaperEnabledUsersGroupAdditionType} value associated
     *     with this instance if {@link #isPaperEnabledUsersGroupAddition} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperEnabledUsersGroupAddition} is {@code false}.
     */
    public PaperEnabledUsersGroupAdditionType getPaperEnabledUsersGroupAdditionValue() {
        if (this._tag != Tag.PAPER_ENABLED_USERS_GROUP_ADDITION) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_ENABLED_USERS_GROUP_ADDITION, but was Tag." + this._tag.name());
        }
        return paperEnabledUsersGroupAdditionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PAPER_ENABLED_USERS_GROUP_REMOVAL}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PAPER_ENABLED_USERS_GROUP_REMOVAL}, {@code false} otherwise.
     */
    public boolean isPaperEnabledUsersGroupRemoval() {
        return this._tag == Tag.PAPER_ENABLED_USERS_GROUP_REMOVAL;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PAPER_ENABLED_USERS_GROUP_REMOVAL}.
     *
     * <p> (team_policies) Removed users from Paper-enabled users list </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PAPER_ENABLED_USERS_GROUP_REMOVAL}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType paperEnabledUsersGroupRemoval(PaperEnabledUsersGroupRemovalType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPaperEnabledUsersGroupRemoval(Tag.PAPER_ENABLED_USERS_GROUP_REMOVAL, value);
    }

    /**
     * (team_policies) Removed users from Paper-enabled users list
     *
     * <p> This instance must be tagged as {@link
     * Tag#PAPER_ENABLED_USERS_GROUP_REMOVAL}. </p>
     *
     * @return The {@link PaperEnabledUsersGroupRemovalType} value associated
     *     with this instance if {@link #isPaperEnabledUsersGroupRemoval} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPaperEnabledUsersGroupRemoval} is {@code false}.
     */
    public PaperEnabledUsersGroupRemovalType getPaperEnabledUsersGroupRemovalValue() {
        if (this._tag != Tag.PAPER_ENABLED_USERS_GROUP_REMOVAL) {
            throw new IllegalStateException("Invalid tag: required Tag.PAPER_ENABLED_USERS_GROUP_REMOVAL, but was Tag." + this._tag.name());
        }
        return paperEnabledUsersGroupRemovalValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY}, {@code false}
     *     otherwise.
     */
    public boolean isPasswordStrengthRequirementsChangePolicy() {
        return this._tag == Tag.PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY}.
     *
     * <p> (team_policies) Changed team password strength requirements </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType passwordStrengthRequirementsChangePolicy(PasswordStrengthRequirementsChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPasswordStrengthRequirementsChangePolicy(Tag.PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Changed team password strength requirements
     *
     * <p> This instance must be tagged as {@link
     * Tag#PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY}. </p>
     *
     * @return The {@link PasswordStrengthRequirementsChangePolicyType} value
     *     associated with this instance if {@link
     *     #isPasswordStrengthRequirementsChangePolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isPasswordStrengthRequirementsChangePolicy} is {@code false}.
     */
    public PasswordStrengthRequirementsChangePolicyType getPasswordStrengthRequirementsChangePolicyValue() {
        if (this._tag != Tag.PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return passwordStrengthRequirementsChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#PERMANENT_DELETE_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#PERMANENT_DELETE_CHANGE_POLICY}, {@code false} otherwise.
     */
    public boolean isPermanentDeleteChangePolicy() {
        return this._tag == Tag.PERMANENT_DELETE_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#PERMANENT_DELETE_CHANGE_POLICY}.
     *
     * <p> (team_policies) Enabled/disabled ability of team members to
     * permanently delete content </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#PERMANENT_DELETE_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType permanentDeleteChangePolicy(PermanentDeleteChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndPermanentDeleteChangePolicy(Tag.PERMANENT_DELETE_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Enabled/disabled ability of team members to permanently
     * delete content
     *
     * <p> This instance must be tagged as {@link
     * Tag#PERMANENT_DELETE_CHANGE_POLICY}. </p>
     *
     * @return The {@link PermanentDeleteChangePolicyType} value associated with
     *     this instance if {@link #isPermanentDeleteChangePolicy} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isPermanentDeleteChangePolicy}
     *     is {@code false}.
     */
    public PermanentDeleteChangePolicyType getPermanentDeleteChangePolicyValue() {
        if (this._tag != Tag.PERMANENT_DELETE_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.PERMANENT_DELETE_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return permanentDeleteChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#RESELLER_SUPPORT_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#RESELLER_SUPPORT_CHANGE_POLICY}, {@code false} otherwise.
     */
    public boolean isResellerSupportChangePolicy() {
        return this._tag == Tag.RESELLER_SUPPORT_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#RESELLER_SUPPORT_CHANGE_POLICY}.
     *
     * <p> (team_policies) Enabled/disabled reseller support </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#RESELLER_SUPPORT_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType resellerSupportChangePolicy(ResellerSupportChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndResellerSupportChangePolicy(Tag.RESELLER_SUPPORT_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Enabled/disabled reseller support
     *
     * <p> This instance must be tagged as {@link
     * Tag#RESELLER_SUPPORT_CHANGE_POLICY}. </p>
     *
     * @return The {@link ResellerSupportChangePolicyType} value associated with
     *     this instance if {@link #isResellerSupportChangePolicy} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isResellerSupportChangePolicy}
     *     is {@code false}.
     */
    public ResellerSupportChangePolicyType getResellerSupportChangePolicyValue() {
        if (this._tag != Tag.RESELLER_SUPPORT_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.RESELLER_SUPPORT_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return resellerSupportChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#REWIND_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#REWIND_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isRewindPolicyChanged() {
        return this._tag == Tag.REWIND_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#REWIND_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed Rewind policy for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#REWIND_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType rewindPolicyChanged(RewindPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndRewindPolicyChanged(Tag.REWIND_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed Rewind policy for team
     *
     * <p> This instance must be tagged as {@link Tag#REWIND_POLICY_CHANGED}.
     * </p>
     *
     * @return The {@link RewindPolicyChangedType} value associated with this
     *     instance if {@link #isRewindPolicyChanged} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isRewindPolicyChanged} is
     *     {@code false}.
     */
    public RewindPolicyChangedType getRewindPolicyChangedValue() {
        if (this._tag != Tag.REWIND_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.REWIND_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return rewindPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SEND_FOR_SIGNATURE_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SEND_FOR_SIGNATURE_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isSendForSignaturePolicyChanged() {
        return this._tag == Tag.SEND_FOR_SIGNATURE_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SEND_FOR_SIGNATURE_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed send for signature policy for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SEND_FOR_SIGNATURE_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sendForSignaturePolicyChanged(SendForSignaturePolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSendForSignaturePolicyChanged(Tag.SEND_FOR_SIGNATURE_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed send for signature policy for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#SEND_FOR_SIGNATURE_POLICY_CHANGED}. </p>
     *
     * @return The {@link SendForSignaturePolicyChangedType} value associated
     *     with this instance if {@link #isSendForSignaturePolicyChanged} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSendForSignaturePolicyChanged} is {@code false}.
     */
    public SendForSignaturePolicyChangedType getSendForSignaturePolicyChangedValue() {
        if (this._tag != Tag.SEND_FOR_SIGNATURE_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.SEND_FOR_SIGNATURE_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return sendForSignaturePolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARING_CHANGE_FOLDER_JOIN_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARING_CHANGE_FOLDER_JOIN_POLICY}, {@code false} otherwise.
     */
    public boolean isSharingChangeFolderJoinPolicy() {
        return this._tag == Tag.SHARING_CHANGE_FOLDER_JOIN_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARING_CHANGE_FOLDER_JOIN_POLICY}.
     *
     * <p> (team_policies) Changed whether team members can join shared folders
     * owned outside team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARING_CHANGE_FOLDER_JOIN_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharingChangeFolderJoinPolicy(SharingChangeFolderJoinPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharingChangeFolderJoinPolicy(Tag.SHARING_CHANGE_FOLDER_JOIN_POLICY, value);
    }

    /**
     * (team_policies) Changed whether team members can join shared folders
     * owned outside team
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARING_CHANGE_FOLDER_JOIN_POLICY}. </p>
     *
     * @return The {@link SharingChangeFolderJoinPolicyType} value associated
     *     with this instance if {@link #isSharingChangeFolderJoinPolicy} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharingChangeFolderJoinPolicy} is {@code false}.
     */
    public SharingChangeFolderJoinPolicyType getSharingChangeFolderJoinPolicyValue() {
        if (this._tag != Tag.SHARING_CHANGE_FOLDER_JOIN_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARING_CHANGE_FOLDER_JOIN_POLICY, but was Tag." + this._tag.name());
        }
        return sharingChangeFolderJoinPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY}, {@code
     *     false} otherwise.
     */
    public boolean isSharingChangeLinkAllowChangeExpirationPolicy() {
        return this._tag == Tag.SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY}.
     *
     * <p> (team_policies) Changed the allow remove or change expiration policy
     * for the links shared outside of the team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharingChangeLinkAllowChangeExpirationPolicy(SharingChangeLinkAllowChangeExpirationPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharingChangeLinkAllowChangeExpirationPolicy(Tag.SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY, value);
    }

    /**
     * (team_policies) Changed the allow remove or change expiration policy for
     * the links shared outside of the team
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY}. </p>
     *
     * @return The {@link SharingChangeLinkAllowChangeExpirationPolicyType}
     *     value associated with this instance if {@link
     *     #isSharingChangeLinkAllowChangeExpirationPolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharingChangeLinkAllowChangeExpirationPolicy} is {@code false}.
     */
    public SharingChangeLinkAllowChangeExpirationPolicyType getSharingChangeLinkAllowChangeExpirationPolicyValue() {
        if (this._tag != Tag.SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY, but was Tag." + this._tag.name());
        }
        return sharingChangeLinkAllowChangeExpirationPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY}, {@code false}
     *     otherwise.
     */
    public boolean isSharingChangeLinkDefaultExpirationPolicy() {
        return this._tag == Tag.SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY}.
     *
     * <p> (team_policies) Changed the default expiration for the links shared
     * outside of the team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharingChangeLinkDefaultExpirationPolicy(SharingChangeLinkDefaultExpirationPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharingChangeLinkDefaultExpirationPolicy(Tag.SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY, value);
    }

    /**
     * (team_policies) Changed the default expiration for the links shared
     * outside of the team
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY}. </p>
     *
     * @return The {@link SharingChangeLinkDefaultExpirationPolicyType} value
     *     associated with this instance if {@link
     *     #isSharingChangeLinkDefaultExpirationPolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharingChangeLinkDefaultExpirationPolicy} is {@code false}.
     */
    public SharingChangeLinkDefaultExpirationPolicyType getSharingChangeLinkDefaultExpirationPolicyValue() {
        if (this._tag != Tag.SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY, but was Tag." + this._tag.name());
        }
        return sharingChangeLinkDefaultExpirationPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY}, {@code false}
     *     otherwise.
     */
    public boolean isSharingChangeLinkEnforcePasswordPolicy() {
        return this._tag == Tag.SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY}.
     *
     * <p> (team_policies) Changed the password requirement for the links shared
     * outside of the team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharingChangeLinkEnforcePasswordPolicy(SharingChangeLinkEnforcePasswordPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharingChangeLinkEnforcePasswordPolicy(Tag.SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY, value);
    }

    /**
     * (team_policies) Changed the password requirement for the links shared
     * outside of the team
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY}. </p>
     *
     * @return The {@link SharingChangeLinkEnforcePasswordPolicyType} value
     *     associated with this instance if {@link
     *     #isSharingChangeLinkEnforcePasswordPolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSharingChangeLinkEnforcePasswordPolicy} is {@code false}.
     */
    public SharingChangeLinkEnforcePasswordPolicyType getSharingChangeLinkEnforcePasswordPolicyValue() {
        if (this._tag != Tag.SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY, but was Tag." + this._tag.name());
        }
        return sharingChangeLinkEnforcePasswordPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARING_CHANGE_LINK_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARING_CHANGE_LINK_POLICY}, {@code false} otherwise.
     */
    public boolean isSharingChangeLinkPolicy() {
        return this._tag == Tag.SHARING_CHANGE_LINK_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARING_CHANGE_LINK_POLICY}.
     *
     * <p> (team_policies) Changed whether members can share links outside team,
     * and if links are accessible only by team members or anyone by default
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARING_CHANGE_LINK_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharingChangeLinkPolicy(SharingChangeLinkPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharingChangeLinkPolicy(Tag.SHARING_CHANGE_LINK_POLICY, value);
    }

    /**
     * (team_policies) Changed whether members can share links outside team, and
     * if links are accessible only by team members or anyone by default
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARING_CHANGE_LINK_POLICY}. </p>
     *
     * @return The {@link SharingChangeLinkPolicyType} value associated with
     *     this instance if {@link #isSharingChangeLinkPolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSharingChangeLinkPolicy} is
     *     {@code false}.
     */
    public SharingChangeLinkPolicyType getSharingChangeLinkPolicyValue() {
        if (this._tag != Tag.SHARING_CHANGE_LINK_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARING_CHANGE_LINK_POLICY, but was Tag." + this._tag.name());
        }
        return sharingChangeLinkPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHARING_CHANGE_MEMBER_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHARING_CHANGE_MEMBER_POLICY}, {@code false} otherwise.
     */
    public boolean isSharingChangeMemberPolicy() {
        return this._tag == Tag.SHARING_CHANGE_MEMBER_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHARING_CHANGE_MEMBER_POLICY}.
     *
     * <p> (team_policies) Changed whether members can share files/folders
     * outside team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHARING_CHANGE_MEMBER_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType sharingChangeMemberPolicy(SharingChangeMemberPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSharingChangeMemberPolicy(Tag.SHARING_CHANGE_MEMBER_POLICY, value);
    }

    /**
     * (team_policies) Changed whether members can share files/folders outside
     * team
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHARING_CHANGE_MEMBER_POLICY}. </p>
     *
     * @return The {@link SharingChangeMemberPolicyType} value associated with
     *     this instance if {@link #isSharingChangeMemberPolicy} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isSharingChangeMemberPolicy} is
     *     {@code false}.
     */
    public SharingChangeMemberPolicyType getSharingChangeMemberPolicyValue() {
        if (this._tag != Tag.SHARING_CHANGE_MEMBER_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHARING_CHANGE_MEMBER_POLICY, but was Tag." + this._tag.name());
        }
        return sharingChangeMemberPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_CHANGE_DOWNLOAD_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_CHANGE_DOWNLOAD_POLICY}, {@code false} otherwise.
     */
    public boolean isShowcaseChangeDownloadPolicy() {
        return this._tag == Tag.SHOWCASE_CHANGE_DOWNLOAD_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_CHANGE_DOWNLOAD_POLICY}.
     *
     * <p> (team_policies) Enabled/disabled downloading files from Dropbox
     * Showcase for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_CHANGE_DOWNLOAD_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseChangeDownloadPolicy(ShowcaseChangeDownloadPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseChangeDownloadPolicy(Tag.SHOWCASE_CHANGE_DOWNLOAD_POLICY, value);
    }

    /**
     * (team_policies) Enabled/disabled downloading files from Dropbox Showcase
     * for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHOWCASE_CHANGE_DOWNLOAD_POLICY}. </p>
     *
     * @return The {@link ShowcaseChangeDownloadPolicyType} value associated
     *     with this instance if {@link #isShowcaseChangeDownloadPolicy} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseChangeDownloadPolicy}
     *     is {@code false}.
     */
    public ShowcaseChangeDownloadPolicyType getShowcaseChangeDownloadPolicyValue() {
        if (this._tag != Tag.SHOWCASE_CHANGE_DOWNLOAD_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_CHANGE_DOWNLOAD_POLICY, but was Tag." + this._tag.name());
        }
        return showcaseChangeDownloadPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_CHANGE_ENABLED_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_CHANGE_ENABLED_POLICY}, {@code false} otherwise.
     */
    public boolean isShowcaseChangeEnabledPolicy() {
        return this._tag == Tag.SHOWCASE_CHANGE_ENABLED_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_CHANGE_ENABLED_POLICY}.
     *
     * <p> (team_policies) Enabled/disabled Dropbox Showcase for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_CHANGE_ENABLED_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseChangeEnabledPolicy(ShowcaseChangeEnabledPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseChangeEnabledPolicy(Tag.SHOWCASE_CHANGE_ENABLED_POLICY, value);
    }

    /**
     * (team_policies) Enabled/disabled Dropbox Showcase for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHOWCASE_CHANGE_ENABLED_POLICY}. </p>
     *
     * @return The {@link ShowcaseChangeEnabledPolicyType} value associated with
     *     this instance if {@link #isShowcaseChangeEnabledPolicy} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isShowcaseChangeEnabledPolicy}
     *     is {@code false}.
     */
    public ShowcaseChangeEnabledPolicyType getShowcaseChangeEnabledPolicyValue() {
        if (this._tag != Tag.SHOWCASE_CHANGE_ENABLED_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_CHANGE_ENABLED_POLICY, but was Tag." + this._tag.name());
        }
        return showcaseChangeEnabledPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY}, {@code false}
     *     otherwise.
     */
    public boolean isShowcaseChangeExternalSharingPolicy() {
        return this._tag == Tag.SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY}.
     *
     * <p> (team_policies) Enabled/disabled sharing Dropbox Showcase externally
     * for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType showcaseChangeExternalSharingPolicy(ShowcaseChangeExternalSharingPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndShowcaseChangeExternalSharingPolicy(Tag.SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY, value);
    }

    /**
     * (team_policies) Enabled/disabled sharing Dropbox Showcase externally for
     * team
     *
     * <p> This instance must be tagged as {@link
     * Tag#SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY}. </p>
     *
     * @return The {@link ShowcaseChangeExternalSharingPolicyType} value
     *     associated with this instance if {@link
     *     #isShowcaseChangeExternalSharingPolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isShowcaseChangeExternalSharingPolicy} is {@code false}.
     */
    public ShowcaseChangeExternalSharingPolicyType getShowcaseChangeExternalSharingPolicyValue() {
        if (this._tag != Tag.SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY, but was Tag." + this._tag.name());
        }
        return showcaseChangeExternalSharingPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SMARTER_SMART_SYNC_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SMARTER_SMART_SYNC_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isSmarterSmartSyncPolicyChanged() {
        return this._tag == Tag.SMARTER_SMART_SYNC_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SMARTER_SMART_SYNC_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed automatic Smart Sync setting for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SMARTER_SMART_SYNC_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType smarterSmartSyncPolicyChanged(SmarterSmartSyncPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSmarterSmartSyncPolicyChanged(Tag.SMARTER_SMART_SYNC_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed automatic Smart Sync setting for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#SMARTER_SMART_SYNC_POLICY_CHANGED}. </p>
     *
     * @return The {@link SmarterSmartSyncPolicyChangedType} value associated
     *     with this instance if {@link #isSmarterSmartSyncPolicyChanged} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isSmarterSmartSyncPolicyChanged} is {@code false}.
     */
    public SmarterSmartSyncPolicyChangedType getSmarterSmartSyncPolicyChangedValue() {
        if (this._tag != Tag.SMARTER_SMART_SYNC_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.SMARTER_SMART_SYNC_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return smarterSmartSyncPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SMART_SYNC_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SMART_SYNC_CHANGE_POLICY}, {@code false} otherwise.
     */
    public boolean isSmartSyncChangePolicy() {
        return this._tag == Tag.SMART_SYNC_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SMART_SYNC_CHANGE_POLICY}.
     *
     * <p> (team_policies) Changed default Smart Sync setting for team members
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SMART_SYNC_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType smartSyncChangePolicy(SmartSyncChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSmartSyncChangePolicy(Tag.SMART_SYNC_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Changed default Smart Sync setting for team members
     *
     * <p> This instance must be tagged as {@link Tag#SMART_SYNC_CHANGE_POLICY}.
     * </p>
     *
     * @return The {@link SmartSyncChangePolicyType} value associated with this
     *     instance if {@link #isSmartSyncChangePolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSmartSyncChangePolicy} is
     *     {@code false}.
     */
    public SmartSyncChangePolicyType getSmartSyncChangePolicyValue() {
        if (this._tag != Tag.SMART_SYNC_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.SMART_SYNC_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return smartSyncChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SMART_SYNC_NOT_OPT_OUT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SMART_SYNC_NOT_OPT_OUT}, {@code false} otherwise.
     */
    public boolean isSmartSyncNotOptOut() {
        return this._tag == Tag.SMART_SYNC_NOT_OPT_OUT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SMART_SYNC_NOT_OPT_OUT}.
     *
     * <p> (team_policies) Opted team into Smart Sync </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SMART_SYNC_NOT_OPT_OUT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType smartSyncNotOptOut(SmartSyncNotOptOutType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSmartSyncNotOptOut(Tag.SMART_SYNC_NOT_OPT_OUT, value);
    }

    /**
     * (team_policies) Opted team into Smart Sync
     *
     * <p> This instance must be tagged as {@link Tag#SMART_SYNC_NOT_OPT_OUT}.
     * </p>
     *
     * @return The {@link SmartSyncNotOptOutType} value associated with this
     *     instance if {@link #isSmartSyncNotOptOut} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSmartSyncNotOptOut} is {@code
     *     false}.
     */
    public SmartSyncNotOptOutType getSmartSyncNotOptOutValue() {
        if (this._tag != Tag.SMART_SYNC_NOT_OPT_OUT) {
            throw new IllegalStateException("Invalid tag: required Tag.SMART_SYNC_NOT_OPT_OUT, but was Tag." + this._tag.name());
        }
        return smartSyncNotOptOutValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SMART_SYNC_OPT_OUT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SMART_SYNC_OPT_OUT}, {@code false} otherwise.
     */
    public boolean isSmartSyncOptOut() {
        return this._tag == Tag.SMART_SYNC_OPT_OUT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SMART_SYNC_OPT_OUT}.
     *
     * <p> (team_policies) Opted team out of Smart Sync </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SMART_SYNC_OPT_OUT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType smartSyncOptOut(SmartSyncOptOutType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSmartSyncOptOut(Tag.SMART_SYNC_OPT_OUT, value);
    }

    /**
     * (team_policies) Opted team out of Smart Sync
     *
     * <p> This instance must be tagged as {@link Tag#SMART_SYNC_OPT_OUT}. </p>
     *
     * @return The {@link SmartSyncOptOutType} value associated with this
     *     instance if {@link #isSmartSyncOptOut} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSmartSyncOptOut} is {@code
     *     false}.
     */
    public SmartSyncOptOutType getSmartSyncOptOutValue() {
        if (this._tag != Tag.SMART_SYNC_OPT_OUT) {
            throw new IllegalStateException("Invalid tag: required Tag.SMART_SYNC_OPT_OUT, but was Tag." + this._tag.name());
        }
        return smartSyncOptOutValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#SSO_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#SSO_CHANGE_POLICY}, {@code false} otherwise.
     */
    public boolean isSsoChangePolicy() {
        return this._tag == Tag.SSO_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#SSO_CHANGE_POLICY}.
     *
     * <p> (team_policies) Changed single sign-on setting for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#SSO_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType ssoChangePolicy(SsoChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndSsoChangePolicy(Tag.SSO_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Changed single sign-on setting for team
     *
     * <p> This instance must be tagged as {@link Tag#SSO_CHANGE_POLICY}. </p>
     *
     * @return The {@link SsoChangePolicyType} value associated with this
     *     instance if {@link #isSsoChangePolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isSsoChangePolicy} is {@code
     *     false}.
     */
    public SsoChangePolicyType getSsoChangePolicyValue() {
        if (this._tag != Tag.SSO_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.SSO_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return ssoChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_BRANDING_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_BRANDING_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isTeamBrandingPolicyChanged() {
        return this._tag == Tag.TEAM_BRANDING_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_BRANDING_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed team branding policy for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_BRANDING_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamBrandingPolicyChanged(TeamBrandingPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamBrandingPolicyChanged(Tag.TEAM_BRANDING_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed team branding policy for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_BRANDING_POLICY_CHANGED}. </p>
     *
     * @return The {@link TeamBrandingPolicyChangedType} value associated with
     *     this instance if {@link #isTeamBrandingPolicyChanged} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isTeamBrandingPolicyChanged} is
     *     {@code false}.
     */
    public TeamBrandingPolicyChangedType getTeamBrandingPolicyChangedValue() {
        if (this._tag != Tag.TEAM_BRANDING_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_BRANDING_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return teamBrandingPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_EXTENSIONS_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_EXTENSIONS_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isTeamExtensionsPolicyChanged() {
        return this._tag == Tag.TEAM_EXTENSIONS_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_EXTENSIONS_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed App Integrations setting for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_EXTENSIONS_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamExtensionsPolicyChanged(TeamExtensionsPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamExtensionsPolicyChanged(Tag.TEAM_EXTENSIONS_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed App Integrations setting for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_EXTENSIONS_POLICY_CHANGED}. </p>
     *
     * @return The {@link TeamExtensionsPolicyChangedType} value associated with
     *     this instance if {@link #isTeamExtensionsPolicyChanged} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isTeamExtensionsPolicyChanged}
     *     is {@code false}.
     */
    public TeamExtensionsPolicyChangedType getTeamExtensionsPolicyChangedValue() {
        if (this._tag != Tag.TEAM_EXTENSIONS_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_EXTENSIONS_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return teamExtensionsPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_SELECTIVE_SYNC_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_SELECTIVE_SYNC_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isTeamSelectiveSyncPolicyChanged() {
        return this._tag == Tag.TEAM_SELECTIVE_SYNC_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_SELECTIVE_SYNC_POLICY_CHANGED}.
     *
     * <p> (team_policies) Enabled/disabled Team Selective Sync for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_SELECTIVE_SYNC_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamSelectiveSyncPolicyChanged(TeamSelectiveSyncPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamSelectiveSyncPolicyChanged(Tag.TEAM_SELECTIVE_SYNC_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Enabled/disabled Team Selective Sync for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_SELECTIVE_SYNC_POLICY_CHANGED}. </p>
     *
     * @return The {@link TeamSelectiveSyncPolicyChangedType} value associated
     *     with this instance if {@link #isTeamSelectiveSyncPolicyChanged} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamSelectiveSyncPolicyChanged} is {@code false}.
     */
    public TeamSelectiveSyncPolicyChangedType getTeamSelectiveSyncPolicyChangedValue() {
        if (this._tag != Tag.TEAM_SELECTIVE_SYNC_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_SELECTIVE_SYNC_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return teamSelectiveSyncPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED}, {@code false}
     *     otherwise.
     */
    public boolean isTeamSharingWhitelistSubjectsChanged() {
        return this._tag == Tag.TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED}.
     *
     * <p> (team_policies) Edited the approved list for sharing externally </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamSharingWhitelistSubjectsChanged(TeamSharingWhitelistSubjectsChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamSharingWhitelistSubjectsChanged(Tag.TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED, value);
    }

    /**
     * (team_policies) Edited the approved list for sharing externally
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED}. </p>
     *
     * @return The {@link TeamSharingWhitelistSubjectsChangedType} value
     *     associated with this instance if {@link
     *     #isTeamSharingWhitelistSubjectsChanged} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamSharingWhitelistSubjectsChanged} is {@code false}.
     */
    public TeamSharingWhitelistSubjectsChangedType getTeamSharingWhitelistSubjectsChangedValue() {
        if (this._tag != Tag.TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED, but was Tag." + this._tag.name());
        }
        return teamSharingWhitelistSubjectsChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TFA_ADD_EXCEPTION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TFA_ADD_EXCEPTION}, {@code false} otherwise.
     */
    public boolean isTfaAddException() {
        return this._tag == Tag.TFA_ADD_EXCEPTION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TFA_ADD_EXCEPTION}.
     *
     * <p> (team_policies) Added members to two factor authentication exception
     * list </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TFA_ADD_EXCEPTION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType tfaAddException(TfaAddExceptionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTfaAddException(Tag.TFA_ADD_EXCEPTION, value);
    }

    /**
     * (team_policies) Added members to two factor authentication exception list
     *
     * <p> This instance must be tagged as {@link Tag#TFA_ADD_EXCEPTION}. </p>
     *
     * @return The {@link TfaAddExceptionType} value associated with this
     *     instance if {@link #isTfaAddException} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTfaAddException} is {@code
     *     false}.
     */
    public TfaAddExceptionType getTfaAddExceptionValue() {
        if (this._tag != Tag.TFA_ADD_EXCEPTION) {
            throw new IllegalStateException("Invalid tag: required Tag.TFA_ADD_EXCEPTION, but was Tag." + this._tag.name());
        }
        return tfaAddExceptionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TFA_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TFA_CHANGE_POLICY}, {@code false} otherwise.
     */
    public boolean isTfaChangePolicy() {
        return this._tag == Tag.TFA_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TFA_CHANGE_POLICY}.
     *
     * <p> (team_policies) Changed two-step verification setting for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TFA_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType tfaChangePolicy(TfaChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTfaChangePolicy(Tag.TFA_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Changed two-step verification setting for team
     *
     * <p> This instance must be tagged as {@link Tag#TFA_CHANGE_POLICY}. </p>
     *
     * @return The {@link TfaChangePolicyType} value associated with this
     *     instance if {@link #isTfaChangePolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTfaChangePolicy} is {@code
     *     false}.
     */
    public TfaChangePolicyType getTfaChangePolicyValue() {
        if (this._tag != Tag.TFA_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.TFA_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return tfaChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TFA_REMOVE_EXCEPTION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TFA_REMOVE_EXCEPTION}, {@code false} otherwise.
     */
    public boolean isTfaRemoveException() {
        return this._tag == Tag.TFA_REMOVE_EXCEPTION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TFA_REMOVE_EXCEPTION}.
     *
     * <p> (team_policies) Removed members from two factor authentication
     * exception list </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TFA_REMOVE_EXCEPTION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType tfaRemoveException(TfaRemoveExceptionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTfaRemoveException(Tag.TFA_REMOVE_EXCEPTION, value);
    }

    /**
     * (team_policies) Removed members from two factor authentication exception
     * list
     *
     * <p> This instance must be tagged as {@link Tag#TFA_REMOVE_EXCEPTION}.
     * </p>
     *
     * @return The {@link TfaRemoveExceptionType} value associated with this
     *     instance if {@link #isTfaRemoveException} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTfaRemoveException} is {@code
     *     false}.
     */
    public TfaRemoveExceptionType getTfaRemoveExceptionValue() {
        if (this._tag != Tag.TFA_REMOVE_EXCEPTION) {
            throw new IllegalStateException("Invalid tag: required Tag.TFA_REMOVE_EXCEPTION, but was Tag." + this._tag.name());
        }
        return tfaRemoveExceptionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TWO_ACCOUNT_CHANGE_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TWO_ACCOUNT_CHANGE_POLICY}, {@code false} otherwise.
     */
    public boolean isTwoAccountChangePolicy() {
        return this._tag == Tag.TWO_ACCOUNT_CHANGE_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TWO_ACCOUNT_CHANGE_POLICY}.
     *
     * <p> (team_policies) Enabled/disabled option for members to link personal
     * Dropbox account and team account to same computer </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TWO_ACCOUNT_CHANGE_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType twoAccountChangePolicy(TwoAccountChangePolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTwoAccountChangePolicy(Tag.TWO_ACCOUNT_CHANGE_POLICY, value);
    }

    /**
     * (team_policies) Enabled/disabled option for members to link personal
     * Dropbox account and team account to same computer
     *
     * <p> This instance must be tagged as {@link
     * Tag#TWO_ACCOUNT_CHANGE_POLICY}. </p>
     *
     * @return The {@link TwoAccountChangePolicyType} value associated with this
     *     instance if {@link #isTwoAccountChangePolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTwoAccountChangePolicy} is
     *     {@code false}.
     */
    public TwoAccountChangePolicyType getTwoAccountChangePolicyValue() {
        if (this._tag != Tag.TWO_ACCOUNT_CHANGE_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.TWO_ACCOUNT_CHANGE_POLICY, but was Tag." + this._tag.name());
        }
        return twoAccountChangePolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#VIEWER_INFO_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#VIEWER_INFO_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isViewerInfoPolicyChanged() {
        return this._tag == Tag.VIEWER_INFO_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#VIEWER_INFO_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed team policy for viewer info </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#VIEWER_INFO_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType viewerInfoPolicyChanged(ViewerInfoPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndViewerInfoPolicyChanged(Tag.VIEWER_INFO_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed team policy for viewer info
     *
     * <p> This instance must be tagged as {@link
     * Tag#VIEWER_INFO_POLICY_CHANGED}. </p>
     *
     * @return The {@link ViewerInfoPolicyChangedType} value associated with
     *     this instance if {@link #isViewerInfoPolicyChanged} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isViewerInfoPolicyChanged} is
     *     {@code false}.
     */
    public ViewerInfoPolicyChangedType getViewerInfoPolicyChangedValue() {
        if (this._tag != Tag.VIEWER_INFO_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.VIEWER_INFO_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return viewerInfoPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#WATERMARKING_POLICY_CHANGED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#WATERMARKING_POLICY_CHANGED}, {@code false} otherwise.
     */
    public boolean isWatermarkingPolicyChanged() {
        return this._tag == Tag.WATERMARKING_POLICY_CHANGED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#WATERMARKING_POLICY_CHANGED}.
     *
     * <p> (team_policies) Changed watermarking policy for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#WATERMARKING_POLICY_CHANGED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType watermarkingPolicyChanged(WatermarkingPolicyChangedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndWatermarkingPolicyChanged(Tag.WATERMARKING_POLICY_CHANGED, value);
    }

    /**
     * (team_policies) Changed watermarking policy for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#WATERMARKING_POLICY_CHANGED}. </p>
     *
     * @return The {@link WatermarkingPolicyChangedType} value associated with
     *     this instance if {@link #isWatermarkingPolicyChanged} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isWatermarkingPolicyChanged} is
     *     {@code false}.
     */
    public WatermarkingPolicyChangedType getWatermarkingPolicyChangedValue() {
        if (this._tag != Tag.WATERMARKING_POLICY_CHANGED) {
            throw new IllegalStateException("Invalid tag: required Tag.WATERMARKING_POLICY_CHANGED, but was Tag." + this._tag.name());
        }
        return watermarkingPolicyChangedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT}, {@code false}
     *     otherwise.
     */
    public boolean isWebSessionsChangeActiveSessionLimit() {
        return this._tag == Tag.WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT}.
     *
     * <p> (team_policies) Changed limit on active sessions per member </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType webSessionsChangeActiveSessionLimit(WebSessionsChangeActiveSessionLimitType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndWebSessionsChangeActiveSessionLimit(Tag.WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT, value);
    }

    /**
     * (team_policies) Changed limit on active sessions per member
     *
     * <p> This instance must be tagged as {@link
     * Tag#WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT}. </p>
     *
     * @return The {@link WebSessionsChangeActiveSessionLimitType} value
     *     associated with this instance if {@link
     *     #isWebSessionsChangeActiveSessionLimit} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isWebSessionsChangeActiveSessionLimit} is {@code false}.
     */
    public WebSessionsChangeActiveSessionLimitType getWebSessionsChangeActiveSessionLimitValue() {
        if (this._tag != Tag.WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT) {
            throw new IllegalStateException("Invalid tag: required Tag.WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT, but was Tag." + this._tag.name());
        }
        return webSessionsChangeActiveSessionLimitValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY}, {@code false}
     *     otherwise.
     */
    public boolean isWebSessionsChangeFixedLengthPolicy() {
        return this._tag == Tag.WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY}.
     *
     * <p> (team_policies) Changed how long members can stay signed in to
     * Dropbox.com </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType webSessionsChangeFixedLengthPolicy(WebSessionsChangeFixedLengthPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndWebSessionsChangeFixedLengthPolicy(Tag.WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY, value);
    }

    /**
     * (team_policies) Changed how long members can stay signed in to
     * Dropbox.com
     *
     * <p> This instance must be tagged as {@link
     * Tag#WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY}. </p>
     *
     * @return The {@link WebSessionsChangeFixedLengthPolicyType} value
     *     associated with this instance if {@link
     *     #isWebSessionsChangeFixedLengthPolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isWebSessionsChangeFixedLengthPolicy} is {@code false}.
     */
    public WebSessionsChangeFixedLengthPolicyType getWebSessionsChangeFixedLengthPolicyValue() {
        if (this._tag != Tag.WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY, but was Tag." + this._tag.name());
        }
        return webSessionsChangeFixedLengthPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY}, {@code false} otherwise.
     */
    public boolean isWebSessionsChangeIdleLengthPolicy() {
        return this._tag == Tag.WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY}.
     *
     * <p> (team_policies) Changed how long team members can be idle while
     * signed in to Dropbox.com </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType webSessionsChangeIdleLengthPolicy(WebSessionsChangeIdleLengthPolicyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndWebSessionsChangeIdleLengthPolicy(Tag.WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY, value);
    }

    /**
     * (team_policies) Changed how long team members can be idle while signed in
     * to Dropbox.com
     *
     * <p> This instance must be tagged as {@link
     * Tag#WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY}. </p>
     *
     * @return The {@link WebSessionsChangeIdleLengthPolicyType} value
     *     associated with this instance if {@link
     *     #isWebSessionsChangeIdleLengthPolicy} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isWebSessionsChangeIdleLengthPolicy} is {@code false}.
     */
    public WebSessionsChangeIdleLengthPolicyType getWebSessionsChangeIdleLengthPolicyValue() {
        if (this._tag != Tag.WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY) {
            throw new IllegalStateException("Invalid tag: required Tag.WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY, but was Tag." + this._tag.name());
        }
        return webSessionsChangeIdleLengthPolicyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL}, {@code false}
     *     otherwise.
     */
    public boolean isDataResidencyMigrationRequestSuccessful() {
        return this._tag == Tag.DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL}.
     *
     * <p> (team_profile) Requested data residency migration for team data </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType dataResidencyMigrationRequestSuccessful(DataResidencyMigrationRequestSuccessfulType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDataResidencyMigrationRequestSuccessful(Tag.DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL, value);
    }

    /**
     * (team_profile) Requested data residency migration for team data
     *
     * <p> This instance must be tagged as {@link
     * Tag#DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL}. </p>
     *
     * @return The {@link DataResidencyMigrationRequestSuccessfulType} value
     *     associated with this instance if {@link
     *     #isDataResidencyMigrationRequestSuccessful} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDataResidencyMigrationRequestSuccessful} is {@code false}.
     */
    public DataResidencyMigrationRequestSuccessfulType getDataResidencyMigrationRequestSuccessfulValue() {
        if (this._tag != Tag.DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL) {
            throw new IllegalStateException("Invalid tag: required Tag.DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL, but was Tag." + this._tag.name());
        }
        return dataResidencyMigrationRequestSuccessfulValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL}, {@code false}
     *     otherwise.
     */
    public boolean isDataResidencyMigrationRequestUnsuccessful() {
        return this._tag == Tag.DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL}.
     *
     * <p> (team_profile) Request for data residency migration for team data has
     * failed </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType dataResidencyMigrationRequestUnsuccessful(DataResidencyMigrationRequestUnsuccessfulType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndDataResidencyMigrationRequestUnsuccessful(Tag.DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL, value);
    }

    /**
     * (team_profile) Request for data residency migration for team data has
     * failed
     *
     * <p> This instance must be tagged as {@link
     * Tag#DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL}. </p>
     *
     * @return The {@link DataResidencyMigrationRequestUnsuccessfulType} value
     *     associated with this instance if {@link
     *     #isDataResidencyMigrationRequestUnsuccessful} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isDataResidencyMigrationRequestUnsuccessful} is {@code false}.
     */
    public DataResidencyMigrationRequestUnsuccessfulType getDataResidencyMigrationRequestUnsuccessfulValue() {
        if (this._tag != Tag.DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL) {
            throw new IllegalStateException("Invalid tag: required Tag.DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL, but was Tag." + this._tag.name());
        }
        return dataResidencyMigrationRequestUnsuccessfulValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_FROM}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_FROM}, {@code false} otherwise.
     */
    public boolean isTeamMergeFrom() {
        return this._tag == Tag.TEAM_MERGE_FROM;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_MERGE_FROM}.
     *
     * <p> (team_profile) Merged another team into this team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_MERGE_FROM}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamMergeFrom(TeamMergeFromType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamMergeFrom(Tag.TEAM_MERGE_FROM, value);
    }

    /**
     * (team_profile) Merged another team into this team
     *
     * <p> This instance must be tagged as {@link Tag#TEAM_MERGE_FROM}. </p>
     *
     * @return The {@link TeamMergeFromType} value associated with this instance
     *     if {@link #isTeamMergeFrom} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamMergeFrom} is {@code
     *     false}.
     */
    public TeamMergeFromType getTeamMergeFromValue() {
        if (this._tag != Tag.TEAM_MERGE_FROM) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_FROM, but was Tag." + this._tag.name());
        }
        return teamMergeFromValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_TO}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_TO}, {@code false} otherwise.
     */
    public boolean isTeamMergeTo() {
        return this._tag == Tag.TEAM_MERGE_TO;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_MERGE_TO}.
     *
     * <p> (team_profile) Merged this team into another team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_MERGE_TO}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamMergeTo(TeamMergeToType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamMergeTo(Tag.TEAM_MERGE_TO, value);
    }

    /**
     * (team_profile) Merged this team into another team
     *
     * <p> This instance must be tagged as {@link Tag#TEAM_MERGE_TO}. </p>
     *
     * @return The {@link TeamMergeToType} value associated with this instance
     *     if {@link #isTeamMergeTo} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamMergeTo} is {@code
     *     false}.
     */
    public TeamMergeToType getTeamMergeToValue() {
        if (this._tag != Tag.TEAM_MERGE_TO) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_TO, but was Tag." + this._tag.name());
        }
        return teamMergeToValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_PROFILE_ADD_BACKGROUND}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_PROFILE_ADD_BACKGROUND}, {@code false} otherwise.
     */
    public boolean isTeamProfileAddBackground() {
        return this._tag == Tag.TEAM_PROFILE_ADD_BACKGROUND;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_PROFILE_ADD_BACKGROUND}.
     *
     * <p> (team_profile) Added team background to display on shared link
     * headers </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_PROFILE_ADD_BACKGROUND}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamProfileAddBackground(TeamProfileAddBackgroundType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamProfileAddBackground(Tag.TEAM_PROFILE_ADD_BACKGROUND, value);
    }

    /**
     * (team_profile) Added team background to display on shared link headers
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_PROFILE_ADD_BACKGROUND}. </p>
     *
     * @return The {@link TeamProfileAddBackgroundType} value associated with
     *     this instance if {@link #isTeamProfileAddBackground} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamProfileAddBackground} is
     *     {@code false}.
     */
    public TeamProfileAddBackgroundType getTeamProfileAddBackgroundValue() {
        if (this._tag != Tag.TEAM_PROFILE_ADD_BACKGROUND) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_PROFILE_ADD_BACKGROUND, but was Tag." + this._tag.name());
        }
        return teamProfileAddBackgroundValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_PROFILE_ADD_LOGO}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_PROFILE_ADD_LOGO}, {@code false} otherwise.
     */
    public boolean isTeamProfileAddLogo() {
        return this._tag == Tag.TEAM_PROFILE_ADD_LOGO;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_PROFILE_ADD_LOGO}.
     *
     * <p> (team_profile) Added team logo to display on shared link headers </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_PROFILE_ADD_LOGO}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamProfileAddLogo(TeamProfileAddLogoType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamProfileAddLogo(Tag.TEAM_PROFILE_ADD_LOGO, value);
    }

    /**
     * (team_profile) Added team logo to display on shared link headers
     *
     * <p> This instance must be tagged as {@link Tag#TEAM_PROFILE_ADD_LOGO}.
     * </p>
     *
     * @return The {@link TeamProfileAddLogoType} value associated with this
     *     instance if {@link #isTeamProfileAddLogo} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamProfileAddLogo} is {@code
     *     false}.
     */
    public TeamProfileAddLogoType getTeamProfileAddLogoValue() {
        if (this._tag != Tag.TEAM_PROFILE_ADD_LOGO) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_PROFILE_ADD_LOGO, but was Tag." + this._tag.name());
        }
        return teamProfileAddLogoValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_PROFILE_CHANGE_BACKGROUND}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_PROFILE_CHANGE_BACKGROUND}, {@code false} otherwise.
     */
    public boolean isTeamProfileChangeBackground() {
        return this._tag == Tag.TEAM_PROFILE_CHANGE_BACKGROUND;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_PROFILE_CHANGE_BACKGROUND}.
     *
     * <p> (team_profile) Changed team background displayed on shared link
     * headers </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_PROFILE_CHANGE_BACKGROUND}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamProfileChangeBackground(TeamProfileChangeBackgroundType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamProfileChangeBackground(Tag.TEAM_PROFILE_CHANGE_BACKGROUND, value);
    }

    /**
     * (team_profile) Changed team background displayed on shared link headers
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_PROFILE_CHANGE_BACKGROUND}. </p>
     *
     * @return The {@link TeamProfileChangeBackgroundType} value associated with
     *     this instance if {@link #isTeamProfileChangeBackground} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isTeamProfileChangeBackground}
     *     is {@code false}.
     */
    public TeamProfileChangeBackgroundType getTeamProfileChangeBackgroundValue() {
        if (this._tag != Tag.TEAM_PROFILE_CHANGE_BACKGROUND) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_PROFILE_CHANGE_BACKGROUND, but was Tag." + this._tag.name());
        }
        return teamProfileChangeBackgroundValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE}, {@code false} otherwise.
     */
    public boolean isTeamProfileChangeDefaultLanguage() {
        return this._tag == Tag.TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE}.
     *
     * <p> (team_profile) Changed default language for team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamProfileChangeDefaultLanguage(TeamProfileChangeDefaultLanguageType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamProfileChangeDefaultLanguage(Tag.TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE, value);
    }

    /**
     * (team_profile) Changed default language for team
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE}. </p>
     *
     * @return The {@link TeamProfileChangeDefaultLanguageType} value associated
     *     with this instance if {@link #isTeamProfileChangeDefaultLanguage} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamProfileChangeDefaultLanguage} is {@code false}.
     */
    public TeamProfileChangeDefaultLanguageType getTeamProfileChangeDefaultLanguageValue() {
        if (this._tag != Tag.TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE, but was Tag." + this._tag.name());
        }
        return teamProfileChangeDefaultLanguageValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_PROFILE_CHANGE_LOGO}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_PROFILE_CHANGE_LOGO}, {@code false} otherwise.
     */
    public boolean isTeamProfileChangeLogo() {
        return this._tag == Tag.TEAM_PROFILE_CHANGE_LOGO;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_PROFILE_CHANGE_LOGO}.
     *
     * <p> (team_profile) Changed team logo displayed on shared link headers
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_PROFILE_CHANGE_LOGO}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamProfileChangeLogo(TeamProfileChangeLogoType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamProfileChangeLogo(Tag.TEAM_PROFILE_CHANGE_LOGO, value);
    }

    /**
     * (team_profile) Changed team logo displayed on shared link headers
     *
     * <p> This instance must be tagged as {@link Tag#TEAM_PROFILE_CHANGE_LOGO}.
     * </p>
     *
     * @return The {@link TeamProfileChangeLogoType} value associated with this
     *     instance if {@link #isTeamProfileChangeLogo} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamProfileChangeLogo} is
     *     {@code false}.
     */
    public TeamProfileChangeLogoType getTeamProfileChangeLogoValue() {
        if (this._tag != Tag.TEAM_PROFILE_CHANGE_LOGO) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_PROFILE_CHANGE_LOGO, but was Tag." + this._tag.name());
        }
        return teamProfileChangeLogoValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_PROFILE_CHANGE_NAME}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_PROFILE_CHANGE_NAME}, {@code false} otherwise.
     */
    public boolean isTeamProfileChangeName() {
        return this._tag == Tag.TEAM_PROFILE_CHANGE_NAME;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_PROFILE_CHANGE_NAME}.
     *
     * <p> (team_profile) Changed team name </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_PROFILE_CHANGE_NAME}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamProfileChangeName(TeamProfileChangeNameType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamProfileChangeName(Tag.TEAM_PROFILE_CHANGE_NAME, value);
    }

    /**
     * (team_profile) Changed team name
     *
     * <p> This instance must be tagged as {@link Tag#TEAM_PROFILE_CHANGE_NAME}.
     * </p>
     *
     * @return The {@link TeamProfileChangeNameType} value associated with this
     *     instance if {@link #isTeamProfileChangeName} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamProfileChangeName} is
     *     {@code false}.
     */
    public TeamProfileChangeNameType getTeamProfileChangeNameValue() {
        if (this._tag != Tag.TEAM_PROFILE_CHANGE_NAME) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_PROFILE_CHANGE_NAME, but was Tag." + this._tag.name());
        }
        return teamProfileChangeNameValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_PROFILE_REMOVE_BACKGROUND}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_PROFILE_REMOVE_BACKGROUND}, {@code false} otherwise.
     */
    public boolean isTeamProfileRemoveBackground() {
        return this._tag == Tag.TEAM_PROFILE_REMOVE_BACKGROUND;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_PROFILE_REMOVE_BACKGROUND}.
     *
     * <p> (team_profile) Removed team background displayed on shared link
     * headers </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_PROFILE_REMOVE_BACKGROUND}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamProfileRemoveBackground(TeamProfileRemoveBackgroundType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamProfileRemoveBackground(Tag.TEAM_PROFILE_REMOVE_BACKGROUND, value);
    }

    /**
     * (team_profile) Removed team background displayed on shared link headers
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_PROFILE_REMOVE_BACKGROUND}. </p>
     *
     * @return The {@link TeamProfileRemoveBackgroundType} value associated with
     *     this instance if {@link #isTeamProfileRemoveBackground} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isTeamProfileRemoveBackground}
     *     is {@code false}.
     */
    public TeamProfileRemoveBackgroundType getTeamProfileRemoveBackgroundValue() {
        if (this._tag != Tag.TEAM_PROFILE_REMOVE_BACKGROUND) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_PROFILE_REMOVE_BACKGROUND, but was Tag." + this._tag.name());
        }
        return teamProfileRemoveBackgroundValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_PROFILE_REMOVE_LOGO}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_PROFILE_REMOVE_LOGO}, {@code false} otherwise.
     */
    public boolean isTeamProfileRemoveLogo() {
        return this._tag == Tag.TEAM_PROFILE_REMOVE_LOGO;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_PROFILE_REMOVE_LOGO}.
     *
     * <p> (team_profile) Removed team logo displayed on shared link headers
     * </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_PROFILE_REMOVE_LOGO}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamProfileRemoveLogo(TeamProfileRemoveLogoType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamProfileRemoveLogo(Tag.TEAM_PROFILE_REMOVE_LOGO, value);
    }

    /**
     * (team_profile) Removed team logo displayed on shared link headers
     *
     * <p> This instance must be tagged as {@link Tag#TEAM_PROFILE_REMOVE_LOGO}.
     * </p>
     *
     * @return The {@link TeamProfileRemoveLogoType} value associated with this
     *     instance if {@link #isTeamProfileRemoveLogo} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamProfileRemoveLogo} is
     *     {@code false}.
     */
    public TeamProfileRemoveLogoType getTeamProfileRemoveLogoValue() {
        if (this._tag != Tag.TEAM_PROFILE_REMOVE_LOGO) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_PROFILE_REMOVE_LOGO, but was Tag." + this._tag.name());
        }
        return teamProfileRemoveLogoValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TFA_ADD_BACKUP_PHONE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TFA_ADD_BACKUP_PHONE}, {@code false} otherwise.
     */
    public boolean isTfaAddBackupPhone() {
        return this._tag == Tag.TFA_ADD_BACKUP_PHONE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TFA_ADD_BACKUP_PHONE}.
     *
     * <p> (tfa) Added backup phone for two-step verification </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TFA_ADD_BACKUP_PHONE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType tfaAddBackupPhone(TfaAddBackupPhoneType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTfaAddBackupPhone(Tag.TFA_ADD_BACKUP_PHONE, value);
    }

    /**
     * (tfa) Added backup phone for two-step verification
     *
     * <p> This instance must be tagged as {@link Tag#TFA_ADD_BACKUP_PHONE}.
     * </p>
     *
     * @return The {@link TfaAddBackupPhoneType} value associated with this
     *     instance if {@link #isTfaAddBackupPhone} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTfaAddBackupPhone} is {@code
     *     false}.
     */
    public TfaAddBackupPhoneType getTfaAddBackupPhoneValue() {
        if (this._tag != Tag.TFA_ADD_BACKUP_PHONE) {
            throw new IllegalStateException("Invalid tag: required Tag.TFA_ADD_BACKUP_PHONE, but was Tag." + this._tag.name());
        }
        return tfaAddBackupPhoneValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TFA_ADD_SECURITY_KEY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TFA_ADD_SECURITY_KEY}, {@code false} otherwise.
     */
    public boolean isTfaAddSecurityKey() {
        return this._tag == Tag.TFA_ADD_SECURITY_KEY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TFA_ADD_SECURITY_KEY}.
     *
     * <p> (tfa) Added security key for two-step verification </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TFA_ADD_SECURITY_KEY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType tfaAddSecurityKey(TfaAddSecurityKeyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTfaAddSecurityKey(Tag.TFA_ADD_SECURITY_KEY, value);
    }

    /**
     * (tfa) Added security key for two-step verification
     *
     * <p> This instance must be tagged as {@link Tag#TFA_ADD_SECURITY_KEY}.
     * </p>
     *
     * @return The {@link TfaAddSecurityKeyType} value associated with this
     *     instance if {@link #isTfaAddSecurityKey} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTfaAddSecurityKey} is {@code
     *     false}.
     */
    public TfaAddSecurityKeyType getTfaAddSecurityKeyValue() {
        if (this._tag != Tag.TFA_ADD_SECURITY_KEY) {
            throw new IllegalStateException("Invalid tag: required Tag.TFA_ADD_SECURITY_KEY, but was Tag." + this._tag.name());
        }
        return tfaAddSecurityKeyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TFA_CHANGE_BACKUP_PHONE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TFA_CHANGE_BACKUP_PHONE}, {@code false} otherwise.
     */
    public boolean isTfaChangeBackupPhone() {
        return this._tag == Tag.TFA_CHANGE_BACKUP_PHONE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TFA_CHANGE_BACKUP_PHONE}.
     *
     * <p> (tfa) Changed backup phone for two-step verification </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TFA_CHANGE_BACKUP_PHONE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType tfaChangeBackupPhone(TfaChangeBackupPhoneType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTfaChangeBackupPhone(Tag.TFA_CHANGE_BACKUP_PHONE, value);
    }

    /**
     * (tfa) Changed backup phone for two-step verification
     *
     * <p> This instance must be tagged as {@link Tag#TFA_CHANGE_BACKUP_PHONE}.
     * </p>
     *
     * @return The {@link TfaChangeBackupPhoneType} value associated with this
     *     instance if {@link #isTfaChangeBackupPhone} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTfaChangeBackupPhone} is
     *     {@code false}.
     */
    public TfaChangeBackupPhoneType getTfaChangeBackupPhoneValue() {
        if (this._tag != Tag.TFA_CHANGE_BACKUP_PHONE) {
            throw new IllegalStateException("Invalid tag: required Tag.TFA_CHANGE_BACKUP_PHONE, but was Tag." + this._tag.name());
        }
        return tfaChangeBackupPhoneValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TFA_CHANGE_STATUS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TFA_CHANGE_STATUS}, {@code false} otherwise.
     */
    public boolean isTfaChangeStatus() {
        return this._tag == Tag.TFA_CHANGE_STATUS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TFA_CHANGE_STATUS}.
     *
     * <p> (tfa) Enabled/disabled/changed two-step verification setting </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TFA_CHANGE_STATUS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType tfaChangeStatus(TfaChangeStatusType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTfaChangeStatus(Tag.TFA_CHANGE_STATUS, value);
    }

    /**
     * (tfa) Enabled/disabled/changed two-step verification setting
     *
     * <p> This instance must be tagged as {@link Tag#TFA_CHANGE_STATUS}. </p>
     *
     * @return The {@link TfaChangeStatusType} value associated with this
     *     instance if {@link #isTfaChangeStatus} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTfaChangeStatus} is {@code
     *     false}.
     */
    public TfaChangeStatusType getTfaChangeStatusValue() {
        if (this._tag != Tag.TFA_CHANGE_STATUS) {
            throw new IllegalStateException("Invalid tag: required Tag.TFA_CHANGE_STATUS, but was Tag." + this._tag.name());
        }
        return tfaChangeStatusValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TFA_REMOVE_BACKUP_PHONE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TFA_REMOVE_BACKUP_PHONE}, {@code false} otherwise.
     */
    public boolean isTfaRemoveBackupPhone() {
        return this._tag == Tag.TFA_REMOVE_BACKUP_PHONE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TFA_REMOVE_BACKUP_PHONE}.
     *
     * <p> (tfa) Removed backup phone for two-step verification </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TFA_REMOVE_BACKUP_PHONE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType tfaRemoveBackupPhone(TfaRemoveBackupPhoneType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTfaRemoveBackupPhone(Tag.TFA_REMOVE_BACKUP_PHONE, value);
    }

    /**
     * (tfa) Removed backup phone for two-step verification
     *
     * <p> This instance must be tagged as {@link Tag#TFA_REMOVE_BACKUP_PHONE}.
     * </p>
     *
     * @return The {@link TfaRemoveBackupPhoneType} value associated with this
     *     instance if {@link #isTfaRemoveBackupPhone} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTfaRemoveBackupPhone} is
     *     {@code false}.
     */
    public TfaRemoveBackupPhoneType getTfaRemoveBackupPhoneValue() {
        if (this._tag != Tag.TFA_REMOVE_BACKUP_PHONE) {
            throw new IllegalStateException("Invalid tag: required Tag.TFA_REMOVE_BACKUP_PHONE, but was Tag." + this._tag.name());
        }
        return tfaRemoveBackupPhoneValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TFA_REMOVE_SECURITY_KEY}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TFA_REMOVE_SECURITY_KEY}, {@code false} otherwise.
     */
    public boolean isTfaRemoveSecurityKey() {
        return this._tag == Tag.TFA_REMOVE_SECURITY_KEY;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TFA_REMOVE_SECURITY_KEY}.
     *
     * <p> (tfa) Removed security key for two-step verification </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TFA_REMOVE_SECURITY_KEY}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType tfaRemoveSecurityKey(TfaRemoveSecurityKeyType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTfaRemoveSecurityKey(Tag.TFA_REMOVE_SECURITY_KEY, value);
    }

    /**
     * (tfa) Removed security key for two-step verification
     *
     * <p> This instance must be tagged as {@link Tag#TFA_REMOVE_SECURITY_KEY}.
     * </p>
     *
     * @return The {@link TfaRemoveSecurityKeyType} value associated with this
     *     instance if {@link #isTfaRemoveSecurityKey} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTfaRemoveSecurityKey} is
     *     {@code false}.
     */
    public TfaRemoveSecurityKeyType getTfaRemoveSecurityKeyValue() {
        if (this._tag != Tag.TFA_REMOVE_SECURITY_KEY) {
            throw new IllegalStateException("Invalid tag: required Tag.TFA_REMOVE_SECURITY_KEY, but was Tag." + this._tag.name());
        }
        return tfaRemoveSecurityKeyValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link Tag#TFA_RESET},
     * {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link Tag#TFA_RESET},
     *     {@code false} otherwise.
     */
    public boolean isTfaReset() {
        return this._tag == Tag.TFA_RESET;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TFA_RESET}.
     *
     * <p> (tfa) Reset two-step verification for team member </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TFA_RESET}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType tfaReset(TfaResetType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTfaReset(Tag.TFA_RESET, value);
    }

    /**
     * (tfa) Reset two-step verification for team member
     *
     * <p> This instance must be tagged as {@link Tag#TFA_RESET}. </p>
     *
     * @return The {@link TfaResetType} value associated with this instance if
     *     {@link #isTfaReset} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTfaReset} is {@code false}.
     */
    public TfaResetType getTfaResetValue() {
        if (this._tag != Tag.TFA_RESET) {
            throw new IllegalStateException("Invalid tag: required Tag.TFA_RESET, but was Tag." + this._tag.name());
        }
        return tfaResetValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#CHANGED_ENTERPRISE_ADMIN_ROLE}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#CHANGED_ENTERPRISE_ADMIN_ROLE}, {@code false} otherwise.
     */
    public boolean isChangedEnterpriseAdminRole() {
        return this._tag == Tag.CHANGED_ENTERPRISE_ADMIN_ROLE;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#CHANGED_ENTERPRISE_ADMIN_ROLE}.
     *
     * <p> (trusted_teams) Changed enterprise admin role </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#CHANGED_ENTERPRISE_ADMIN_ROLE}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType changedEnterpriseAdminRole(ChangedEnterpriseAdminRoleType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndChangedEnterpriseAdminRole(Tag.CHANGED_ENTERPRISE_ADMIN_ROLE, value);
    }

    /**
     * (trusted_teams) Changed enterprise admin role
     *
     * <p> This instance must be tagged as {@link
     * Tag#CHANGED_ENTERPRISE_ADMIN_ROLE}. </p>
     *
     * @return The {@link ChangedEnterpriseAdminRoleType} value associated with
     *     this instance if {@link #isChangedEnterpriseAdminRole} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isChangedEnterpriseAdminRole}
     *     is {@code false}.
     */
    public ChangedEnterpriseAdminRoleType getChangedEnterpriseAdminRoleValue() {
        if (this._tag != Tag.CHANGED_ENTERPRISE_ADMIN_ROLE) {
            throw new IllegalStateException("Invalid tag: required Tag.CHANGED_ENTERPRISE_ADMIN_ROLE, but was Tag." + this._tag.name());
        }
        return changedEnterpriseAdminRoleValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS}, {@code false}
     *     otherwise.
     */
    public boolean isChangedEnterpriseConnectedTeamStatus() {
        return this._tag == Tag.CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS}.
     *
     * <p> (trusted_teams) Changed enterprise-connected team status </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType changedEnterpriseConnectedTeamStatus(ChangedEnterpriseConnectedTeamStatusType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndChangedEnterpriseConnectedTeamStatus(Tag.CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS, value);
    }

    /**
     * (trusted_teams) Changed enterprise-connected team status
     *
     * <p> This instance must be tagged as {@link
     * Tag#CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS}. </p>
     *
     * @return The {@link ChangedEnterpriseConnectedTeamStatusType} value
     *     associated with this instance if {@link
     *     #isChangedEnterpriseConnectedTeamStatus} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isChangedEnterpriseConnectedTeamStatus} is {@code false}.
     */
    public ChangedEnterpriseConnectedTeamStatusType getChangedEnterpriseConnectedTeamStatusValue() {
        if (this._tag != Tag.CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS) {
            throw new IllegalStateException("Invalid tag: required Tag.CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS, but was Tag." + this._tag.name());
        }
        return changedEnterpriseConnectedTeamStatusValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ENDED_ENTERPRISE_ADMIN_SESSION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ENDED_ENTERPRISE_ADMIN_SESSION}, {@code false} otherwise.
     */
    public boolean isEndedEnterpriseAdminSession() {
        return this._tag == Tag.ENDED_ENTERPRISE_ADMIN_SESSION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#ENDED_ENTERPRISE_ADMIN_SESSION}.
     *
     * <p> (trusted_teams) Ended enterprise admin session </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#ENDED_ENTERPRISE_ADMIN_SESSION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType endedEnterpriseAdminSession(EndedEnterpriseAdminSessionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndEndedEnterpriseAdminSession(Tag.ENDED_ENTERPRISE_ADMIN_SESSION, value);
    }

    /**
     * (trusted_teams) Ended enterprise admin session
     *
     * <p> This instance must be tagged as {@link
     * Tag#ENDED_ENTERPRISE_ADMIN_SESSION}. </p>
     *
     * @return The {@link EndedEnterpriseAdminSessionType} value associated with
     *     this instance if {@link #isEndedEnterpriseAdminSession} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isEndedEnterpriseAdminSession}
     *     is {@code false}.
     */
    public EndedEnterpriseAdminSessionType getEndedEnterpriseAdminSessionValue() {
        if (this._tag != Tag.ENDED_ENTERPRISE_ADMIN_SESSION) {
            throw new IllegalStateException("Invalid tag: required Tag.ENDED_ENTERPRISE_ADMIN_SESSION, but was Tag." + this._tag.name());
        }
        return endedEnterpriseAdminSessionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED}, {@code false}
     *     otherwise.
     */
    public boolean isEndedEnterpriseAdminSessionDeprecated() {
        return this._tag == Tag.ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED}.
     *
     * <p> (trusted_teams) Ended enterprise admin session (deprecated, replaced
     * by 'Ended enterprise admin session') </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType endedEnterpriseAdminSessionDeprecated(EndedEnterpriseAdminSessionDeprecatedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndEndedEnterpriseAdminSessionDeprecated(Tag.ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED, value);
    }

    /**
     * (trusted_teams) Ended enterprise admin session (deprecated, replaced by
     * 'Ended enterprise admin session')
     *
     * <p> This instance must be tagged as {@link
     * Tag#ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED}. </p>
     *
     * @return The {@link EndedEnterpriseAdminSessionDeprecatedType} value
     *     associated with this instance if {@link
     *     #isEndedEnterpriseAdminSessionDeprecated} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isEndedEnterpriseAdminSessionDeprecated} is {@code false}.
     */
    public EndedEnterpriseAdminSessionDeprecatedType getEndedEnterpriseAdminSessionDeprecatedValue() {
        if (this._tag != Tag.ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED) {
            throw new IllegalStateException("Invalid tag: required Tag.ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED, but was Tag." + this._tag.name());
        }
        return endedEnterpriseAdminSessionDeprecatedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#ENTERPRISE_SETTINGS_LOCKING}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#ENTERPRISE_SETTINGS_LOCKING}, {@code false} otherwise.
     */
    public boolean isEnterpriseSettingsLocking() {
        return this._tag == Tag.ENTERPRISE_SETTINGS_LOCKING;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#ENTERPRISE_SETTINGS_LOCKING}.
     *
     * <p> (trusted_teams) Changed who can update a setting </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#ENTERPRISE_SETTINGS_LOCKING}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType enterpriseSettingsLocking(EnterpriseSettingsLockingType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndEnterpriseSettingsLocking(Tag.ENTERPRISE_SETTINGS_LOCKING, value);
    }

    /**
     * (trusted_teams) Changed who can update a setting
     *
     * <p> This instance must be tagged as {@link
     * Tag#ENTERPRISE_SETTINGS_LOCKING}. </p>
     *
     * @return The {@link EnterpriseSettingsLockingType} value associated with
     *     this instance if {@link #isEnterpriseSettingsLocking} is {@code
     *     true}.
     *
     * @throws IllegalStateException  If {@link #isEnterpriseSettingsLocking} is
     *     {@code false}.
     */
    public EnterpriseSettingsLockingType getEnterpriseSettingsLockingValue() {
        if (this._tag != Tag.ENTERPRISE_SETTINGS_LOCKING) {
            throw new IllegalStateException("Invalid tag: required Tag.ENTERPRISE_SETTINGS_LOCKING, but was Tag." + this._tag.name());
        }
        return enterpriseSettingsLockingValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#GUEST_ADMIN_CHANGE_STATUS}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#GUEST_ADMIN_CHANGE_STATUS}, {@code false} otherwise.
     */
    public boolean isGuestAdminChangeStatus() {
        return this._tag == Tag.GUEST_ADMIN_CHANGE_STATUS;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#GUEST_ADMIN_CHANGE_STATUS}.
     *
     * <p> (trusted_teams) Changed guest team admin status </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#GUEST_ADMIN_CHANGE_STATUS}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType guestAdminChangeStatus(GuestAdminChangeStatusType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndGuestAdminChangeStatus(Tag.GUEST_ADMIN_CHANGE_STATUS, value);
    }

    /**
     * (trusted_teams) Changed guest team admin status
     *
     * <p> This instance must be tagged as {@link
     * Tag#GUEST_ADMIN_CHANGE_STATUS}. </p>
     *
     * @return The {@link GuestAdminChangeStatusType} value associated with this
     *     instance if {@link #isGuestAdminChangeStatus} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isGuestAdminChangeStatus} is
     *     {@code false}.
     */
    public GuestAdminChangeStatusType getGuestAdminChangeStatusValue() {
        if (this._tag != Tag.GUEST_ADMIN_CHANGE_STATUS) {
            throw new IllegalStateException("Invalid tag: required Tag.GUEST_ADMIN_CHANGE_STATUS, but was Tag." + this._tag.name());
        }
        return guestAdminChangeStatusValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#STARTED_ENTERPRISE_ADMIN_SESSION}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#STARTED_ENTERPRISE_ADMIN_SESSION}, {@code false} otherwise.
     */
    public boolean isStartedEnterpriseAdminSession() {
        return this._tag == Tag.STARTED_ENTERPRISE_ADMIN_SESSION;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#STARTED_ENTERPRISE_ADMIN_SESSION}.
     *
     * <p> (trusted_teams) Started enterprise admin session </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#STARTED_ENTERPRISE_ADMIN_SESSION}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType startedEnterpriseAdminSession(StartedEnterpriseAdminSessionType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndStartedEnterpriseAdminSession(Tag.STARTED_ENTERPRISE_ADMIN_SESSION, value);
    }

    /**
     * (trusted_teams) Started enterprise admin session
     *
     * <p> This instance must be tagged as {@link
     * Tag#STARTED_ENTERPRISE_ADMIN_SESSION}. </p>
     *
     * @return The {@link StartedEnterpriseAdminSessionType} value associated
     *     with this instance if {@link #isStartedEnterpriseAdminSession} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isStartedEnterpriseAdminSession} is {@code false}.
     */
    public StartedEnterpriseAdminSessionType getStartedEnterpriseAdminSessionValue() {
        if (this._tag != Tag.STARTED_ENTERPRISE_ADMIN_SESSION) {
            throw new IllegalStateException("Invalid tag: required Tag.STARTED_ENTERPRISE_ADMIN_SESSION, but was Tag." + this._tag.name());
        }
        return startedEnterpriseAdminSessionValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_ACCEPTED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_ACCEPTED}, {@code false} otherwise.
     */
    public boolean isTeamMergeRequestAccepted() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_ACCEPTED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_MERGE_REQUEST_ACCEPTED}.
     *
     * <p> (trusted_teams) Accepted a team merge request </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_ACCEPTED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamMergeRequestAccepted(TeamMergeRequestAcceptedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamMergeRequestAccepted(Tag.TEAM_MERGE_REQUEST_ACCEPTED, value);
    }

    /**
     * (trusted_teams) Accepted a team merge request
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_ACCEPTED}. </p>
     *
     * @return The {@link TeamMergeRequestAcceptedType} value associated with
     *     this instance if {@link #isTeamMergeRequestAccepted} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamMergeRequestAccepted} is
     *     {@code false}.
     */
    public TeamMergeRequestAcceptedType getTeamMergeRequestAcceptedValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_ACCEPTED) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_ACCEPTED, but was Tag." + this._tag.name());
        }
        return teamMergeRequestAcceptedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM}, {@code false}
     *     otherwise.
     */
    public boolean isTeamMergeRequestAcceptedShownToPrimaryTeam() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM}.
     *
     * <p> (trusted_teams) Accepted a team merge request (deprecated, replaced
     * by 'Accepted a team merge request') </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamMergeRequestAcceptedShownToPrimaryTeam(TeamMergeRequestAcceptedShownToPrimaryTeamType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamMergeRequestAcceptedShownToPrimaryTeam(Tag.TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM, value);
    }

    /**
     * (trusted_teams) Accepted a team merge request (deprecated, replaced by
     * 'Accepted a team merge request')
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM}. </p>
     *
     * @return The {@link TeamMergeRequestAcceptedShownToPrimaryTeamType} value
     *     associated with this instance if {@link
     *     #isTeamMergeRequestAcceptedShownToPrimaryTeam} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestAcceptedShownToPrimaryTeam} is {@code false}.
     */
    public TeamMergeRequestAcceptedShownToPrimaryTeamType getTeamMergeRequestAcceptedShownToPrimaryTeamValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM, but was Tag." + this._tag.name());
        }
        return teamMergeRequestAcceptedShownToPrimaryTeamValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM}, {@code
     *     false} otherwise.
     */
    public boolean isTeamMergeRequestAcceptedShownToSecondaryTeam() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM}.
     *
     * <p> (trusted_teams) Accepted a team merge request (deprecated, replaced
     * by 'Accepted a team merge request') </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamMergeRequestAcceptedShownToSecondaryTeam(TeamMergeRequestAcceptedShownToSecondaryTeamType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamMergeRequestAcceptedShownToSecondaryTeam(Tag.TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM, value);
    }

    /**
     * (trusted_teams) Accepted a team merge request (deprecated, replaced by
     * 'Accepted a team merge request')
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM}. </p>
     *
     * @return The {@link TeamMergeRequestAcceptedShownToSecondaryTeamType}
     *     value associated with this instance if {@link
     *     #isTeamMergeRequestAcceptedShownToSecondaryTeam} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestAcceptedShownToSecondaryTeam} is {@code false}.
     */
    public TeamMergeRequestAcceptedShownToSecondaryTeamType getTeamMergeRequestAcceptedShownToSecondaryTeamValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM, but was Tag." + this._tag.name());
        }
        return teamMergeRequestAcceptedShownToSecondaryTeamValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_AUTO_CANCELED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_AUTO_CANCELED}, {@code false} otherwise.
     */
    public boolean isTeamMergeRequestAutoCanceled() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_AUTO_CANCELED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_MERGE_REQUEST_AUTO_CANCELED}.
     *
     * <p> (trusted_teams) Automatically canceled team merge request </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_AUTO_CANCELED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamMergeRequestAutoCanceled(TeamMergeRequestAutoCanceledType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamMergeRequestAutoCanceled(Tag.TEAM_MERGE_REQUEST_AUTO_CANCELED, value);
    }

    /**
     * (trusted_teams) Automatically canceled team merge request
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_AUTO_CANCELED}. </p>
     *
     * @return The {@link TeamMergeRequestAutoCanceledType} value associated
     *     with this instance if {@link #isTeamMergeRequestAutoCanceled} is
     *     {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamMergeRequestAutoCanceled}
     *     is {@code false}.
     */
    public TeamMergeRequestAutoCanceledType getTeamMergeRequestAutoCanceledValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_AUTO_CANCELED) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_AUTO_CANCELED, but was Tag." + this._tag.name());
        }
        return teamMergeRequestAutoCanceledValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_CANCELED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_CANCELED}, {@code false} otherwise.
     */
    public boolean isTeamMergeRequestCanceled() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_CANCELED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_MERGE_REQUEST_CANCELED}.
     *
     * <p> (trusted_teams) Canceled a team merge request </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_CANCELED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamMergeRequestCanceled(TeamMergeRequestCanceledType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamMergeRequestCanceled(Tag.TEAM_MERGE_REQUEST_CANCELED, value);
    }

    /**
     * (trusted_teams) Canceled a team merge request
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_CANCELED}. </p>
     *
     * @return The {@link TeamMergeRequestCanceledType} value associated with
     *     this instance if {@link #isTeamMergeRequestCanceled} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamMergeRequestCanceled} is
     *     {@code false}.
     */
    public TeamMergeRequestCanceledType getTeamMergeRequestCanceledValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_CANCELED) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_CANCELED, but was Tag." + this._tag.name());
        }
        return teamMergeRequestCanceledValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM}, {@code false}
     *     otherwise.
     */
    public boolean isTeamMergeRequestCanceledShownToPrimaryTeam() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM}.
     *
     * <p> (trusted_teams) Canceled a team merge request (deprecated, replaced
     * by 'Canceled a team merge request') </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamMergeRequestCanceledShownToPrimaryTeam(TeamMergeRequestCanceledShownToPrimaryTeamType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamMergeRequestCanceledShownToPrimaryTeam(Tag.TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM, value);
    }

    /**
     * (trusted_teams) Canceled a team merge request (deprecated, replaced by
     * 'Canceled a team merge request')
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM}. </p>
     *
     * @return The {@link TeamMergeRequestCanceledShownToPrimaryTeamType} value
     *     associated with this instance if {@link
     *     #isTeamMergeRequestCanceledShownToPrimaryTeam} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestCanceledShownToPrimaryTeam} is {@code false}.
     */
    public TeamMergeRequestCanceledShownToPrimaryTeamType getTeamMergeRequestCanceledShownToPrimaryTeamValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM, but was Tag." + this._tag.name());
        }
        return teamMergeRequestCanceledShownToPrimaryTeamValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM}, {@code
     *     false} otherwise.
     */
    public boolean isTeamMergeRequestCanceledShownToSecondaryTeam() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM}.
     *
     * <p> (trusted_teams) Canceled a team merge request (deprecated, replaced
     * by 'Canceled a team merge request') </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamMergeRequestCanceledShownToSecondaryTeam(TeamMergeRequestCanceledShownToSecondaryTeamType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamMergeRequestCanceledShownToSecondaryTeam(Tag.TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM, value);
    }

    /**
     * (trusted_teams) Canceled a team merge request (deprecated, replaced by
     * 'Canceled a team merge request')
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM}. </p>
     *
     * @return The {@link TeamMergeRequestCanceledShownToSecondaryTeamType}
     *     value associated with this instance if {@link
     *     #isTeamMergeRequestCanceledShownToSecondaryTeam} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestCanceledShownToSecondaryTeam} is {@code false}.
     */
    public TeamMergeRequestCanceledShownToSecondaryTeamType getTeamMergeRequestCanceledShownToSecondaryTeamValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM, but was Tag." + this._tag.name());
        }
        return teamMergeRequestCanceledShownToSecondaryTeamValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_EXPIRED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_EXPIRED}, {@code false} otherwise.
     */
    public boolean isTeamMergeRequestExpired() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_EXPIRED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_MERGE_REQUEST_EXPIRED}.
     *
     * <p> (trusted_teams) Team merge request expired </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_EXPIRED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamMergeRequestExpired(TeamMergeRequestExpiredType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamMergeRequestExpired(Tag.TEAM_MERGE_REQUEST_EXPIRED, value);
    }

    /**
     * (trusted_teams) Team merge request expired
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_EXPIRED}. </p>
     *
     * @return The {@link TeamMergeRequestExpiredType} value associated with
     *     this instance if {@link #isTeamMergeRequestExpired} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamMergeRequestExpired} is
     *     {@code false}.
     */
    public TeamMergeRequestExpiredType getTeamMergeRequestExpiredValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_EXPIRED) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_EXPIRED, but was Tag." + this._tag.name());
        }
        return teamMergeRequestExpiredValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM}, {@code false}
     *     otherwise.
     */
    public boolean isTeamMergeRequestExpiredShownToPrimaryTeam() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM}.
     *
     * <p> (trusted_teams) Team merge request expired (deprecated, replaced by
     * 'Team merge request expired') </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamMergeRequestExpiredShownToPrimaryTeam(TeamMergeRequestExpiredShownToPrimaryTeamType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamMergeRequestExpiredShownToPrimaryTeam(Tag.TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM, value);
    }

    /**
     * (trusted_teams) Team merge request expired (deprecated, replaced by 'Team
     * merge request expired')
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM}. </p>
     *
     * @return The {@link TeamMergeRequestExpiredShownToPrimaryTeamType} value
     *     associated with this instance if {@link
     *     #isTeamMergeRequestExpiredShownToPrimaryTeam} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestExpiredShownToPrimaryTeam} is {@code false}.
     */
    public TeamMergeRequestExpiredShownToPrimaryTeamType getTeamMergeRequestExpiredShownToPrimaryTeamValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM, but was Tag." + this._tag.name());
        }
        return teamMergeRequestExpiredShownToPrimaryTeamValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM}, {@code
     *     false} otherwise.
     */
    public boolean isTeamMergeRequestExpiredShownToSecondaryTeam() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM}.
     *
     * <p> (trusted_teams) Team merge request expired (deprecated, replaced by
     * 'Team merge request expired') </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamMergeRequestExpiredShownToSecondaryTeam(TeamMergeRequestExpiredShownToSecondaryTeamType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamMergeRequestExpiredShownToSecondaryTeam(Tag.TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM, value);
    }

    /**
     * (trusted_teams) Team merge request expired (deprecated, replaced by 'Team
     * merge request expired')
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM}. </p>
     *
     * @return The {@link TeamMergeRequestExpiredShownToSecondaryTeamType} value
     *     associated with this instance if {@link
     *     #isTeamMergeRequestExpiredShownToSecondaryTeam} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestExpiredShownToSecondaryTeam} is {@code false}.
     */
    public TeamMergeRequestExpiredShownToSecondaryTeamType getTeamMergeRequestExpiredShownToSecondaryTeamValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM, but was Tag." + this._tag.name());
        }
        return teamMergeRequestExpiredShownToSecondaryTeamValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM}, {@code false}
     *     otherwise.
     */
    public boolean isTeamMergeRequestRejectedShownToPrimaryTeam() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM}.
     *
     * <p> (trusted_teams) Rejected a team merge request (deprecated, no longer
     * logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamMergeRequestRejectedShownToPrimaryTeam(TeamMergeRequestRejectedShownToPrimaryTeamType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamMergeRequestRejectedShownToPrimaryTeam(Tag.TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM, value);
    }

    /**
     * (trusted_teams) Rejected a team merge request (deprecated, no longer
     * logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM}. </p>
     *
     * @return The {@link TeamMergeRequestRejectedShownToPrimaryTeamType} value
     *     associated with this instance if {@link
     *     #isTeamMergeRequestRejectedShownToPrimaryTeam} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestRejectedShownToPrimaryTeam} is {@code false}.
     */
    public TeamMergeRequestRejectedShownToPrimaryTeamType getTeamMergeRequestRejectedShownToPrimaryTeamValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM, but was Tag." + this._tag.name());
        }
        return teamMergeRequestRejectedShownToPrimaryTeamValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM}, {@code
     *     false} otherwise.
     */
    public boolean isTeamMergeRequestRejectedShownToSecondaryTeam() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM}.
     *
     * <p> (trusted_teams) Rejected a team merge request (deprecated, no longer
     * logged) </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamMergeRequestRejectedShownToSecondaryTeam(TeamMergeRequestRejectedShownToSecondaryTeamType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamMergeRequestRejectedShownToSecondaryTeam(Tag.TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM, value);
    }

    /**
     * (trusted_teams) Rejected a team merge request (deprecated, no longer
     * logged)
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM}. </p>
     *
     * @return The {@link TeamMergeRequestRejectedShownToSecondaryTeamType}
     *     value associated with this instance if {@link
     *     #isTeamMergeRequestRejectedShownToSecondaryTeam} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestRejectedShownToSecondaryTeam} is {@code false}.
     */
    public TeamMergeRequestRejectedShownToSecondaryTeamType getTeamMergeRequestRejectedShownToSecondaryTeamValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM, but was Tag." + this._tag.name());
        }
        return teamMergeRequestRejectedShownToSecondaryTeamValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_REMINDER}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_REMINDER}, {@code false} otherwise.
     */
    public boolean isTeamMergeRequestReminder() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_REMINDER;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_MERGE_REQUEST_REMINDER}.
     *
     * <p> (trusted_teams) Sent a team merge request reminder </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_REMINDER}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamMergeRequestReminder(TeamMergeRequestReminderType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamMergeRequestReminder(Tag.TEAM_MERGE_REQUEST_REMINDER, value);
    }

    /**
     * (trusted_teams) Sent a team merge request reminder
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_REMINDER}. </p>
     *
     * @return The {@link TeamMergeRequestReminderType} value associated with
     *     this instance if {@link #isTeamMergeRequestReminder} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamMergeRequestReminder} is
     *     {@code false}.
     */
    public TeamMergeRequestReminderType getTeamMergeRequestReminderValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_REMINDER) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_REMINDER, but was Tag." + this._tag.name());
        }
        return teamMergeRequestReminderValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM}, {@code false}
     *     otherwise.
     */
    public boolean isTeamMergeRequestReminderShownToPrimaryTeam() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM}.
     *
     * <p> (trusted_teams) Sent a team merge request reminder (deprecated,
     * replaced by 'Sent a team merge request reminder') </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamMergeRequestReminderShownToPrimaryTeam(TeamMergeRequestReminderShownToPrimaryTeamType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamMergeRequestReminderShownToPrimaryTeam(Tag.TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM, value);
    }

    /**
     * (trusted_teams) Sent a team merge request reminder (deprecated, replaced
     * by 'Sent a team merge request reminder')
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM}. </p>
     *
     * @return The {@link TeamMergeRequestReminderShownToPrimaryTeamType} value
     *     associated with this instance if {@link
     *     #isTeamMergeRequestReminderShownToPrimaryTeam} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestReminderShownToPrimaryTeam} is {@code false}.
     */
    public TeamMergeRequestReminderShownToPrimaryTeamType getTeamMergeRequestReminderShownToPrimaryTeamValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM, but was Tag." + this._tag.name());
        }
        return teamMergeRequestReminderShownToPrimaryTeamValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM}, {@code
     *     false} otherwise.
     */
    public boolean isTeamMergeRequestReminderShownToSecondaryTeam() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM}.
     *
     * <p> (trusted_teams) Sent a team merge request reminder (deprecated,
     * replaced by 'Sent a team merge request reminder') </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamMergeRequestReminderShownToSecondaryTeam(TeamMergeRequestReminderShownToSecondaryTeamType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamMergeRequestReminderShownToSecondaryTeam(Tag.TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM, value);
    }

    /**
     * (trusted_teams) Sent a team merge request reminder (deprecated, replaced
     * by 'Sent a team merge request reminder')
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM}. </p>
     *
     * @return The {@link TeamMergeRequestReminderShownToSecondaryTeamType}
     *     value associated with this instance if {@link
     *     #isTeamMergeRequestReminderShownToSecondaryTeam} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestReminderShownToSecondaryTeam} is {@code false}.
     */
    public TeamMergeRequestReminderShownToSecondaryTeamType getTeamMergeRequestReminderShownToSecondaryTeamValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM, but was Tag." + this._tag.name());
        }
        return teamMergeRequestReminderShownToSecondaryTeamValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_REVOKED}, {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_REVOKED}, {@code false} otherwise.
     */
    public boolean isTeamMergeRequestRevoked() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_REVOKED;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_MERGE_REQUEST_REVOKED}.
     *
     * <p> (trusted_teams) Canceled the team merge </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_REVOKED}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamMergeRequestRevoked(TeamMergeRequestRevokedType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamMergeRequestRevoked(Tag.TEAM_MERGE_REQUEST_REVOKED, value);
    }

    /**
     * (trusted_teams) Canceled the team merge
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_REVOKED}. </p>
     *
     * @return The {@link TeamMergeRequestRevokedType} value associated with
     *     this instance if {@link #isTeamMergeRequestRevoked} is {@code true}.
     *
     * @throws IllegalStateException  If {@link #isTeamMergeRequestRevoked} is
     *     {@code false}.
     */
    public TeamMergeRequestRevokedType getTeamMergeRequestRevokedValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_REVOKED) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_REVOKED, but was Tag." + this._tag.name());
        }
        return teamMergeRequestRevokedValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM}, {@code false}
     *     otherwise.
     */
    public boolean isTeamMergeRequestSentShownToPrimaryTeam() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM}.
     *
     * <p> (trusted_teams) Requested to merge their Dropbox team into yours </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamMergeRequestSentShownToPrimaryTeam(TeamMergeRequestSentShownToPrimaryTeamType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamMergeRequestSentShownToPrimaryTeam(Tag.TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM, value);
    }

    /**
     * (trusted_teams) Requested to merge their Dropbox team into yours
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM}. </p>
     *
     * @return The {@link TeamMergeRequestSentShownToPrimaryTeamType} value
     *     associated with this instance if {@link
     *     #isTeamMergeRequestSentShownToPrimaryTeam} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestSentShownToPrimaryTeam} is {@code false}.
     */
    public TeamMergeRequestSentShownToPrimaryTeamType getTeamMergeRequestSentShownToPrimaryTeamValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM, but was Tag." + this._tag.name());
        }
        return teamMergeRequestSentShownToPrimaryTeamValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link
     * Tag#TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM}, {@code false}
     * otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link
     *     Tag#TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM}, {@code false}
     *     otherwise.
     */
    public boolean isTeamMergeRequestSentShownToSecondaryTeam() {
        return this._tag == Tag.TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM;
    }

    /**
     * Returns an instance of {@code EventType} that has its tag set to {@link
     * Tag#TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM}.
     *
     * <p> (trusted_teams) Requested to merge your team into another Dropbox
     * team </p>
     *
     * @param value  value to assign to this instance.
     *
     * @return Instance of {@code EventType} with its tag set to {@link
     *     Tag#TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM}.
     *
     * @throws IllegalArgumentException  if {@code value} is {@code null}.
     */
    public static EventType teamMergeRequestSentShownToSecondaryTeam(TeamMergeRequestSentShownToSecondaryTeamType value) {
        if (value == null) {
            throw new IllegalArgumentException("Value is null");
        }
        return new EventType().withTagAndTeamMergeRequestSentShownToSecondaryTeam(Tag.TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM, value);
    }

    /**
     * (trusted_teams) Requested to merge your team into another Dropbox team
     *
     * <p> This instance must be tagged as {@link
     * Tag#TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM}. </p>
     *
     * @return The {@link TeamMergeRequestSentShownToSecondaryTeamType} value
     *     associated with this instance if {@link
     *     #isTeamMergeRequestSentShownToSecondaryTeam} is {@code true}.
     *
     * @throws IllegalStateException  If {@link
     *     #isTeamMergeRequestSentShownToSecondaryTeam} is {@code false}.
     */
    public TeamMergeRequestSentShownToSecondaryTeamType getTeamMergeRequestSentShownToSecondaryTeamValue() {
        if (this._tag != Tag.TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM) {
            throw new IllegalStateException("Invalid tag: required Tag.TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM, but was Tag." + this._tag.name());
        }
        return teamMergeRequestSentShownToSecondaryTeamValue;
    }

    /**
     * Returns {@code true} if this instance has the tag {@link Tag#OTHER},
     * {@code false} otherwise.
     *
     * @return {@code true} if this instance is tagged as {@link Tag#OTHER},
     *     {@code false} otherwise.
     */
    public boolean isOther() {
        return this._tag == Tag.OTHER;
    }

    @Override
    public int hashCode() {
        int hash = Arrays.hashCode(new Object [] {
            _tag,
            adminAlertingAlertStateChangedValue,
            adminAlertingChangedAlertConfigValue,
            adminAlertingTriggeredAlertValue,
            appBlockedByPermissionsValue,
            appLinkTeamValue,
            appLinkUserValue,
            appUnlinkTeamValue,
            appUnlinkUserValue,
            integrationConnectedValue,
            integrationDisconnectedValue,
            fileAddCommentValue,
            fileChangeCommentSubscriptionValue,
            fileDeleteCommentValue,
            fileEditCommentValue,
            fileLikeCommentValue,
            fileResolveCommentValue,
            fileUnlikeCommentValue,
            fileUnresolveCommentValue,
            governancePolicyAddFoldersValue,
            governancePolicyAddFolderFailedValue,
            governancePolicyContentDisposedValue,
            governancePolicyCreateValue,
            governancePolicyDeleteValue,
            governancePolicyEditDetailsValue,
            governancePolicyEditDurationValue,
            governancePolicyExportCreatedValue,
            governancePolicyExportRemovedValue,
            governancePolicyRemoveFoldersValue,
            governancePolicyReportCreatedValue,
            governancePolicyZipPartDownloadedValue,
            legalHoldsActivateAHoldValue,
            legalHoldsAddMembersValue,
            legalHoldsChangeHoldDetailsValue,
            legalHoldsChangeHoldNameValue,
            legalHoldsExportAHoldValue,
            legalHoldsExportCancelledValue,
            legalHoldsExportDownloadedValue,
            legalHoldsExportRemovedValue,
            legalHoldsReleaseAHoldValue,
            legalHoldsRemoveMembersValue,
            legalHoldsReportAHoldValue,
            deviceChangeIpDesktopValue,
            deviceChangeIpMobileValue,
            deviceChangeIpWebValue,
            deviceDeleteOnUnlinkFailValue,
            deviceDeleteOnUnlinkSuccessValue,
            deviceLinkFailValue,
            deviceLinkSuccessValue,
            deviceManagementDisabledValue,
            deviceManagementEnabledValue,
            deviceSyncBackupStatusChangedValue,
            deviceUnlinkValue,
            dropboxPasswordsExportedValue,
            dropboxPasswordsNewDeviceEnrolledValue,
            emmRefreshAuthTokenValue,
            externalDriveBackupEligibilityStatusCheckedValue,
            externalDriveBackupStatusChangedValue,
            accountCaptureChangeAvailabilityValue,
            accountCaptureMigrateAccountValue,
            accountCaptureNotificationEmailsSentValue,
            accountCaptureRelinquishAccountValue,
            disabledDomainInvitesValue,
            domainInvitesApproveRequestToJoinTeamValue,
            domainInvitesDeclineRequestToJoinTeamValue,
            domainInvitesEmailExistingUsersValue,
            domainInvitesRequestToJoinTeamValue,
            domainInvitesSetInviteNewUserPrefToNoValue,
            domainInvitesSetInviteNewUserPrefToYesValue,
            domainVerificationAddDomainFailValue,
            domainVerificationAddDomainSuccessValue,
            domainVerificationRemoveDomainValue,
            enabledDomainInvitesValue,
            applyNamingConventionValue,
            createFolderValue,
            fileAddValue,
            fileCopyValue,
            fileDeleteValue,
            fileDownloadValue,
            fileEditValue,
            fileGetCopyReferenceValue,
            fileLockingLockStatusChangedValue,
            fileMoveValue,
            filePermanentlyDeleteValue,
            filePreviewValue,
            fileRenameValue,
            fileRestoreValue,
            fileRevertValue,
            fileRollbackChangesValue,
            fileSaveCopyReferenceValue,
            folderOverviewDescriptionChangedValue,
            folderOverviewItemPinnedValue,
            folderOverviewItemUnpinnedValue,
            objectLabelAddedValue,
            objectLabelRemovedValue,
            objectLabelUpdatedValueValue,
            organizeFolderWithTidyValue,
            rewindFolderValue,
            undoNamingConventionValue,
            undoOrganizeFolderWithTidyValue,
            userTagsAddedValue,
            userTagsRemovedValue,
            emailIngestReceiveFileValue,
            fileRequestChangeValue,
            fileRequestCloseValue,
            fileRequestCreateValue,
            fileRequestDeleteValue,
            fileRequestReceiveFileValue,
            groupAddExternalIdValue,
            groupAddMemberValue,
            groupChangeExternalIdValue,
            groupChangeManagementTypeValue,
            groupChangeMemberRoleValue,
            groupCreateValue,
            groupDeleteValue,
            groupDescriptionUpdatedValue,
            groupJoinPolicyUpdatedValue,
            groupMovedValue,
            groupRemoveExternalIdValue,
            groupRemoveMemberValue,
            groupRenameValue,
            accountLockOrUnlockedValue,
            emmErrorValue,
            guestAdminSignedInViaTrustedTeamsValue,
            guestAdminSignedOutViaTrustedTeamsValue,
            loginFailValue,
            loginSuccessValue,
            logoutValue,
            resellerSupportSessionEndValue,
            resellerSupportSessionStartValue,
            signInAsSessionEndValue,
            signInAsSessionStartValue,
            ssoErrorValue,
            createTeamInviteLinkValue,
            deleteTeamInviteLinkValue,
            memberAddExternalIdValue,
            memberAddNameValue,
            memberChangeAdminRoleValue,
            memberChangeEmailValue,
            memberChangeExternalIdValue,
            memberChangeMembershipTypeValue,
            memberChangeNameValue,
            memberChangeResellerRoleValue,
            memberChangeStatusValue,
            memberDeleteManualContactsValue,
            memberDeleteProfilePhotoValue,
            memberPermanentlyDeleteAccountContentsValue,
            memberRemoveExternalIdValue,
            memberSetProfilePhotoValue,
            memberSpaceLimitsAddCustomQuotaValue,
            memberSpaceLimitsChangeCustomQuotaValue,
            memberSpaceLimitsChangeStatusValue,
            memberSpaceLimitsRemoveCustomQuotaValue,
            memberSuggestValue,
            memberTransferAccountContentsValue,
            pendingSecondaryEmailAddedValue,
            secondaryEmailDeletedValue,
            secondaryEmailVerifiedValue,
            secondaryMailsPolicyChangedValue,
            binderAddPageValue,
            binderAddSectionValue,
            binderRemovePageValue,
            binderRemoveSectionValue,
            binderRenamePageValue,
            binderRenameSectionValue,
            binderReorderPageValue,
            binderReorderSectionValue,
            paperContentAddMemberValue,
            paperContentAddToFolderValue,
            paperContentArchiveValue,
            paperContentCreateValue,
            paperContentPermanentlyDeleteValue,
            paperContentRemoveFromFolderValue,
            paperContentRemoveMemberValue,
            paperContentRenameValue,
            paperContentRestoreValue,
            paperDocAddCommentValue,
            paperDocChangeMemberRoleValue,
            paperDocChangeSharingPolicyValue,
            paperDocChangeSubscriptionValue,
            paperDocDeletedValue,
            paperDocDeleteCommentValue,
            paperDocDownloadValue,
            paperDocEditValue,
            paperDocEditCommentValue,
            paperDocFollowedValue,
            paperDocMentionValue,
            paperDocOwnershipChangedValue,
            paperDocRequestAccessValue,
            paperDocResolveCommentValue,
            paperDocRevertValue,
            paperDocSlackShareValue,
            paperDocTeamInviteValue,
            paperDocTrashedValue,
            paperDocUnresolveCommentValue,
            paperDocUntrashedValue,
            paperDocViewValue,
            paperExternalViewAllowValue,
            paperExternalViewDefaultTeamValue,
            paperExternalViewForbidValue,
            paperFolderChangeSubscriptionValue,
            paperFolderDeletedValue,
            paperFolderFollowedValue,
            paperFolderTeamInviteValue,
            paperPublishedLinkChangePermissionValue,
            paperPublishedLinkCreateValue,
            paperPublishedLinkDisabledValue,
            paperPublishedLinkViewValue,
            passwordChangeValue,
            passwordResetValue,
            passwordResetAllValue,
            classificationCreateReportValue,
            classificationCreateReportFailValue,
            emmCreateExceptionsReportValue,
            emmCreateUsageReportValue,
            exportMembersReportValue,
            exportMembersReportFailValue,
            externalSharingCreateReportValue,
            externalSharingReportFailedValue,
            noExpirationLinkGenCreateReportValue,
            noExpirationLinkGenReportFailedValue,
            noPasswordLinkGenCreateReportValue,
            noPasswordLinkGenReportFailedValue,
            noPasswordLinkViewCreateReportValue,
            noPasswordLinkViewReportFailedValue,
            outdatedLinkViewCreateReportValue,
            outdatedLinkViewReportFailedValue,
            paperAdminExportStartValue,
            smartSyncCreateAdminPrivilegeReportValue,
            teamActivityCreateReportValue,
            teamActivityCreateReportFailValue,
            collectionShareValue,
            fileTransfersFileAddValue,
            fileTransfersTransferDeleteValue,
            fileTransfersTransferDownloadValue,
            fileTransfersTransferSendValue,
            fileTransfersTransferViewValue,
            noteAclInviteOnlyValue,
            noteAclLinkValue,
            noteAclTeamLinkValue,
            noteSharedValue,
            noteShareReceiveValue,
            openNoteSharedValue,
            sfAddGroupValue,
            sfAllowNonMembersToViewSharedLinksValue,
            sfExternalInviteWarnValue,
            sfFbInviteValue,
            sfFbInviteChangeRoleValue,
            sfFbUninviteValue,
            sfInviteGroupValue,
            sfTeamGrantAccessValue,
            sfTeamInviteValue,
            sfTeamInviteChangeRoleValue,
            sfTeamJoinValue,
            sfTeamJoinFromOobLinkValue,
            sfTeamUninviteValue,
            sharedContentAddInviteesValue,
            sharedContentAddLinkExpiryValue,
            sharedContentAddLinkPasswordValue,
            sharedContentAddMemberValue,
            sharedContentChangeDownloadsPolicyValue,
            sharedContentChangeInviteeRoleValue,
            sharedContentChangeLinkAudienceValue,
            sharedContentChangeLinkExpiryValue,
            sharedContentChangeLinkPasswordValue,
            sharedContentChangeMemberRoleValue,
            sharedContentChangeViewerInfoPolicyValue,
            sharedContentClaimInvitationValue,
            sharedContentCopyValue,
            sharedContentDownloadValue,
            sharedContentRelinquishMembershipValue,
            sharedContentRemoveInviteesValue,
            sharedContentRemoveLinkExpiryValue,
            sharedContentRemoveLinkPasswordValue,
            sharedContentRemoveMemberValue,
            sharedContentRequestAccessValue,
            sharedContentRestoreInviteesValue,
            sharedContentRestoreMemberValue,
            sharedContentUnshareValue,
            sharedContentViewValue,
            sharedFolderChangeLinkPolicyValue,
            sharedFolderChangeMembersInheritancePolicyValue,
            sharedFolderChangeMembersManagementPolicyValue,
            sharedFolderChangeMembersPolicyValue,
            sharedFolderCreateValue,
            sharedFolderDeclineInvitationValue,
            sharedFolderMountValue,
            sharedFolderNestValue,
            sharedFolderTransferOwnershipValue,
            sharedFolderUnmountValue,
            sharedLinkAddExpiryValue,
            sharedLinkChangeExpiryValue,
            sharedLinkChangeVisibilityValue,
            sharedLinkCopyValue,
            sharedLinkCreateValue,
            sharedLinkDisableValue,
            sharedLinkDownloadValue,
            sharedLinkRemoveExpiryValue,
            sharedLinkSettingsAddExpirationValue,
            sharedLinkSettingsAddPasswordValue,
            sharedLinkSettingsAllowDownloadDisabledValue,
            sharedLinkSettingsAllowDownloadEnabledValue,
            sharedLinkSettingsChangeAudienceValue,
            sharedLinkSettingsChangeExpirationValue,
            sharedLinkSettingsChangePasswordValue,
            sharedLinkSettingsRemoveExpirationValue,
            sharedLinkSettingsRemovePasswordValue,
            sharedLinkShareValue,
            sharedLinkViewValue,
            sharedNoteOpenedValue,
            shmodelDisableDownloadsValue,
            shmodelEnableDownloadsValue,
            shmodelGroupShareValue,
            showcaseAccessGrantedValue,
            showcaseAddMemberValue,
            showcaseArchivedValue,
            showcaseCreatedValue,
            showcaseDeleteCommentValue,
            showcaseEditedValue,
            showcaseEditCommentValue,
            showcaseFileAddedValue,
            showcaseFileDownloadValue,
            showcaseFileRemovedValue,
            showcaseFileViewValue,
            showcasePermanentlyDeletedValue,
            showcasePostCommentValue,
            showcaseRemoveMemberValue,
            showcaseRenamedValue,
            showcaseRequestAccessValue,
            showcaseResolveCommentValue,
            showcaseRestoredValue,
            showcaseTrashedValue,
            showcaseTrashedDeprecatedValue,
            showcaseUnresolveCommentValue,
            showcaseUntrashedValue,
            showcaseUntrashedDeprecatedValue,
            showcaseViewValue,
            ssoAddCertValue,
            ssoAddLoginUrlValue,
            ssoAddLogoutUrlValue,
            ssoChangeCertValue,
            ssoChangeLoginUrlValue,
            ssoChangeLogoutUrlValue,
            ssoChangeSamlIdentityModeValue,
            ssoRemoveCertValue,
            ssoRemoveLoginUrlValue,
            ssoRemoveLogoutUrlValue,
            teamFolderChangeStatusValue,
            teamFolderCreateValue,
            teamFolderDowngradeValue,
            teamFolderPermanentlyDeleteValue,
            teamFolderRenameValue,
            teamSelectiveSyncSettingsChangedValue,
            accountCaptureChangePolicyValue,
            adminEmailRemindersChangedValue,
            allowDownloadDisabledValue,
            allowDownloadEnabledValue,
            appPermissionsChangedValue,
            cameraUploadsPolicyChangedValue,
            captureTranscriptPolicyChangedValue,
            classificationChangePolicyValue,
            computerBackupPolicyChangedValue,
            contentAdministrationPolicyChangedValue,
            dataPlacementRestrictionChangePolicyValue,
            dataPlacementRestrictionSatisfyPolicyValue,
            deviceApprovalsAddExceptionValue,
            deviceApprovalsChangeDesktopPolicyValue,
            deviceApprovalsChangeMobilePolicyValue,
            deviceApprovalsChangeOverageActionValue,
            deviceApprovalsChangeUnlinkActionValue,
            deviceApprovalsRemoveExceptionValue,
            directoryRestrictionsAddMembersValue,
            directoryRestrictionsRemoveMembersValue,
            dropboxPasswordsPolicyChangedValue,
            emailIngestPolicyChangedValue,
            emmAddExceptionValue,
            emmChangePolicyValue,
            emmRemoveExceptionValue,
            extendedVersionHistoryChangePolicyValue,
            externalDriveBackupPolicyChangedValue,
            fileCommentsChangePolicyValue,
            fileLockingPolicyChangedValue,
            fileProviderMigrationPolicyChangedValue,
            fileRequestsChangePolicyValue,
            fileRequestsEmailsEnabledValue,
            fileRequestsEmailsRestrictedToTeamOnlyValue,
            fileTransfersPolicyChangedValue,
            googleSsoChangePolicyValue,
            groupUserManagementChangePolicyValue,
            integrationPolicyChangedValue,
            inviteAcceptanceEmailPolicyChangedValue,
            memberRequestsChangePolicyValue,
            memberSendInvitePolicyChangedValue,
            memberSpaceLimitsAddExceptionValue,
            memberSpaceLimitsChangeCapsTypePolicyValue,
            memberSpaceLimitsChangePolicyValue,
            memberSpaceLimitsRemoveExceptionValue,
            memberSuggestionsChangePolicyValue,
            microsoftOfficeAddinChangePolicyValue,
            networkControlChangePolicyValue,
            paperChangeDeploymentPolicyValue,
            paperChangeMemberLinkPolicyValue,
            paperChangeMemberPolicyValue,
            paperChangePolicyValue,
            paperDefaultFolderPolicyChangedValue,
            paperDesktopPolicyChangedValue,
            paperEnabledUsersGroupAdditionValue,
            paperEnabledUsersGroupRemovalValue,
            passwordStrengthRequirementsChangePolicyValue,
            permanentDeleteChangePolicyValue,
            resellerSupportChangePolicyValue,
            rewindPolicyChangedValue,
            sendForSignaturePolicyChangedValue,
            sharingChangeFolderJoinPolicyValue,
            sharingChangeLinkAllowChangeExpirationPolicyValue,
            sharingChangeLinkDefaultExpirationPolicyValue,
            sharingChangeLinkEnforcePasswordPolicyValue,
            sharingChangeLinkPolicyValue,
            sharingChangeMemberPolicyValue,
            showcaseChangeDownloadPolicyValue,
            showcaseChangeEnabledPolicyValue,
            showcaseChangeExternalSharingPolicyValue,
            smarterSmartSyncPolicyChangedValue,
            smartSyncChangePolicyValue,
            smartSyncNotOptOutValue,
            smartSyncOptOutValue,
            ssoChangePolicyValue,
            teamBrandingPolicyChangedValue,
            teamExtensionsPolicyChangedValue,
            teamSelectiveSyncPolicyChangedValue,
            teamSharingWhitelistSubjectsChangedValue,
            tfaAddExceptionValue,
            tfaChangePolicyValue,
            tfaRemoveExceptionValue,
            twoAccountChangePolicyValue,
            viewerInfoPolicyChangedValue,
            watermarkingPolicyChangedValue,
            webSessionsChangeActiveSessionLimitValue,
            webSessionsChangeFixedLengthPolicyValue,
            webSessionsChangeIdleLengthPolicyValue,
            dataResidencyMigrationRequestSuccessfulValue,
            dataResidencyMigrationRequestUnsuccessfulValue,
            teamMergeFromValue,
            teamMergeToValue,
            teamProfileAddBackgroundValue,
            teamProfileAddLogoValue,
            teamProfileChangeBackgroundValue,
            teamProfileChangeDefaultLanguageValue,
            teamProfileChangeLogoValue,
            teamProfileChangeNameValue,
            teamProfileRemoveBackgroundValue,
            teamProfileRemoveLogoValue,
            tfaAddBackupPhoneValue,
            tfaAddSecurityKeyValue,
            tfaChangeBackupPhoneValue,
            tfaChangeStatusValue,
            tfaRemoveBackupPhoneValue,
            tfaRemoveSecurityKeyValue,
            tfaResetValue,
            changedEnterpriseAdminRoleValue,
            changedEnterpriseConnectedTeamStatusValue,
            endedEnterpriseAdminSessionValue,
            endedEnterpriseAdminSessionDeprecatedValue,
            enterpriseSettingsLockingValue,
            guestAdminChangeStatusValue,
            startedEnterpriseAdminSessionValue,
            teamMergeRequestAcceptedValue,
            teamMergeRequestAcceptedShownToPrimaryTeamValue,
            teamMergeRequestAcceptedShownToSecondaryTeamValue,
            teamMergeRequestAutoCanceledValue,
            teamMergeRequestCanceledValue,
            teamMergeRequestCanceledShownToPrimaryTeamValue,
            teamMergeRequestCanceledShownToSecondaryTeamValue,
            teamMergeRequestExpiredValue,
            teamMergeRequestExpiredShownToPrimaryTeamValue,
            teamMergeRequestExpiredShownToSecondaryTeamValue,
            teamMergeRequestRejectedShownToPrimaryTeamValue,
            teamMergeRequestRejectedShownToSecondaryTeamValue,
            teamMergeRequestReminderValue,
            teamMergeRequestReminderShownToPrimaryTeamValue,
            teamMergeRequestReminderShownToSecondaryTeamValue,
            teamMergeRequestRevokedValue,
            teamMergeRequestSentShownToPrimaryTeamValue,
            teamMergeRequestSentShownToSecondaryTeamValue
        });
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        else if (obj instanceof EventType) {
            EventType other = (EventType) obj;
            if (this._tag != other._tag) {
                return false;
            }
            switch (_tag) {
                case ADMIN_ALERTING_ALERT_STATE_CHANGED:
                    return (this.adminAlertingAlertStateChangedValue == other.adminAlertingAlertStateChangedValue) || (this.adminAlertingAlertStateChangedValue.equals(other.adminAlertingAlertStateChangedValue));
                case ADMIN_ALERTING_CHANGED_ALERT_CONFIG:
                    return (this.adminAlertingChangedAlertConfigValue == other.adminAlertingChangedAlertConfigValue) || (this.adminAlertingChangedAlertConfigValue.equals(other.adminAlertingChangedAlertConfigValue));
                case ADMIN_ALERTING_TRIGGERED_ALERT:
                    return (this.adminAlertingTriggeredAlertValue == other.adminAlertingTriggeredAlertValue) || (this.adminAlertingTriggeredAlertValue.equals(other.adminAlertingTriggeredAlertValue));
                case APP_BLOCKED_BY_PERMISSIONS:
                    return (this.appBlockedByPermissionsValue == other.appBlockedByPermissionsValue) || (this.appBlockedByPermissionsValue.equals(other.appBlockedByPermissionsValue));
                case APP_LINK_TEAM:
                    return (this.appLinkTeamValue == other.appLinkTeamValue) || (this.appLinkTeamValue.equals(other.appLinkTeamValue));
                case APP_LINK_USER:
                    return (this.appLinkUserValue == other.appLinkUserValue) || (this.appLinkUserValue.equals(other.appLinkUserValue));
                case APP_UNLINK_TEAM:
                    return (this.appUnlinkTeamValue == other.appUnlinkTeamValue) || (this.appUnlinkTeamValue.equals(other.appUnlinkTeamValue));
                case APP_UNLINK_USER:
                    return (this.appUnlinkUserValue == other.appUnlinkUserValue) || (this.appUnlinkUserValue.equals(other.appUnlinkUserValue));
                case INTEGRATION_CONNECTED:
                    return (this.integrationConnectedValue == other.integrationConnectedValue) || (this.integrationConnectedValue.equals(other.integrationConnectedValue));
                case INTEGRATION_DISCONNECTED:
                    return (this.integrationDisconnectedValue == other.integrationDisconnectedValue) || (this.integrationDisconnectedValue.equals(other.integrationDisconnectedValue));
                case FILE_ADD_COMMENT:
                    return (this.fileAddCommentValue == other.fileAddCommentValue) || (this.fileAddCommentValue.equals(other.fileAddCommentValue));
                case FILE_CHANGE_COMMENT_SUBSCRIPTION:
                    return (this.fileChangeCommentSubscriptionValue == other.fileChangeCommentSubscriptionValue) || (this.fileChangeCommentSubscriptionValue.equals(other.fileChangeCommentSubscriptionValue));
                case FILE_DELETE_COMMENT:
                    return (this.fileDeleteCommentValue == other.fileDeleteCommentValue) || (this.fileDeleteCommentValue.equals(other.fileDeleteCommentValue));
                case FILE_EDIT_COMMENT:
                    return (this.fileEditCommentValue == other.fileEditCommentValue) || (this.fileEditCommentValue.equals(other.fileEditCommentValue));
                case FILE_LIKE_COMMENT:
                    return (this.fileLikeCommentValue == other.fileLikeCommentValue) || (this.fileLikeCommentValue.equals(other.fileLikeCommentValue));
                case FILE_RESOLVE_COMMENT:
                    return (this.fileResolveCommentValue == other.fileResolveCommentValue) || (this.fileResolveCommentValue.equals(other.fileResolveCommentValue));
                case FILE_UNLIKE_COMMENT:
                    return (this.fileUnlikeCommentValue == other.fileUnlikeCommentValue) || (this.fileUnlikeCommentValue.equals(other.fileUnlikeCommentValue));
                case FILE_UNRESOLVE_COMMENT:
                    return (this.fileUnresolveCommentValue == other.fileUnresolveCommentValue) || (this.fileUnresolveCommentValue.equals(other.fileUnresolveCommentValue));
                case GOVERNANCE_POLICY_ADD_FOLDERS:
                    return (this.governancePolicyAddFoldersValue == other.governancePolicyAddFoldersValue) || (this.governancePolicyAddFoldersValue.equals(other.governancePolicyAddFoldersValue));
                case GOVERNANCE_POLICY_ADD_FOLDER_FAILED:
                    return (this.governancePolicyAddFolderFailedValue == other.governancePolicyAddFolderFailedValue) || (this.governancePolicyAddFolderFailedValue.equals(other.governancePolicyAddFolderFailedValue));
                case GOVERNANCE_POLICY_CONTENT_DISPOSED:
                    return (this.governancePolicyContentDisposedValue == other.governancePolicyContentDisposedValue) || (this.governancePolicyContentDisposedValue.equals(other.governancePolicyContentDisposedValue));
                case GOVERNANCE_POLICY_CREATE:
                    return (this.governancePolicyCreateValue == other.governancePolicyCreateValue) || (this.governancePolicyCreateValue.equals(other.governancePolicyCreateValue));
                case GOVERNANCE_POLICY_DELETE:
                    return (this.governancePolicyDeleteValue == other.governancePolicyDeleteValue) || (this.governancePolicyDeleteValue.equals(other.governancePolicyDeleteValue));
                case GOVERNANCE_POLICY_EDIT_DETAILS:
                    return (this.governancePolicyEditDetailsValue == other.governancePolicyEditDetailsValue) || (this.governancePolicyEditDetailsValue.equals(other.governancePolicyEditDetailsValue));
                case GOVERNANCE_POLICY_EDIT_DURATION:
                    return (this.governancePolicyEditDurationValue == other.governancePolicyEditDurationValue) || (this.governancePolicyEditDurationValue.equals(other.governancePolicyEditDurationValue));
                case GOVERNANCE_POLICY_EXPORT_CREATED:
                    return (this.governancePolicyExportCreatedValue == other.governancePolicyExportCreatedValue) || (this.governancePolicyExportCreatedValue.equals(other.governancePolicyExportCreatedValue));
                case GOVERNANCE_POLICY_EXPORT_REMOVED:
                    return (this.governancePolicyExportRemovedValue == other.governancePolicyExportRemovedValue) || (this.governancePolicyExportRemovedValue.equals(other.governancePolicyExportRemovedValue));
                case GOVERNANCE_POLICY_REMOVE_FOLDERS:
                    return (this.governancePolicyRemoveFoldersValue == other.governancePolicyRemoveFoldersValue) || (this.governancePolicyRemoveFoldersValue.equals(other.governancePolicyRemoveFoldersValue));
                case GOVERNANCE_POLICY_REPORT_CREATED:
                    return (this.governancePolicyReportCreatedValue == other.governancePolicyReportCreatedValue) || (this.governancePolicyReportCreatedValue.equals(other.governancePolicyReportCreatedValue));
                case GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED:
                    return (this.governancePolicyZipPartDownloadedValue == other.governancePolicyZipPartDownloadedValue) || (this.governancePolicyZipPartDownloadedValue.equals(other.governancePolicyZipPartDownloadedValue));
                case LEGAL_HOLDS_ACTIVATE_A_HOLD:
                    return (this.legalHoldsActivateAHoldValue == other.legalHoldsActivateAHoldValue) || (this.legalHoldsActivateAHoldValue.equals(other.legalHoldsActivateAHoldValue));
                case LEGAL_HOLDS_ADD_MEMBERS:
                    return (this.legalHoldsAddMembersValue == other.legalHoldsAddMembersValue) || (this.legalHoldsAddMembersValue.equals(other.legalHoldsAddMembersValue));
                case LEGAL_HOLDS_CHANGE_HOLD_DETAILS:
                    return (this.legalHoldsChangeHoldDetailsValue == other.legalHoldsChangeHoldDetailsValue) || (this.legalHoldsChangeHoldDetailsValue.equals(other.legalHoldsChangeHoldDetailsValue));
                case LEGAL_HOLDS_CHANGE_HOLD_NAME:
                    return (this.legalHoldsChangeHoldNameValue == other.legalHoldsChangeHoldNameValue) || (this.legalHoldsChangeHoldNameValue.equals(other.legalHoldsChangeHoldNameValue));
                case LEGAL_HOLDS_EXPORT_A_HOLD:
                    return (this.legalHoldsExportAHoldValue == other.legalHoldsExportAHoldValue) || (this.legalHoldsExportAHoldValue.equals(other.legalHoldsExportAHoldValue));
                case LEGAL_HOLDS_EXPORT_CANCELLED:
                    return (this.legalHoldsExportCancelledValue == other.legalHoldsExportCancelledValue) || (this.legalHoldsExportCancelledValue.equals(other.legalHoldsExportCancelledValue));
                case LEGAL_HOLDS_EXPORT_DOWNLOADED:
                    return (this.legalHoldsExportDownloadedValue == other.legalHoldsExportDownloadedValue) || (this.legalHoldsExportDownloadedValue.equals(other.legalHoldsExportDownloadedValue));
                case LEGAL_HOLDS_EXPORT_REMOVED:
                    return (this.legalHoldsExportRemovedValue == other.legalHoldsExportRemovedValue) || (this.legalHoldsExportRemovedValue.equals(other.legalHoldsExportRemovedValue));
                case LEGAL_HOLDS_RELEASE_A_HOLD:
                    return (this.legalHoldsReleaseAHoldValue == other.legalHoldsReleaseAHoldValue) || (this.legalHoldsReleaseAHoldValue.equals(other.legalHoldsReleaseAHoldValue));
                case LEGAL_HOLDS_REMOVE_MEMBERS:
                    return (this.legalHoldsRemoveMembersValue == other.legalHoldsRemoveMembersValue) || (this.legalHoldsRemoveMembersValue.equals(other.legalHoldsRemoveMembersValue));
                case LEGAL_HOLDS_REPORT_A_HOLD:
                    return (this.legalHoldsReportAHoldValue == other.legalHoldsReportAHoldValue) || (this.legalHoldsReportAHoldValue.equals(other.legalHoldsReportAHoldValue));
                case DEVICE_CHANGE_IP_DESKTOP:
                    return (this.deviceChangeIpDesktopValue == other.deviceChangeIpDesktopValue) || (this.deviceChangeIpDesktopValue.equals(other.deviceChangeIpDesktopValue));
                case DEVICE_CHANGE_IP_MOBILE:
                    return (this.deviceChangeIpMobileValue == other.deviceChangeIpMobileValue) || (this.deviceChangeIpMobileValue.equals(other.deviceChangeIpMobileValue));
                case DEVICE_CHANGE_IP_WEB:
                    return (this.deviceChangeIpWebValue == other.deviceChangeIpWebValue) || (this.deviceChangeIpWebValue.equals(other.deviceChangeIpWebValue));
                case DEVICE_DELETE_ON_UNLINK_FAIL:
                    return (this.deviceDeleteOnUnlinkFailValue == other.deviceDeleteOnUnlinkFailValue) || (this.deviceDeleteOnUnlinkFailValue.equals(other.deviceDeleteOnUnlinkFailValue));
                case DEVICE_DELETE_ON_UNLINK_SUCCESS:
                    return (this.deviceDeleteOnUnlinkSuccessValue == other.deviceDeleteOnUnlinkSuccessValue) || (this.deviceDeleteOnUnlinkSuccessValue.equals(other.deviceDeleteOnUnlinkSuccessValue));
                case DEVICE_LINK_FAIL:
                    return (this.deviceLinkFailValue == other.deviceLinkFailValue) || (this.deviceLinkFailValue.equals(other.deviceLinkFailValue));
                case DEVICE_LINK_SUCCESS:
                    return (this.deviceLinkSuccessValue == other.deviceLinkSuccessValue) || (this.deviceLinkSuccessValue.equals(other.deviceLinkSuccessValue));
                case DEVICE_MANAGEMENT_DISABLED:
                    return (this.deviceManagementDisabledValue == other.deviceManagementDisabledValue) || (this.deviceManagementDisabledValue.equals(other.deviceManagementDisabledValue));
                case DEVICE_MANAGEMENT_ENABLED:
                    return (this.deviceManagementEnabledValue == other.deviceManagementEnabledValue) || (this.deviceManagementEnabledValue.equals(other.deviceManagementEnabledValue));
                case DEVICE_SYNC_BACKUP_STATUS_CHANGED:
                    return (this.deviceSyncBackupStatusChangedValue == other.deviceSyncBackupStatusChangedValue) || (this.deviceSyncBackupStatusChangedValue.equals(other.deviceSyncBackupStatusChangedValue));
                case DEVICE_UNLINK:
                    return (this.deviceUnlinkValue == other.deviceUnlinkValue) || (this.deviceUnlinkValue.equals(other.deviceUnlinkValue));
                case DROPBOX_PASSWORDS_EXPORTED:
                    return (this.dropboxPasswordsExportedValue == other.dropboxPasswordsExportedValue) || (this.dropboxPasswordsExportedValue.equals(other.dropboxPasswordsExportedValue));
                case DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED:
                    return (this.dropboxPasswordsNewDeviceEnrolledValue == other.dropboxPasswordsNewDeviceEnrolledValue) || (this.dropboxPasswordsNewDeviceEnrolledValue.equals(other.dropboxPasswordsNewDeviceEnrolledValue));
                case EMM_REFRESH_AUTH_TOKEN:
                    return (this.emmRefreshAuthTokenValue == other.emmRefreshAuthTokenValue) || (this.emmRefreshAuthTokenValue.equals(other.emmRefreshAuthTokenValue));
                case EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED:
                    return (this.externalDriveBackupEligibilityStatusCheckedValue == other.externalDriveBackupEligibilityStatusCheckedValue) || (this.externalDriveBackupEligibilityStatusCheckedValue.equals(other.externalDriveBackupEligibilityStatusCheckedValue));
                case EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED:
                    return (this.externalDriveBackupStatusChangedValue == other.externalDriveBackupStatusChangedValue) || (this.externalDriveBackupStatusChangedValue.equals(other.externalDriveBackupStatusChangedValue));
                case ACCOUNT_CAPTURE_CHANGE_AVAILABILITY:
                    return (this.accountCaptureChangeAvailabilityValue == other.accountCaptureChangeAvailabilityValue) || (this.accountCaptureChangeAvailabilityValue.equals(other.accountCaptureChangeAvailabilityValue));
                case ACCOUNT_CAPTURE_MIGRATE_ACCOUNT:
                    return (this.accountCaptureMigrateAccountValue == other.accountCaptureMigrateAccountValue) || (this.accountCaptureMigrateAccountValue.equals(other.accountCaptureMigrateAccountValue));
                case ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT:
                    return (this.accountCaptureNotificationEmailsSentValue == other.accountCaptureNotificationEmailsSentValue) || (this.accountCaptureNotificationEmailsSentValue.equals(other.accountCaptureNotificationEmailsSentValue));
                case ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT:
                    return (this.accountCaptureRelinquishAccountValue == other.accountCaptureRelinquishAccountValue) || (this.accountCaptureRelinquishAccountValue.equals(other.accountCaptureRelinquishAccountValue));
                case DISABLED_DOMAIN_INVITES:
                    return (this.disabledDomainInvitesValue == other.disabledDomainInvitesValue) || (this.disabledDomainInvitesValue.equals(other.disabledDomainInvitesValue));
                case DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM:
                    return (this.domainInvitesApproveRequestToJoinTeamValue == other.domainInvitesApproveRequestToJoinTeamValue) || (this.domainInvitesApproveRequestToJoinTeamValue.equals(other.domainInvitesApproveRequestToJoinTeamValue));
                case DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM:
                    return (this.domainInvitesDeclineRequestToJoinTeamValue == other.domainInvitesDeclineRequestToJoinTeamValue) || (this.domainInvitesDeclineRequestToJoinTeamValue.equals(other.domainInvitesDeclineRequestToJoinTeamValue));
                case DOMAIN_INVITES_EMAIL_EXISTING_USERS:
                    return (this.domainInvitesEmailExistingUsersValue == other.domainInvitesEmailExistingUsersValue) || (this.domainInvitesEmailExistingUsersValue.equals(other.domainInvitesEmailExistingUsersValue));
                case DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM:
                    return (this.domainInvitesRequestToJoinTeamValue == other.domainInvitesRequestToJoinTeamValue) || (this.domainInvitesRequestToJoinTeamValue.equals(other.domainInvitesRequestToJoinTeamValue));
                case DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO:
                    return (this.domainInvitesSetInviteNewUserPrefToNoValue == other.domainInvitesSetInviteNewUserPrefToNoValue) || (this.domainInvitesSetInviteNewUserPrefToNoValue.equals(other.domainInvitesSetInviteNewUserPrefToNoValue));
                case DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES:
                    return (this.domainInvitesSetInviteNewUserPrefToYesValue == other.domainInvitesSetInviteNewUserPrefToYesValue) || (this.domainInvitesSetInviteNewUserPrefToYesValue.equals(other.domainInvitesSetInviteNewUserPrefToYesValue));
                case DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL:
                    return (this.domainVerificationAddDomainFailValue == other.domainVerificationAddDomainFailValue) || (this.domainVerificationAddDomainFailValue.equals(other.domainVerificationAddDomainFailValue));
                case DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS:
                    return (this.domainVerificationAddDomainSuccessValue == other.domainVerificationAddDomainSuccessValue) || (this.domainVerificationAddDomainSuccessValue.equals(other.domainVerificationAddDomainSuccessValue));
                case DOMAIN_VERIFICATION_REMOVE_DOMAIN:
                    return (this.domainVerificationRemoveDomainValue == other.domainVerificationRemoveDomainValue) || (this.domainVerificationRemoveDomainValue.equals(other.domainVerificationRemoveDomainValue));
                case ENABLED_DOMAIN_INVITES:
                    return (this.enabledDomainInvitesValue == other.enabledDomainInvitesValue) || (this.enabledDomainInvitesValue.equals(other.enabledDomainInvitesValue));
                case APPLY_NAMING_CONVENTION:
                    return (this.applyNamingConventionValue == other.applyNamingConventionValue) || (this.applyNamingConventionValue.equals(other.applyNamingConventionValue));
                case CREATE_FOLDER:
                    return (this.createFolderValue == other.createFolderValue) || (this.createFolderValue.equals(other.createFolderValue));
                case FILE_ADD:
                    return (this.fileAddValue == other.fileAddValue) || (this.fileAddValue.equals(other.fileAddValue));
                case FILE_COPY:
                    return (this.fileCopyValue == other.fileCopyValue) || (this.fileCopyValue.equals(other.fileCopyValue));
                case FILE_DELETE:
                    return (this.fileDeleteValue == other.fileDeleteValue) || (this.fileDeleteValue.equals(other.fileDeleteValue));
                case FILE_DOWNLOAD:
                    return (this.fileDownloadValue == other.fileDownloadValue) || (this.fileDownloadValue.equals(other.fileDownloadValue));
                case FILE_EDIT:
                    return (this.fileEditValue == other.fileEditValue) || (this.fileEditValue.equals(other.fileEditValue));
                case FILE_GET_COPY_REFERENCE:
                    return (this.fileGetCopyReferenceValue == other.fileGetCopyReferenceValue) || (this.fileGetCopyReferenceValue.equals(other.fileGetCopyReferenceValue));
                case FILE_LOCKING_LOCK_STATUS_CHANGED:
                    return (this.fileLockingLockStatusChangedValue == other.fileLockingLockStatusChangedValue) || (this.fileLockingLockStatusChangedValue.equals(other.fileLockingLockStatusChangedValue));
                case FILE_MOVE:
                    return (this.fileMoveValue == other.fileMoveValue) || (this.fileMoveValue.equals(other.fileMoveValue));
                case FILE_PERMANENTLY_DELETE:
                    return (this.filePermanentlyDeleteValue == other.filePermanentlyDeleteValue) || (this.filePermanentlyDeleteValue.equals(other.filePermanentlyDeleteValue));
                case FILE_PREVIEW:
                    return (this.filePreviewValue == other.filePreviewValue) || (this.filePreviewValue.equals(other.filePreviewValue));
                case FILE_RENAME:
                    return (this.fileRenameValue == other.fileRenameValue) || (this.fileRenameValue.equals(other.fileRenameValue));
                case FILE_RESTORE:
                    return (this.fileRestoreValue == other.fileRestoreValue) || (this.fileRestoreValue.equals(other.fileRestoreValue));
                case FILE_REVERT:
                    return (this.fileRevertValue == other.fileRevertValue) || (this.fileRevertValue.equals(other.fileRevertValue));
                case FILE_ROLLBACK_CHANGES:
                    return (this.fileRollbackChangesValue == other.fileRollbackChangesValue) || (this.fileRollbackChangesValue.equals(other.fileRollbackChangesValue));
                case FILE_SAVE_COPY_REFERENCE:
                    return (this.fileSaveCopyReferenceValue == other.fileSaveCopyReferenceValue) || (this.fileSaveCopyReferenceValue.equals(other.fileSaveCopyReferenceValue));
                case FOLDER_OVERVIEW_DESCRIPTION_CHANGED:
                    return (this.folderOverviewDescriptionChangedValue == other.folderOverviewDescriptionChangedValue) || (this.folderOverviewDescriptionChangedValue.equals(other.folderOverviewDescriptionChangedValue));
                case FOLDER_OVERVIEW_ITEM_PINNED:
                    return (this.folderOverviewItemPinnedValue == other.folderOverviewItemPinnedValue) || (this.folderOverviewItemPinnedValue.equals(other.folderOverviewItemPinnedValue));
                case FOLDER_OVERVIEW_ITEM_UNPINNED:
                    return (this.folderOverviewItemUnpinnedValue == other.folderOverviewItemUnpinnedValue) || (this.folderOverviewItemUnpinnedValue.equals(other.folderOverviewItemUnpinnedValue));
                case OBJECT_LABEL_ADDED:
                    return (this.objectLabelAddedValue == other.objectLabelAddedValue) || (this.objectLabelAddedValue.equals(other.objectLabelAddedValue));
                case OBJECT_LABEL_REMOVED:
                    return (this.objectLabelRemovedValue == other.objectLabelRemovedValue) || (this.objectLabelRemovedValue.equals(other.objectLabelRemovedValue));
                case OBJECT_LABEL_UPDATED_VALUE:
                    return (this.objectLabelUpdatedValueValue == other.objectLabelUpdatedValueValue) || (this.objectLabelUpdatedValueValue.equals(other.objectLabelUpdatedValueValue));
                case ORGANIZE_FOLDER_WITH_TIDY:
                    return (this.organizeFolderWithTidyValue == other.organizeFolderWithTidyValue) || (this.organizeFolderWithTidyValue.equals(other.organizeFolderWithTidyValue));
                case REWIND_FOLDER:
                    return (this.rewindFolderValue == other.rewindFolderValue) || (this.rewindFolderValue.equals(other.rewindFolderValue));
                case UNDO_NAMING_CONVENTION:
                    return (this.undoNamingConventionValue == other.undoNamingConventionValue) || (this.undoNamingConventionValue.equals(other.undoNamingConventionValue));
                case UNDO_ORGANIZE_FOLDER_WITH_TIDY:
                    return (this.undoOrganizeFolderWithTidyValue == other.undoOrganizeFolderWithTidyValue) || (this.undoOrganizeFolderWithTidyValue.equals(other.undoOrganizeFolderWithTidyValue));
                case USER_TAGS_ADDED:
                    return (this.userTagsAddedValue == other.userTagsAddedValue) || (this.userTagsAddedValue.equals(other.userTagsAddedValue));
                case USER_TAGS_REMOVED:
                    return (this.userTagsRemovedValue == other.userTagsRemovedValue) || (this.userTagsRemovedValue.equals(other.userTagsRemovedValue));
                case EMAIL_INGEST_RECEIVE_FILE:
                    return (this.emailIngestReceiveFileValue == other.emailIngestReceiveFileValue) || (this.emailIngestReceiveFileValue.equals(other.emailIngestReceiveFileValue));
                case FILE_REQUEST_CHANGE:
                    return (this.fileRequestChangeValue == other.fileRequestChangeValue) || (this.fileRequestChangeValue.equals(other.fileRequestChangeValue));
                case FILE_REQUEST_CLOSE:
                    return (this.fileRequestCloseValue == other.fileRequestCloseValue) || (this.fileRequestCloseValue.equals(other.fileRequestCloseValue));
                case FILE_REQUEST_CREATE:
                    return (this.fileRequestCreateValue == other.fileRequestCreateValue) || (this.fileRequestCreateValue.equals(other.fileRequestCreateValue));
                case FILE_REQUEST_DELETE:
                    return (this.fileRequestDeleteValue == other.fileRequestDeleteValue) || (this.fileRequestDeleteValue.equals(other.fileRequestDeleteValue));
                case FILE_REQUEST_RECEIVE_FILE:
                    return (this.fileRequestReceiveFileValue == other.fileRequestReceiveFileValue) || (this.fileRequestReceiveFileValue.equals(other.fileRequestReceiveFileValue));
                case GROUP_ADD_EXTERNAL_ID:
                    return (this.groupAddExternalIdValue == other.groupAddExternalIdValue) || (this.groupAddExternalIdValue.equals(other.groupAddExternalIdValue));
                case GROUP_ADD_MEMBER:
                    return (this.groupAddMemberValue == other.groupAddMemberValue) || (this.groupAddMemberValue.equals(other.groupAddMemberValue));
                case GROUP_CHANGE_EXTERNAL_ID:
                    return (this.groupChangeExternalIdValue == other.groupChangeExternalIdValue) || (this.groupChangeExternalIdValue.equals(other.groupChangeExternalIdValue));
                case GROUP_CHANGE_MANAGEMENT_TYPE:
                    return (this.groupChangeManagementTypeValue == other.groupChangeManagementTypeValue) || (this.groupChangeManagementTypeValue.equals(other.groupChangeManagementTypeValue));
                case GROUP_CHANGE_MEMBER_ROLE:
                    return (this.groupChangeMemberRoleValue == other.groupChangeMemberRoleValue) || (this.groupChangeMemberRoleValue.equals(other.groupChangeMemberRoleValue));
                case GROUP_CREATE:
                    return (this.groupCreateValue == other.groupCreateValue) || (this.groupCreateValue.equals(other.groupCreateValue));
                case GROUP_DELETE:
                    return (this.groupDeleteValue == other.groupDeleteValue) || (this.groupDeleteValue.equals(other.groupDeleteValue));
                case GROUP_DESCRIPTION_UPDATED:
                    return (this.groupDescriptionUpdatedValue == other.groupDescriptionUpdatedValue) || (this.groupDescriptionUpdatedValue.equals(other.groupDescriptionUpdatedValue));
                case GROUP_JOIN_POLICY_UPDATED:
                    return (this.groupJoinPolicyUpdatedValue == other.groupJoinPolicyUpdatedValue) || (this.groupJoinPolicyUpdatedValue.equals(other.groupJoinPolicyUpdatedValue));
                case GROUP_MOVED:
                    return (this.groupMovedValue == other.groupMovedValue) || (this.groupMovedValue.equals(other.groupMovedValue));
                case GROUP_REMOVE_EXTERNAL_ID:
                    return (this.groupRemoveExternalIdValue == other.groupRemoveExternalIdValue) || (this.groupRemoveExternalIdValue.equals(other.groupRemoveExternalIdValue));
                case GROUP_REMOVE_MEMBER:
                    return (this.groupRemoveMemberValue == other.groupRemoveMemberValue) || (this.groupRemoveMemberValue.equals(other.groupRemoveMemberValue));
                case GROUP_RENAME:
                    return (this.groupRenameValue == other.groupRenameValue) || (this.groupRenameValue.equals(other.groupRenameValue));
                case ACCOUNT_LOCK_OR_UNLOCKED:
                    return (this.accountLockOrUnlockedValue == other.accountLockOrUnlockedValue) || (this.accountLockOrUnlockedValue.equals(other.accountLockOrUnlockedValue));
                case EMM_ERROR:
                    return (this.emmErrorValue == other.emmErrorValue) || (this.emmErrorValue.equals(other.emmErrorValue));
                case GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS:
                    return (this.guestAdminSignedInViaTrustedTeamsValue == other.guestAdminSignedInViaTrustedTeamsValue) || (this.guestAdminSignedInViaTrustedTeamsValue.equals(other.guestAdminSignedInViaTrustedTeamsValue));
                case GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS:
                    return (this.guestAdminSignedOutViaTrustedTeamsValue == other.guestAdminSignedOutViaTrustedTeamsValue) || (this.guestAdminSignedOutViaTrustedTeamsValue.equals(other.guestAdminSignedOutViaTrustedTeamsValue));
                case LOGIN_FAIL:
                    return (this.loginFailValue == other.loginFailValue) || (this.loginFailValue.equals(other.loginFailValue));
                case LOGIN_SUCCESS:
                    return (this.loginSuccessValue == other.loginSuccessValue) || (this.loginSuccessValue.equals(other.loginSuccessValue));
                case LOGOUT:
                    return (this.logoutValue == other.logoutValue) || (this.logoutValue.equals(other.logoutValue));
                case RESELLER_SUPPORT_SESSION_END:
                    return (this.resellerSupportSessionEndValue == other.resellerSupportSessionEndValue) || (this.resellerSupportSessionEndValue.equals(other.resellerSupportSessionEndValue));
                case RESELLER_SUPPORT_SESSION_START:
                    return (this.resellerSupportSessionStartValue == other.resellerSupportSessionStartValue) || (this.resellerSupportSessionStartValue.equals(other.resellerSupportSessionStartValue));
                case SIGN_IN_AS_SESSION_END:
                    return (this.signInAsSessionEndValue == other.signInAsSessionEndValue) || (this.signInAsSessionEndValue.equals(other.signInAsSessionEndValue));
                case SIGN_IN_AS_SESSION_START:
                    return (this.signInAsSessionStartValue == other.signInAsSessionStartValue) || (this.signInAsSessionStartValue.equals(other.signInAsSessionStartValue));
                case SSO_ERROR:
                    return (this.ssoErrorValue == other.ssoErrorValue) || (this.ssoErrorValue.equals(other.ssoErrorValue));
                case CREATE_TEAM_INVITE_LINK:
                    return (this.createTeamInviteLinkValue == other.createTeamInviteLinkValue) || (this.createTeamInviteLinkValue.equals(other.createTeamInviteLinkValue));
                case DELETE_TEAM_INVITE_LINK:
                    return (this.deleteTeamInviteLinkValue == other.deleteTeamInviteLinkValue) || (this.deleteTeamInviteLinkValue.equals(other.deleteTeamInviteLinkValue));
                case MEMBER_ADD_EXTERNAL_ID:
                    return (this.memberAddExternalIdValue == other.memberAddExternalIdValue) || (this.memberAddExternalIdValue.equals(other.memberAddExternalIdValue));
                case MEMBER_ADD_NAME:
                    return (this.memberAddNameValue == other.memberAddNameValue) || (this.memberAddNameValue.equals(other.memberAddNameValue));
                case MEMBER_CHANGE_ADMIN_ROLE:
                    return (this.memberChangeAdminRoleValue == other.memberChangeAdminRoleValue) || (this.memberChangeAdminRoleValue.equals(other.memberChangeAdminRoleValue));
                case MEMBER_CHANGE_EMAIL:
                    return (this.memberChangeEmailValue == other.memberChangeEmailValue) || (this.memberChangeEmailValue.equals(other.memberChangeEmailValue));
                case MEMBER_CHANGE_EXTERNAL_ID:
                    return (this.memberChangeExternalIdValue == other.memberChangeExternalIdValue) || (this.memberChangeExternalIdValue.equals(other.memberChangeExternalIdValue));
                case MEMBER_CHANGE_MEMBERSHIP_TYPE:
                    return (this.memberChangeMembershipTypeValue == other.memberChangeMembershipTypeValue) || (this.memberChangeMembershipTypeValue.equals(other.memberChangeMembershipTypeValue));
                case MEMBER_CHANGE_NAME:
                    return (this.memberChangeNameValue == other.memberChangeNameValue) || (this.memberChangeNameValue.equals(other.memberChangeNameValue));
                case MEMBER_CHANGE_RESELLER_ROLE:
                    return (this.memberChangeResellerRoleValue == other.memberChangeResellerRoleValue) || (this.memberChangeResellerRoleValue.equals(other.memberChangeResellerRoleValue));
                case MEMBER_CHANGE_STATUS:
                    return (this.memberChangeStatusValue == other.memberChangeStatusValue) || (this.memberChangeStatusValue.equals(other.memberChangeStatusValue));
                case MEMBER_DELETE_MANUAL_CONTACTS:
                    return (this.memberDeleteManualContactsValue == other.memberDeleteManualContactsValue) || (this.memberDeleteManualContactsValue.equals(other.memberDeleteManualContactsValue));
                case MEMBER_DELETE_PROFILE_PHOTO:
                    return (this.memberDeleteProfilePhotoValue == other.memberDeleteProfilePhotoValue) || (this.memberDeleteProfilePhotoValue.equals(other.memberDeleteProfilePhotoValue));
                case MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS:
                    return (this.memberPermanentlyDeleteAccountContentsValue == other.memberPermanentlyDeleteAccountContentsValue) || (this.memberPermanentlyDeleteAccountContentsValue.equals(other.memberPermanentlyDeleteAccountContentsValue));
                case MEMBER_REMOVE_EXTERNAL_ID:
                    return (this.memberRemoveExternalIdValue == other.memberRemoveExternalIdValue) || (this.memberRemoveExternalIdValue.equals(other.memberRemoveExternalIdValue));
                case MEMBER_SET_PROFILE_PHOTO:
                    return (this.memberSetProfilePhotoValue == other.memberSetProfilePhotoValue) || (this.memberSetProfilePhotoValue.equals(other.memberSetProfilePhotoValue));
                case MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA:
                    return (this.memberSpaceLimitsAddCustomQuotaValue == other.memberSpaceLimitsAddCustomQuotaValue) || (this.memberSpaceLimitsAddCustomQuotaValue.equals(other.memberSpaceLimitsAddCustomQuotaValue));
                case MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA:
                    return (this.memberSpaceLimitsChangeCustomQuotaValue == other.memberSpaceLimitsChangeCustomQuotaValue) || (this.memberSpaceLimitsChangeCustomQuotaValue.equals(other.memberSpaceLimitsChangeCustomQuotaValue));
                case MEMBER_SPACE_LIMITS_CHANGE_STATUS:
                    return (this.memberSpaceLimitsChangeStatusValue == other.memberSpaceLimitsChangeStatusValue) || (this.memberSpaceLimitsChangeStatusValue.equals(other.memberSpaceLimitsChangeStatusValue));
                case MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA:
                    return (this.memberSpaceLimitsRemoveCustomQuotaValue == other.memberSpaceLimitsRemoveCustomQuotaValue) || (this.memberSpaceLimitsRemoveCustomQuotaValue.equals(other.memberSpaceLimitsRemoveCustomQuotaValue));
                case MEMBER_SUGGEST:
                    return (this.memberSuggestValue == other.memberSuggestValue) || (this.memberSuggestValue.equals(other.memberSuggestValue));
                case MEMBER_TRANSFER_ACCOUNT_CONTENTS:
                    return (this.memberTransferAccountContentsValue == other.memberTransferAccountContentsValue) || (this.memberTransferAccountContentsValue.equals(other.memberTransferAccountContentsValue));
                case PENDING_SECONDARY_EMAIL_ADDED:
                    return (this.pendingSecondaryEmailAddedValue == other.pendingSecondaryEmailAddedValue) || (this.pendingSecondaryEmailAddedValue.equals(other.pendingSecondaryEmailAddedValue));
                case SECONDARY_EMAIL_DELETED:
                    return (this.secondaryEmailDeletedValue == other.secondaryEmailDeletedValue) || (this.secondaryEmailDeletedValue.equals(other.secondaryEmailDeletedValue));
                case SECONDARY_EMAIL_VERIFIED:
                    return (this.secondaryEmailVerifiedValue == other.secondaryEmailVerifiedValue) || (this.secondaryEmailVerifiedValue.equals(other.secondaryEmailVerifiedValue));
                case SECONDARY_MAILS_POLICY_CHANGED:
                    return (this.secondaryMailsPolicyChangedValue == other.secondaryMailsPolicyChangedValue) || (this.secondaryMailsPolicyChangedValue.equals(other.secondaryMailsPolicyChangedValue));
                case BINDER_ADD_PAGE:
                    return (this.binderAddPageValue == other.binderAddPageValue) || (this.binderAddPageValue.equals(other.binderAddPageValue));
                case BINDER_ADD_SECTION:
                    return (this.binderAddSectionValue == other.binderAddSectionValue) || (this.binderAddSectionValue.equals(other.binderAddSectionValue));
                case BINDER_REMOVE_PAGE:
                    return (this.binderRemovePageValue == other.binderRemovePageValue) || (this.binderRemovePageValue.equals(other.binderRemovePageValue));
                case BINDER_REMOVE_SECTION:
                    return (this.binderRemoveSectionValue == other.binderRemoveSectionValue) || (this.binderRemoveSectionValue.equals(other.binderRemoveSectionValue));
                case BINDER_RENAME_PAGE:
                    return (this.binderRenamePageValue == other.binderRenamePageValue) || (this.binderRenamePageValue.equals(other.binderRenamePageValue));
                case BINDER_RENAME_SECTION:
                    return (this.binderRenameSectionValue == other.binderRenameSectionValue) || (this.binderRenameSectionValue.equals(other.binderRenameSectionValue));
                case BINDER_REORDER_PAGE:
                    return (this.binderReorderPageValue == other.binderReorderPageValue) || (this.binderReorderPageValue.equals(other.binderReorderPageValue));
                case BINDER_REORDER_SECTION:
                    return (this.binderReorderSectionValue == other.binderReorderSectionValue) || (this.binderReorderSectionValue.equals(other.binderReorderSectionValue));
                case PAPER_CONTENT_ADD_MEMBER:
                    return (this.paperContentAddMemberValue == other.paperContentAddMemberValue) || (this.paperContentAddMemberValue.equals(other.paperContentAddMemberValue));
                case PAPER_CONTENT_ADD_TO_FOLDER:
                    return (this.paperContentAddToFolderValue == other.paperContentAddToFolderValue) || (this.paperContentAddToFolderValue.equals(other.paperContentAddToFolderValue));
                case PAPER_CONTENT_ARCHIVE:
                    return (this.paperContentArchiveValue == other.paperContentArchiveValue) || (this.paperContentArchiveValue.equals(other.paperContentArchiveValue));
                case PAPER_CONTENT_CREATE:
                    return (this.paperContentCreateValue == other.paperContentCreateValue) || (this.paperContentCreateValue.equals(other.paperContentCreateValue));
                case PAPER_CONTENT_PERMANENTLY_DELETE:
                    return (this.paperContentPermanentlyDeleteValue == other.paperContentPermanentlyDeleteValue) || (this.paperContentPermanentlyDeleteValue.equals(other.paperContentPermanentlyDeleteValue));
                case PAPER_CONTENT_REMOVE_FROM_FOLDER:
                    return (this.paperContentRemoveFromFolderValue == other.paperContentRemoveFromFolderValue) || (this.paperContentRemoveFromFolderValue.equals(other.paperContentRemoveFromFolderValue));
                case PAPER_CONTENT_REMOVE_MEMBER:
                    return (this.paperContentRemoveMemberValue == other.paperContentRemoveMemberValue) || (this.paperContentRemoveMemberValue.equals(other.paperContentRemoveMemberValue));
                case PAPER_CONTENT_RENAME:
                    return (this.paperContentRenameValue == other.paperContentRenameValue) || (this.paperContentRenameValue.equals(other.paperContentRenameValue));
                case PAPER_CONTENT_RESTORE:
                    return (this.paperContentRestoreValue == other.paperContentRestoreValue) || (this.paperContentRestoreValue.equals(other.paperContentRestoreValue));
                case PAPER_DOC_ADD_COMMENT:
                    return (this.paperDocAddCommentValue == other.paperDocAddCommentValue) || (this.paperDocAddCommentValue.equals(other.paperDocAddCommentValue));
                case PAPER_DOC_CHANGE_MEMBER_ROLE:
                    return (this.paperDocChangeMemberRoleValue == other.paperDocChangeMemberRoleValue) || (this.paperDocChangeMemberRoleValue.equals(other.paperDocChangeMemberRoleValue));
                case PAPER_DOC_CHANGE_SHARING_POLICY:
                    return (this.paperDocChangeSharingPolicyValue == other.paperDocChangeSharingPolicyValue) || (this.paperDocChangeSharingPolicyValue.equals(other.paperDocChangeSharingPolicyValue));
                case PAPER_DOC_CHANGE_SUBSCRIPTION:
                    return (this.paperDocChangeSubscriptionValue == other.paperDocChangeSubscriptionValue) || (this.paperDocChangeSubscriptionValue.equals(other.paperDocChangeSubscriptionValue));
                case PAPER_DOC_DELETED:
                    return (this.paperDocDeletedValue == other.paperDocDeletedValue) || (this.paperDocDeletedValue.equals(other.paperDocDeletedValue));
                case PAPER_DOC_DELETE_COMMENT:
                    return (this.paperDocDeleteCommentValue == other.paperDocDeleteCommentValue) || (this.paperDocDeleteCommentValue.equals(other.paperDocDeleteCommentValue));
                case PAPER_DOC_DOWNLOAD:
                    return (this.paperDocDownloadValue == other.paperDocDownloadValue) || (this.paperDocDownloadValue.equals(other.paperDocDownloadValue));
                case PAPER_DOC_EDIT:
                    return (this.paperDocEditValue == other.paperDocEditValue) || (this.paperDocEditValue.equals(other.paperDocEditValue));
                case PAPER_DOC_EDIT_COMMENT:
                    return (this.paperDocEditCommentValue == other.paperDocEditCommentValue) || (this.paperDocEditCommentValue.equals(other.paperDocEditCommentValue));
                case PAPER_DOC_FOLLOWED:
                    return (this.paperDocFollowedValue == other.paperDocFollowedValue) || (this.paperDocFollowedValue.equals(other.paperDocFollowedValue));
                case PAPER_DOC_MENTION:
                    return (this.paperDocMentionValue == other.paperDocMentionValue) || (this.paperDocMentionValue.equals(other.paperDocMentionValue));
                case PAPER_DOC_OWNERSHIP_CHANGED:
                    return (this.paperDocOwnershipChangedValue == other.paperDocOwnershipChangedValue) || (this.paperDocOwnershipChangedValue.equals(other.paperDocOwnershipChangedValue));
                case PAPER_DOC_REQUEST_ACCESS:
                    return (this.paperDocRequestAccessValue == other.paperDocRequestAccessValue) || (this.paperDocRequestAccessValue.equals(other.paperDocRequestAccessValue));
                case PAPER_DOC_RESOLVE_COMMENT:
                    return (this.paperDocResolveCommentValue == other.paperDocResolveCommentValue) || (this.paperDocResolveCommentValue.equals(other.paperDocResolveCommentValue));
                case PAPER_DOC_REVERT:
                    return (this.paperDocRevertValue == other.paperDocRevertValue) || (this.paperDocRevertValue.equals(other.paperDocRevertValue));
                case PAPER_DOC_SLACK_SHARE:
                    return (this.paperDocSlackShareValue == other.paperDocSlackShareValue) || (this.paperDocSlackShareValue.equals(other.paperDocSlackShareValue));
                case PAPER_DOC_TEAM_INVITE:
                    return (this.paperDocTeamInviteValue == other.paperDocTeamInviteValue) || (this.paperDocTeamInviteValue.equals(other.paperDocTeamInviteValue));
                case PAPER_DOC_TRASHED:
                    return (this.paperDocTrashedValue == other.paperDocTrashedValue) || (this.paperDocTrashedValue.equals(other.paperDocTrashedValue));
                case PAPER_DOC_UNRESOLVE_COMMENT:
                    return (this.paperDocUnresolveCommentValue == other.paperDocUnresolveCommentValue) || (this.paperDocUnresolveCommentValue.equals(other.paperDocUnresolveCommentValue));
                case PAPER_DOC_UNTRASHED:
                    return (this.paperDocUntrashedValue == other.paperDocUntrashedValue) || (this.paperDocUntrashedValue.equals(other.paperDocUntrashedValue));
                case PAPER_DOC_VIEW:
                    return (this.paperDocViewValue == other.paperDocViewValue) || (this.paperDocViewValue.equals(other.paperDocViewValue));
                case PAPER_EXTERNAL_VIEW_ALLOW:
                    return (this.paperExternalViewAllowValue == other.paperExternalViewAllowValue) || (this.paperExternalViewAllowValue.equals(other.paperExternalViewAllowValue));
                case PAPER_EXTERNAL_VIEW_DEFAULT_TEAM:
                    return (this.paperExternalViewDefaultTeamValue == other.paperExternalViewDefaultTeamValue) || (this.paperExternalViewDefaultTeamValue.equals(other.paperExternalViewDefaultTeamValue));
                case PAPER_EXTERNAL_VIEW_FORBID:
                    return (this.paperExternalViewForbidValue == other.paperExternalViewForbidValue) || (this.paperExternalViewForbidValue.equals(other.paperExternalViewForbidValue));
                case PAPER_FOLDER_CHANGE_SUBSCRIPTION:
                    return (this.paperFolderChangeSubscriptionValue == other.paperFolderChangeSubscriptionValue) || (this.paperFolderChangeSubscriptionValue.equals(other.paperFolderChangeSubscriptionValue));
                case PAPER_FOLDER_DELETED:
                    return (this.paperFolderDeletedValue == other.paperFolderDeletedValue) || (this.paperFolderDeletedValue.equals(other.paperFolderDeletedValue));
                case PAPER_FOLDER_FOLLOWED:
                    return (this.paperFolderFollowedValue == other.paperFolderFollowedValue) || (this.paperFolderFollowedValue.equals(other.paperFolderFollowedValue));
                case PAPER_FOLDER_TEAM_INVITE:
                    return (this.paperFolderTeamInviteValue == other.paperFolderTeamInviteValue) || (this.paperFolderTeamInviteValue.equals(other.paperFolderTeamInviteValue));
                case PAPER_PUBLISHED_LINK_CHANGE_PERMISSION:
                    return (this.paperPublishedLinkChangePermissionValue == other.paperPublishedLinkChangePermissionValue) || (this.paperPublishedLinkChangePermissionValue.equals(other.paperPublishedLinkChangePermissionValue));
                case PAPER_PUBLISHED_LINK_CREATE:
                    return (this.paperPublishedLinkCreateValue == other.paperPublishedLinkCreateValue) || (this.paperPublishedLinkCreateValue.equals(other.paperPublishedLinkCreateValue));
                case PAPER_PUBLISHED_LINK_DISABLED:
                    return (this.paperPublishedLinkDisabledValue == other.paperPublishedLinkDisabledValue) || (this.paperPublishedLinkDisabledValue.equals(other.paperPublishedLinkDisabledValue));
                case PAPER_PUBLISHED_LINK_VIEW:
                    return (this.paperPublishedLinkViewValue == other.paperPublishedLinkViewValue) || (this.paperPublishedLinkViewValue.equals(other.paperPublishedLinkViewValue));
                case PASSWORD_CHANGE:
                    return (this.passwordChangeValue == other.passwordChangeValue) || (this.passwordChangeValue.equals(other.passwordChangeValue));
                case PASSWORD_RESET:
                    return (this.passwordResetValue == other.passwordResetValue) || (this.passwordResetValue.equals(other.passwordResetValue));
                case PASSWORD_RESET_ALL:
                    return (this.passwordResetAllValue == other.passwordResetAllValue) || (this.passwordResetAllValue.equals(other.passwordResetAllValue));
                case CLASSIFICATION_CREATE_REPORT:
                    return (this.classificationCreateReportValue == other.classificationCreateReportValue) || (this.classificationCreateReportValue.equals(other.classificationCreateReportValue));
                case CLASSIFICATION_CREATE_REPORT_FAIL:
                    return (this.classificationCreateReportFailValue == other.classificationCreateReportFailValue) || (this.classificationCreateReportFailValue.equals(other.classificationCreateReportFailValue));
                case EMM_CREATE_EXCEPTIONS_REPORT:
                    return (this.emmCreateExceptionsReportValue == other.emmCreateExceptionsReportValue) || (this.emmCreateExceptionsReportValue.equals(other.emmCreateExceptionsReportValue));
                case EMM_CREATE_USAGE_REPORT:
                    return (this.emmCreateUsageReportValue == other.emmCreateUsageReportValue) || (this.emmCreateUsageReportValue.equals(other.emmCreateUsageReportValue));
                case EXPORT_MEMBERS_REPORT:
                    return (this.exportMembersReportValue == other.exportMembersReportValue) || (this.exportMembersReportValue.equals(other.exportMembersReportValue));
                case EXPORT_MEMBERS_REPORT_FAIL:
                    return (this.exportMembersReportFailValue == other.exportMembersReportFailValue) || (this.exportMembersReportFailValue.equals(other.exportMembersReportFailValue));
                case EXTERNAL_SHARING_CREATE_REPORT:
                    return (this.externalSharingCreateReportValue == other.externalSharingCreateReportValue) || (this.externalSharingCreateReportValue.equals(other.externalSharingCreateReportValue));
                case EXTERNAL_SHARING_REPORT_FAILED:
                    return (this.externalSharingReportFailedValue == other.externalSharingReportFailedValue) || (this.externalSharingReportFailedValue.equals(other.externalSharingReportFailedValue));
                case NO_EXPIRATION_LINK_GEN_CREATE_REPORT:
                    return (this.noExpirationLinkGenCreateReportValue == other.noExpirationLinkGenCreateReportValue) || (this.noExpirationLinkGenCreateReportValue.equals(other.noExpirationLinkGenCreateReportValue));
                case NO_EXPIRATION_LINK_GEN_REPORT_FAILED:
                    return (this.noExpirationLinkGenReportFailedValue == other.noExpirationLinkGenReportFailedValue) || (this.noExpirationLinkGenReportFailedValue.equals(other.noExpirationLinkGenReportFailedValue));
                case NO_PASSWORD_LINK_GEN_CREATE_REPORT:
                    return (this.noPasswordLinkGenCreateReportValue == other.noPasswordLinkGenCreateReportValue) || (this.noPasswordLinkGenCreateReportValue.equals(other.noPasswordLinkGenCreateReportValue));
                case NO_PASSWORD_LINK_GEN_REPORT_FAILED:
                    return (this.noPasswordLinkGenReportFailedValue == other.noPasswordLinkGenReportFailedValue) || (this.noPasswordLinkGenReportFailedValue.equals(other.noPasswordLinkGenReportFailedValue));
                case NO_PASSWORD_LINK_VIEW_CREATE_REPORT:
                    return (this.noPasswordLinkViewCreateReportValue == other.noPasswordLinkViewCreateReportValue) || (this.noPasswordLinkViewCreateReportValue.equals(other.noPasswordLinkViewCreateReportValue));
                case NO_PASSWORD_LINK_VIEW_REPORT_FAILED:
                    return (this.noPasswordLinkViewReportFailedValue == other.noPasswordLinkViewReportFailedValue) || (this.noPasswordLinkViewReportFailedValue.equals(other.noPasswordLinkViewReportFailedValue));
                case OUTDATED_LINK_VIEW_CREATE_REPORT:
                    return (this.outdatedLinkViewCreateReportValue == other.outdatedLinkViewCreateReportValue) || (this.outdatedLinkViewCreateReportValue.equals(other.outdatedLinkViewCreateReportValue));
                case OUTDATED_LINK_VIEW_REPORT_FAILED:
                    return (this.outdatedLinkViewReportFailedValue == other.outdatedLinkViewReportFailedValue) || (this.outdatedLinkViewReportFailedValue.equals(other.outdatedLinkViewReportFailedValue));
                case PAPER_ADMIN_EXPORT_START:
                    return (this.paperAdminExportStartValue == other.paperAdminExportStartValue) || (this.paperAdminExportStartValue.equals(other.paperAdminExportStartValue));
                case SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT:
                    return (this.smartSyncCreateAdminPrivilegeReportValue == other.smartSyncCreateAdminPrivilegeReportValue) || (this.smartSyncCreateAdminPrivilegeReportValue.equals(other.smartSyncCreateAdminPrivilegeReportValue));
                case TEAM_ACTIVITY_CREATE_REPORT:
                    return (this.teamActivityCreateReportValue == other.teamActivityCreateReportValue) || (this.teamActivityCreateReportValue.equals(other.teamActivityCreateReportValue));
                case TEAM_ACTIVITY_CREATE_REPORT_FAIL:
                    return (this.teamActivityCreateReportFailValue == other.teamActivityCreateReportFailValue) || (this.teamActivityCreateReportFailValue.equals(other.teamActivityCreateReportFailValue));
                case COLLECTION_SHARE:
                    return (this.collectionShareValue == other.collectionShareValue) || (this.collectionShareValue.equals(other.collectionShareValue));
                case FILE_TRANSFERS_FILE_ADD:
                    return (this.fileTransfersFileAddValue == other.fileTransfersFileAddValue) || (this.fileTransfersFileAddValue.equals(other.fileTransfersFileAddValue));
                case FILE_TRANSFERS_TRANSFER_DELETE:
                    return (this.fileTransfersTransferDeleteValue == other.fileTransfersTransferDeleteValue) || (this.fileTransfersTransferDeleteValue.equals(other.fileTransfersTransferDeleteValue));
                case FILE_TRANSFERS_TRANSFER_DOWNLOAD:
                    return (this.fileTransfersTransferDownloadValue == other.fileTransfersTransferDownloadValue) || (this.fileTransfersTransferDownloadValue.equals(other.fileTransfersTransferDownloadValue));
                case FILE_TRANSFERS_TRANSFER_SEND:
                    return (this.fileTransfersTransferSendValue == other.fileTransfersTransferSendValue) || (this.fileTransfersTransferSendValue.equals(other.fileTransfersTransferSendValue));
                case FILE_TRANSFERS_TRANSFER_VIEW:
                    return (this.fileTransfersTransferViewValue == other.fileTransfersTransferViewValue) || (this.fileTransfersTransferViewValue.equals(other.fileTransfersTransferViewValue));
                case NOTE_ACL_INVITE_ONLY:
                    return (this.noteAclInviteOnlyValue == other.noteAclInviteOnlyValue) || (this.noteAclInviteOnlyValue.equals(other.noteAclInviteOnlyValue));
                case NOTE_ACL_LINK:
                    return (this.noteAclLinkValue == other.noteAclLinkValue) || (this.noteAclLinkValue.equals(other.noteAclLinkValue));
                case NOTE_ACL_TEAM_LINK:
                    return (this.noteAclTeamLinkValue == other.noteAclTeamLinkValue) || (this.noteAclTeamLinkValue.equals(other.noteAclTeamLinkValue));
                case NOTE_SHARED:
                    return (this.noteSharedValue == other.noteSharedValue) || (this.noteSharedValue.equals(other.noteSharedValue));
                case NOTE_SHARE_RECEIVE:
                    return (this.noteShareReceiveValue == other.noteShareReceiveValue) || (this.noteShareReceiveValue.equals(other.noteShareReceiveValue));
                case OPEN_NOTE_SHARED:
                    return (this.openNoteSharedValue == other.openNoteSharedValue) || (this.openNoteSharedValue.equals(other.openNoteSharedValue));
                case SF_ADD_GROUP:
                    return (this.sfAddGroupValue == other.sfAddGroupValue) || (this.sfAddGroupValue.equals(other.sfAddGroupValue));
                case SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS:
                    return (this.sfAllowNonMembersToViewSharedLinksValue == other.sfAllowNonMembersToViewSharedLinksValue) || (this.sfAllowNonMembersToViewSharedLinksValue.equals(other.sfAllowNonMembersToViewSharedLinksValue));
                case SF_EXTERNAL_INVITE_WARN:
                    return (this.sfExternalInviteWarnValue == other.sfExternalInviteWarnValue) || (this.sfExternalInviteWarnValue.equals(other.sfExternalInviteWarnValue));
                case SF_FB_INVITE:
                    return (this.sfFbInviteValue == other.sfFbInviteValue) || (this.sfFbInviteValue.equals(other.sfFbInviteValue));
                case SF_FB_INVITE_CHANGE_ROLE:
                    return (this.sfFbInviteChangeRoleValue == other.sfFbInviteChangeRoleValue) || (this.sfFbInviteChangeRoleValue.equals(other.sfFbInviteChangeRoleValue));
                case SF_FB_UNINVITE:
                    return (this.sfFbUninviteValue == other.sfFbUninviteValue) || (this.sfFbUninviteValue.equals(other.sfFbUninviteValue));
                case SF_INVITE_GROUP:
                    return (this.sfInviteGroupValue == other.sfInviteGroupValue) || (this.sfInviteGroupValue.equals(other.sfInviteGroupValue));
                case SF_TEAM_GRANT_ACCESS:
                    return (this.sfTeamGrantAccessValue == other.sfTeamGrantAccessValue) || (this.sfTeamGrantAccessValue.equals(other.sfTeamGrantAccessValue));
                case SF_TEAM_INVITE:
                    return (this.sfTeamInviteValue == other.sfTeamInviteValue) || (this.sfTeamInviteValue.equals(other.sfTeamInviteValue));
                case SF_TEAM_INVITE_CHANGE_ROLE:
                    return (this.sfTeamInviteChangeRoleValue == other.sfTeamInviteChangeRoleValue) || (this.sfTeamInviteChangeRoleValue.equals(other.sfTeamInviteChangeRoleValue));
                case SF_TEAM_JOIN:
                    return (this.sfTeamJoinValue == other.sfTeamJoinValue) || (this.sfTeamJoinValue.equals(other.sfTeamJoinValue));
                case SF_TEAM_JOIN_FROM_OOB_LINK:
                    return (this.sfTeamJoinFromOobLinkValue == other.sfTeamJoinFromOobLinkValue) || (this.sfTeamJoinFromOobLinkValue.equals(other.sfTeamJoinFromOobLinkValue));
                case SF_TEAM_UNINVITE:
                    return (this.sfTeamUninviteValue == other.sfTeamUninviteValue) || (this.sfTeamUninviteValue.equals(other.sfTeamUninviteValue));
                case SHARED_CONTENT_ADD_INVITEES:
                    return (this.sharedContentAddInviteesValue == other.sharedContentAddInviteesValue) || (this.sharedContentAddInviteesValue.equals(other.sharedContentAddInviteesValue));
                case SHARED_CONTENT_ADD_LINK_EXPIRY:
                    return (this.sharedContentAddLinkExpiryValue == other.sharedContentAddLinkExpiryValue) || (this.sharedContentAddLinkExpiryValue.equals(other.sharedContentAddLinkExpiryValue));
                case SHARED_CONTENT_ADD_LINK_PASSWORD:
                    return (this.sharedContentAddLinkPasswordValue == other.sharedContentAddLinkPasswordValue) || (this.sharedContentAddLinkPasswordValue.equals(other.sharedContentAddLinkPasswordValue));
                case SHARED_CONTENT_ADD_MEMBER:
                    return (this.sharedContentAddMemberValue == other.sharedContentAddMemberValue) || (this.sharedContentAddMemberValue.equals(other.sharedContentAddMemberValue));
                case SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY:
                    return (this.sharedContentChangeDownloadsPolicyValue == other.sharedContentChangeDownloadsPolicyValue) || (this.sharedContentChangeDownloadsPolicyValue.equals(other.sharedContentChangeDownloadsPolicyValue));
                case SHARED_CONTENT_CHANGE_INVITEE_ROLE:
                    return (this.sharedContentChangeInviteeRoleValue == other.sharedContentChangeInviteeRoleValue) || (this.sharedContentChangeInviteeRoleValue.equals(other.sharedContentChangeInviteeRoleValue));
                case SHARED_CONTENT_CHANGE_LINK_AUDIENCE:
                    return (this.sharedContentChangeLinkAudienceValue == other.sharedContentChangeLinkAudienceValue) || (this.sharedContentChangeLinkAudienceValue.equals(other.sharedContentChangeLinkAudienceValue));
                case SHARED_CONTENT_CHANGE_LINK_EXPIRY:
                    return (this.sharedContentChangeLinkExpiryValue == other.sharedContentChangeLinkExpiryValue) || (this.sharedContentChangeLinkExpiryValue.equals(other.sharedContentChangeLinkExpiryValue));
                case SHARED_CONTENT_CHANGE_LINK_PASSWORD:
                    return (this.sharedContentChangeLinkPasswordValue == other.sharedContentChangeLinkPasswordValue) || (this.sharedContentChangeLinkPasswordValue.equals(other.sharedContentChangeLinkPasswordValue));
                case SHARED_CONTENT_CHANGE_MEMBER_ROLE:
                    return (this.sharedContentChangeMemberRoleValue == other.sharedContentChangeMemberRoleValue) || (this.sharedContentChangeMemberRoleValue.equals(other.sharedContentChangeMemberRoleValue));
                case SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY:
                    return (this.sharedContentChangeViewerInfoPolicyValue == other.sharedContentChangeViewerInfoPolicyValue) || (this.sharedContentChangeViewerInfoPolicyValue.equals(other.sharedContentChangeViewerInfoPolicyValue));
                case SHARED_CONTENT_CLAIM_INVITATION:
                    return (this.sharedContentClaimInvitationValue == other.sharedContentClaimInvitationValue) || (this.sharedContentClaimInvitationValue.equals(other.sharedContentClaimInvitationValue));
                case SHARED_CONTENT_COPY:
                    return (this.sharedContentCopyValue == other.sharedContentCopyValue) || (this.sharedContentCopyValue.equals(other.sharedContentCopyValue));
                case SHARED_CONTENT_DOWNLOAD:
                    return (this.sharedContentDownloadValue == other.sharedContentDownloadValue) || (this.sharedContentDownloadValue.equals(other.sharedContentDownloadValue));
                case SHARED_CONTENT_RELINQUISH_MEMBERSHIP:
                    return (this.sharedContentRelinquishMembershipValue == other.sharedContentRelinquishMembershipValue) || (this.sharedContentRelinquishMembershipValue.equals(other.sharedContentRelinquishMembershipValue));
                case SHARED_CONTENT_REMOVE_INVITEES:
                    return (this.sharedContentRemoveInviteesValue == other.sharedContentRemoveInviteesValue) || (this.sharedContentRemoveInviteesValue.equals(other.sharedContentRemoveInviteesValue));
                case SHARED_CONTENT_REMOVE_LINK_EXPIRY:
                    return (this.sharedContentRemoveLinkExpiryValue == other.sharedContentRemoveLinkExpiryValue) || (this.sharedContentRemoveLinkExpiryValue.equals(other.sharedContentRemoveLinkExpiryValue));
                case SHARED_CONTENT_REMOVE_LINK_PASSWORD:
                    return (this.sharedContentRemoveLinkPasswordValue == other.sharedContentRemoveLinkPasswordValue) || (this.sharedContentRemoveLinkPasswordValue.equals(other.sharedContentRemoveLinkPasswordValue));
                case SHARED_CONTENT_REMOVE_MEMBER:
                    return (this.sharedContentRemoveMemberValue == other.sharedContentRemoveMemberValue) || (this.sharedContentRemoveMemberValue.equals(other.sharedContentRemoveMemberValue));
                case SHARED_CONTENT_REQUEST_ACCESS:
                    return (this.sharedContentRequestAccessValue == other.sharedContentRequestAccessValue) || (this.sharedContentRequestAccessValue.equals(other.sharedContentRequestAccessValue));
                case SHARED_CONTENT_RESTORE_INVITEES:
                    return (this.sharedContentRestoreInviteesValue == other.sharedContentRestoreInviteesValue) || (this.sharedContentRestoreInviteesValue.equals(other.sharedContentRestoreInviteesValue));
                case SHARED_CONTENT_RESTORE_MEMBER:
                    return (this.sharedContentRestoreMemberValue == other.sharedContentRestoreMemberValue) || (this.sharedContentRestoreMemberValue.equals(other.sharedContentRestoreMemberValue));
                case SHARED_CONTENT_UNSHARE:
                    return (this.sharedContentUnshareValue == other.sharedContentUnshareValue) || (this.sharedContentUnshareValue.equals(other.sharedContentUnshareValue));
                case SHARED_CONTENT_VIEW:
                    return (this.sharedContentViewValue == other.sharedContentViewValue) || (this.sharedContentViewValue.equals(other.sharedContentViewValue));
                case SHARED_FOLDER_CHANGE_LINK_POLICY:
                    return (this.sharedFolderChangeLinkPolicyValue == other.sharedFolderChangeLinkPolicyValue) || (this.sharedFolderChangeLinkPolicyValue.equals(other.sharedFolderChangeLinkPolicyValue));
                case SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY:
                    return (this.sharedFolderChangeMembersInheritancePolicyValue == other.sharedFolderChangeMembersInheritancePolicyValue) || (this.sharedFolderChangeMembersInheritancePolicyValue.equals(other.sharedFolderChangeMembersInheritancePolicyValue));
                case SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY:
                    return (this.sharedFolderChangeMembersManagementPolicyValue == other.sharedFolderChangeMembersManagementPolicyValue) || (this.sharedFolderChangeMembersManagementPolicyValue.equals(other.sharedFolderChangeMembersManagementPolicyValue));
                case SHARED_FOLDER_CHANGE_MEMBERS_POLICY:
                    return (this.sharedFolderChangeMembersPolicyValue == other.sharedFolderChangeMembersPolicyValue) || (this.sharedFolderChangeMembersPolicyValue.equals(other.sharedFolderChangeMembersPolicyValue));
                case SHARED_FOLDER_CREATE:
                    return (this.sharedFolderCreateValue == other.sharedFolderCreateValue) || (this.sharedFolderCreateValue.equals(other.sharedFolderCreateValue));
                case SHARED_FOLDER_DECLINE_INVITATION:
                    return (this.sharedFolderDeclineInvitationValue == other.sharedFolderDeclineInvitationValue) || (this.sharedFolderDeclineInvitationValue.equals(other.sharedFolderDeclineInvitationValue));
                case SHARED_FOLDER_MOUNT:
                    return (this.sharedFolderMountValue == other.sharedFolderMountValue) || (this.sharedFolderMountValue.equals(other.sharedFolderMountValue));
                case SHARED_FOLDER_NEST:
                    return (this.sharedFolderNestValue == other.sharedFolderNestValue) || (this.sharedFolderNestValue.equals(other.sharedFolderNestValue));
                case SHARED_FOLDER_TRANSFER_OWNERSHIP:
                    return (this.sharedFolderTransferOwnershipValue == other.sharedFolderTransferOwnershipValue) || (this.sharedFolderTransferOwnershipValue.equals(other.sharedFolderTransferOwnershipValue));
                case SHARED_FOLDER_UNMOUNT:
                    return (this.sharedFolderUnmountValue == other.sharedFolderUnmountValue) || (this.sharedFolderUnmountValue.equals(other.sharedFolderUnmountValue));
                case SHARED_LINK_ADD_EXPIRY:
                    return (this.sharedLinkAddExpiryValue == other.sharedLinkAddExpiryValue) || (this.sharedLinkAddExpiryValue.equals(other.sharedLinkAddExpiryValue));
                case SHARED_LINK_CHANGE_EXPIRY:
                    return (this.sharedLinkChangeExpiryValue == other.sharedLinkChangeExpiryValue) || (this.sharedLinkChangeExpiryValue.equals(other.sharedLinkChangeExpiryValue));
                case SHARED_LINK_CHANGE_VISIBILITY:
                    return (this.sharedLinkChangeVisibilityValue == other.sharedLinkChangeVisibilityValue) || (this.sharedLinkChangeVisibilityValue.equals(other.sharedLinkChangeVisibilityValue));
                case SHARED_LINK_COPY:
                    return (this.sharedLinkCopyValue == other.sharedLinkCopyValue) || (this.sharedLinkCopyValue.equals(other.sharedLinkCopyValue));
                case SHARED_LINK_CREATE:
                    return (this.sharedLinkCreateValue == other.sharedLinkCreateValue) || (this.sharedLinkCreateValue.equals(other.sharedLinkCreateValue));
                case SHARED_LINK_DISABLE:
                    return (this.sharedLinkDisableValue == other.sharedLinkDisableValue) || (this.sharedLinkDisableValue.equals(other.sharedLinkDisableValue));
                case SHARED_LINK_DOWNLOAD:
                    return (this.sharedLinkDownloadValue == other.sharedLinkDownloadValue) || (this.sharedLinkDownloadValue.equals(other.sharedLinkDownloadValue));
                case SHARED_LINK_REMOVE_EXPIRY:
                    return (this.sharedLinkRemoveExpiryValue == other.sharedLinkRemoveExpiryValue) || (this.sharedLinkRemoveExpiryValue.equals(other.sharedLinkRemoveExpiryValue));
                case SHARED_LINK_SETTINGS_ADD_EXPIRATION:
                    return (this.sharedLinkSettingsAddExpirationValue == other.sharedLinkSettingsAddExpirationValue) || (this.sharedLinkSettingsAddExpirationValue.equals(other.sharedLinkSettingsAddExpirationValue));
                case SHARED_LINK_SETTINGS_ADD_PASSWORD:
                    return (this.sharedLinkSettingsAddPasswordValue == other.sharedLinkSettingsAddPasswordValue) || (this.sharedLinkSettingsAddPasswordValue.equals(other.sharedLinkSettingsAddPasswordValue));
                case SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED:
                    return (this.sharedLinkSettingsAllowDownloadDisabledValue == other.sharedLinkSettingsAllowDownloadDisabledValue) || (this.sharedLinkSettingsAllowDownloadDisabledValue.equals(other.sharedLinkSettingsAllowDownloadDisabledValue));
                case SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED:
                    return (this.sharedLinkSettingsAllowDownloadEnabledValue == other.sharedLinkSettingsAllowDownloadEnabledValue) || (this.sharedLinkSettingsAllowDownloadEnabledValue.equals(other.sharedLinkSettingsAllowDownloadEnabledValue));
                case SHARED_LINK_SETTINGS_CHANGE_AUDIENCE:
                    return (this.sharedLinkSettingsChangeAudienceValue == other.sharedLinkSettingsChangeAudienceValue) || (this.sharedLinkSettingsChangeAudienceValue.equals(other.sharedLinkSettingsChangeAudienceValue));
                case SHARED_LINK_SETTINGS_CHANGE_EXPIRATION:
                    return (this.sharedLinkSettingsChangeExpirationValue == other.sharedLinkSettingsChangeExpirationValue) || (this.sharedLinkSettingsChangeExpirationValue.equals(other.sharedLinkSettingsChangeExpirationValue));
                case SHARED_LINK_SETTINGS_CHANGE_PASSWORD:
                    return (this.sharedLinkSettingsChangePasswordValue == other.sharedLinkSettingsChangePasswordValue) || (this.sharedLinkSettingsChangePasswordValue.equals(other.sharedLinkSettingsChangePasswordValue));
                case SHARED_LINK_SETTINGS_REMOVE_EXPIRATION:
                    return (this.sharedLinkSettingsRemoveExpirationValue == other.sharedLinkSettingsRemoveExpirationValue) || (this.sharedLinkSettingsRemoveExpirationValue.equals(other.sharedLinkSettingsRemoveExpirationValue));
                case SHARED_LINK_SETTINGS_REMOVE_PASSWORD:
                    return (this.sharedLinkSettingsRemovePasswordValue == other.sharedLinkSettingsRemovePasswordValue) || (this.sharedLinkSettingsRemovePasswordValue.equals(other.sharedLinkSettingsRemovePasswordValue));
                case SHARED_LINK_SHARE:
                    return (this.sharedLinkShareValue == other.sharedLinkShareValue) || (this.sharedLinkShareValue.equals(other.sharedLinkShareValue));
                case SHARED_LINK_VIEW:
                    return (this.sharedLinkViewValue == other.sharedLinkViewValue) || (this.sharedLinkViewValue.equals(other.sharedLinkViewValue));
                case SHARED_NOTE_OPENED:
                    return (this.sharedNoteOpenedValue == other.sharedNoteOpenedValue) || (this.sharedNoteOpenedValue.equals(other.sharedNoteOpenedValue));
                case SHMODEL_DISABLE_DOWNLOADS:
                    return (this.shmodelDisableDownloadsValue == other.shmodelDisableDownloadsValue) || (this.shmodelDisableDownloadsValue.equals(other.shmodelDisableDownloadsValue));
                case SHMODEL_ENABLE_DOWNLOADS:
                    return (this.shmodelEnableDownloadsValue == other.shmodelEnableDownloadsValue) || (this.shmodelEnableDownloadsValue.equals(other.shmodelEnableDownloadsValue));
                case SHMODEL_GROUP_SHARE:
                    return (this.shmodelGroupShareValue == other.shmodelGroupShareValue) || (this.shmodelGroupShareValue.equals(other.shmodelGroupShareValue));
                case SHOWCASE_ACCESS_GRANTED:
                    return (this.showcaseAccessGrantedValue == other.showcaseAccessGrantedValue) || (this.showcaseAccessGrantedValue.equals(other.showcaseAccessGrantedValue));
                case SHOWCASE_ADD_MEMBER:
                    return (this.showcaseAddMemberValue == other.showcaseAddMemberValue) || (this.showcaseAddMemberValue.equals(other.showcaseAddMemberValue));
                case SHOWCASE_ARCHIVED:
                    return (this.showcaseArchivedValue == other.showcaseArchivedValue) || (this.showcaseArchivedValue.equals(other.showcaseArchivedValue));
                case SHOWCASE_CREATED:
                    return (this.showcaseCreatedValue == other.showcaseCreatedValue) || (this.showcaseCreatedValue.equals(other.showcaseCreatedValue));
                case SHOWCASE_DELETE_COMMENT:
                    return (this.showcaseDeleteCommentValue == other.showcaseDeleteCommentValue) || (this.showcaseDeleteCommentValue.equals(other.showcaseDeleteCommentValue));
                case SHOWCASE_EDITED:
                    return (this.showcaseEditedValue == other.showcaseEditedValue) || (this.showcaseEditedValue.equals(other.showcaseEditedValue));
                case SHOWCASE_EDIT_COMMENT:
                    return (this.showcaseEditCommentValue == other.showcaseEditCommentValue) || (this.showcaseEditCommentValue.equals(other.showcaseEditCommentValue));
                case SHOWCASE_FILE_ADDED:
                    return (this.showcaseFileAddedValue == other.showcaseFileAddedValue) || (this.showcaseFileAddedValue.equals(other.showcaseFileAddedValue));
                case SHOWCASE_FILE_DOWNLOAD:
                    return (this.showcaseFileDownloadValue == other.showcaseFileDownloadValue) || (this.showcaseFileDownloadValue.equals(other.showcaseFileDownloadValue));
                case SHOWCASE_FILE_REMOVED:
                    return (this.showcaseFileRemovedValue == other.showcaseFileRemovedValue) || (this.showcaseFileRemovedValue.equals(other.showcaseFileRemovedValue));
                case SHOWCASE_FILE_VIEW:
                    return (this.showcaseFileViewValue == other.showcaseFileViewValue) || (this.showcaseFileViewValue.equals(other.showcaseFileViewValue));
                case SHOWCASE_PERMANENTLY_DELETED:
                    return (this.showcasePermanentlyDeletedValue == other.showcasePermanentlyDeletedValue) || (this.showcasePermanentlyDeletedValue.equals(other.showcasePermanentlyDeletedValue));
                case SHOWCASE_POST_COMMENT:
                    return (this.showcasePostCommentValue == other.showcasePostCommentValue) || (this.showcasePostCommentValue.equals(other.showcasePostCommentValue));
                case SHOWCASE_REMOVE_MEMBER:
                    return (this.showcaseRemoveMemberValue == other.showcaseRemoveMemberValue) || (this.showcaseRemoveMemberValue.equals(other.showcaseRemoveMemberValue));
                case SHOWCASE_RENAMED:
                    return (this.showcaseRenamedValue == other.showcaseRenamedValue) || (this.showcaseRenamedValue.equals(other.showcaseRenamedValue));
                case SHOWCASE_REQUEST_ACCESS:
                    return (this.showcaseRequestAccessValue == other.showcaseRequestAccessValue) || (this.showcaseRequestAccessValue.equals(other.showcaseRequestAccessValue));
                case SHOWCASE_RESOLVE_COMMENT:
                    return (this.showcaseResolveCommentValue == other.showcaseResolveCommentValue) || (this.showcaseResolveCommentValue.equals(other.showcaseResolveCommentValue));
                case SHOWCASE_RESTORED:
                    return (this.showcaseRestoredValue == other.showcaseRestoredValue) || (this.showcaseRestoredValue.equals(other.showcaseRestoredValue));
                case SHOWCASE_TRASHED:
                    return (this.showcaseTrashedValue == other.showcaseTrashedValue) || (this.showcaseTrashedValue.equals(other.showcaseTrashedValue));
                case SHOWCASE_TRASHED_DEPRECATED:
                    return (this.showcaseTrashedDeprecatedValue == other.showcaseTrashedDeprecatedValue) || (this.showcaseTrashedDeprecatedValue.equals(other.showcaseTrashedDeprecatedValue));
                case SHOWCASE_UNRESOLVE_COMMENT:
                    return (this.showcaseUnresolveCommentValue == other.showcaseUnresolveCommentValue) || (this.showcaseUnresolveCommentValue.equals(other.showcaseUnresolveCommentValue));
                case SHOWCASE_UNTRASHED:
                    return (this.showcaseUntrashedValue == other.showcaseUntrashedValue) || (this.showcaseUntrashedValue.equals(other.showcaseUntrashedValue));
                case SHOWCASE_UNTRASHED_DEPRECATED:
                    return (this.showcaseUntrashedDeprecatedValue == other.showcaseUntrashedDeprecatedValue) || (this.showcaseUntrashedDeprecatedValue.equals(other.showcaseUntrashedDeprecatedValue));
                case SHOWCASE_VIEW:
                    return (this.showcaseViewValue == other.showcaseViewValue) || (this.showcaseViewValue.equals(other.showcaseViewValue));
                case SSO_ADD_CERT:
                    return (this.ssoAddCertValue == other.ssoAddCertValue) || (this.ssoAddCertValue.equals(other.ssoAddCertValue));
                case SSO_ADD_LOGIN_URL:
                    return (this.ssoAddLoginUrlValue == other.ssoAddLoginUrlValue) || (this.ssoAddLoginUrlValue.equals(other.ssoAddLoginUrlValue));
                case SSO_ADD_LOGOUT_URL:
                    return (this.ssoAddLogoutUrlValue == other.ssoAddLogoutUrlValue) || (this.ssoAddLogoutUrlValue.equals(other.ssoAddLogoutUrlValue));
                case SSO_CHANGE_CERT:
                    return (this.ssoChangeCertValue == other.ssoChangeCertValue) || (this.ssoChangeCertValue.equals(other.ssoChangeCertValue));
                case SSO_CHANGE_LOGIN_URL:
                    return (this.ssoChangeLoginUrlValue == other.ssoChangeLoginUrlValue) || (this.ssoChangeLoginUrlValue.equals(other.ssoChangeLoginUrlValue));
                case SSO_CHANGE_LOGOUT_URL:
                    return (this.ssoChangeLogoutUrlValue == other.ssoChangeLogoutUrlValue) || (this.ssoChangeLogoutUrlValue.equals(other.ssoChangeLogoutUrlValue));
                case SSO_CHANGE_SAML_IDENTITY_MODE:
                    return (this.ssoChangeSamlIdentityModeValue == other.ssoChangeSamlIdentityModeValue) || (this.ssoChangeSamlIdentityModeValue.equals(other.ssoChangeSamlIdentityModeValue));
                case SSO_REMOVE_CERT:
                    return (this.ssoRemoveCertValue == other.ssoRemoveCertValue) || (this.ssoRemoveCertValue.equals(other.ssoRemoveCertValue));
                case SSO_REMOVE_LOGIN_URL:
                    return (this.ssoRemoveLoginUrlValue == other.ssoRemoveLoginUrlValue) || (this.ssoRemoveLoginUrlValue.equals(other.ssoRemoveLoginUrlValue));
                case SSO_REMOVE_LOGOUT_URL:
                    return (this.ssoRemoveLogoutUrlValue == other.ssoRemoveLogoutUrlValue) || (this.ssoRemoveLogoutUrlValue.equals(other.ssoRemoveLogoutUrlValue));
                case TEAM_FOLDER_CHANGE_STATUS:
                    return (this.teamFolderChangeStatusValue == other.teamFolderChangeStatusValue) || (this.teamFolderChangeStatusValue.equals(other.teamFolderChangeStatusValue));
                case TEAM_FOLDER_CREATE:
                    return (this.teamFolderCreateValue == other.teamFolderCreateValue) || (this.teamFolderCreateValue.equals(other.teamFolderCreateValue));
                case TEAM_FOLDER_DOWNGRADE:
                    return (this.teamFolderDowngradeValue == other.teamFolderDowngradeValue) || (this.teamFolderDowngradeValue.equals(other.teamFolderDowngradeValue));
                case TEAM_FOLDER_PERMANENTLY_DELETE:
                    return (this.teamFolderPermanentlyDeleteValue == other.teamFolderPermanentlyDeleteValue) || (this.teamFolderPermanentlyDeleteValue.equals(other.teamFolderPermanentlyDeleteValue));
                case TEAM_FOLDER_RENAME:
                    return (this.teamFolderRenameValue == other.teamFolderRenameValue) || (this.teamFolderRenameValue.equals(other.teamFolderRenameValue));
                case TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED:
                    return (this.teamSelectiveSyncSettingsChangedValue == other.teamSelectiveSyncSettingsChangedValue) || (this.teamSelectiveSyncSettingsChangedValue.equals(other.teamSelectiveSyncSettingsChangedValue));
                case ACCOUNT_CAPTURE_CHANGE_POLICY:
                    return (this.accountCaptureChangePolicyValue == other.accountCaptureChangePolicyValue) || (this.accountCaptureChangePolicyValue.equals(other.accountCaptureChangePolicyValue));
                case ADMIN_EMAIL_REMINDERS_CHANGED:
                    return (this.adminEmailRemindersChangedValue == other.adminEmailRemindersChangedValue) || (this.adminEmailRemindersChangedValue.equals(other.adminEmailRemindersChangedValue));
                case ALLOW_DOWNLOAD_DISABLED:
                    return (this.allowDownloadDisabledValue == other.allowDownloadDisabledValue) || (this.allowDownloadDisabledValue.equals(other.allowDownloadDisabledValue));
                case ALLOW_DOWNLOAD_ENABLED:
                    return (this.allowDownloadEnabledValue == other.allowDownloadEnabledValue) || (this.allowDownloadEnabledValue.equals(other.allowDownloadEnabledValue));
                case APP_PERMISSIONS_CHANGED:
                    return (this.appPermissionsChangedValue == other.appPermissionsChangedValue) || (this.appPermissionsChangedValue.equals(other.appPermissionsChangedValue));
                case CAMERA_UPLOADS_POLICY_CHANGED:
                    return (this.cameraUploadsPolicyChangedValue == other.cameraUploadsPolicyChangedValue) || (this.cameraUploadsPolicyChangedValue.equals(other.cameraUploadsPolicyChangedValue));
                case CAPTURE_TRANSCRIPT_POLICY_CHANGED:
                    return (this.captureTranscriptPolicyChangedValue == other.captureTranscriptPolicyChangedValue) || (this.captureTranscriptPolicyChangedValue.equals(other.captureTranscriptPolicyChangedValue));
                case CLASSIFICATION_CHANGE_POLICY:
                    return (this.classificationChangePolicyValue == other.classificationChangePolicyValue) || (this.classificationChangePolicyValue.equals(other.classificationChangePolicyValue));
                case COMPUTER_BACKUP_POLICY_CHANGED:
                    return (this.computerBackupPolicyChangedValue == other.computerBackupPolicyChangedValue) || (this.computerBackupPolicyChangedValue.equals(other.computerBackupPolicyChangedValue));
                case CONTENT_ADMINISTRATION_POLICY_CHANGED:
                    return (this.contentAdministrationPolicyChangedValue == other.contentAdministrationPolicyChangedValue) || (this.contentAdministrationPolicyChangedValue.equals(other.contentAdministrationPolicyChangedValue));
                case DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY:
                    return (this.dataPlacementRestrictionChangePolicyValue == other.dataPlacementRestrictionChangePolicyValue) || (this.dataPlacementRestrictionChangePolicyValue.equals(other.dataPlacementRestrictionChangePolicyValue));
                case DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY:
                    return (this.dataPlacementRestrictionSatisfyPolicyValue == other.dataPlacementRestrictionSatisfyPolicyValue) || (this.dataPlacementRestrictionSatisfyPolicyValue.equals(other.dataPlacementRestrictionSatisfyPolicyValue));
                case DEVICE_APPROVALS_ADD_EXCEPTION:
                    return (this.deviceApprovalsAddExceptionValue == other.deviceApprovalsAddExceptionValue) || (this.deviceApprovalsAddExceptionValue.equals(other.deviceApprovalsAddExceptionValue));
                case DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY:
                    return (this.deviceApprovalsChangeDesktopPolicyValue == other.deviceApprovalsChangeDesktopPolicyValue) || (this.deviceApprovalsChangeDesktopPolicyValue.equals(other.deviceApprovalsChangeDesktopPolicyValue));
                case DEVICE_APPROVALS_CHANGE_MOBILE_POLICY:
                    return (this.deviceApprovalsChangeMobilePolicyValue == other.deviceApprovalsChangeMobilePolicyValue) || (this.deviceApprovalsChangeMobilePolicyValue.equals(other.deviceApprovalsChangeMobilePolicyValue));
                case DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION:
                    return (this.deviceApprovalsChangeOverageActionValue == other.deviceApprovalsChangeOverageActionValue) || (this.deviceApprovalsChangeOverageActionValue.equals(other.deviceApprovalsChangeOverageActionValue));
                case DEVICE_APPROVALS_CHANGE_UNLINK_ACTION:
                    return (this.deviceApprovalsChangeUnlinkActionValue == other.deviceApprovalsChangeUnlinkActionValue) || (this.deviceApprovalsChangeUnlinkActionValue.equals(other.deviceApprovalsChangeUnlinkActionValue));
                case DEVICE_APPROVALS_REMOVE_EXCEPTION:
                    return (this.deviceApprovalsRemoveExceptionValue == other.deviceApprovalsRemoveExceptionValue) || (this.deviceApprovalsRemoveExceptionValue.equals(other.deviceApprovalsRemoveExceptionValue));
                case DIRECTORY_RESTRICTIONS_ADD_MEMBERS:
                    return (this.directoryRestrictionsAddMembersValue == other.directoryRestrictionsAddMembersValue) || (this.directoryRestrictionsAddMembersValue.equals(other.directoryRestrictionsAddMembersValue));
                case DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS:
                    return (this.directoryRestrictionsRemoveMembersValue == other.directoryRestrictionsRemoveMembersValue) || (this.directoryRestrictionsRemoveMembersValue.equals(other.directoryRestrictionsRemoveMembersValue));
                case DROPBOX_PASSWORDS_POLICY_CHANGED:
                    return (this.dropboxPasswordsPolicyChangedValue == other.dropboxPasswordsPolicyChangedValue) || (this.dropboxPasswordsPolicyChangedValue.equals(other.dropboxPasswordsPolicyChangedValue));
                case EMAIL_INGEST_POLICY_CHANGED:
                    return (this.emailIngestPolicyChangedValue == other.emailIngestPolicyChangedValue) || (this.emailIngestPolicyChangedValue.equals(other.emailIngestPolicyChangedValue));
                case EMM_ADD_EXCEPTION:
                    return (this.emmAddExceptionValue == other.emmAddExceptionValue) || (this.emmAddExceptionValue.equals(other.emmAddExceptionValue));
                case EMM_CHANGE_POLICY:
                    return (this.emmChangePolicyValue == other.emmChangePolicyValue) || (this.emmChangePolicyValue.equals(other.emmChangePolicyValue));
                case EMM_REMOVE_EXCEPTION:
                    return (this.emmRemoveExceptionValue == other.emmRemoveExceptionValue) || (this.emmRemoveExceptionValue.equals(other.emmRemoveExceptionValue));
                case EXTENDED_VERSION_HISTORY_CHANGE_POLICY:
                    return (this.extendedVersionHistoryChangePolicyValue == other.extendedVersionHistoryChangePolicyValue) || (this.extendedVersionHistoryChangePolicyValue.equals(other.extendedVersionHistoryChangePolicyValue));
                case EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED:
                    return (this.externalDriveBackupPolicyChangedValue == other.externalDriveBackupPolicyChangedValue) || (this.externalDriveBackupPolicyChangedValue.equals(other.externalDriveBackupPolicyChangedValue));
                case FILE_COMMENTS_CHANGE_POLICY:
                    return (this.fileCommentsChangePolicyValue == other.fileCommentsChangePolicyValue) || (this.fileCommentsChangePolicyValue.equals(other.fileCommentsChangePolicyValue));
                case FILE_LOCKING_POLICY_CHANGED:
                    return (this.fileLockingPolicyChangedValue == other.fileLockingPolicyChangedValue) || (this.fileLockingPolicyChangedValue.equals(other.fileLockingPolicyChangedValue));
                case FILE_PROVIDER_MIGRATION_POLICY_CHANGED:
                    return (this.fileProviderMigrationPolicyChangedValue == other.fileProviderMigrationPolicyChangedValue) || (this.fileProviderMigrationPolicyChangedValue.equals(other.fileProviderMigrationPolicyChangedValue));
                case FILE_REQUESTS_CHANGE_POLICY:
                    return (this.fileRequestsChangePolicyValue == other.fileRequestsChangePolicyValue) || (this.fileRequestsChangePolicyValue.equals(other.fileRequestsChangePolicyValue));
                case FILE_REQUESTS_EMAILS_ENABLED:
                    return (this.fileRequestsEmailsEnabledValue == other.fileRequestsEmailsEnabledValue) || (this.fileRequestsEmailsEnabledValue.equals(other.fileRequestsEmailsEnabledValue));
                case FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY:
                    return (this.fileRequestsEmailsRestrictedToTeamOnlyValue == other.fileRequestsEmailsRestrictedToTeamOnlyValue) || (this.fileRequestsEmailsRestrictedToTeamOnlyValue.equals(other.fileRequestsEmailsRestrictedToTeamOnlyValue));
                case FILE_TRANSFERS_POLICY_CHANGED:
                    return (this.fileTransfersPolicyChangedValue == other.fileTransfersPolicyChangedValue) || (this.fileTransfersPolicyChangedValue.equals(other.fileTransfersPolicyChangedValue));
                case GOOGLE_SSO_CHANGE_POLICY:
                    return (this.googleSsoChangePolicyValue == other.googleSsoChangePolicyValue) || (this.googleSsoChangePolicyValue.equals(other.googleSsoChangePolicyValue));
                case GROUP_USER_MANAGEMENT_CHANGE_POLICY:
                    return (this.groupUserManagementChangePolicyValue == other.groupUserManagementChangePolicyValue) || (this.groupUserManagementChangePolicyValue.equals(other.groupUserManagementChangePolicyValue));
                case INTEGRATION_POLICY_CHANGED:
                    return (this.integrationPolicyChangedValue == other.integrationPolicyChangedValue) || (this.integrationPolicyChangedValue.equals(other.integrationPolicyChangedValue));
                case INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED:
                    return (this.inviteAcceptanceEmailPolicyChangedValue == other.inviteAcceptanceEmailPolicyChangedValue) || (this.inviteAcceptanceEmailPolicyChangedValue.equals(other.inviteAcceptanceEmailPolicyChangedValue));
                case MEMBER_REQUESTS_CHANGE_POLICY:
                    return (this.memberRequestsChangePolicyValue == other.memberRequestsChangePolicyValue) || (this.memberRequestsChangePolicyValue.equals(other.memberRequestsChangePolicyValue));
                case MEMBER_SEND_INVITE_POLICY_CHANGED:
                    return (this.memberSendInvitePolicyChangedValue == other.memberSendInvitePolicyChangedValue) || (this.memberSendInvitePolicyChangedValue.equals(other.memberSendInvitePolicyChangedValue));
                case MEMBER_SPACE_LIMITS_ADD_EXCEPTION:
                    return (this.memberSpaceLimitsAddExceptionValue == other.memberSpaceLimitsAddExceptionValue) || (this.memberSpaceLimitsAddExceptionValue.equals(other.memberSpaceLimitsAddExceptionValue));
                case MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY:
                    return (this.memberSpaceLimitsChangeCapsTypePolicyValue == other.memberSpaceLimitsChangeCapsTypePolicyValue) || (this.memberSpaceLimitsChangeCapsTypePolicyValue.equals(other.memberSpaceLimitsChangeCapsTypePolicyValue));
                case MEMBER_SPACE_LIMITS_CHANGE_POLICY:
                    return (this.memberSpaceLimitsChangePolicyValue == other.memberSpaceLimitsChangePolicyValue) || (this.memberSpaceLimitsChangePolicyValue.equals(other.memberSpaceLimitsChangePolicyValue));
                case MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION:
                    return (this.memberSpaceLimitsRemoveExceptionValue == other.memberSpaceLimitsRemoveExceptionValue) || (this.memberSpaceLimitsRemoveExceptionValue.equals(other.memberSpaceLimitsRemoveExceptionValue));
                case MEMBER_SUGGESTIONS_CHANGE_POLICY:
                    return (this.memberSuggestionsChangePolicyValue == other.memberSuggestionsChangePolicyValue) || (this.memberSuggestionsChangePolicyValue.equals(other.memberSuggestionsChangePolicyValue));
                case MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY:
                    return (this.microsoftOfficeAddinChangePolicyValue == other.microsoftOfficeAddinChangePolicyValue) || (this.microsoftOfficeAddinChangePolicyValue.equals(other.microsoftOfficeAddinChangePolicyValue));
                case NETWORK_CONTROL_CHANGE_POLICY:
                    return (this.networkControlChangePolicyValue == other.networkControlChangePolicyValue) || (this.networkControlChangePolicyValue.equals(other.networkControlChangePolicyValue));
                case PAPER_CHANGE_DEPLOYMENT_POLICY:
                    return (this.paperChangeDeploymentPolicyValue == other.paperChangeDeploymentPolicyValue) || (this.paperChangeDeploymentPolicyValue.equals(other.paperChangeDeploymentPolicyValue));
                case PAPER_CHANGE_MEMBER_LINK_POLICY:
                    return (this.paperChangeMemberLinkPolicyValue == other.paperChangeMemberLinkPolicyValue) || (this.paperChangeMemberLinkPolicyValue.equals(other.paperChangeMemberLinkPolicyValue));
                case PAPER_CHANGE_MEMBER_POLICY:
                    return (this.paperChangeMemberPolicyValue == other.paperChangeMemberPolicyValue) || (this.paperChangeMemberPolicyValue.equals(other.paperChangeMemberPolicyValue));
                case PAPER_CHANGE_POLICY:
                    return (this.paperChangePolicyValue == other.paperChangePolicyValue) || (this.paperChangePolicyValue.equals(other.paperChangePolicyValue));
                case PAPER_DEFAULT_FOLDER_POLICY_CHANGED:
                    return (this.paperDefaultFolderPolicyChangedValue == other.paperDefaultFolderPolicyChangedValue) || (this.paperDefaultFolderPolicyChangedValue.equals(other.paperDefaultFolderPolicyChangedValue));
                case PAPER_DESKTOP_POLICY_CHANGED:
                    return (this.paperDesktopPolicyChangedValue == other.paperDesktopPolicyChangedValue) || (this.paperDesktopPolicyChangedValue.equals(other.paperDesktopPolicyChangedValue));
                case PAPER_ENABLED_USERS_GROUP_ADDITION:
                    return (this.paperEnabledUsersGroupAdditionValue == other.paperEnabledUsersGroupAdditionValue) || (this.paperEnabledUsersGroupAdditionValue.equals(other.paperEnabledUsersGroupAdditionValue));
                case PAPER_ENABLED_USERS_GROUP_REMOVAL:
                    return (this.paperEnabledUsersGroupRemovalValue == other.paperEnabledUsersGroupRemovalValue) || (this.paperEnabledUsersGroupRemovalValue.equals(other.paperEnabledUsersGroupRemovalValue));
                case PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY:
                    return (this.passwordStrengthRequirementsChangePolicyValue == other.passwordStrengthRequirementsChangePolicyValue) || (this.passwordStrengthRequirementsChangePolicyValue.equals(other.passwordStrengthRequirementsChangePolicyValue));
                case PERMANENT_DELETE_CHANGE_POLICY:
                    return (this.permanentDeleteChangePolicyValue == other.permanentDeleteChangePolicyValue) || (this.permanentDeleteChangePolicyValue.equals(other.permanentDeleteChangePolicyValue));
                case RESELLER_SUPPORT_CHANGE_POLICY:
                    return (this.resellerSupportChangePolicyValue == other.resellerSupportChangePolicyValue) || (this.resellerSupportChangePolicyValue.equals(other.resellerSupportChangePolicyValue));
                case REWIND_POLICY_CHANGED:
                    return (this.rewindPolicyChangedValue == other.rewindPolicyChangedValue) || (this.rewindPolicyChangedValue.equals(other.rewindPolicyChangedValue));
                case SEND_FOR_SIGNATURE_POLICY_CHANGED:
                    return (this.sendForSignaturePolicyChangedValue == other.sendForSignaturePolicyChangedValue) || (this.sendForSignaturePolicyChangedValue.equals(other.sendForSignaturePolicyChangedValue));
                case SHARING_CHANGE_FOLDER_JOIN_POLICY:
                    return (this.sharingChangeFolderJoinPolicyValue == other.sharingChangeFolderJoinPolicyValue) || (this.sharingChangeFolderJoinPolicyValue.equals(other.sharingChangeFolderJoinPolicyValue));
                case SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY:
                    return (this.sharingChangeLinkAllowChangeExpirationPolicyValue == other.sharingChangeLinkAllowChangeExpirationPolicyValue) || (this.sharingChangeLinkAllowChangeExpirationPolicyValue.equals(other.sharingChangeLinkAllowChangeExpirationPolicyValue));
                case SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY:
                    return (this.sharingChangeLinkDefaultExpirationPolicyValue == other.sharingChangeLinkDefaultExpirationPolicyValue) || (this.sharingChangeLinkDefaultExpirationPolicyValue.equals(other.sharingChangeLinkDefaultExpirationPolicyValue));
                case SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY:
                    return (this.sharingChangeLinkEnforcePasswordPolicyValue == other.sharingChangeLinkEnforcePasswordPolicyValue) || (this.sharingChangeLinkEnforcePasswordPolicyValue.equals(other.sharingChangeLinkEnforcePasswordPolicyValue));
                case SHARING_CHANGE_LINK_POLICY:
                    return (this.sharingChangeLinkPolicyValue == other.sharingChangeLinkPolicyValue) || (this.sharingChangeLinkPolicyValue.equals(other.sharingChangeLinkPolicyValue));
                case SHARING_CHANGE_MEMBER_POLICY:
                    return (this.sharingChangeMemberPolicyValue == other.sharingChangeMemberPolicyValue) || (this.sharingChangeMemberPolicyValue.equals(other.sharingChangeMemberPolicyValue));
                case SHOWCASE_CHANGE_DOWNLOAD_POLICY:
                    return (this.showcaseChangeDownloadPolicyValue == other.showcaseChangeDownloadPolicyValue) || (this.showcaseChangeDownloadPolicyValue.equals(other.showcaseChangeDownloadPolicyValue));
                case SHOWCASE_CHANGE_ENABLED_POLICY:
                    return (this.showcaseChangeEnabledPolicyValue == other.showcaseChangeEnabledPolicyValue) || (this.showcaseChangeEnabledPolicyValue.equals(other.showcaseChangeEnabledPolicyValue));
                case SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY:
                    return (this.showcaseChangeExternalSharingPolicyValue == other.showcaseChangeExternalSharingPolicyValue) || (this.showcaseChangeExternalSharingPolicyValue.equals(other.showcaseChangeExternalSharingPolicyValue));
                case SMARTER_SMART_SYNC_POLICY_CHANGED:
                    return (this.smarterSmartSyncPolicyChangedValue == other.smarterSmartSyncPolicyChangedValue) || (this.smarterSmartSyncPolicyChangedValue.equals(other.smarterSmartSyncPolicyChangedValue));
                case SMART_SYNC_CHANGE_POLICY:
                    return (this.smartSyncChangePolicyValue == other.smartSyncChangePolicyValue) || (this.smartSyncChangePolicyValue.equals(other.smartSyncChangePolicyValue));
                case SMART_SYNC_NOT_OPT_OUT:
                    return (this.smartSyncNotOptOutValue == other.smartSyncNotOptOutValue) || (this.smartSyncNotOptOutValue.equals(other.smartSyncNotOptOutValue));
                case SMART_SYNC_OPT_OUT:
                    return (this.smartSyncOptOutValue == other.smartSyncOptOutValue) || (this.smartSyncOptOutValue.equals(other.smartSyncOptOutValue));
                case SSO_CHANGE_POLICY:
                    return (this.ssoChangePolicyValue == other.ssoChangePolicyValue) || (this.ssoChangePolicyValue.equals(other.ssoChangePolicyValue));
                case TEAM_BRANDING_POLICY_CHANGED:
                    return (this.teamBrandingPolicyChangedValue == other.teamBrandingPolicyChangedValue) || (this.teamBrandingPolicyChangedValue.equals(other.teamBrandingPolicyChangedValue));
                case TEAM_EXTENSIONS_POLICY_CHANGED:
                    return (this.teamExtensionsPolicyChangedValue == other.teamExtensionsPolicyChangedValue) || (this.teamExtensionsPolicyChangedValue.equals(other.teamExtensionsPolicyChangedValue));
                case TEAM_SELECTIVE_SYNC_POLICY_CHANGED:
                    return (this.teamSelectiveSyncPolicyChangedValue == other.teamSelectiveSyncPolicyChangedValue) || (this.teamSelectiveSyncPolicyChangedValue.equals(other.teamSelectiveSyncPolicyChangedValue));
                case TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED:
                    return (this.teamSharingWhitelistSubjectsChangedValue == other.teamSharingWhitelistSubjectsChangedValue) || (this.teamSharingWhitelistSubjectsChangedValue.equals(other.teamSharingWhitelistSubjectsChangedValue));
                case TFA_ADD_EXCEPTION:
                    return (this.tfaAddExceptionValue == other.tfaAddExceptionValue) || (this.tfaAddExceptionValue.equals(other.tfaAddExceptionValue));
                case TFA_CHANGE_POLICY:
                    return (this.tfaChangePolicyValue == other.tfaChangePolicyValue) || (this.tfaChangePolicyValue.equals(other.tfaChangePolicyValue));
                case TFA_REMOVE_EXCEPTION:
                    return (this.tfaRemoveExceptionValue == other.tfaRemoveExceptionValue) || (this.tfaRemoveExceptionValue.equals(other.tfaRemoveExceptionValue));
                case TWO_ACCOUNT_CHANGE_POLICY:
                    return (this.twoAccountChangePolicyValue == other.twoAccountChangePolicyValue) || (this.twoAccountChangePolicyValue.equals(other.twoAccountChangePolicyValue));
                case VIEWER_INFO_POLICY_CHANGED:
                    return (this.viewerInfoPolicyChangedValue == other.viewerInfoPolicyChangedValue) || (this.viewerInfoPolicyChangedValue.equals(other.viewerInfoPolicyChangedValue));
                case WATERMARKING_POLICY_CHANGED:
                    return (this.watermarkingPolicyChangedValue == other.watermarkingPolicyChangedValue) || (this.watermarkingPolicyChangedValue.equals(other.watermarkingPolicyChangedValue));
                case WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT:
                    return (this.webSessionsChangeActiveSessionLimitValue == other.webSessionsChangeActiveSessionLimitValue) || (this.webSessionsChangeActiveSessionLimitValue.equals(other.webSessionsChangeActiveSessionLimitValue));
                case WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY:
                    return (this.webSessionsChangeFixedLengthPolicyValue == other.webSessionsChangeFixedLengthPolicyValue) || (this.webSessionsChangeFixedLengthPolicyValue.equals(other.webSessionsChangeFixedLengthPolicyValue));
                case WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY:
                    return (this.webSessionsChangeIdleLengthPolicyValue == other.webSessionsChangeIdleLengthPolicyValue) || (this.webSessionsChangeIdleLengthPolicyValue.equals(other.webSessionsChangeIdleLengthPolicyValue));
                case DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL:
                    return (this.dataResidencyMigrationRequestSuccessfulValue == other.dataResidencyMigrationRequestSuccessfulValue) || (this.dataResidencyMigrationRequestSuccessfulValue.equals(other.dataResidencyMigrationRequestSuccessfulValue));
                case DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL:
                    return (this.dataResidencyMigrationRequestUnsuccessfulValue == other.dataResidencyMigrationRequestUnsuccessfulValue) || (this.dataResidencyMigrationRequestUnsuccessfulValue.equals(other.dataResidencyMigrationRequestUnsuccessfulValue));
                case TEAM_MERGE_FROM:
                    return (this.teamMergeFromValue == other.teamMergeFromValue) || (this.teamMergeFromValue.equals(other.teamMergeFromValue));
                case TEAM_MERGE_TO:
                    return (this.teamMergeToValue == other.teamMergeToValue) || (this.teamMergeToValue.equals(other.teamMergeToValue));
                case TEAM_PROFILE_ADD_BACKGROUND:
                    return (this.teamProfileAddBackgroundValue == other.teamProfileAddBackgroundValue) || (this.teamProfileAddBackgroundValue.equals(other.teamProfileAddBackgroundValue));
                case TEAM_PROFILE_ADD_LOGO:
                    return (this.teamProfileAddLogoValue == other.teamProfileAddLogoValue) || (this.teamProfileAddLogoValue.equals(other.teamProfileAddLogoValue));
                case TEAM_PROFILE_CHANGE_BACKGROUND:
                    return (this.teamProfileChangeBackgroundValue == other.teamProfileChangeBackgroundValue) || (this.teamProfileChangeBackgroundValue.equals(other.teamProfileChangeBackgroundValue));
                case TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE:
                    return (this.teamProfileChangeDefaultLanguageValue == other.teamProfileChangeDefaultLanguageValue) || (this.teamProfileChangeDefaultLanguageValue.equals(other.teamProfileChangeDefaultLanguageValue));
                case TEAM_PROFILE_CHANGE_LOGO:
                    return (this.teamProfileChangeLogoValue == other.teamProfileChangeLogoValue) || (this.teamProfileChangeLogoValue.equals(other.teamProfileChangeLogoValue));
                case TEAM_PROFILE_CHANGE_NAME:
                    return (this.teamProfileChangeNameValue == other.teamProfileChangeNameValue) || (this.teamProfileChangeNameValue.equals(other.teamProfileChangeNameValue));
                case TEAM_PROFILE_REMOVE_BACKGROUND:
                    return (this.teamProfileRemoveBackgroundValue == other.teamProfileRemoveBackgroundValue) || (this.teamProfileRemoveBackgroundValue.equals(other.teamProfileRemoveBackgroundValue));
                case TEAM_PROFILE_REMOVE_LOGO:
                    return (this.teamProfileRemoveLogoValue == other.teamProfileRemoveLogoValue) || (this.teamProfileRemoveLogoValue.equals(other.teamProfileRemoveLogoValue));
                case TFA_ADD_BACKUP_PHONE:
                    return (this.tfaAddBackupPhoneValue == other.tfaAddBackupPhoneValue) || (this.tfaAddBackupPhoneValue.equals(other.tfaAddBackupPhoneValue));
                case TFA_ADD_SECURITY_KEY:
                    return (this.tfaAddSecurityKeyValue == other.tfaAddSecurityKeyValue) || (this.tfaAddSecurityKeyValue.equals(other.tfaAddSecurityKeyValue));
                case TFA_CHANGE_BACKUP_PHONE:
                    return (this.tfaChangeBackupPhoneValue == other.tfaChangeBackupPhoneValue) || (this.tfaChangeBackupPhoneValue.equals(other.tfaChangeBackupPhoneValue));
                case TFA_CHANGE_STATUS:
                    return (this.tfaChangeStatusValue == other.tfaChangeStatusValue) || (this.tfaChangeStatusValue.equals(other.tfaChangeStatusValue));
                case TFA_REMOVE_BACKUP_PHONE:
                    return (this.tfaRemoveBackupPhoneValue == other.tfaRemoveBackupPhoneValue) || (this.tfaRemoveBackupPhoneValue.equals(other.tfaRemoveBackupPhoneValue));
                case TFA_REMOVE_SECURITY_KEY:
                    return (this.tfaRemoveSecurityKeyValue == other.tfaRemoveSecurityKeyValue) || (this.tfaRemoveSecurityKeyValue.equals(other.tfaRemoveSecurityKeyValue));
                case TFA_RESET:
                    return (this.tfaResetValue == other.tfaResetValue) || (this.tfaResetValue.equals(other.tfaResetValue));
                case CHANGED_ENTERPRISE_ADMIN_ROLE:
                    return (this.changedEnterpriseAdminRoleValue == other.changedEnterpriseAdminRoleValue) || (this.changedEnterpriseAdminRoleValue.equals(other.changedEnterpriseAdminRoleValue));
                case CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS:
                    return (this.changedEnterpriseConnectedTeamStatusValue == other.changedEnterpriseConnectedTeamStatusValue) || (this.changedEnterpriseConnectedTeamStatusValue.equals(other.changedEnterpriseConnectedTeamStatusValue));
                case ENDED_ENTERPRISE_ADMIN_SESSION:
                    return (this.endedEnterpriseAdminSessionValue == other.endedEnterpriseAdminSessionValue) || (this.endedEnterpriseAdminSessionValue.equals(other.endedEnterpriseAdminSessionValue));
                case ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED:
                    return (this.endedEnterpriseAdminSessionDeprecatedValue == other.endedEnterpriseAdminSessionDeprecatedValue) || (this.endedEnterpriseAdminSessionDeprecatedValue.equals(other.endedEnterpriseAdminSessionDeprecatedValue));
                case ENTERPRISE_SETTINGS_LOCKING:
                    return (this.enterpriseSettingsLockingValue == other.enterpriseSettingsLockingValue) || (this.enterpriseSettingsLockingValue.equals(other.enterpriseSettingsLockingValue));
                case GUEST_ADMIN_CHANGE_STATUS:
                    return (this.guestAdminChangeStatusValue == other.guestAdminChangeStatusValue) || (this.guestAdminChangeStatusValue.equals(other.guestAdminChangeStatusValue));
                case STARTED_ENTERPRISE_ADMIN_SESSION:
                    return (this.startedEnterpriseAdminSessionValue == other.startedEnterpriseAdminSessionValue) || (this.startedEnterpriseAdminSessionValue.equals(other.startedEnterpriseAdminSessionValue));
                case TEAM_MERGE_REQUEST_ACCEPTED:
                    return (this.teamMergeRequestAcceptedValue == other.teamMergeRequestAcceptedValue) || (this.teamMergeRequestAcceptedValue.equals(other.teamMergeRequestAcceptedValue));
                case TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM:
                    return (this.teamMergeRequestAcceptedShownToPrimaryTeamValue == other.teamMergeRequestAcceptedShownToPrimaryTeamValue) || (this.teamMergeRequestAcceptedShownToPrimaryTeamValue.equals(other.teamMergeRequestAcceptedShownToPrimaryTeamValue));
                case TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM:
                    return (this.teamMergeRequestAcceptedShownToSecondaryTeamValue == other.teamMergeRequestAcceptedShownToSecondaryTeamValue) || (this.teamMergeRequestAcceptedShownToSecondaryTeamValue.equals(other.teamMergeRequestAcceptedShownToSecondaryTeamValue));
                case TEAM_MERGE_REQUEST_AUTO_CANCELED:
                    return (this.teamMergeRequestAutoCanceledValue == other.teamMergeRequestAutoCanceledValue) || (this.teamMergeRequestAutoCanceledValue.equals(other.teamMergeRequestAutoCanceledValue));
                case TEAM_MERGE_REQUEST_CANCELED:
                    return (this.teamMergeRequestCanceledValue == other.teamMergeRequestCanceledValue) || (this.teamMergeRequestCanceledValue.equals(other.teamMergeRequestCanceledValue));
                case TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM:
                    return (this.teamMergeRequestCanceledShownToPrimaryTeamValue == other.teamMergeRequestCanceledShownToPrimaryTeamValue) || (this.teamMergeRequestCanceledShownToPrimaryTeamValue.equals(other.teamMergeRequestCanceledShownToPrimaryTeamValue));
                case TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM:
                    return (this.teamMergeRequestCanceledShownToSecondaryTeamValue == other.teamMergeRequestCanceledShownToSecondaryTeamValue) || (this.teamMergeRequestCanceledShownToSecondaryTeamValue.equals(other.teamMergeRequestCanceledShownToSecondaryTeamValue));
                case TEAM_MERGE_REQUEST_EXPIRED:
                    return (this.teamMergeRequestExpiredValue == other.teamMergeRequestExpiredValue) || (this.teamMergeRequestExpiredValue.equals(other.teamMergeRequestExpiredValue));
                case TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM:
                    return (this.teamMergeRequestExpiredShownToPrimaryTeamValue == other.teamMergeRequestExpiredShownToPrimaryTeamValue) || (this.teamMergeRequestExpiredShownToPrimaryTeamValue.equals(other.teamMergeRequestExpiredShownToPrimaryTeamValue));
                case TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM:
                    return (this.teamMergeRequestExpiredShownToSecondaryTeamValue == other.teamMergeRequestExpiredShownToSecondaryTeamValue) || (this.teamMergeRequestExpiredShownToSecondaryTeamValue.equals(other.teamMergeRequestExpiredShownToSecondaryTeamValue));
                case TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM:
                    return (this.teamMergeRequestRejectedShownToPrimaryTeamValue == other.teamMergeRequestRejectedShownToPrimaryTeamValue) || (this.teamMergeRequestRejectedShownToPrimaryTeamValue.equals(other.teamMergeRequestRejectedShownToPrimaryTeamValue));
                case TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM:
                    return (this.teamMergeRequestRejectedShownToSecondaryTeamValue == other.teamMergeRequestRejectedShownToSecondaryTeamValue) || (this.teamMergeRequestRejectedShownToSecondaryTeamValue.equals(other.teamMergeRequestRejectedShownToSecondaryTeamValue));
                case TEAM_MERGE_REQUEST_REMINDER:
                    return (this.teamMergeRequestReminderValue == other.teamMergeRequestReminderValue) || (this.teamMergeRequestReminderValue.equals(other.teamMergeRequestReminderValue));
                case TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM:
                    return (this.teamMergeRequestReminderShownToPrimaryTeamValue == other.teamMergeRequestReminderShownToPrimaryTeamValue) || (this.teamMergeRequestReminderShownToPrimaryTeamValue.equals(other.teamMergeRequestReminderShownToPrimaryTeamValue));
                case TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM:
                    return (this.teamMergeRequestReminderShownToSecondaryTeamValue == other.teamMergeRequestReminderShownToSecondaryTeamValue) || (this.teamMergeRequestReminderShownToSecondaryTeamValue.equals(other.teamMergeRequestReminderShownToSecondaryTeamValue));
                case TEAM_MERGE_REQUEST_REVOKED:
                    return (this.teamMergeRequestRevokedValue == other.teamMergeRequestRevokedValue) || (this.teamMergeRequestRevokedValue.equals(other.teamMergeRequestRevokedValue));
                case TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM:
                    return (this.teamMergeRequestSentShownToPrimaryTeamValue == other.teamMergeRequestSentShownToPrimaryTeamValue) || (this.teamMergeRequestSentShownToPrimaryTeamValue.equals(other.teamMergeRequestSentShownToPrimaryTeamValue));
                case TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM:
                    return (this.teamMergeRequestSentShownToSecondaryTeamValue == other.teamMergeRequestSentShownToSecondaryTeamValue) || (this.teamMergeRequestSentShownToSecondaryTeamValue.equals(other.teamMergeRequestSentShownToSecondaryTeamValue));
                case OTHER:
                    return true;
                default:
                    return false;
            }
        }
        else {
            return false;
        }
    }

    @Override
    public String toString() {
        return Serializer.INSTANCE.serialize(this, false);
    }

    /**
     * Returns a String representation of this object formatted for easier
     * readability.
     *
     * <p> The returned String may contain newlines. </p>
     *
     * @return Formatted, multiline String representation of this object
     */
    public String toStringMultiline() {
        return Serializer.INSTANCE.serialize(this, true);
    }

    /**
     * For internal use only.
     */
    static class Serializer extends UnionSerializer<EventType> {
        public static final Serializer INSTANCE = new Serializer();

        @Override
        public void serialize(EventType value, JsonGenerator g) throws IOException, JsonGenerationException {
            switch (value.tag()) {
                case ADMIN_ALERTING_ALERT_STATE_CHANGED: {
                    g.writeStartObject();
                    writeTag("admin_alerting_alert_state_changed", g);
                    AdminAlertingAlertStateChangedType.Serializer.INSTANCE.serialize(value.adminAlertingAlertStateChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ADMIN_ALERTING_CHANGED_ALERT_CONFIG: {
                    g.writeStartObject();
                    writeTag("admin_alerting_changed_alert_config", g);
                    AdminAlertingChangedAlertConfigType.Serializer.INSTANCE.serialize(value.adminAlertingChangedAlertConfigValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ADMIN_ALERTING_TRIGGERED_ALERT: {
                    g.writeStartObject();
                    writeTag("admin_alerting_triggered_alert", g);
                    AdminAlertingTriggeredAlertType.Serializer.INSTANCE.serialize(value.adminAlertingTriggeredAlertValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case APP_BLOCKED_BY_PERMISSIONS: {
                    g.writeStartObject();
                    writeTag("app_blocked_by_permissions", g);
                    AppBlockedByPermissionsType.Serializer.INSTANCE.serialize(value.appBlockedByPermissionsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case APP_LINK_TEAM: {
                    g.writeStartObject();
                    writeTag("app_link_team", g);
                    AppLinkTeamType.Serializer.INSTANCE.serialize(value.appLinkTeamValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case APP_LINK_USER: {
                    g.writeStartObject();
                    writeTag("app_link_user", g);
                    AppLinkUserType.Serializer.INSTANCE.serialize(value.appLinkUserValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case APP_UNLINK_TEAM: {
                    g.writeStartObject();
                    writeTag("app_unlink_team", g);
                    AppUnlinkTeamType.Serializer.INSTANCE.serialize(value.appUnlinkTeamValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case APP_UNLINK_USER: {
                    g.writeStartObject();
                    writeTag("app_unlink_user", g);
                    AppUnlinkUserType.Serializer.INSTANCE.serialize(value.appUnlinkUserValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case INTEGRATION_CONNECTED: {
                    g.writeStartObject();
                    writeTag("integration_connected", g);
                    IntegrationConnectedType.Serializer.INSTANCE.serialize(value.integrationConnectedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case INTEGRATION_DISCONNECTED: {
                    g.writeStartObject();
                    writeTag("integration_disconnected", g);
                    IntegrationDisconnectedType.Serializer.INSTANCE.serialize(value.integrationDisconnectedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_ADD_COMMENT: {
                    g.writeStartObject();
                    writeTag("file_add_comment", g);
                    FileAddCommentType.Serializer.INSTANCE.serialize(value.fileAddCommentValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_CHANGE_COMMENT_SUBSCRIPTION: {
                    g.writeStartObject();
                    writeTag("file_change_comment_subscription", g);
                    FileChangeCommentSubscriptionType.Serializer.INSTANCE.serialize(value.fileChangeCommentSubscriptionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_DELETE_COMMENT: {
                    g.writeStartObject();
                    writeTag("file_delete_comment", g);
                    FileDeleteCommentType.Serializer.INSTANCE.serialize(value.fileDeleteCommentValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_EDIT_COMMENT: {
                    g.writeStartObject();
                    writeTag("file_edit_comment", g);
                    FileEditCommentType.Serializer.INSTANCE.serialize(value.fileEditCommentValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_LIKE_COMMENT: {
                    g.writeStartObject();
                    writeTag("file_like_comment", g);
                    FileLikeCommentType.Serializer.INSTANCE.serialize(value.fileLikeCommentValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_RESOLVE_COMMENT: {
                    g.writeStartObject();
                    writeTag("file_resolve_comment", g);
                    FileResolveCommentType.Serializer.INSTANCE.serialize(value.fileResolveCommentValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_UNLIKE_COMMENT: {
                    g.writeStartObject();
                    writeTag("file_unlike_comment", g);
                    FileUnlikeCommentType.Serializer.INSTANCE.serialize(value.fileUnlikeCommentValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_UNRESOLVE_COMMENT: {
                    g.writeStartObject();
                    writeTag("file_unresolve_comment", g);
                    FileUnresolveCommentType.Serializer.INSTANCE.serialize(value.fileUnresolveCommentValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_ADD_FOLDERS: {
                    g.writeStartObject();
                    writeTag("governance_policy_add_folders", g);
                    GovernancePolicyAddFoldersType.Serializer.INSTANCE.serialize(value.governancePolicyAddFoldersValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_ADD_FOLDER_FAILED: {
                    g.writeStartObject();
                    writeTag("governance_policy_add_folder_failed", g);
                    GovernancePolicyAddFolderFailedType.Serializer.INSTANCE.serialize(value.governancePolicyAddFolderFailedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_CONTENT_DISPOSED: {
                    g.writeStartObject();
                    writeTag("governance_policy_content_disposed", g);
                    GovernancePolicyContentDisposedType.Serializer.INSTANCE.serialize(value.governancePolicyContentDisposedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_CREATE: {
                    g.writeStartObject();
                    writeTag("governance_policy_create", g);
                    GovernancePolicyCreateType.Serializer.INSTANCE.serialize(value.governancePolicyCreateValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_DELETE: {
                    g.writeStartObject();
                    writeTag("governance_policy_delete", g);
                    GovernancePolicyDeleteType.Serializer.INSTANCE.serialize(value.governancePolicyDeleteValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_EDIT_DETAILS: {
                    g.writeStartObject();
                    writeTag("governance_policy_edit_details", g);
                    GovernancePolicyEditDetailsType.Serializer.INSTANCE.serialize(value.governancePolicyEditDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_EDIT_DURATION: {
                    g.writeStartObject();
                    writeTag("governance_policy_edit_duration", g);
                    GovernancePolicyEditDurationType.Serializer.INSTANCE.serialize(value.governancePolicyEditDurationValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_EXPORT_CREATED: {
                    g.writeStartObject();
                    writeTag("governance_policy_export_created", g);
                    GovernancePolicyExportCreatedType.Serializer.INSTANCE.serialize(value.governancePolicyExportCreatedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_EXPORT_REMOVED: {
                    g.writeStartObject();
                    writeTag("governance_policy_export_removed", g);
                    GovernancePolicyExportRemovedType.Serializer.INSTANCE.serialize(value.governancePolicyExportRemovedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_REMOVE_FOLDERS: {
                    g.writeStartObject();
                    writeTag("governance_policy_remove_folders", g);
                    GovernancePolicyRemoveFoldersType.Serializer.INSTANCE.serialize(value.governancePolicyRemoveFoldersValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_REPORT_CREATED: {
                    g.writeStartObject();
                    writeTag("governance_policy_report_created", g);
                    GovernancePolicyReportCreatedType.Serializer.INSTANCE.serialize(value.governancePolicyReportCreatedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOVERNANCE_POLICY_ZIP_PART_DOWNLOADED: {
                    g.writeStartObject();
                    writeTag("governance_policy_zip_part_downloaded", g);
                    GovernancePolicyZipPartDownloadedType.Serializer.INSTANCE.serialize(value.governancePolicyZipPartDownloadedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_ACTIVATE_A_HOLD: {
                    g.writeStartObject();
                    writeTag("legal_holds_activate_a_hold", g);
                    LegalHoldsActivateAHoldType.Serializer.INSTANCE.serialize(value.legalHoldsActivateAHoldValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_ADD_MEMBERS: {
                    g.writeStartObject();
                    writeTag("legal_holds_add_members", g);
                    LegalHoldsAddMembersType.Serializer.INSTANCE.serialize(value.legalHoldsAddMembersValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_CHANGE_HOLD_DETAILS: {
                    g.writeStartObject();
                    writeTag("legal_holds_change_hold_details", g);
                    LegalHoldsChangeHoldDetailsType.Serializer.INSTANCE.serialize(value.legalHoldsChangeHoldDetailsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_CHANGE_HOLD_NAME: {
                    g.writeStartObject();
                    writeTag("legal_holds_change_hold_name", g);
                    LegalHoldsChangeHoldNameType.Serializer.INSTANCE.serialize(value.legalHoldsChangeHoldNameValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_EXPORT_A_HOLD: {
                    g.writeStartObject();
                    writeTag("legal_holds_export_a_hold", g);
                    LegalHoldsExportAHoldType.Serializer.INSTANCE.serialize(value.legalHoldsExportAHoldValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_EXPORT_CANCELLED: {
                    g.writeStartObject();
                    writeTag("legal_holds_export_cancelled", g);
                    LegalHoldsExportCancelledType.Serializer.INSTANCE.serialize(value.legalHoldsExportCancelledValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_EXPORT_DOWNLOADED: {
                    g.writeStartObject();
                    writeTag("legal_holds_export_downloaded", g);
                    LegalHoldsExportDownloadedType.Serializer.INSTANCE.serialize(value.legalHoldsExportDownloadedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_EXPORT_REMOVED: {
                    g.writeStartObject();
                    writeTag("legal_holds_export_removed", g);
                    LegalHoldsExportRemovedType.Serializer.INSTANCE.serialize(value.legalHoldsExportRemovedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_RELEASE_A_HOLD: {
                    g.writeStartObject();
                    writeTag("legal_holds_release_a_hold", g);
                    LegalHoldsReleaseAHoldType.Serializer.INSTANCE.serialize(value.legalHoldsReleaseAHoldValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_REMOVE_MEMBERS: {
                    g.writeStartObject();
                    writeTag("legal_holds_remove_members", g);
                    LegalHoldsRemoveMembersType.Serializer.INSTANCE.serialize(value.legalHoldsRemoveMembersValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LEGAL_HOLDS_REPORT_A_HOLD: {
                    g.writeStartObject();
                    writeTag("legal_holds_report_a_hold", g);
                    LegalHoldsReportAHoldType.Serializer.INSTANCE.serialize(value.legalHoldsReportAHoldValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_CHANGE_IP_DESKTOP: {
                    g.writeStartObject();
                    writeTag("device_change_ip_desktop", g);
                    DeviceChangeIpDesktopType.Serializer.INSTANCE.serialize(value.deviceChangeIpDesktopValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_CHANGE_IP_MOBILE: {
                    g.writeStartObject();
                    writeTag("device_change_ip_mobile", g);
                    DeviceChangeIpMobileType.Serializer.INSTANCE.serialize(value.deviceChangeIpMobileValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_CHANGE_IP_WEB: {
                    g.writeStartObject();
                    writeTag("device_change_ip_web", g);
                    DeviceChangeIpWebType.Serializer.INSTANCE.serialize(value.deviceChangeIpWebValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_DELETE_ON_UNLINK_FAIL: {
                    g.writeStartObject();
                    writeTag("device_delete_on_unlink_fail", g);
                    DeviceDeleteOnUnlinkFailType.Serializer.INSTANCE.serialize(value.deviceDeleteOnUnlinkFailValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_DELETE_ON_UNLINK_SUCCESS: {
                    g.writeStartObject();
                    writeTag("device_delete_on_unlink_success", g);
                    DeviceDeleteOnUnlinkSuccessType.Serializer.INSTANCE.serialize(value.deviceDeleteOnUnlinkSuccessValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_LINK_FAIL: {
                    g.writeStartObject();
                    writeTag("device_link_fail", g);
                    DeviceLinkFailType.Serializer.INSTANCE.serialize(value.deviceLinkFailValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_LINK_SUCCESS: {
                    g.writeStartObject();
                    writeTag("device_link_success", g);
                    DeviceLinkSuccessType.Serializer.INSTANCE.serialize(value.deviceLinkSuccessValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_MANAGEMENT_DISABLED: {
                    g.writeStartObject();
                    writeTag("device_management_disabled", g);
                    DeviceManagementDisabledType.Serializer.INSTANCE.serialize(value.deviceManagementDisabledValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_MANAGEMENT_ENABLED: {
                    g.writeStartObject();
                    writeTag("device_management_enabled", g);
                    DeviceManagementEnabledType.Serializer.INSTANCE.serialize(value.deviceManagementEnabledValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_SYNC_BACKUP_STATUS_CHANGED: {
                    g.writeStartObject();
                    writeTag("device_sync_backup_status_changed", g);
                    DeviceSyncBackupStatusChangedType.Serializer.INSTANCE.serialize(value.deviceSyncBackupStatusChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_UNLINK: {
                    g.writeStartObject();
                    writeTag("device_unlink", g);
                    DeviceUnlinkType.Serializer.INSTANCE.serialize(value.deviceUnlinkValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DROPBOX_PASSWORDS_EXPORTED: {
                    g.writeStartObject();
                    writeTag("dropbox_passwords_exported", g);
                    DropboxPasswordsExportedType.Serializer.INSTANCE.serialize(value.dropboxPasswordsExportedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DROPBOX_PASSWORDS_NEW_DEVICE_ENROLLED: {
                    g.writeStartObject();
                    writeTag("dropbox_passwords_new_device_enrolled", g);
                    DropboxPasswordsNewDeviceEnrolledType.Serializer.INSTANCE.serialize(value.dropboxPasswordsNewDeviceEnrolledValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EMM_REFRESH_AUTH_TOKEN: {
                    g.writeStartObject();
                    writeTag("emm_refresh_auth_token", g);
                    EmmRefreshAuthTokenType.Serializer.INSTANCE.serialize(value.emmRefreshAuthTokenValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EXTERNAL_DRIVE_BACKUP_ELIGIBILITY_STATUS_CHECKED: {
                    g.writeStartObject();
                    writeTag("external_drive_backup_eligibility_status_checked", g);
                    ExternalDriveBackupEligibilityStatusCheckedType.Serializer.INSTANCE.serialize(value.externalDriveBackupEligibilityStatusCheckedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EXTERNAL_DRIVE_BACKUP_STATUS_CHANGED: {
                    g.writeStartObject();
                    writeTag("external_drive_backup_status_changed", g);
                    ExternalDriveBackupStatusChangedType.Serializer.INSTANCE.serialize(value.externalDriveBackupStatusChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ACCOUNT_CAPTURE_CHANGE_AVAILABILITY: {
                    g.writeStartObject();
                    writeTag("account_capture_change_availability", g);
                    AccountCaptureChangeAvailabilityType.Serializer.INSTANCE.serialize(value.accountCaptureChangeAvailabilityValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ACCOUNT_CAPTURE_MIGRATE_ACCOUNT: {
                    g.writeStartObject();
                    writeTag("account_capture_migrate_account", g);
                    AccountCaptureMigrateAccountType.Serializer.INSTANCE.serialize(value.accountCaptureMigrateAccountValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ACCOUNT_CAPTURE_NOTIFICATION_EMAILS_SENT: {
                    g.writeStartObject();
                    writeTag("account_capture_notification_emails_sent", g);
                    AccountCaptureNotificationEmailsSentType.Serializer.INSTANCE.serialize(value.accountCaptureNotificationEmailsSentValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ACCOUNT_CAPTURE_RELINQUISH_ACCOUNT: {
                    g.writeStartObject();
                    writeTag("account_capture_relinquish_account", g);
                    AccountCaptureRelinquishAccountType.Serializer.INSTANCE.serialize(value.accountCaptureRelinquishAccountValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DISABLED_DOMAIN_INVITES: {
                    g.writeStartObject();
                    writeTag("disabled_domain_invites", g);
                    DisabledDomainInvitesType.Serializer.INSTANCE.serialize(value.disabledDomainInvitesValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DOMAIN_INVITES_APPROVE_REQUEST_TO_JOIN_TEAM: {
                    g.writeStartObject();
                    writeTag("domain_invites_approve_request_to_join_team", g);
                    DomainInvitesApproveRequestToJoinTeamType.Serializer.INSTANCE.serialize(value.domainInvitesApproveRequestToJoinTeamValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DOMAIN_INVITES_DECLINE_REQUEST_TO_JOIN_TEAM: {
                    g.writeStartObject();
                    writeTag("domain_invites_decline_request_to_join_team", g);
                    DomainInvitesDeclineRequestToJoinTeamType.Serializer.INSTANCE.serialize(value.domainInvitesDeclineRequestToJoinTeamValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DOMAIN_INVITES_EMAIL_EXISTING_USERS: {
                    g.writeStartObject();
                    writeTag("domain_invites_email_existing_users", g);
                    DomainInvitesEmailExistingUsersType.Serializer.INSTANCE.serialize(value.domainInvitesEmailExistingUsersValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DOMAIN_INVITES_REQUEST_TO_JOIN_TEAM: {
                    g.writeStartObject();
                    writeTag("domain_invites_request_to_join_team", g);
                    DomainInvitesRequestToJoinTeamType.Serializer.INSTANCE.serialize(value.domainInvitesRequestToJoinTeamValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_NO: {
                    g.writeStartObject();
                    writeTag("domain_invites_set_invite_new_user_pref_to_no", g);
                    DomainInvitesSetInviteNewUserPrefToNoType.Serializer.INSTANCE.serialize(value.domainInvitesSetInviteNewUserPrefToNoValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DOMAIN_INVITES_SET_INVITE_NEW_USER_PREF_TO_YES: {
                    g.writeStartObject();
                    writeTag("domain_invites_set_invite_new_user_pref_to_yes", g);
                    DomainInvitesSetInviteNewUserPrefToYesType.Serializer.INSTANCE.serialize(value.domainInvitesSetInviteNewUserPrefToYesValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DOMAIN_VERIFICATION_ADD_DOMAIN_FAIL: {
                    g.writeStartObject();
                    writeTag("domain_verification_add_domain_fail", g);
                    DomainVerificationAddDomainFailType.Serializer.INSTANCE.serialize(value.domainVerificationAddDomainFailValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DOMAIN_VERIFICATION_ADD_DOMAIN_SUCCESS: {
                    g.writeStartObject();
                    writeTag("domain_verification_add_domain_success", g);
                    DomainVerificationAddDomainSuccessType.Serializer.INSTANCE.serialize(value.domainVerificationAddDomainSuccessValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DOMAIN_VERIFICATION_REMOVE_DOMAIN: {
                    g.writeStartObject();
                    writeTag("domain_verification_remove_domain", g);
                    DomainVerificationRemoveDomainType.Serializer.INSTANCE.serialize(value.domainVerificationRemoveDomainValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ENABLED_DOMAIN_INVITES: {
                    g.writeStartObject();
                    writeTag("enabled_domain_invites", g);
                    EnabledDomainInvitesType.Serializer.INSTANCE.serialize(value.enabledDomainInvitesValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case APPLY_NAMING_CONVENTION: {
                    g.writeStartObject();
                    writeTag("apply_naming_convention", g);
                    ApplyNamingConventionType.Serializer.INSTANCE.serialize(value.applyNamingConventionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case CREATE_FOLDER: {
                    g.writeStartObject();
                    writeTag("create_folder", g);
                    CreateFolderType.Serializer.INSTANCE.serialize(value.createFolderValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_ADD: {
                    g.writeStartObject();
                    writeTag("file_add", g);
                    FileAddType.Serializer.INSTANCE.serialize(value.fileAddValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_COPY: {
                    g.writeStartObject();
                    writeTag("file_copy", g);
                    FileCopyType.Serializer.INSTANCE.serialize(value.fileCopyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_DELETE: {
                    g.writeStartObject();
                    writeTag("file_delete", g);
                    FileDeleteType.Serializer.INSTANCE.serialize(value.fileDeleteValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_DOWNLOAD: {
                    g.writeStartObject();
                    writeTag("file_download", g);
                    FileDownloadType.Serializer.INSTANCE.serialize(value.fileDownloadValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_EDIT: {
                    g.writeStartObject();
                    writeTag("file_edit", g);
                    FileEditType.Serializer.INSTANCE.serialize(value.fileEditValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_GET_COPY_REFERENCE: {
                    g.writeStartObject();
                    writeTag("file_get_copy_reference", g);
                    FileGetCopyReferenceType.Serializer.INSTANCE.serialize(value.fileGetCopyReferenceValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_LOCKING_LOCK_STATUS_CHANGED: {
                    g.writeStartObject();
                    writeTag("file_locking_lock_status_changed", g);
                    FileLockingLockStatusChangedType.Serializer.INSTANCE.serialize(value.fileLockingLockStatusChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_MOVE: {
                    g.writeStartObject();
                    writeTag("file_move", g);
                    FileMoveType.Serializer.INSTANCE.serialize(value.fileMoveValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_PERMANENTLY_DELETE: {
                    g.writeStartObject();
                    writeTag("file_permanently_delete", g);
                    FilePermanentlyDeleteType.Serializer.INSTANCE.serialize(value.filePermanentlyDeleteValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_PREVIEW: {
                    g.writeStartObject();
                    writeTag("file_preview", g);
                    FilePreviewType.Serializer.INSTANCE.serialize(value.filePreviewValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_RENAME: {
                    g.writeStartObject();
                    writeTag("file_rename", g);
                    FileRenameType.Serializer.INSTANCE.serialize(value.fileRenameValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_RESTORE: {
                    g.writeStartObject();
                    writeTag("file_restore", g);
                    FileRestoreType.Serializer.INSTANCE.serialize(value.fileRestoreValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_REVERT: {
                    g.writeStartObject();
                    writeTag("file_revert", g);
                    FileRevertType.Serializer.INSTANCE.serialize(value.fileRevertValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_ROLLBACK_CHANGES: {
                    g.writeStartObject();
                    writeTag("file_rollback_changes", g);
                    FileRollbackChangesType.Serializer.INSTANCE.serialize(value.fileRollbackChangesValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_SAVE_COPY_REFERENCE: {
                    g.writeStartObject();
                    writeTag("file_save_copy_reference", g);
                    FileSaveCopyReferenceType.Serializer.INSTANCE.serialize(value.fileSaveCopyReferenceValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FOLDER_OVERVIEW_DESCRIPTION_CHANGED: {
                    g.writeStartObject();
                    writeTag("folder_overview_description_changed", g);
                    FolderOverviewDescriptionChangedType.Serializer.INSTANCE.serialize(value.folderOverviewDescriptionChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FOLDER_OVERVIEW_ITEM_PINNED: {
                    g.writeStartObject();
                    writeTag("folder_overview_item_pinned", g);
                    FolderOverviewItemPinnedType.Serializer.INSTANCE.serialize(value.folderOverviewItemPinnedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FOLDER_OVERVIEW_ITEM_UNPINNED: {
                    g.writeStartObject();
                    writeTag("folder_overview_item_unpinned", g);
                    FolderOverviewItemUnpinnedType.Serializer.INSTANCE.serialize(value.folderOverviewItemUnpinnedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case OBJECT_LABEL_ADDED: {
                    g.writeStartObject();
                    writeTag("object_label_added", g);
                    ObjectLabelAddedType.Serializer.INSTANCE.serialize(value.objectLabelAddedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case OBJECT_LABEL_REMOVED: {
                    g.writeStartObject();
                    writeTag("object_label_removed", g);
                    ObjectLabelRemovedType.Serializer.INSTANCE.serialize(value.objectLabelRemovedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case OBJECT_LABEL_UPDATED_VALUE: {
                    g.writeStartObject();
                    writeTag("object_label_updated_value", g);
                    ObjectLabelUpdatedValueType.Serializer.INSTANCE.serialize(value.objectLabelUpdatedValueValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ORGANIZE_FOLDER_WITH_TIDY: {
                    g.writeStartObject();
                    writeTag("organize_folder_with_tidy", g);
                    OrganizeFolderWithTidyType.Serializer.INSTANCE.serialize(value.organizeFolderWithTidyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case REWIND_FOLDER: {
                    g.writeStartObject();
                    writeTag("rewind_folder", g);
                    RewindFolderType.Serializer.INSTANCE.serialize(value.rewindFolderValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case UNDO_NAMING_CONVENTION: {
                    g.writeStartObject();
                    writeTag("undo_naming_convention", g);
                    UndoNamingConventionType.Serializer.INSTANCE.serialize(value.undoNamingConventionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case UNDO_ORGANIZE_FOLDER_WITH_TIDY: {
                    g.writeStartObject();
                    writeTag("undo_organize_folder_with_tidy", g);
                    UndoOrganizeFolderWithTidyType.Serializer.INSTANCE.serialize(value.undoOrganizeFolderWithTidyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case USER_TAGS_ADDED: {
                    g.writeStartObject();
                    writeTag("user_tags_added", g);
                    UserTagsAddedType.Serializer.INSTANCE.serialize(value.userTagsAddedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case USER_TAGS_REMOVED: {
                    g.writeStartObject();
                    writeTag("user_tags_removed", g);
                    UserTagsRemovedType.Serializer.INSTANCE.serialize(value.userTagsRemovedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EMAIL_INGEST_RECEIVE_FILE: {
                    g.writeStartObject();
                    writeTag("email_ingest_receive_file", g);
                    EmailIngestReceiveFileType.Serializer.INSTANCE.serialize(value.emailIngestReceiveFileValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_REQUEST_CHANGE: {
                    g.writeStartObject();
                    writeTag("file_request_change", g);
                    FileRequestChangeType.Serializer.INSTANCE.serialize(value.fileRequestChangeValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_REQUEST_CLOSE: {
                    g.writeStartObject();
                    writeTag("file_request_close", g);
                    FileRequestCloseType.Serializer.INSTANCE.serialize(value.fileRequestCloseValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_REQUEST_CREATE: {
                    g.writeStartObject();
                    writeTag("file_request_create", g);
                    FileRequestCreateType.Serializer.INSTANCE.serialize(value.fileRequestCreateValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_REQUEST_DELETE: {
                    g.writeStartObject();
                    writeTag("file_request_delete", g);
                    FileRequestDeleteType.Serializer.INSTANCE.serialize(value.fileRequestDeleteValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_REQUEST_RECEIVE_FILE: {
                    g.writeStartObject();
                    writeTag("file_request_receive_file", g);
                    FileRequestReceiveFileType.Serializer.INSTANCE.serialize(value.fileRequestReceiveFileValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_ADD_EXTERNAL_ID: {
                    g.writeStartObject();
                    writeTag("group_add_external_id", g);
                    GroupAddExternalIdType.Serializer.INSTANCE.serialize(value.groupAddExternalIdValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_ADD_MEMBER: {
                    g.writeStartObject();
                    writeTag("group_add_member", g);
                    GroupAddMemberType.Serializer.INSTANCE.serialize(value.groupAddMemberValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_CHANGE_EXTERNAL_ID: {
                    g.writeStartObject();
                    writeTag("group_change_external_id", g);
                    GroupChangeExternalIdType.Serializer.INSTANCE.serialize(value.groupChangeExternalIdValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_CHANGE_MANAGEMENT_TYPE: {
                    g.writeStartObject();
                    writeTag("group_change_management_type", g);
                    GroupChangeManagementTypeType.Serializer.INSTANCE.serialize(value.groupChangeManagementTypeValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_CHANGE_MEMBER_ROLE: {
                    g.writeStartObject();
                    writeTag("group_change_member_role", g);
                    GroupChangeMemberRoleType.Serializer.INSTANCE.serialize(value.groupChangeMemberRoleValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_CREATE: {
                    g.writeStartObject();
                    writeTag("group_create", g);
                    GroupCreateType.Serializer.INSTANCE.serialize(value.groupCreateValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_DELETE: {
                    g.writeStartObject();
                    writeTag("group_delete", g);
                    GroupDeleteType.Serializer.INSTANCE.serialize(value.groupDeleteValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_DESCRIPTION_UPDATED: {
                    g.writeStartObject();
                    writeTag("group_description_updated", g);
                    GroupDescriptionUpdatedType.Serializer.INSTANCE.serialize(value.groupDescriptionUpdatedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_JOIN_POLICY_UPDATED: {
                    g.writeStartObject();
                    writeTag("group_join_policy_updated", g);
                    GroupJoinPolicyUpdatedType.Serializer.INSTANCE.serialize(value.groupJoinPolicyUpdatedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_MOVED: {
                    g.writeStartObject();
                    writeTag("group_moved", g);
                    GroupMovedType.Serializer.INSTANCE.serialize(value.groupMovedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_REMOVE_EXTERNAL_ID: {
                    g.writeStartObject();
                    writeTag("group_remove_external_id", g);
                    GroupRemoveExternalIdType.Serializer.INSTANCE.serialize(value.groupRemoveExternalIdValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_REMOVE_MEMBER: {
                    g.writeStartObject();
                    writeTag("group_remove_member", g);
                    GroupRemoveMemberType.Serializer.INSTANCE.serialize(value.groupRemoveMemberValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_RENAME: {
                    g.writeStartObject();
                    writeTag("group_rename", g);
                    GroupRenameType.Serializer.INSTANCE.serialize(value.groupRenameValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ACCOUNT_LOCK_OR_UNLOCKED: {
                    g.writeStartObject();
                    writeTag("account_lock_or_unlocked", g);
                    AccountLockOrUnlockedType.Serializer.INSTANCE.serialize(value.accountLockOrUnlockedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EMM_ERROR: {
                    g.writeStartObject();
                    writeTag("emm_error", g);
                    EmmErrorType.Serializer.INSTANCE.serialize(value.emmErrorValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GUEST_ADMIN_SIGNED_IN_VIA_TRUSTED_TEAMS: {
                    g.writeStartObject();
                    writeTag("guest_admin_signed_in_via_trusted_teams", g);
                    GuestAdminSignedInViaTrustedTeamsType.Serializer.INSTANCE.serialize(value.guestAdminSignedInViaTrustedTeamsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GUEST_ADMIN_SIGNED_OUT_VIA_TRUSTED_TEAMS: {
                    g.writeStartObject();
                    writeTag("guest_admin_signed_out_via_trusted_teams", g);
                    GuestAdminSignedOutViaTrustedTeamsType.Serializer.INSTANCE.serialize(value.guestAdminSignedOutViaTrustedTeamsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LOGIN_FAIL: {
                    g.writeStartObject();
                    writeTag("login_fail", g);
                    LoginFailType.Serializer.INSTANCE.serialize(value.loginFailValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LOGIN_SUCCESS: {
                    g.writeStartObject();
                    writeTag("login_success", g);
                    LoginSuccessType.Serializer.INSTANCE.serialize(value.loginSuccessValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case LOGOUT: {
                    g.writeStartObject();
                    writeTag("logout", g);
                    LogoutType.Serializer.INSTANCE.serialize(value.logoutValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case RESELLER_SUPPORT_SESSION_END: {
                    g.writeStartObject();
                    writeTag("reseller_support_session_end", g);
                    ResellerSupportSessionEndType.Serializer.INSTANCE.serialize(value.resellerSupportSessionEndValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case RESELLER_SUPPORT_SESSION_START: {
                    g.writeStartObject();
                    writeTag("reseller_support_session_start", g);
                    ResellerSupportSessionStartType.Serializer.INSTANCE.serialize(value.resellerSupportSessionStartValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SIGN_IN_AS_SESSION_END: {
                    g.writeStartObject();
                    writeTag("sign_in_as_session_end", g);
                    SignInAsSessionEndType.Serializer.INSTANCE.serialize(value.signInAsSessionEndValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SIGN_IN_AS_SESSION_START: {
                    g.writeStartObject();
                    writeTag("sign_in_as_session_start", g);
                    SignInAsSessionStartType.Serializer.INSTANCE.serialize(value.signInAsSessionStartValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_ERROR: {
                    g.writeStartObject();
                    writeTag("sso_error", g);
                    SsoErrorType.Serializer.INSTANCE.serialize(value.ssoErrorValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case CREATE_TEAM_INVITE_LINK: {
                    g.writeStartObject();
                    writeTag("create_team_invite_link", g);
                    CreateTeamInviteLinkType.Serializer.INSTANCE.serialize(value.createTeamInviteLinkValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DELETE_TEAM_INVITE_LINK: {
                    g.writeStartObject();
                    writeTag("delete_team_invite_link", g);
                    DeleteTeamInviteLinkType.Serializer.INSTANCE.serialize(value.deleteTeamInviteLinkValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_ADD_EXTERNAL_ID: {
                    g.writeStartObject();
                    writeTag("member_add_external_id", g);
                    MemberAddExternalIdType.Serializer.INSTANCE.serialize(value.memberAddExternalIdValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_ADD_NAME: {
                    g.writeStartObject();
                    writeTag("member_add_name", g);
                    MemberAddNameType.Serializer.INSTANCE.serialize(value.memberAddNameValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_CHANGE_ADMIN_ROLE: {
                    g.writeStartObject();
                    writeTag("member_change_admin_role", g);
                    MemberChangeAdminRoleType.Serializer.INSTANCE.serialize(value.memberChangeAdminRoleValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_CHANGE_EMAIL: {
                    g.writeStartObject();
                    writeTag("member_change_email", g);
                    MemberChangeEmailType.Serializer.INSTANCE.serialize(value.memberChangeEmailValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_CHANGE_EXTERNAL_ID: {
                    g.writeStartObject();
                    writeTag("member_change_external_id", g);
                    MemberChangeExternalIdType.Serializer.INSTANCE.serialize(value.memberChangeExternalIdValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_CHANGE_MEMBERSHIP_TYPE: {
                    g.writeStartObject();
                    writeTag("member_change_membership_type", g);
                    MemberChangeMembershipTypeType.Serializer.INSTANCE.serialize(value.memberChangeMembershipTypeValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_CHANGE_NAME: {
                    g.writeStartObject();
                    writeTag("member_change_name", g);
                    MemberChangeNameType.Serializer.INSTANCE.serialize(value.memberChangeNameValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_CHANGE_RESELLER_ROLE: {
                    g.writeStartObject();
                    writeTag("member_change_reseller_role", g);
                    MemberChangeResellerRoleType.Serializer.INSTANCE.serialize(value.memberChangeResellerRoleValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_CHANGE_STATUS: {
                    g.writeStartObject();
                    writeTag("member_change_status", g);
                    MemberChangeStatusType.Serializer.INSTANCE.serialize(value.memberChangeStatusValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_DELETE_MANUAL_CONTACTS: {
                    g.writeStartObject();
                    writeTag("member_delete_manual_contacts", g);
                    MemberDeleteManualContactsType.Serializer.INSTANCE.serialize(value.memberDeleteManualContactsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_DELETE_PROFILE_PHOTO: {
                    g.writeStartObject();
                    writeTag("member_delete_profile_photo", g);
                    MemberDeleteProfilePhotoType.Serializer.INSTANCE.serialize(value.memberDeleteProfilePhotoValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_PERMANENTLY_DELETE_ACCOUNT_CONTENTS: {
                    g.writeStartObject();
                    writeTag("member_permanently_delete_account_contents", g);
                    MemberPermanentlyDeleteAccountContentsType.Serializer.INSTANCE.serialize(value.memberPermanentlyDeleteAccountContentsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_REMOVE_EXTERNAL_ID: {
                    g.writeStartObject();
                    writeTag("member_remove_external_id", g);
                    MemberRemoveExternalIdType.Serializer.INSTANCE.serialize(value.memberRemoveExternalIdValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SET_PROFILE_PHOTO: {
                    g.writeStartObject();
                    writeTag("member_set_profile_photo", g);
                    MemberSetProfilePhotoType.Serializer.INSTANCE.serialize(value.memberSetProfilePhotoValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SPACE_LIMITS_ADD_CUSTOM_QUOTA: {
                    g.writeStartObject();
                    writeTag("member_space_limits_add_custom_quota", g);
                    MemberSpaceLimitsAddCustomQuotaType.Serializer.INSTANCE.serialize(value.memberSpaceLimitsAddCustomQuotaValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SPACE_LIMITS_CHANGE_CUSTOM_QUOTA: {
                    g.writeStartObject();
                    writeTag("member_space_limits_change_custom_quota", g);
                    MemberSpaceLimitsChangeCustomQuotaType.Serializer.INSTANCE.serialize(value.memberSpaceLimitsChangeCustomQuotaValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SPACE_LIMITS_CHANGE_STATUS: {
                    g.writeStartObject();
                    writeTag("member_space_limits_change_status", g);
                    MemberSpaceLimitsChangeStatusType.Serializer.INSTANCE.serialize(value.memberSpaceLimitsChangeStatusValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SPACE_LIMITS_REMOVE_CUSTOM_QUOTA: {
                    g.writeStartObject();
                    writeTag("member_space_limits_remove_custom_quota", g);
                    MemberSpaceLimitsRemoveCustomQuotaType.Serializer.INSTANCE.serialize(value.memberSpaceLimitsRemoveCustomQuotaValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SUGGEST: {
                    g.writeStartObject();
                    writeTag("member_suggest", g);
                    MemberSuggestType.Serializer.INSTANCE.serialize(value.memberSuggestValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_TRANSFER_ACCOUNT_CONTENTS: {
                    g.writeStartObject();
                    writeTag("member_transfer_account_contents", g);
                    MemberTransferAccountContentsType.Serializer.INSTANCE.serialize(value.memberTransferAccountContentsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PENDING_SECONDARY_EMAIL_ADDED: {
                    g.writeStartObject();
                    writeTag("pending_secondary_email_added", g);
                    PendingSecondaryEmailAddedType.Serializer.INSTANCE.serialize(value.pendingSecondaryEmailAddedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SECONDARY_EMAIL_DELETED: {
                    g.writeStartObject();
                    writeTag("secondary_email_deleted", g);
                    SecondaryEmailDeletedType.Serializer.INSTANCE.serialize(value.secondaryEmailDeletedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SECONDARY_EMAIL_VERIFIED: {
                    g.writeStartObject();
                    writeTag("secondary_email_verified", g);
                    SecondaryEmailVerifiedType.Serializer.INSTANCE.serialize(value.secondaryEmailVerifiedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SECONDARY_MAILS_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("secondary_mails_policy_changed", g);
                    SecondaryMailsPolicyChangedType.Serializer.INSTANCE.serialize(value.secondaryMailsPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case BINDER_ADD_PAGE: {
                    g.writeStartObject();
                    writeTag("binder_add_page", g);
                    BinderAddPageType.Serializer.INSTANCE.serialize(value.binderAddPageValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case BINDER_ADD_SECTION: {
                    g.writeStartObject();
                    writeTag("binder_add_section", g);
                    BinderAddSectionType.Serializer.INSTANCE.serialize(value.binderAddSectionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case BINDER_REMOVE_PAGE: {
                    g.writeStartObject();
                    writeTag("binder_remove_page", g);
                    BinderRemovePageType.Serializer.INSTANCE.serialize(value.binderRemovePageValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case BINDER_REMOVE_SECTION: {
                    g.writeStartObject();
                    writeTag("binder_remove_section", g);
                    BinderRemoveSectionType.Serializer.INSTANCE.serialize(value.binderRemoveSectionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case BINDER_RENAME_PAGE: {
                    g.writeStartObject();
                    writeTag("binder_rename_page", g);
                    BinderRenamePageType.Serializer.INSTANCE.serialize(value.binderRenamePageValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case BINDER_RENAME_SECTION: {
                    g.writeStartObject();
                    writeTag("binder_rename_section", g);
                    BinderRenameSectionType.Serializer.INSTANCE.serialize(value.binderRenameSectionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case BINDER_REORDER_PAGE: {
                    g.writeStartObject();
                    writeTag("binder_reorder_page", g);
                    BinderReorderPageType.Serializer.INSTANCE.serialize(value.binderReorderPageValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case BINDER_REORDER_SECTION: {
                    g.writeStartObject();
                    writeTag("binder_reorder_section", g);
                    BinderReorderSectionType.Serializer.INSTANCE.serialize(value.binderReorderSectionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CONTENT_ADD_MEMBER: {
                    g.writeStartObject();
                    writeTag("paper_content_add_member", g);
                    PaperContentAddMemberType.Serializer.INSTANCE.serialize(value.paperContentAddMemberValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CONTENT_ADD_TO_FOLDER: {
                    g.writeStartObject();
                    writeTag("paper_content_add_to_folder", g);
                    PaperContentAddToFolderType.Serializer.INSTANCE.serialize(value.paperContentAddToFolderValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CONTENT_ARCHIVE: {
                    g.writeStartObject();
                    writeTag("paper_content_archive", g);
                    PaperContentArchiveType.Serializer.INSTANCE.serialize(value.paperContentArchiveValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CONTENT_CREATE: {
                    g.writeStartObject();
                    writeTag("paper_content_create", g);
                    PaperContentCreateType.Serializer.INSTANCE.serialize(value.paperContentCreateValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CONTENT_PERMANENTLY_DELETE: {
                    g.writeStartObject();
                    writeTag("paper_content_permanently_delete", g);
                    PaperContentPermanentlyDeleteType.Serializer.INSTANCE.serialize(value.paperContentPermanentlyDeleteValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CONTENT_REMOVE_FROM_FOLDER: {
                    g.writeStartObject();
                    writeTag("paper_content_remove_from_folder", g);
                    PaperContentRemoveFromFolderType.Serializer.INSTANCE.serialize(value.paperContentRemoveFromFolderValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CONTENT_REMOVE_MEMBER: {
                    g.writeStartObject();
                    writeTag("paper_content_remove_member", g);
                    PaperContentRemoveMemberType.Serializer.INSTANCE.serialize(value.paperContentRemoveMemberValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CONTENT_RENAME: {
                    g.writeStartObject();
                    writeTag("paper_content_rename", g);
                    PaperContentRenameType.Serializer.INSTANCE.serialize(value.paperContentRenameValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CONTENT_RESTORE: {
                    g.writeStartObject();
                    writeTag("paper_content_restore", g);
                    PaperContentRestoreType.Serializer.INSTANCE.serialize(value.paperContentRestoreValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_ADD_COMMENT: {
                    g.writeStartObject();
                    writeTag("paper_doc_add_comment", g);
                    PaperDocAddCommentType.Serializer.INSTANCE.serialize(value.paperDocAddCommentValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_CHANGE_MEMBER_ROLE: {
                    g.writeStartObject();
                    writeTag("paper_doc_change_member_role", g);
                    PaperDocChangeMemberRoleType.Serializer.INSTANCE.serialize(value.paperDocChangeMemberRoleValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_CHANGE_SHARING_POLICY: {
                    g.writeStartObject();
                    writeTag("paper_doc_change_sharing_policy", g);
                    PaperDocChangeSharingPolicyType.Serializer.INSTANCE.serialize(value.paperDocChangeSharingPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_CHANGE_SUBSCRIPTION: {
                    g.writeStartObject();
                    writeTag("paper_doc_change_subscription", g);
                    PaperDocChangeSubscriptionType.Serializer.INSTANCE.serialize(value.paperDocChangeSubscriptionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_DELETED: {
                    g.writeStartObject();
                    writeTag("paper_doc_deleted", g);
                    PaperDocDeletedType.Serializer.INSTANCE.serialize(value.paperDocDeletedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_DELETE_COMMENT: {
                    g.writeStartObject();
                    writeTag("paper_doc_delete_comment", g);
                    PaperDocDeleteCommentType.Serializer.INSTANCE.serialize(value.paperDocDeleteCommentValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_DOWNLOAD: {
                    g.writeStartObject();
                    writeTag("paper_doc_download", g);
                    PaperDocDownloadType.Serializer.INSTANCE.serialize(value.paperDocDownloadValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_EDIT: {
                    g.writeStartObject();
                    writeTag("paper_doc_edit", g);
                    PaperDocEditType.Serializer.INSTANCE.serialize(value.paperDocEditValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_EDIT_COMMENT: {
                    g.writeStartObject();
                    writeTag("paper_doc_edit_comment", g);
                    PaperDocEditCommentType.Serializer.INSTANCE.serialize(value.paperDocEditCommentValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_FOLLOWED: {
                    g.writeStartObject();
                    writeTag("paper_doc_followed", g);
                    PaperDocFollowedType.Serializer.INSTANCE.serialize(value.paperDocFollowedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_MENTION: {
                    g.writeStartObject();
                    writeTag("paper_doc_mention", g);
                    PaperDocMentionType.Serializer.INSTANCE.serialize(value.paperDocMentionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_OWNERSHIP_CHANGED: {
                    g.writeStartObject();
                    writeTag("paper_doc_ownership_changed", g);
                    PaperDocOwnershipChangedType.Serializer.INSTANCE.serialize(value.paperDocOwnershipChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_REQUEST_ACCESS: {
                    g.writeStartObject();
                    writeTag("paper_doc_request_access", g);
                    PaperDocRequestAccessType.Serializer.INSTANCE.serialize(value.paperDocRequestAccessValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_RESOLVE_COMMENT: {
                    g.writeStartObject();
                    writeTag("paper_doc_resolve_comment", g);
                    PaperDocResolveCommentType.Serializer.INSTANCE.serialize(value.paperDocResolveCommentValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_REVERT: {
                    g.writeStartObject();
                    writeTag("paper_doc_revert", g);
                    PaperDocRevertType.Serializer.INSTANCE.serialize(value.paperDocRevertValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_SLACK_SHARE: {
                    g.writeStartObject();
                    writeTag("paper_doc_slack_share", g);
                    PaperDocSlackShareType.Serializer.INSTANCE.serialize(value.paperDocSlackShareValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_TEAM_INVITE: {
                    g.writeStartObject();
                    writeTag("paper_doc_team_invite", g);
                    PaperDocTeamInviteType.Serializer.INSTANCE.serialize(value.paperDocTeamInviteValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_TRASHED: {
                    g.writeStartObject();
                    writeTag("paper_doc_trashed", g);
                    PaperDocTrashedType.Serializer.INSTANCE.serialize(value.paperDocTrashedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_UNRESOLVE_COMMENT: {
                    g.writeStartObject();
                    writeTag("paper_doc_unresolve_comment", g);
                    PaperDocUnresolveCommentType.Serializer.INSTANCE.serialize(value.paperDocUnresolveCommentValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_UNTRASHED: {
                    g.writeStartObject();
                    writeTag("paper_doc_untrashed", g);
                    PaperDocUntrashedType.Serializer.INSTANCE.serialize(value.paperDocUntrashedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DOC_VIEW: {
                    g.writeStartObject();
                    writeTag("paper_doc_view", g);
                    PaperDocViewType.Serializer.INSTANCE.serialize(value.paperDocViewValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_EXTERNAL_VIEW_ALLOW: {
                    g.writeStartObject();
                    writeTag("paper_external_view_allow", g);
                    PaperExternalViewAllowType.Serializer.INSTANCE.serialize(value.paperExternalViewAllowValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_EXTERNAL_VIEW_DEFAULT_TEAM: {
                    g.writeStartObject();
                    writeTag("paper_external_view_default_team", g);
                    PaperExternalViewDefaultTeamType.Serializer.INSTANCE.serialize(value.paperExternalViewDefaultTeamValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_EXTERNAL_VIEW_FORBID: {
                    g.writeStartObject();
                    writeTag("paper_external_view_forbid", g);
                    PaperExternalViewForbidType.Serializer.INSTANCE.serialize(value.paperExternalViewForbidValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_FOLDER_CHANGE_SUBSCRIPTION: {
                    g.writeStartObject();
                    writeTag("paper_folder_change_subscription", g);
                    PaperFolderChangeSubscriptionType.Serializer.INSTANCE.serialize(value.paperFolderChangeSubscriptionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_FOLDER_DELETED: {
                    g.writeStartObject();
                    writeTag("paper_folder_deleted", g);
                    PaperFolderDeletedType.Serializer.INSTANCE.serialize(value.paperFolderDeletedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_FOLDER_FOLLOWED: {
                    g.writeStartObject();
                    writeTag("paper_folder_followed", g);
                    PaperFolderFollowedType.Serializer.INSTANCE.serialize(value.paperFolderFollowedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_FOLDER_TEAM_INVITE: {
                    g.writeStartObject();
                    writeTag("paper_folder_team_invite", g);
                    PaperFolderTeamInviteType.Serializer.INSTANCE.serialize(value.paperFolderTeamInviteValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_PUBLISHED_LINK_CHANGE_PERMISSION: {
                    g.writeStartObject();
                    writeTag("paper_published_link_change_permission", g);
                    PaperPublishedLinkChangePermissionType.Serializer.INSTANCE.serialize(value.paperPublishedLinkChangePermissionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_PUBLISHED_LINK_CREATE: {
                    g.writeStartObject();
                    writeTag("paper_published_link_create", g);
                    PaperPublishedLinkCreateType.Serializer.INSTANCE.serialize(value.paperPublishedLinkCreateValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_PUBLISHED_LINK_DISABLED: {
                    g.writeStartObject();
                    writeTag("paper_published_link_disabled", g);
                    PaperPublishedLinkDisabledType.Serializer.INSTANCE.serialize(value.paperPublishedLinkDisabledValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_PUBLISHED_LINK_VIEW: {
                    g.writeStartObject();
                    writeTag("paper_published_link_view", g);
                    PaperPublishedLinkViewType.Serializer.INSTANCE.serialize(value.paperPublishedLinkViewValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PASSWORD_CHANGE: {
                    g.writeStartObject();
                    writeTag("password_change", g);
                    PasswordChangeType.Serializer.INSTANCE.serialize(value.passwordChangeValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PASSWORD_RESET: {
                    g.writeStartObject();
                    writeTag("password_reset", g);
                    PasswordResetType.Serializer.INSTANCE.serialize(value.passwordResetValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PASSWORD_RESET_ALL: {
                    g.writeStartObject();
                    writeTag("password_reset_all", g);
                    PasswordResetAllType.Serializer.INSTANCE.serialize(value.passwordResetAllValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case CLASSIFICATION_CREATE_REPORT: {
                    g.writeStartObject();
                    writeTag("classification_create_report", g);
                    ClassificationCreateReportType.Serializer.INSTANCE.serialize(value.classificationCreateReportValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case CLASSIFICATION_CREATE_REPORT_FAIL: {
                    g.writeStartObject();
                    writeTag("classification_create_report_fail", g);
                    ClassificationCreateReportFailType.Serializer.INSTANCE.serialize(value.classificationCreateReportFailValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EMM_CREATE_EXCEPTIONS_REPORT: {
                    g.writeStartObject();
                    writeTag("emm_create_exceptions_report", g);
                    EmmCreateExceptionsReportType.Serializer.INSTANCE.serialize(value.emmCreateExceptionsReportValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EMM_CREATE_USAGE_REPORT: {
                    g.writeStartObject();
                    writeTag("emm_create_usage_report", g);
                    EmmCreateUsageReportType.Serializer.INSTANCE.serialize(value.emmCreateUsageReportValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EXPORT_MEMBERS_REPORT: {
                    g.writeStartObject();
                    writeTag("export_members_report", g);
                    ExportMembersReportType.Serializer.INSTANCE.serialize(value.exportMembersReportValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EXPORT_MEMBERS_REPORT_FAIL: {
                    g.writeStartObject();
                    writeTag("export_members_report_fail", g);
                    ExportMembersReportFailType.Serializer.INSTANCE.serialize(value.exportMembersReportFailValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EXTERNAL_SHARING_CREATE_REPORT: {
                    g.writeStartObject();
                    writeTag("external_sharing_create_report", g);
                    ExternalSharingCreateReportType.Serializer.INSTANCE.serialize(value.externalSharingCreateReportValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EXTERNAL_SHARING_REPORT_FAILED: {
                    g.writeStartObject();
                    writeTag("external_sharing_report_failed", g);
                    ExternalSharingReportFailedType.Serializer.INSTANCE.serialize(value.externalSharingReportFailedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NO_EXPIRATION_LINK_GEN_CREATE_REPORT: {
                    g.writeStartObject();
                    writeTag("no_expiration_link_gen_create_report", g);
                    NoExpirationLinkGenCreateReportType.Serializer.INSTANCE.serialize(value.noExpirationLinkGenCreateReportValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NO_EXPIRATION_LINK_GEN_REPORT_FAILED: {
                    g.writeStartObject();
                    writeTag("no_expiration_link_gen_report_failed", g);
                    NoExpirationLinkGenReportFailedType.Serializer.INSTANCE.serialize(value.noExpirationLinkGenReportFailedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NO_PASSWORD_LINK_GEN_CREATE_REPORT: {
                    g.writeStartObject();
                    writeTag("no_password_link_gen_create_report", g);
                    NoPasswordLinkGenCreateReportType.Serializer.INSTANCE.serialize(value.noPasswordLinkGenCreateReportValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NO_PASSWORD_LINK_GEN_REPORT_FAILED: {
                    g.writeStartObject();
                    writeTag("no_password_link_gen_report_failed", g);
                    NoPasswordLinkGenReportFailedType.Serializer.INSTANCE.serialize(value.noPasswordLinkGenReportFailedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NO_PASSWORD_LINK_VIEW_CREATE_REPORT: {
                    g.writeStartObject();
                    writeTag("no_password_link_view_create_report", g);
                    NoPasswordLinkViewCreateReportType.Serializer.INSTANCE.serialize(value.noPasswordLinkViewCreateReportValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NO_PASSWORD_LINK_VIEW_REPORT_FAILED: {
                    g.writeStartObject();
                    writeTag("no_password_link_view_report_failed", g);
                    NoPasswordLinkViewReportFailedType.Serializer.INSTANCE.serialize(value.noPasswordLinkViewReportFailedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case OUTDATED_LINK_VIEW_CREATE_REPORT: {
                    g.writeStartObject();
                    writeTag("outdated_link_view_create_report", g);
                    OutdatedLinkViewCreateReportType.Serializer.INSTANCE.serialize(value.outdatedLinkViewCreateReportValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case OUTDATED_LINK_VIEW_REPORT_FAILED: {
                    g.writeStartObject();
                    writeTag("outdated_link_view_report_failed", g);
                    OutdatedLinkViewReportFailedType.Serializer.INSTANCE.serialize(value.outdatedLinkViewReportFailedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_ADMIN_EXPORT_START: {
                    g.writeStartObject();
                    writeTag("paper_admin_export_start", g);
                    PaperAdminExportStartType.Serializer.INSTANCE.serialize(value.paperAdminExportStartValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SMART_SYNC_CREATE_ADMIN_PRIVILEGE_REPORT: {
                    g.writeStartObject();
                    writeTag("smart_sync_create_admin_privilege_report", g);
                    SmartSyncCreateAdminPrivilegeReportType.Serializer.INSTANCE.serialize(value.smartSyncCreateAdminPrivilegeReportValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_ACTIVITY_CREATE_REPORT: {
                    g.writeStartObject();
                    writeTag("team_activity_create_report", g);
                    TeamActivityCreateReportType.Serializer.INSTANCE.serialize(value.teamActivityCreateReportValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_ACTIVITY_CREATE_REPORT_FAIL: {
                    g.writeStartObject();
                    writeTag("team_activity_create_report_fail", g);
                    TeamActivityCreateReportFailType.Serializer.INSTANCE.serialize(value.teamActivityCreateReportFailValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case COLLECTION_SHARE: {
                    g.writeStartObject();
                    writeTag("collection_share", g);
                    CollectionShareType.Serializer.INSTANCE.serialize(value.collectionShareValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_TRANSFERS_FILE_ADD: {
                    g.writeStartObject();
                    writeTag("file_transfers_file_add", g);
                    FileTransfersFileAddType.Serializer.INSTANCE.serialize(value.fileTransfersFileAddValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_TRANSFERS_TRANSFER_DELETE: {
                    g.writeStartObject();
                    writeTag("file_transfers_transfer_delete", g);
                    FileTransfersTransferDeleteType.Serializer.INSTANCE.serialize(value.fileTransfersTransferDeleteValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_TRANSFERS_TRANSFER_DOWNLOAD: {
                    g.writeStartObject();
                    writeTag("file_transfers_transfer_download", g);
                    FileTransfersTransferDownloadType.Serializer.INSTANCE.serialize(value.fileTransfersTransferDownloadValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_TRANSFERS_TRANSFER_SEND: {
                    g.writeStartObject();
                    writeTag("file_transfers_transfer_send", g);
                    FileTransfersTransferSendType.Serializer.INSTANCE.serialize(value.fileTransfersTransferSendValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_TRANSFERS_TRANSFER_VIEW: {
                    g.writeStartObject();
                    writeTag("file_transfers_transfer_view", g);
                    FileTransfersTransferViewType.Serializer.INSTANCE.serialize(value.fileTransfersTransferViewValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NOTE_ACL_INVITE_ONLY: {
                    g.writeStartObject();
                    writeTag("note_acl_invite_only", g);
                    NoteAclInviteOnlyType.Serializer.INSTANCE.serialize(value.noteAclInviteOnlyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NOTE_ACL_LINK: {
                    g.writeStartObject();
                    writeTag("note_acl_link", g);
                    NoteAclLinkType.Serializer.INSTANCE.serialize(value.noteAclLinkValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NOTE_ACL_TEAM_LINK: {
                    g.writeStartObject();
                    writeTag("note_acl_team_link", g);
                    NoteAclTeamLinkType.Serializer.INSTANCE.serialize(value.noteAclTeamLinkValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NOTE_SHARED: {
                    g.writeStartObject();
                    writeTag("note_shared", g);
                    NoteSharedType.Serializer.INSTANCE.serialize(value.noteSharedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NOTE_SHARE_RECEIVE: {
                    g.writeStartObject();
                    writeTag("note_share_receive", g);
                    NoteShareReceiveType.Serializer.INSTANCE.serialize(value.noteShareReceiveValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case OPEN_NOTE_SHARED: {
                    g.writeStartObject();
                    writeTag("open_note_shared", g);
                    OpenNoteSharedType.Serializer.INSTANCE.serialize(value.openNoteSharedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_ADD_GROUP: {
                    g.writeStartObject();
                    writeTag("sf_add_group", g);
                    SfAddGroupType.Serializer.INSTANCE.serialize(value.sfAddGroupValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_ALLOW_NON_MEMBERS_TO_VIEW_SHARED_LINKS: {
                    g.writeStartObject();
                    writeTag("sf_allow_non_members_to_view_shared_links", g);
                    SfAllowNonMembersToViewSharedLinksType.Serializer.INSTANCE.serialize(value.sfAllowNonMembersToViewSharedLinksValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_EXTERNAL_INVITE_WARN: {
                    g.writeStartObject();
                    writeTag("sf_external_invite_warn", g);
                    SfExternalInviteWarnType.Serializer.INSTANCE.serialize(value.sfExternalInviteWarnValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_FB_INVITE: {
                    g.writeStartObject();
                    writeTag("sf_fb_invite", g);
                    SfFbInviteType.Serializer.INSTANCE.serialize(value.sfFbInviteValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_FB_INVITE_CHANGE_ROLE: {
                    g.writeStartObject();
                    writeTag("sf_fb_invite_change_role", g);
                    SfFbInviteChangeRoleType.Serializer.INSTANCE.serialize(value.sfFbInviteChangeRoleValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_FB_UNINVITE: {
                    g.writeStartObject();
                    writeTag("sf_fb_uninvite", g);
                    SfFbUninviteType.Serializer.INSTANCE.serialize(value.sfFbUninviteValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_INVITE_GROUP: {
                    g.writeStartObject();
                    writeTag("sf_invite_group", g);
                    SfInviteGroupType.Serializer.INSTANCE.serialize(value.sfInviteGroupValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_TEAM_GRANT_ACCESS: {
                    g.writeStartObject();
                    writeTag("sf_team_grant_access", g);
                    SfTeamGrantAccessType.Serializer.INSTANCE.serialize(value.sfTeamGrantAccessValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_TEAM_INVITE: {
                    g.writeStartObject();
                    writeTag("sf_team_invite", g);
                    SfTeamInviteType.Serializer.INSTANCE.serialize(value.sfTeamInviteValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_TEAM_INVITE_CHANGE_ROLE: {
                    g.writeStartObject();
                    writeTag("sf_team_invite_change_role", g);
                    SfTeamInviteChangeRoleType.Serializer.INSTANCE.serialize(value.sfTeamInviteChangeRoleValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_TEAM_JOIN: {
                    g.writeStartObject();
                    writeTag("sf_team_join", g);
                    SfTeamJoinType.Serializer.INSTANCE.serialize(value.sfTeamJoinValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_TEAM_JOIN_FROM_OOB_LINK: {
                    g.writeStartObject();
                    writeTag("sf_team_join_from_oob_link", g);
                    SfTeamJoinFromOobLinkType.Serializer.INSTANCE.serialize(value.sfTeamJoinFromOobLinkValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SF_TEAM_UNINVITE: {
                    g.writeStartObject();
                    writeTag("sf_team_uninvite", g);
                    SfTeamUninviteType.Serializer.INSTANCE.serialize(value.sfTeamUninviteValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_ADD_INVITEES: {
                    g.writeStartObject();
                    writeTag("shared_content_add_invitees", g);
                    SharedContentAddInviteesType.Serializer.INSTANCE.serialize(value.sharedContentAddInviteesValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_ADD_LINK_EXPIRY: {
                    g.writeStartObject();
                    writeTag("shared_content_add_link_expiry", g);
                    SharedContentAddLinkExpiryType.Serializer.INSTANCE.serialize(value.sharedContentAddLinkExpiryValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_ADD_LINK_PASSWORD: {
                    g.writeStartObject();
                    writeTag("shared_content_add_link_password", g);
                    SharedContentAddLinkPasswordType.Serializer.INSTANCE.serialize(value.sharedContentAddLinkPasswordValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_ADD_MEMBER: {
                    g.writeStartObject();
                    writeTag("shared_content_add_member", g);
                    SharedContentAddMemberType.Serializer.INSTANCE.serialize(value.sharedContentAddMemberValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_CHANGE_DOWNLOADS_POLICY: {
                    g.writeStartObject();
                    writeTag("shared_content_change_downloads_policy", g);
                    SharedContentChangeDownloadsPolicyType.Serializer.INSTANCE.serialize(value.sharedContentChangeDownloadsPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_CHANGE_INVITEE_ROLE: {
                    g.writeStartObject();
                    writeTag("shared_content_change_invitee_role", g);
                    SharedContentChangeInviteeRoleType.Serializer.INSTANCE.serialize(value.sharedContentChangeInviteeRoleValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_CHANGE_LINK_AUDIENCE: {
                    g.writeStartObject();
                    writeTag("shared_content_change_link_audience", g);
                    SharedContentChangeLinkAudienceType.Serializer.INSTANCE.serialize(value.sharedContentChangeLinkAudienceValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_CHANGE_LINK_EXPIRY: {
                    g.writeStartObject();
                    writeTag("shared_content_change_link_expiry", g);
                    SharedContentChangeLinkExpiryType.Serializer.INSTANCE.serialize(value.sharedContentChangeLinkExpiryValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_CHANGE_LINK_PASSWORD: {
                    g.writeStartObject();
                    writeTag("shared_content_change_link_password", g);
                    SharedContentChangeLinkPasswordType.Serializer.INSTANCE.serialize(value.sharedContentChangeLinkPasswordValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_CHANGE_MEMBER_ROLE: {
                    g.writeStartObject();
                    writeTag("shared_content_change_member_role", g);
                    SharedContentChangeMemberRoleType.Serializer.INSTANCE.serialize(value.sharedContentChangeMemberRoleValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_CHANGE_VIEWER_INFO_POLICY: {
                    g.writeStartObject();
                    writeTag("shared_content_change_viewer_info_policy", g);
                    SharedContentChangeViewerInfoPolicyType.Serializer.INSTANCE.serialize(value.sharedContentChangeViewerInfoPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_CLAIM_INVITATION: {
                    g.writeStartObject();
                    writeTag("shared_content_claim_invitation", g);
                    SharedContentClaimInvitationType.Serializer.INSTANCE.serialize(value.sharedContentClaimInvitationValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_COPY: {
                    g.writeStartObject();
                    writeTag("shared_content_copy", g);
                    SharedContentCopyType.Serializer.INSTANCE.serialize(value.sharedContentCopyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_DOWNLOAD: {
                    g.writeStartObject();
                    writeTag("shared_content_download", g);
                    SharedContentDownloadType.Serializer.INSTANCE.serialize(value.sharedContentDownloadValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_RELINQUISH_MEMBERSHIP: {
                    g.writeStartObject();
                    writeTag("shared_content_relinquish_membership", g);
                    SharedContentRelinquishMembershipType.Serializer.INSTANCE.serialize(value.sharedContentRelinquishMembershipValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_REMOVE_INVITEES: {
                    g.writeStartObject();
                    writeTag("shared_content_remove_invitees", g);
                    SharedContentRemoveInviteesType.Serializer.INSTANCE.serialize(value.sharedContentRemoveInviteesValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_REMOVE_LINK_EXPIRY: {
                    g.writeStartObject();
                    writeTag("shared_content_remove_link_expiry", g);
                    SharedContentRemoveLinkExpiryType.Serializer.INSTANCE.serialize(value.sharedContentRemoveLinkExpiryValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_REMOVE_LINK_PASSWORD: {
                    g.writeStartObject();
                    writeTag("shared_content_remove_link_password", g);
                    SharedContentRemoveLinkPasswordType.Serializer.INSTANCE.serialize(value.sharedContentRemoveLinkPasswordValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_REMOVE_MEMBER: {
                    g.writeStartObject();
                    writeTag("shared_content_remove_member", g);
                    SharedContentRemoveMemberType.Serializer.INSTANCE.serialize(value.sharedContentRemoveMemberValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_REQUEST_ACCESS: {
                    g.writeStartObject();
                    writeTag("shared_content_request_access", g);
                    SharedContentRequestAccessType.Serializer.INSTANCE.serialize(value.sharedContentRequestAccessValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_RESTORE_INVITEES: {
                    g.writeStartObject();
                    writeTag("shared_content_restore_invitees", g);
                    SharedContentRestoreInviteesType.Serializer.INSTANCE.serialize(value.sharedContentRestoreInviteesValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_RESTORE_MEMBER: {
                    g.writeStartObject();
                    writeTag("shared_content_restore_member", g);
                    SharedContentRestoreMemberType.Serializer.INSTANCE.serialize(value.sharedContentRestoreMemberValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_UNSHARE: {
                    g.writeStartObject();
                    writeTag("shared_content_unshare", g);
                    SharedContentUnshareType.Serializer.INSTANCE.serialize(value.sharedContentUnshareValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_CONTENT_VIEW: {
                    g.writeStartObject();
                    writeTag("shared_content_view", g);
                    SharedContentViewType.Serializer.INSTANCE.serialize(value.sharedContentViewValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_FOLDER_CHANGE_LINK_POLICY: {
                    g.writeStartObject();
                    writeTag("shared_folder_change_link_policy", g);
                    SharedFolderChangeLinkPolicyType.Serializer.INSTANCE.serialize(value.sharedFolderChangeLinkPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_FOLDER_CHANGE_MEMBERS_INHERITANCE_POLICY: {
                    g.writeStartObject();
                    writeTag("shared_folder_change_members_inheritance_policy", g);
                    SharedFolderChangeMembersInheritancePolicyType.Serializer.INSTANCE.serialize(value.sharedFolderChangeMembersInheritancePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_FOLDER_CHANGE_MEMBERS_MANAGEMENT_POLICY: {
                    g.writeStartObject();
                    writeTag("shared_folder_change_members_management_policy", g);
                    SharedFolderChangeMembersManagementPolicyType.Serializer.INSTANCE.serialize(value.sharedFolderChangeMembersManagementPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_FOLDER_CHANGE_MEMBERS_POLICY: {
                    g.writeStartObject();
                    writeTag("shared_folder_change_members_policy", g);
                    SharedFolderChangeMembersPolicyType.Serializer.INSTANCE.serialize(value.sharedFolderChangeMembersPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_FOLDER_CREATE: {
                    g.writeStartObject();
                    writeTag("shared_folder_create", g);
                    SharedFolderCreateType.Serializer.INSTANCE.serialize(value.sharedFolderCreateValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_FOLDER_DECLINE_INVITATION: {
                    g.writeStartObject();
                    writeTag("shared_folder_decline_invitation", g);
                    SharedFolderDeclineInvitationType.Serializer.INSTANCE.serialize(value.sharedFolderDeclineInvitationValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_FOLDER_MOUNT: {
                    g.writeStartObject();
                    writeTag("shared_folder_mount", g);
                    SharedFolderMountType.Serializer.INSTANCE.serialize(value.sharedFolderMountValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_FOLDER_NEST: {
                    g.writeStartObject();
                    writeTag("shared_folder_nest", g);
                    SharedFolderNestType.Serializer.INSTANCE.serialize(value.sharedFolderNestValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_FOLDER_TRANSFER_OWNERSHIP: {
                    g.writeStartObject();
                    writeTag("shared_folder_transfer_ownership", g);
                    SharedFolderTransferOwnershipType.Serializer.INSTANCE.serialize(value.sharedFolderTransferOwnershipValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_FOLDER_UNMOUNT: {
                    g.writeStartObject();
                    writeTag("shared_folder_unmount", g);
                    SharedFolderUnmountType.Serializer.INSTANCE.serialize(value.sharedFolderUnmountValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_ADD_EXPIRY: {
                    g.writeStartObject();
                    writeTag("shared_link_add_expiry", g);
                    SharedLinkAddExpiryType.Serializer.INSTANCE.serialize(value.sharedLinkAddExpiryValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_CHANGE_EXPIRY: {
                    g.writeStartObject();
                    writeTag("shared_link_change_expiry", g);
                    SharedLinkChangeExpiryType.Serializer.INSTANCE.serialize(value.sharedLinkChangeExpiryValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_CHANGE_VISIBILITY: {
                    g.writeStartObject();
                    writeTag("shared_link_change_visibility", g);
                    SharedLinkChangeVisibilityType.Serializer.INSTANCE.serialize(value.sharedLinkChangeVisibilityValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_COPY: {
                    g.writeStartObject();
                    writeTag("shared_link_copy", g);
                    SharedLinkCopyType.Serializer.INSTANCE.serialize(value.sharedLinkCopyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_CREATE: {
                    g.writeStartObject();
                    writeTag("shared_link_create", g);
                    SharedLinkCreateType.Serializer.INSTANCE.serialize(value.sharedLinkCreateValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_DISABLE: {
                    g.writeStartObject();
                    writeTag("shared_link_disable", g);
                    SharedLinkDisableType.Serializer.INSTANCE.serialize(value.sharedLinkDisableValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_DOWNLOAD: {
                    g.writeStartObject();
                    writeTag("shared_link_download", g);
                    SharedLinkDownloadType.Serializer.INSTANCE.serialize(value.sharedLinkDownloadValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_REMOVE_EXPIRY: {
                    g.writeStartObject();
                    writeTag("shared_link_remove_expiry", g);
                    SharedLinkRemoveExpiryType.Serializer.INSTANCE.serialize(value.sharedLinkRemoveExpiryValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_SETTINGS_ADD_EXPIRATION: {
                    g.writeStartObject();
                    writeTag("shared_link_settings_add_expiration", g);
                    SharedLinkSettingsAddExpirationType.Serializer.INSTANCE.serialize(value.sharedLinkSettingsAddExpirationValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_SETTINGS_ADD_PASSWORD: {
                    g.writeStartObject();
                    writeTag("shared_link_settings_add_password", g);
                    SharedLinkSettingsAddPasswordType.Serializer.INSTANCE.serialize(value.sharedLinkSettingsAddPasswordValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_DISABLED: {
                    g.writeStartObject();
                    writeTag("shared_link_settings_allow_download_disabled", g);
                    SharedLinkSettingsAllowDownloadDisabledType.Serializer.INSTANCE.serialize(value.sharedLinkSettingsAllowDownloadDisabledValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_SETTINGS_ALLOW_DOWNLOAD_ENABLED: {
                    g.writeStartObject();
                    writeTag("shared_link_settings_allow_download_enabled", g);
                    SharedLinkSettingsAllowDownloadEnabledType.Serializer.INSTANCE.serialize(value.sharedLinkSettingsAllowDownloadEnabledValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_SETTINGS_CHANGE_AUDIENCE: {
                    g.writeStartObject();
                    writeTag("shared_link_settings_change_audience", g);
                    SharedLinkSettingsChangeAudienceType.Serializer.INSTANCE.serialize(value.sharedLinkSettingsChangeAudienceValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_SETTINGS_CHANGE_EXPIRATION: {
                    g.writeStartObject();
                    writeTag("shared_link_settings_change_expiration", g);
                    SharedLinkSettingsChangeExpirationType.Serializer.INSTANCE.serialize(value.sharedLinkSettingsChangeExpirationValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_SETTINGS_CHANGE_PASSWORD: {
                    g.writeStartObject();
                    writeTag("shared_link_settings_change_password", g);
                    SharedLinkSettingsChangePasswordType.Serializer.INSTANCE.serialize(value.sharedLinkSettingsChangePasswordValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_SETTINGS_REMOVE_EXPIRATION: {
                    g.writeStartObject();
                    writeTag("shared_link_settings_remove_expiration", g);
                    SharedLinkSettingsRemoveExpirationType.Serializer.INSTANCE.serialize(value.sharedLinkSettingsRemoveExpirationValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_SETTINGS_REMOVE_PASSWORD: {
                    g.writeStartObject();
                    writeTag("shared_link_settings_remove_password", g);
                    SharedLinkSettingsRemovePasswordType.Serializer.INSTANCE.serialize(value.sharedLinkSettingsRemovePasswordValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_SHARE: {
                    g.writeStartObject();
                    writeTag("shared_link_share", g);
                    SharedLinkShareType.Serializer.INSTANCE.serialize(value.sharedLinkShareValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_LINK_VIEW: {
                    g.writeStartObject();
                    writeTag("shared_link_view", g);
                    SharedLinkViewType.Serializer.INSTANCE.serialize(value.sharedLinkViewValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARED_NOTE_OPENED: {
                    g.writeStartObject();
                    writeTag("shared_note_opened", g);
                    SharedNoteOpenedType.Serializer.INSTANCE.serialize(value.sharedNoteOpenedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHMODEL_DISABLE_DOWNLOADS: {
                    g.writeStartObject();
                    writeTag("shmodel_disable_downloads", g);
                    ShmodelDisableDownloadsType.Serializer.INSTANCE.serialize(value.shmodelDisableDownloadsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHMODEL_ENABLE_DOWNLOADS: {
                    g.writeStartObject();
                    writeTag("shmodel_enable_downloads", g);
                    ShmodelEnableDownloadsType.Serializer.INSTANCE.serialize(value.shmodelEnableDownloadsValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHMODEL_GROUP_SHARE: {
                    g.writeStartObject();
                    writeTag("shmodel_group_share", g);
                    ShmodelGroupShareType.Serializer.INSTANCE.serialize(value.shmodelGroupShareValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_ACCESS_GRANTED: {
                    g.writeStartObject();
                    writeTag("showcase_access_granted", g);
                    ShowcaseAccessGrantedType.Serializer.INSTANCE.serialize(value.showcaseAccessGrantedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_ADD_MEMBER: {
                    g.writeStartObject();
                    writeTag("showcase_add_member", g);
                    ShowcaseAddMemberType.Serializer.INSTANCE.serialize(value.showcaseAddMemberValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_ARCHIVED: {
                    g.writeStartObject();
                    writeTag("showcase_archived", g);
                    ShowcaseArchivedType.Serializer.INSTANCE.serialize(value.showcaseArchivedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_CREATED: {
                    g.writeStartObject();
                    writeTag("showcase_created", g);
                    ShowcaseCreatedType.Serializer.INSTANCE.serialize(value.showcaseCreatedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_DELETE_COMMENT: {
                    g.writeStartObject();
                    writeTag("showcase_delete_comment", g);
                    ShowcaseDeleteCommentType.Serializer.INSTANCE.serialize(value.showcaseDeleteCommentValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_EDITED: {
                    g.writeStartObject();
                    writeTag("showcase_edited", g);
                    ShowcaseEditedType.Serializer.INSTANCE.serialize(value.showcaseEditedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_EDIT_COMMENT: {
                    g.writeStartObject();
                    writeTag("showcase_edit_comment", g);
                    ShowcaseEditCommentType.Serializer.INSTANCE.serialize(value.showcaseEditCommentValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_FILE_ADDED: {
                    g.writeStartObject();
                    writeTag("showcase_file_added", g);
                    ShowcaseFileAddedType.Serializer.INSTANCE.serialize(value.showcaseFileAddedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_FILE_DOWNLOAD: {
                    g.writeStartObject();
                    writeTag("showcase_file_download", g);
                    ShowcaseFileDownloadType.Serializer.INSTANCE.serialize(value.showcaseFileDownloadValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_FILE_REMOVED: {
                    g.writeStartObject();
                    writeTag("showcase_file_removed", g);
                    ShowcaseFileRemovedType.Serializer.INSTANCE.serialize(value.showcaseFileRemovedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_FILE_VIEW: {
                    g.writeStartObject();
                    writeTag("showcase_file_view", g);
                    ShowcaseFileViewType.Serializer.INSTANCE.serialize(value.showcaseFileViewValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_PERMANENTLY_DELETED: {
                    g.writeStartObject();
                    writeTag("showcase_permanently_deleted", g);
                    ShowcasePermanentlyDeletedType.Serializer.INSTANCE.serialize(value.showcasePermanentlyDeletedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_POST_COMMENT: {
                    g.writeStartObject();
                    writeTag("showcase_post_comment", g);
                    ShowcasePostCommentType.Serializer.INSTANCE.serialize(value.showcasePostCommentValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_REMOVE_MEMBER: {
                    g.writeStartObject();
                    writeTag("showcase_remove_member", g);
                    ShowcaseRemoveMemberType.Serializer.INSTANCE.serialize(value.showcaseRemoveMemberValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_RENAMED: {
                    g.writeStartObject();
                    writeTag("showcase_renamed", g);
                    ShowcaseRenamedType.Serializer.INSTANCE.serialize(value.showcaseRenamedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_REQUEST_ACCESS: {
                    g.writeStartObject();
                    writeTag("showcase_request_access", g);
                    ShowcaseRequestAccessType.Serializer.INSTANCE.serialize(value.showcaseRequestAccessValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_RESOLVE_COMMENT: {
                    g.writeStartObject();
                    writeTag("showcase_resolve_comment", g);
                    ShowcaseResolveCommentType.Serializer.INSTANCE.serialize(value.showcaseResolveCommentValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_RESTORED: {
                    g.writeStartObject();
                    writeTag("showcase_restored", g);
                    ShowcaseRestoredType.Serializer.INSTANCE.serialize(value.showcaseRestoredValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_TRASHED: {
                    g.writeStartObject();
                    writeTag("showcase_trashed", g);
                    ShowcaseTrashedType.Serializer.INSTANCE.serialize(value.showcaseTrashedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_TRASHED_DEPRECATED: {
                    g.writeStartObject();
                    writeTag("showcase_trashed_deprecated", g);
                    ShowcaseTrashedDeprecatedType.Serializer.INSTANCE.serialize(value.showcaseTrashedDeprecatedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_UNRESOLVE_COMMENT: {
                    g.writeStartObject();
                    writeTag("showcase_unresolve_comment", g);
                    ShowcaseUnresolveCommentType.Serializer.INSTANCE.serialize(value.showcaseUnresolveCommentValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_UNTRASHED: {
                    g.writeStartObject();
                    writeTag("showcase_untrashed", g);
                    ShowcaseUntrashedType.Serializer.INSTANCE.serialize(value.showcaseUntrashedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_UNTRASHED_DEPRECATED: {
                    g.writeStartObject();
                    writeTag("showcase_untrashed_deprecated", g);
                    ShowcaseUntrashedDeprecatedType.Serializer.INSTANCE.serialize(value.showcaseUntrashedDeprecatedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_VIEW: {
                    g.writeStartObject();
                    writeTag("showcase_view", g);
                    ShowcaseViewType.Serializer.INSTANCE.serialize(value.showcaseViewValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_ADD_CERT: {
                    g.writeStartObject();
                    writeTag("sso_add_cert", g);
                    SsoAddCertType.Serializer.INSTANCE.serialize(value.ssoAddCertValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_ADD_LOGIN_URL: {
                    g.writeStartObject();
                    writeTag("sso_add_login_url", g);
                    SsoAddLoginUrlType.Serializer.INSTANCE.serialize(value.ssoAddLoginUrlValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_ADD_LOGOUT_URL: {
                    g.writeStartObject();
                    writeTag("sso_add_logout_url", g);
                    SsoAddLogoutUrlType.Serializer.INSTANCE.serialize(value.ssoAddLogoutUrlValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_CHANGE_CERT: {
                    g.writeStartObject();
                    writeTag("sso_change_cert", g);
                    SsoChangeCertType.Serializer.INSTANCE.serialize(value.ssoChangeCertValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_CHANGE_LOGIN_URL: {
                    g.writeStartObject();
                    writeTag("sso_change_login_url", g);
                    SsoChangeLoginUrlType.Serializer.INSTANCE.serialize(value.ssoChangeLoginUrlValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_CHANGE_LOGOUT_URL: {
                    g.writeStartObject();
                    writeTag("sso_change_logout_url", g);
                    SsoChangeLogoutUrlType.Serializer.INSTANCE.serialize(value.ssoChangeLogoutUrlValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_CHANGE_SAML_IDENTITY_MODE: {
                    g.writeStartObject();
                    writeTag("sso_change_saml_identity_mode", g);
                    SsoChangeSamlIdentityModeType.Serializer.INSTANCE.serialize(value.ssoChangeSamlIdentityModeValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_REMOVE_CERT: {
                    g.writeStartObject();
                    writeTag("sso_remove_cert", g);
                    SsoRemoveCertType.Serializer.INSTANCE.serialize(value.ssoRemoveCertValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_REMOVE_LOGIN_URL: {
                    g.writeStartObject();
                    writeTag("sso_remove_login_url", g);
                    SsoRemoveLoginUrlType.Serializer.INSTANCE.serialize(value.ssoRemoveLoginUrlValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_REMOVE_LOGOUT_URL: {
                    g.writeStartObject();
                    writeTag("sso_remove_logout_url", g);
                    SsoRemoveLogoutUrlType.Serializer.INSTANCE.serialize(value.ssoRemoveLogoutUrlValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_FOLDER_CHANGE_STATUS: {
                    g.writeStartObject();
                    writeTag("team_folder_change_status", g);
                    TeamFolderChangeStatusType.Serializer.INSTANCE.serialize(value.teamFolderChangeStatusValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_FOLDER_CREATE: {
                    g.writeStartObject();
                    writeTag("team_folder_create", g);
                    TeamFolderCreateType.Serializer.INSTANCE.serialize(value.teamFolderCreateValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_FOLDER_DOWNGRADE: {
                    g.writeStartObject();
                    writeTag("team_folder_downgrade", g);
                    TeamFolderDowngradeType.Serializer.INSTANCE.serialize(value.teamFolderDowngradeValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_FOLDER_PERMANENTLY_DELETE: {
                    g.writeStartObject();
                    writeTag("team_folder_permanently_delete", g);
                    TeamFolderPermanentlyDeleteType.Serializer.INSTANCE.serialize(value.teamFolderPermanentlyDeleteValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_FOLDER_RENAME: {
                    g.writeStartObject();
                    writeTag("team_folder_rename", g);
                    TeamFolderRenameType.Serializer.INSTANCE.serialize(value.teamFolderRenameValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_SELECTIVE_SYNC_SETTINGS_CHANGED: {
                    g.writeStartObject();
                    writeTag("team_selective_sync_settings_changed", g);
                    TeamSelectiveSyncSettingsChangedType.Serializer.INSTANCE.serialize(value.teamSelectiveSyncSettingsChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ACCOUNT_CAPTURE_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("account_capture_change_policy", g);
                    AccountCaptureChangePolicyType.Serializer.INSTANCE.serialize(value.accountCaptureChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ADMIN_EMAIL_REMINDERS_CHANGED: {
                    g.writeStartObject();
                    writeTag("admin_email_reminders_changed", g);
                    AdminEmailRemindersChangedType.Serializer.INSTANCE.serialize(value.adminEmailRemindersChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ALLOW_DOWNLOAD_DISABLED: {
                    g.writeStartObject();
                    writeTag("allow_download_disabled", g);
                    AllowDownloadDisabledType.Serializer.INSTANCE.serialize(value.allowDownloadDisabledValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ALLOW_DOWNLOAD_ENABLED: {
                    g.writeStartObject();
                    writeTag("allow_download_enabled", g);
                    AllowDownloadEnabledType.Serializer.INSTANCE.serialize(value.allowDownloadEnabledValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case APP_PERMISSIONS_CHANGED: {
                    g.writeStartObject();
                    writeTag("app_permissions_changed", g);
                    AppPermissionsChangedType.Serializer.INSTANCE.serialize(value.appPermissionsChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case CAMERA_UPLOADS_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("camera_uploads_policy_changed", g);
                    CameraUploadsPolicyChangedType.Serializer.INSTANCE.serialize(value.cameraUploadsPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case CAPTURE_TRANSCRIPT_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("capture_transcript_policy_changed", g);
                    CaptureTranscriptPolicyChangedType.Serializer.INSTANCE.serialize(value.captureTranscriptPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case CLASSIFICATION_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("classification_change_policy", g);
                    ClassificationChangePolicyType.Serializer.INSTANCE.serialize(value.classificationChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case COMPUTER_BACKUP_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("computer_backup_policy_changed", g);
                    ComputerBackupPolicyChangedType.Serializer.INSTANCE.serialize(value.computerBackupPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case CONTENT_ADMINISTRATION_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("content_administration_policy_changed", g);
                    ContentAdministrationPolicyChangedType.Serializer.INSTANCE.serialize(value.contentAdministrationPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DATA_PLACEMENT_RESTRICTION_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("data_placement_restriction_change_policy", g);
                    DataPlacementRestrictionChangePolicyType.Serializer.INSTANCE.serialize(value.dataPlacementRestrictionChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DATA_PLACEMENT_RESTRICTION_SATISFY_POLICY: {
                    g.writeStartObject();
                    writeTag("data_placement_restriction_satisfy_policy", g);
                    DataPlacementRestrictionSatisfyPolicyType.Serializer.INSTANCE.serialize(value.dataPlacementRestrictionSatisfyPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_APPROVALS_ADD_EXCEPTION: {
                    g.writeStartObject();
                    writeTag("device_approvals_add_exception", g);
                    DeviceApprovalsAddExceptionType.Serializer.INSTANCE.serialize(value.deviceApprovalsAddExceptionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_APPROVALS_CHANGE_DESKTOP_POLICY: {
                    g.writeStartObject();
                    writeTag("device_approvals_change_desktop_policy", g);
                    DeviceApprovalsChangeDesktopPolicyType.Serializer.INSTANCE.serialize(value.deviceApprovalsChangeDesktopPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_APPROVALS_CHANGE_MOBILE_POLICY: {
                    g.writeStartObject();
                    writeTag("device_approvals_change_mobile_policy", g);
                    DeviceApprovalsChangeMobilePolicyType.Serializer.INSTANCE.serialize(value.deviceApprovalsChangeMobilePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_APPROVALS_CHANGE_OVERAGE_ACTION: {
                    g.writeStartObject();
                    writeTag("device_approvals_change_overage_action", g);
                    DeviceApprovalsChangeOverageActionType.Serializer.INSTANCE.serialize(value.deviceApprovalsChangeOverageActionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_APPROVALS_CHANGE_UNLINK_ACTION: {
                    g.writeStartObject();
                    writeTag("device_approvals_change_unlink_action", g);
                    DeviceApprovalsChangeUnlinkActionType.Serializer.INSTANCE.serialize(value.deviceApprovalsChangeUnlinkActionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DEVICE_APPROVALS_REMOVE_EXCEPTION: {
                    g.writeStartObject();
                    writeTag("device_approvals_remove_exception", g);
                    DeviceApprovalsRemoveExceptionType.Serializer.INSTANCE.serialize(value.deviceApprovalsRemoveExceptionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DIRECTORY_RESTRICTIONS_ADD_MEMBERS: {
                    g.writeStartObject();
                    writeTag("directory_restrictions_add_members", g);
                    DirectoryRestrictionsAddMembersType.Serializer.INSTANCE.serialize(value.directoryRestrictionsAddMembersValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DIRECTORY_RESTRICTIONS_REMOVE_MEMBERS: {
                    g.writeStartObject();
                    writeTag("directory_restrictions_remove_members", g);
                    DirectoryRestrictionsRemoveMembersType.Serializer.INSTANCE.serialize(value.directoryRestrictionsRemoveMembersValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DROPBOX_PASSWORDS_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("dropbox_passwords_policy_changed", g);
                    DropboxPasswordsPolicyChangedType.Serializer.INSTANCE.serialize(value.dropboxPasswordsPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EMAIL_INGEST_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("email_ingest_policy_changed", g);
                    EmailIngestPolicyChangedType.Serializer.INSTANCE.serialize(value.emailIngestPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EMM_ADD_EXCEPTION: {
                    g.writeStartObject();
                    writeTag("emm_add_exception", g);
                    EmmAddExceptionType.Serializer.INSTANCE.serialize(value.emmAddExceptionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EMM_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("emm_change_policy", g);
                    EmmChangePolicyType.Serializer.INSTANCE.serialize(value.emmChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EMM_REMOVE_EXCEPTION: {
                    g.writeStartObject();
                    writeTag("emm_remove_exception", g);
                    EmmRemoveExceptionType.Serializer.INSTANCE.serialize(value.emmRemoveExceptionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EXTENDED_VERSION_HISTORY_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("extended_version_history_change_policy", g);
                    ExtendedVersionHistoryChangePolicyType.Serializer.INSTANCE.serialize(value.extendedVersionHistoryChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case EXTERNAL_DRIVE_BACKUP_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("external_drive_backup_policy_changed", g);
                    ExternalDriveBackupPolicyChangedType.Serializer.INSTANCE.serialize(value.externalDriveBackupPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_COMMENTS_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("file_comments_change_policy", g);
                    FileCommentsChangePolicyType.Serializer.INSTANCE.serialize(value.fileCommentsChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_LOCKING_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("file_locking_policy_changed", g);
                    FileLockingPolicyChangedType.Serializer.INSTANCE.serialize(value.fileLockingPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_PROVIDER_MIGRATION_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("file_provider_migration_policy_changed", g);
                    FileProviderMigrationPolicyChangedType.Serializer.INSTANCE.serialize(value.fileProviderMigrationPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_REQUESTS_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("file_requests_change_policy", g);
                    FileRequestsChangePolicyType.Serializer.INSTANCE.serialize(value.fileRequestsChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_REQUESTS_EMAILS_ENABLED: {
                    g.writeStartObject();
                    writeTag("file_requests_emails_enabled", g);
                    FileRequestsEmailsEnabledType.Serializer.INSTANCE.serialize(value.fileRequestsEmailsEnabledValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_REQUESTS_EMAILS_RESTRICTED_TO_TEAM_ONLY: {
                    g.writeStartObject();
                    writeTag("file_requests_emails_restricted_to_team_only", g);
                    FileRequestsEmailsRestrictedToTeamOnlyType.Serializer.INSTANCE.serialize(value.fileRequestsEmailsRestrictedToTeamOnlyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case FILE_TRANSFERS_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("file_transfers_policy_changed", g);
                    FileTransfersPolicyChangedType.Serializer.INSTANCE.serialize(value.fileTransfersPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GOOGLE_SSO_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("google_sso_change_policy", g);
                    GoogleSsoChangePolicyType.Serializer.INSTANCE.serialize(value.googleSsoChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GROUP_USER_MANAGEMENT_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("group_user_management_change_policy", g);
                    GroupUserManagementChangePolicyType.Serializer.INSTANCE.serialize(value.groupUserManagementChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case INTEGRATION_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("integration_policy_changed", g);
                    IntegrationPolicyChangedType.Serializer.INSTANCE.serialize(value.integrationPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case INVITE_ACCEPTANCE_EMAIL_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("invite_acceptance_email_policy_changed", g);
                    InviteAcceptanceEmailPolicyChangedType.Serializer.INSTANCE.serialize(value.inviteAcceptanceEmailPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_REQUESTS_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("member_requests_change_policy", g);
                    MemberRequestsChangePolicyType.Serializer.INSTANCE.serialize(value.memberRequestsChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SEND_INVITE_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("member_send_invite_policy_changed", g);
                    MemberSendInvitePolicyChangedType.Serializer.INSTANCE.serialize(value.memberSendInvitePolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SPACE_LIMITS_ADD_EXCEPTION: {
                    g.writeStartObject();
                    writeTag("member_space_limits_add_exception", g);
                    MemberSpaceLimitsAddExceptionType.Serializer.INSTANCE.serialize(value.memberSpaceLimitsAddExceptionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SPACE_LIMITS_CHANGE_CAPS_TYPE_POLICY: {
                    g.writeStartObject();
                    writeTag("member_space_limits_change_caps_type_policy", g);
                    MemberSpaceLimitsChangeCapsTypePolicyType.Serializer.INSTANCE.serialize(value.memberSpaceLimitsChangeCapsTypePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SPACE_LIMITS_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("member_space_limits_change_policy", g);
                    MemberSpaceLimitsChangePolicyType.Serializer.INSTANCE.serialize(value.memberSpaceLimitsChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SPACE_LIMITS_REMOVE_EXCEPTION: {
                    g.writeStartObject();
                    writeTag("member_space_limits_remove_exception", g);
                    MemberSpaceLimitsRemoveExceptionType.Serializer.INSTANCE.serialize(value.memberSpaceLimitsRemoveExceptionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MEMBER_SUGGESTIONS_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("member_suggestions_change_policy", g);
                    MemberSuggestionsChangePolicyType.Serializer.INSTANCE.serialize(value.memberSuggestionsChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case MICROSOFT_OFFICE_ADDIN_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("microsoft_office_addin_change_policy", g);
                    MicrosoftOfficeAddinChangePolicyType.Serializer.INSTANCE.serialize(value.microsoftOfficeAddinChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case NETWORK_CONTROL_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("network_control_change_policy", g);
                    NetworkControlChangePolicyType.Serializer.INSTANCE.serialize(value.networkControlChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CHANGE_DEPLOYMENT_POLICY: {
                    g.writeStartObject();
                    writeTag("paper_change_deployment_policy", g);
                    PaperChangeDeploymentPolicyType.Serializer.INSTANCE.serialize(value.paperChangeDeploymentPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CHANGE_MEMBER_LINK_POLICY: {
                    g.writeStartObject();
                    writeTag("paper_change_member_link_policy", g);
                    PaperChangeMemberLinkPolicyType.Serializer.INSTANCE.serialize(value.paperChangeMemberLinkPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CHANGE_MEMBER_POLICY: {
                    g.writeStartObject();
                    writeTag("paper_change_member_policy", g);
                    PaperChangeMemberPolicyType.Serializer.INSTANCE.serialize(value.paperChangeMemberPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("paper_change_policy", g);
                    PaperChangePolicyType.Serializer.INSTANCE.serialize(value.paperChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DEFAULT_FOLDER_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("paper_default_folder_policy_changed", g);
                    PaperDefaultFolderPolicyChangedType.Serializer.INSTANCE.serialize(value.paperDefaultFolderPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_DESKTOP_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("paper_desktop_policy_changed", g);
                    PaperDesktopPolicyChangedType.Serializer.INSTANCE.serialize(value.paperDesktopPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_ENABLED_USERS_GROUP_ADDITION: {
                    g.writeStartObject();
                    writeTag("paper_enabled_users_group_addition", g);
                    PaperEnabledUsersGroupAdditionType.Serializer.INSTANCE.serialize(value.paperEnabledUsersGroupAdditionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PAPER_ENABLED_USERS_GROUP_REMOVAL: {
                    g.writeStartObject();
                    writeTag("paper_enabled_users_group_removal", g);
                    PaperEnabledUsersGroupRemovalType.Serializer.INSTANCE.serialize(value.paperEnabledUsersGroupRemovalValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PASSWORD_STRENGTH_REQUIREMENTS_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("password_strength_requirements_change_policy", g);
                    PasswordStrengthRequirementsChangePolicyType.Serializer.INSTANCE.serialize(value.passwordStrengthRequirementsChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case PERMANENT_DELETE_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("permanent_delete_change_policy", g);
                    PermanentDeleteChangePolicyType.Serializer.INSTANCE.serialize(value.permanentDeleteChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case RESELLER_SUPPORT_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("reseller_support_change_policy", g);
                    ResellerSupportChangePolicyType.Serializer.INSTANCE.serialize(value.resellerSupportChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case REWIND_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("rewind_policy_changed", g);
                    RewindPolicyChangedType.Serializer.INSTANCE.serialize(value.rewindPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SEND_FOR_SIGNATURE_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("send_for_signature_policy_changed", g);
                    SendForSignaturePolicyChangedType.Serializer.INSTANCE.serialize(value.sendForSignaturePolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARING_CHANGE_FOLDER_JOIN_POLICY: {
                    g.writeStartObject();
                    writeTag("sharing_change_folder_join_policy", g);
                    SharingChangeFolderJoinPolicyType.Serializer.INSTANCE.serialize(value.sharingChangeFolderJoinPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARING_CHANGE_LINK_ALLOW_CHANGE_EXPIRATION_POLICY: {
                    g.writeStartObject();
                    writeTag("sharing_change_link_allow_change_expiration_policy", g);
                    SharingChangeLinkAllowChangeExpirationPolicyType.Serializer.INSTANCE.serialize(value.sharingChangeLinkAllowChangeExpirationPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARING_CHANGE_LINK_DEFAULT_EXPIRATION_POLICY: {
                    g.writeStartObject();
                    writeTag("sharing_change_link_default_expiration_policy", g);
                    SharingChangeLinkDefaultExpirationPolicyType.Serializer.INSTANCE.serialize(value.sharingChangeLinkDefaultExpirationPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARING_CHANGE_LINK_ENFORCE_PASSWORD_POLICY: {
                    g.writeStartObject();
                    writeTag("sharing_change_link_enforce_password_policy", g);
                    SharingChangeLinkEnforcePasswordPolicyType.Serializer.INSTANCE.serialize(value.sharingChangeLinkEnforcePasswordPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARING_CHANGE_LINK_POLICY: {
                    g.writeStartObject();
                    writeTag("sharing_change_link_policy", g);
                    SharingChangeLinkPolicyType.Serializer.INSTANCE.serialize(value.sharingChangeLinkPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHARING_CHANGE_MEMBER_POLICY: {
                    g.writeStartObject();
                    writeTag("sharing_change_member_policy", g);
                    SharingChangeMemberPolicyType.Serializer.INSTANCE.serialize(value.sharingChangeMemberPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_CHANGE_DOWNLOAD_POLICY: {
                    g.writeStartObject();
                    writeTag("showcase_change_download_policy", g);
                    ShowcaseChangeDownloadPolicyType.Serializer.INSTANCE.serialize(value.showcaseChangeDownloadPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_CHANGE_ENABLED_POLICY: {
                    g.writeStartObject();
                    writeTag("showcase_change_enabled_policy", g);
                    ShowcaseChangeEnabledPolicyType.Serializer.INSTANCE.serialize(value.showcaseChangeEnabledPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SHOWCASE_CHANGE_EXTERNAL_SHARING_POLICY: {
                    g.writeStartObject();
                    writeTag("showcase_change_external_sharing_policy", g);
                    ShowcaseChangeExternalSharingPolicyType.Serializer.INSTANCE.serialize(value.showcaseChangeExternalSharingPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SMARTER_SMART_SYNC_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("smarter_smart_sync_policy_changed", g);
                    SmarterSmartSyncPolicyChangedType.Serializer.INSTANCE.serialize(value.smarterSmartSyncPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SMART_SYNC_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("smart_sync_change_policy", g);
                    SmartSyncChangePolicyType.Serializer.INSTANCE.serialize(value.smartSyncChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SMART_SYNC_NOT_OPT_OUT: {
                    g.writeStartObject();
                    writeTag("smart_sync_not_opt_out", g);
                    SmartSyncNotOptOutType.Serializer.INSTANCE.serialize(value.smartSyncNotOptOutValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SMART_SYNC_OPT_OUT: {
                    g.writeStartObject();
                    writeTag("smart_sync_opt_out", g);
                    SmartSyncOptOutType.Serializer.INSTANCE.serialize(value.smartSyncOptOutValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case SSO_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("sso_change_policy", g);
                    SsoChangePolicyType.Serializer.INSTANCE.serialize(value.ssoChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_BRANDING_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("team_branding_policy_changed", g);
                    TeamBrandingPolicyChangedType.Serializer.INSTANCE.serialize(value.teamBrandingPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_EXTENSIONS_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("team_extensions_policy_changed", g);
                    TeamExtensionsPolicyChangedType.Serializer.INSTANCE.serialize(value.teamExtensionsPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_SELECTIVE_SYNC_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("team_selective_sync_policy_changed", g);
                    TeamSelectiveSyncPolicyChangedType.Serializer.INSTANCE.serialize(value.teamSelectiveSyncPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_SHARING_WHITELIST_SUBJECTS_CHANGED: {
                    g.writeStartObject();
                    writeTag("team_sharing_whitelist_subjects_changed", g);
                    TeamSharingWhitelistSubjectsChangedType.Serializer.INSTANCE.serialize(value.teamSharingWhitelistSubjectsChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TFA_ADD_EXCEPTION: {
                    g.writeStartObject();
                    writeTag("tfa_add_exception", g);
                    TfaAddExceptionType.Serializer.INSTANCE.serialize(value.tfaAddExceptionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TFA_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("tfa_change_policy", g);
                    TfaChangePolicyType.Serializer.INSTANCE.serialize(value.tfaChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TFA_REMOVE_EXCEPTION: {
                    g.writeStartObject();
                    writeTag("tfa_remove_exception", g);
                    TfaRemoveExceptionType.Serializer.INSTANCE.serialize(value.tfaRemoveExceptionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TWO_ACCOUNT_CHANGE_POLICY: {
                    g.writeStartObject();
                    writeTag("two_account_change_policy", g);
                    TwoAccountChangePolicyType.Serializer.INSTANCE.serialize(value.twoAccountChangePolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case VIEWER_INFO_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("viewer_info_policy_changed", g);
                    ViewerInfoPolicyChangedType.Serializer.INSTANCE.serialize(value.viewerInfoPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case WATERMARKING_POLICY_CHANGED: {
                    g.writeStartObject();
                    writeTag("watermarking_policy_changed", g);
                    WatermarkingPolicyChangedType.Serializer.INSTANCE.serialize(value.watermarkingPolicyChangedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case WEB_SESSIONS_CHANGE_ACTIVE_SESSION_LIMIT: {
                    g.writeStartObject();
                    writeTag("web_sessions_change_active_session_limit", g);
                    WebSessionsChangeActiveSessionLimitType.Serializer.INSTANCE.serialize(value.webSessionsChangeActiveSessionLimitValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case WEB_SESSIONS_CHANGE_FIXED_LENGTH_POLICY: {
                    g.writeStartObject();
                    writeTag("web_sessions_change_fixed_length_policy", g);
                    WebSessionsChangeFixedLengthPolicyType.Serializer.INSTANCE.serialize(value.webSessionsChangeFixedLengthPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case WEB_SESSIONS_CHANGE_IDLE_LENGTH_POLICY: {
                    g.writeStartObject();
                    writeTag("web_sessions_change_idle_length_policy", g);
                    WebSessionsChangeIdleLengthPolicyType.Serializer.INSTANCE.serialize(value.webSessionsChangeIdleLengthPolicyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DATA_RESIDENCY_MIGRATION_REQUEST_SUCCESSFUL: {
                    g.writeStartObject();
                    writeTag("data_residency_migration_request_successful", g);
                    DataResidencyMigrationRequestSuccessfulType.Serializer.INSTANCE.serialize(value.dataResidencyMigrationRequestSuccessfulValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case DATA_RESIDENCY_MIGRATION_REQUEST_UNSUCCESSFUL: {
                    g.writeStartObject();
                    writeTag("data_residency_migration_request_unsuccessful", g);
                    DataResidencyMigrationRequestUnsuccessfulType.Serializer.INSTANCE.serialize(value.dataResidencyMigrationRequestUnsuccessfulValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_FROM: {
                    g.writeStartObject();
                    writeTag("team_merge_from", g);
                    TeamMergeFromType.Serializer.INSTANCE.serialize(value.teamMergeFromValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_TO: {
                    g.writeStartObject();
                    writeTag("team_merge_to", g);
                    TeamMergeToType.Serializer.INSTANCE.serialize(value.teamMergeToValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_PROFILE_ADD_BACKGROUND: {
                    g.writeStartObject();
                    writeTag("team_profile_add_background", g);
                    TeamProfileAddBackgroundType.Serializer.INSTANCE.serialize(value.teamProfileAddBackgroundValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_PROFILE_ADD_LOGO: {
                    g.writeStartObject();
                    writeTag("team_profile_add_logo", g);
                    TeamProfileAddLogoType.Serializer.INSTANCE.serialize(value.teamProfileAddLogoValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_PROFILE_CHANGE_BACKGROUND: {
                    g.writeStartObject();
                    writeTag("team_profile_change_background", g);
                    TeamProfileChangeBackgroundType.Serializer.INSTANCE.serialize(value.teamProfileChangeBackgroundValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_PROFILE_CHANGE_DEFAULT_LANGUAGE: {
                    g.writeStartObject();
                    writeTag("team_profile_change_default_language", g);
                    TeamProfileChangeDefaultLanguageType.Serializer.INSTANCE.serialize(value.teamProfileChangeDefaultLanguageValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_PROFILE_CHANGE_LOGO: {
                    g.writeStartObject();
                    writeTag("team_profile_change_logo", g);
                    TeamProfileChangeLogoType.Serializer.INSTANCE.serialize(value.teamProfileChangeLogoValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_PROFILE_CHANGE_NAME: {
                    g.writeStartObject();
                    writeTag("team_profile_change_name", g);
                    TeamProfileChangeNameType.Serializer.INSTANCE.serialize(value.teamProfileChangeNameValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_PROFILE_REMOVE_BACKGROUND: {
                    g.writeStartObject();
                    writeTag("team_profile_remove_background", g);
                    TeamProfileRemoveBackgroundType.Serializer.INSTANCE.serialize(value.teamProfileRemoveBackgroundValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_PROFILE_REMOVE_LOGO: {
                    g.writeStartObject();
                    writeTag("team_profile_remove_logo", g);
                    TeamProfileRemoveLogoType.Serializer.INSTANCE.serialize(value.teamProfileRemoveLogoValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TFA_ADD_BACKUP_PHONE: {
                    g.writeStartObject();
                    writeTag("tfa_add_backup_phone", g);
                    TfaAddBackupPhoneType.Serializer.INSTANCE.serialize(value.tfaAddBackupPhoneValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TFA_ADD_SECURITY_KEY: {
                    g.writeStartObject();
                    writeTag("tfa_add_security_key", g);
                    TfaAddSecurityKeyType.Serializer.INSTANCE.serialize(value.tfaAddSecurityKeyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TFA_CHANGE_BACKUP_PHONE: {
                    g.writeStartObject();
                    writeTag("tfa_change_backup_phone", g);
                    TfaChangeBackupPhoneType.Serializer.INSTANCE.serialize(value.tfaChangeBackupPhoneValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TFA_CHANGE_STATUS: {
                    g.writeStartObject();
                    writeTag("tfa_change_status", g);
                    TfaChangeStatusType.Serializer.INSTANCE.serialize(value.tfaChangeStatusValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TFA_REMOVE_BACKUP_PHONE: {
                    g.writeStartObject();
                    writeTag("tfa_remove_backup_phone", g);
                    TfaRemoveBackupPhoneType.Serializer.INSTANCE.serialize(value.tfaRemoveBackupPhoneValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TFA_REMOVE_SECURITY_KEY: {
                    g.writeStartObject();
                    writeTag("tfa_remove_security_key", g);
                    TfaRemoveSecurityKeyType.Serializer.INSTANCE.serialize(value.tfaRemoveSecurityKeyValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TFA_RESET: {
                    g.writeStartObject();
                    writeTag("tfa_reset", g);
                    TfaResetType.Serializer.INSTANCE.serialize(value.tfaResetValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case CHANGED_ENTERPRISE_ADMIN_ROLE: {
                    g.writeStartObject();
                    writeTag("changed_enterprise_admin_role", g);
                    ChangedEnterpriseAdminRoleType.Serializer.INSTANCE.serialize(value.changedEnterpriseAdminRoleValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case CHANGED_ENTERPRISE_CONNECTED_TEAM_STATUS: {
                    g.writeStartObject();
                    writeTag("changed_enterprise_connected_team_status", g);
                    ChangedEnterpriseConnectedTeamStatusType.Serializer.INSTANCE.serialize(value.changedEnterpriseConnectedTeamStatusValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ENDED_ENTERPRISE_ADMIN_SESSION: {
                    g.writeStartObject();
                    writeTag("ended_enterprise_admin_session", g);
                    EndedEnterpriseAdminSessionType.Serializer.INSTANCE.serialize(value.endedEnterpriseAdminSessionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ENDED_ENTERPRISE_ADMIN_SESSION_DEPRECATED: {
                    g.writeStartObject();
                    writeTag("ended_enterprise_admin_session_deprecated", g);
                    EndedEnterpriseAdminSessionDeprecatedType.Serializer.INSTANCE.serialize(value.endedEnterpriseAdminSessionDeprecatedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case ENTERPRISE_SETTINGS_LOCKING: {
                    g.writeStartObject();
                    writeTag("enterprise_settings_locking", g);
                    EnterpriseSettingsLockingType.Serializer.INSTANCE.serialize(value.enterpriseSettingsLockingValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case GUEST_ADMIN_CHANGE_STATUS: {
                    g.writeStartObject();
                    writeTag("guest_admin_change_status", g);
                    GuestAdminChangeStatusType.Serializer.INSTANCE.serialize(value.guestAdminChangeStatusValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case STARTED_ENTERPRISE_ADMIN_SESSION: {
                    g.writeStartObject();
                    writeTag("started_enterprise_admin_session", g);
                    StartedEnterpriseAdminSessionType.Serializer.INSTANCE.serialize(value.startedEnterpriseAdminSessionValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_ACCEPTED: {
                    g.writeStartObject();
                    writeTag("team_merge_request_accepted", g);
                    TeamMergeRequestAcceptedType.Serializer.INSTANCE.serialize(value.teamMergeRequestAcceptedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_PRIMARY_TEAM: {
                    g.writeStartObject();
                    writeTag("team_merge_request_accepted_shown_to_primary_team", g);
                    TeamMergeRequestAcceptedShownToPrimaryTeamType.Serializer.INSTANCE.serialize(value.teamMergeRequestAcceptedShownToPrimaryTeamValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_ACCEPTED_SHOWN_TO_SECONDARY_TEAM: {
                    g.writeStartObject();
                    writeTag("team_merge_request_accepted_shown_to_secondary_team", g);
                    TeamMergeRequestAcceptedShownToSecondaryTeamType.Serializer.INSTANCE.serialize(value.teamMergeRequestAcceptedShownToSecondaryTeamValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_AUTO_CANCELED: {
                    g.writeStartObject();
                    writeTag("team_merge_request_auto_canceled", g);
                    TeamMergeRequestAutoCanceledType.Serializer.INSTANCE.serialize(value.teamMergeRequestAutoCanceledValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_CANCELED: {
                    g.writeStartObject();
                    writeTag("team_merge_request_canceled", g);
                    TeamMergeRequestCanceledType.Serializer.INSTANCE.serialize(value.teamMergeRequestCanceledValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_PRIMARY_TEAM: {
                    g.writeStartObject();
                    writeTag("team_merge_request_canceled_shown_to_primary_team", g);
                    TeamMergeRequestCanceledShownToPrimaryTeamType.Serializer.INSTANCE.serialize(value.teamMergeRequestCanceledShownToPrimaryTeamValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_CANCELED_SHOWN_TO_SECONDARY_TEAM: {
                    g.writeStartObject();
                    writeTag("team_merge_request_canceled_shown_to_secondary_team", g);
                    TeamMergeRequestCanceledShownToSecondaryTeamType.Serializer.INSTANCE.serialize(value.teamMergeRequestCanceledShownToSecondaryTeamValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_EXPIRED: {
                    g.writeStartObject();
                    writeTag("team_merge_request_expired", g);
                    TeamMergeRequestExpiredType.Serializer.INSTANCE.serialize(value.teamMergeRequestExpiredValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_PRIMARY_TEAM: {
                    g.writeStartObject();
                    writeTag("team_merge_request_expired_shown_to_primary_team", g);
                    TeamMergeRequestExpiredShownToPrimaryTeamType.Serializer.INSTANCE.serialize(value.teamMergeRequestExpiredShownToPrimaryTeamValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_EXPIRED_SHOWN_TO_SECONDARY_TEAM: {
                    g.writeStartObject();
                    writeTag("team_merge_request_expired_shown_to_secondary_team", g);
                    TeamMergeRequestExpiredShownToSecondaryTeamType.Serializer.INSTANCE.serialize(value.teamMergeRequestExpiredShownToSecondaryTeamValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_PRIMARY_TEAM: {
                    g.writeStartObject();
                    writeTag("team_merge_request_rejected_shown_to_primary_team", g);
                    TeamMergeRequestRejectedShownToPrimaryTeamType.Serializer.INSTANCE.serialize(value.teamMergeRequestRejectedShownToPrimaryTeamValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_REJECTED_SHOWN_TO_SECONDARY_TEAM: {
                    g.writeStartObject();
                    writeTag("team_merge_request_rejected_shown_to_secondary_team", g);
                    TeamMergeRequestRejectedShownToSecondaryTeamType.Serializer.INSTANCE.serialize(value.teamMergeRequestRejectedShownToSecondaryTeamValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_REMINDER: {
                    g.writeStartObject();
                    writeTag("team_merge_request_reminder", g);
                    TeamMergeRequestReminderType.Serializer.INSTANCE.serialize(value.teamMergeRequestReminderValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_PRIMARY_TEAM: {
                    g.writeStartObject();
                    writeTag("team_merge_request_reminder_shown_to_primary_team", g);
                    TeamMergeRequestReminderShownToPrimaryTeamType.Serializer.INSTANCE.serialize(value.teamMergeRequestReminderShownToPrimaryTeamValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_REMINDER_SHOWN_TO_SECONDARY_TEAM: {
                    g.writeStartObject();
                    writeTag("team_merge_request_reminder_shown_to_secondary_team", g);
                    TeamMergeRequestReminderShownToSecondaryTeamType.Serializer.INSTANCE.serialize(value.teamMergeRequestReminderShownToSecondaryTeamValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_REVOKED: {
                    g.writeStartObject();
                    writeTag("team_merge_request_revoked", g);
                    TeamMergeRequestRevokedType.Serializer.INSTANCE.serialize(value.teamMergeRequestRevokedValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_SENT_SHOWN_TO_PRIMARY_TEAM: {
                    g.writeStartObject();
                    writeTag("team_merge_request_sent_shown_to_primary_team", g);
                    TeamMergeRequestSentShownToPrimaryTeamType.Serializer.INSTANCE.serialize(value.teamMergeRequestSentShownToPrimaryTeamValue, g, true);
                    g.writeEndObject();
                    break;
                }
                case TEAM_MERGE_REQUEST_SENT_SHOWN_TO_SECONDARY_TEAM: {
                    g.writeStartObject();
                    writeTag("team_merge_request_sent_shown_to_secondary_team", g);
                    TeamMergeRequestSentShownToSecondaryTeamType.Serializer.INSTANCE.serialize(value.teamMergeRequestSentShownToSecondaryTeamValue, g, true);
                    g.writeEndObject();
                    break;
                }
                default: {
                    g.writeString("other");
                }
            }
        }

        @Override
        public EventType deserialize(JsonParser p) throws IOException, JsonParseException {
            EventType value;
            boolean collapsed;
            String tag;
            if (p.getCurrentToken() == JsonToken.VALUE_STRING) {
                collapsed = true;
                tag = getStringValue(p);
                p.nextToken();
            }
            else {
                collapsed = false;
                expectStartObject(p);
                tag = readTag(p);
            }
            if (tag == null) {
                throw new JsonParseException(p, "Required field missing: " + TAG_FIELD);
            }
            else if ("admin_alerting_alert_state_changed".equals(tag)) {
                AdminAlertingAlertStateChangedType fieldValue = null;
                fieldValue = AdminAlertingAlertStateChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.adminAlertingAlertStateChanged(fieldValue);
            }
            else if ("admin_alerting_changed_alert_config".equals(tag)) {
                AdminAlertingChangedAlertConfigType fieldValue = null;
                fieldValue = AdminAlertingChangedAlertConfigType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.adminAlertingChangedAlertConfig(fieldValue);
            }
            else if ("admin_alerting_triggered_alert".equals(tag)) {
                AdminAlertingTriggeredAlertType fieldValue = null;
                fieldValue = AdminAlertingTriggeredAlertType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.adminAlertingTriggeredAlert(fieldValue);
            }
            else if ("app_blocked_by_permissions".equals(tag)) {
                AppBlockedByPermissionsType fieldValue = null;
                fieldValue = AppBlockedByPermissionsType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.appBlockedByPermissions(fieldValue);
            }
            else if ("app_link_team".equals(tag)) {
                AppLinkTeamType fieldValue = null;
                fieldValue = AppLinkTeamType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.appLinkTeam(fieldValue);
            }
            else if ("app_link_user".equals(tag)) {
                AppLinkUserType fieldValue = null;
                fieldValue = AppLinkUserType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.appLinkUser(fieldValue);
            }
            else if ("app_unlink_team".equals(tag)) {
                AppUnlinkTeamType fieldValue = null;
                fieldValue = AppUnlinkTeamType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.appUnlinkTeam(fieldValue);
            }
            else if ("app_unlink_user".equals(tag)) {
                AppUnlinkUserType fieldValue = null;
                fieldValue = AppUnlinkUserType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.appUnlinkUser(fieldValue);
            }
            else if ("integration_connected".equals(tag)) {
                IntegrationConnectedType fieldValue = null;
                fieldValue = IntegrationConnectedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.integrationConnected(fieldValue);
            }
            else if ("integration_disconnected".equals(tag)) {
                IntegrationDisconnectedType fieldValue = null;
                fieldValue = IntegrationDisconnectedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.integrationDisconnected(fieldValue);
            }
            else if ("file_add_comment".equals(tag)) {
                FileAddCommentType fieldValue = null;
                fieldValue = FileAddCommentType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileAddComment(fieldValue);
            }
            else if ("file_change_comment_subscription".equals(tag)) {
                FileChangeCommentSubscriptionType fieldValue = null;
                fieldValue = FileChangeCommentSubscriptionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileChangeCommentSubscription(fieldValue);
            }
            else if ("file_delete_comment".equals(tag)) {
                FileDeleteCommentType fieldValue = null;
                fieldValue = FileDeleteCommentType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileDeleteComment(fieldValue);
            }
            else if ("file_edit_comment".equals(tag)) {
                FileEditCommentType fieldValue = null;
                fieldValue = FileEditCommentType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileEditComment(fieldValue);
            }
            else if ("file_like_comment".equals(tag)) {
                FileLikeCommentType fieldValue = null;
                fieldValue = FileLikeCommentType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileLikeComment(fieldValue);
            }
            else if ("file_resolve_comment".equals(tag)) {
                FileResolveCommentType fieldValue = null;
                fieldValue = FileResolveCommentType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileResolveComment(fieldValue);
            }
            else if ("file_unlike_comment".equals(tag)) {
                FileUnlikeCommentType fieldValue = null;
                fieldValue = FileUnlikeCommentType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileUnlikeComment(fieldValue);
            }
            else if ("file_unresolve_comment".equals(tag)) {
                FileUnresolveCommentType fieldValue = null;
                fieldValue = FileUnresolveCommentType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileUnresolveComment(fieldValue);
            }
            else if ("governance_policy_add_folders".equals(tag)) {
                GovernancePolicyAddFoldersType fieldValue = null;
                fieldValue = GovernancePolicyAddFoldersType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.governancePolicyAddFolders(fieldValue);
            }
            else if ("governance_policy_add_folder_failed".equals(tag)) {
                GovernancePolicyAddFolderFailedType fieldValue = null;
                fieldValue = GovernancePolicyAddFolderFailedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.governancePolicyAddFolderFailed(fieldValue);
            }
            else if ("governance_policy_content_disposed".equals(tag)) {
                GovernancePolicyContentDisposedType fieldValue = null;
                fieldValue = GovernancePolicyContentDisposedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.governancePolicyContentDisposed(fieldValue);
            }
            else if ("governance_policy_create".equals(tag)) {
                GovernancePolicyCreateType fieldValue = null;
                fieldValue = GovernancePolicyCreateType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.governancePolicyCreate(fieldValue);
            }
            else if ("governance_policy_delete".equals(tag)) {
                GovernancePolicyDeleteType fieldValue = null;
                fieldValue = GovernancePolicyDeleteType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.governancePolicyDelete(fieldValue);
            }
            else if ("governance_policy_edit_details".equals(tag)) {
                GovernancePolicyEditDetailsType fieldValue = null;
                fieldValue = GovernancePolicyEditDetailsType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.governancePolicyEditDetails(fieldValue);
            }
            else if ("governance_policy_edit_duration".equals(tag)) {
                GovernancePolicyEditDurationType fieldValue = null;
                fieldValue = GovernancePolicyEditDurationType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.governancePolicyEditDuration(fieldValue);
            }
            else if ("governance_policy_export_created".equals(tag)) {
                GovernancePolicyExportCreatedType fieldValue = null;
                fieldValue = GovernancePolicyExportCreatedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.governancePolicyExportCreated(fieldValue);
            }
            else if ("governance_policy_export_removed".equals(tag)) {
                GovernancePolicyExportRemovedType fieldValue = null;
                fieldValue = GovernancePolicyExportRemovedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.governancePolicyExportRemoved(fieldValue);
            }
            else if ("governance_policy_remove_folders".equals(tag)) {
                GovernancePolicyRemoveFoldersType fieldValue = null;
                fieldValue = GovernancePolicyRemoveFoldersType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.governancePolicyRemoveFolders(fieldValue);
            }
            else if ("governance_policy_report_created".equals(tag)) {
                GovernancePolicyReportCreatedType fieldValue = null;
                fieldValue = GovernancePolicyReportCreatedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.governancePolicyReportCreated(fieldValue);
            }
            else if ("governance_policy_zip_part_downloaded".equals(tag)) {
                GovernancePolicyZipPartDownloadedType fieldValue = null;
                fieldValue = GovernancePolicyZipPartDownloadedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.governancePolicyZipPartDownloaded(fieldValue);
            }
            else if ("legal_holds_activate_a_hold".equals(tag)) {
                LegalHoldsActivateAHoldType fieldValue = null;
                fieldValue = LegalHoldsActivateAHoldType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.legalHoldsActivateAHold(fieldValue);
            }
            else if ("legal_holds_add_members".equals(tag)) {
                LegalHoldsAddMembersType fieldValue = null;
                fieldValue = LegalHoldsAddMembersType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.legalHoldsAddMembers(fieldValue);
            }
            else if ("legal_holds_change_hold_details".equals(tag)) {
                LegalHoldsChangeHoldDetailsType fieldValue = null;
                fieldValue = LegalHoldsChangeHoldDetailsType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.legalHoldsChangeHoldDetails(fieldValue);
            }
            else if ("legal_holds_change_hold_name".equals(tag)) {
                LegalHoldsChangeHoldNameType fieldValue = null;
                fieldValue = LegalHoldsChangeHoldNameType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.legalHoldsChangeHoldName(fieldValue);
            }
            else if ("legal_holds_export_a_hold".equals(tag)) {
                LegalHoldsExportAHoldType fieldValue = null;
                fieldValue = LegalHoldsExportAHoldType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.legalHoldsExportAHold(fieldValue);
            }
            else if ("legal_holds_export_cancelled".equals(tag)) {
                LegalHoldsExportCancelledType fieldValue = null;
                fieldValue = LegalHoldsExportCancelledType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.legalHoldsExportCancelled(fieldValue);
            }
            else if ("legal_holds_export_downloaded".equals(tag)) {
                LegalHoldsExportDownloadedType fieldValue = null;
                fieldValue = LegalHoldsExportDownloadedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.legalHoldsExportDownloaded(fieldValue);
            }
            else if ("legal_holds_export_removed".equals(tag)) {
                LegalHoldsExportRemovedType fieldValue = null;
                fieldValue = LegalHoldsExportRemovedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.legalHoldsExportRemoved(fieldValue);
            }
            else if ("legal_holds_release_a_hold".equals(tag)) {
                LegalHoldsReleaseAHoldType fieldValue = null;
                fieldValue = LegalHoldsReleaseAHoldType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.legalHoldsReleaseAHold(fieldValue);
            }
            else if ("legal_holds_remove_members".equals(tag)) {
                LegalHoldsRemoveMembersType fieldValue = null;
                fieldValue = LegalHoldsRemoveMembersType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.legalHoldsRemoveMembers(fieldValue);
            }
            else if ("legal_holds_report_a_hold".equals(tag)) {
                LegalHoldsReportAHoldType fieldValue = null;
                fieldValue = LegalHoldsReportAHoldType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.legalHoldsReportAHold(fieldValue);
            }
            else if ("device_change_ip_desktop".equals(tag)) {
                DeviceChangeIpDesktopType fieldValue = null;
                fieldValue = DeviceChangeIpDesktopType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.deviceChangeIpDesktop(fieldValue);
            }
            else if ("device_change_ip_mobile".equals(tag)) {
                DeviceChangeIpMobileType fieldValue = null;
                fieldValue = DeviceChangeIpMobileType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.deviceChangeIpMobile(fieldValue);
            }
            else if ("device_change_ip_web".equals(tag)) {
                DeviceChangeIpWebType fieldValue = null;
                fieldValue = DeviceChangeIpWebType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.deviceChangeIpWeb(fieldValue);
            }
            else if ("device_delete_on_unlink_fail".equals(tag)) {
                DeviceDeleteOnUnlinkFailType fieldValue = null;
                fieldValue = DeviceDeleteOnUnlinkFailType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.deviceDeleteOnUnlinkFail(fieldValue);
            }
            else if ("device_delete_on_unlink_success".equals(tag)) {
                DeviceDeleteOnUnlinkSuccessType fieldValue = null;
                fieldValue = DeviceDeleteOnUnlinkSuccessType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.deviceDeleteOnUnlinkSuccess(fieldValue);
            }
            else if ("device_link_fail".equals(tag)) {
                DeviceLinkFailType fieldValue = null;
                fieldValue = DeviceLinkFailType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.deviceLinkFail(fieldValue);
            }
            else if ("device_link_success".equals(tag)) {
                DeviceLinkSuccessType fieldValue = null;
                fieldValue = DeviceLinkSuccessType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.deviceLinkSuccess(fieldValue);
            }
            else if ("device_management_disabled".equals(tag)) {
                DeviceManagementDisabledType fieldValue = null;
                fieldValue = DeviceManagementDisabledType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.deviceManagementDisabled(fieldValue);
            }
            else if ("device_management_enabled".equals(tag)) {
                DeviceManagementEnabledType fieldValue = null;
                fieldValue = DeviceManagementEnabledType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.deviceManagementEnabled(fieldValue);
            }
            else if ("device_sync_backup_status_changed".equals(tag)) {
                DeviceSyncBackupStatusChangedType fieldValue = null;
                fieldValue = DeviceSyncBackupStatusChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.deviceSyncBackupStatusChanged(fieldValue);
            }
            else if ("device_unlink".equals(tag)) {
                DeviceUnlinkType fieldValue = null;
                fieldValue = DeviceUnlinkType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.deviceUnlink(fieldValue);
            }
            else if ("dropbox_passwords_exported".equals(tag)) {
                DropboxPasswordsExportedType fieldValue = null;
                fieldValue = DropboxPasswordsExportedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.dropboxPasswordsExported(fieldValue);
            }
            else if ("dropbox_passwords_new_device_enrolled".equals(tag)) {
                DropboxPasswordsNewDeviceEnrolledType fieldValue = null;
                fieldValue = DropboxPasswordsNewDeviceEnrolledType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.dropboxPasswordsNewDeviceEnrolled(fieldValue);
            }
            else if ("emm_refresh_auth_token".equals(tag)) {
                EmmRefreshAuthTokenType fieldValue = null;
                fieldValue = EmmRefreshAuthTokenType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.emmRefreshAuthToken(fieldValue);
            }
            else if ("external_drive_backup_eligibility_status_checked".equals(tag)) {
                ExternalDriveBackupEligibilityStatusCheckedType fieldValue = null;
                fieldValue = ExternalDriveBackupEligibilityStatusCheckedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.externalDriveBackupEligibilityStatusChecked(fieldValue);
            }
            else if ("external_drive_backup_status_changed".equals(tag)) {
                ExternalDriveBackupStatusChangedType fieldValue = null;
                fieldValue = ExternalDriveBackupStatusChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.externalDriveBackupStatusChanged(fieldValue);
            }
            else if ("account_capture_change_availability".equals(tag)) {
                AccountCaptureChangeAvailabilityType fieldValue = null;
                fieldValue = AccountCaptureChangeAvailabilityType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.accountCaptureChangeAvailability(fieldValue);
            }
            else if ("account_capture_migrate_account".equals(tag)) {
                AccountCaptureMigrateAccountType fieldValue = null;
                fieldValue = AccountCaptureMigrateAccountType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.accountCaptureMigrateAccount(fieldValue);
            }
            else if ("account_capture_notification_emails_sent".equals(tag)) {
                AccountCaptureNotificationEmailsSentType fieldValue = null;
                fieldValue = AccountCaptureNotificationEmailsSentType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.accountCaptureNotificationEmailsSent(fieldValue);
            }
            else if ("account_capture_relinquish_account".equals(tag)) {
                AccountCaptureRelinquishAccountType fieldValue = null;
                fieldValue = AccountCaptureRelinquishAccountType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.accountCaptureRelinquishAccount(fieldValue);
            }
            else if ("disabled_domain_invites".equals(tag)) {
                DisabledDomainInvitesType fieldValue = null;
                fieldValue = DisabledDomainInvitesType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.disabledDomainInvites(fieldValue);
            }
            else if ("domain_invites_approve_request_to_join_team".equals(tag)) {
                DomainInvitesApproveRequestToJoinTeamType fieldValue = null;
                fieldValue = DomainInvitesApproveRequestToJoinTeamType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.domainInvitesApproveRequestToJoinTeam(fieldValue);
            }
            else if ("domain_invites_decline_request_to_join_team".equals(tag)) {
                DomainInvitesDeclineRequestToJoinTeamType fieldValue = null;
                fieldValue = DomainInvitesDeclineRequestToJoinTeamType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.domainInvitesDeclineRequestToJoinTeam(fieldValue);
            }
            else if ("domain_invites_email_existing_users".equals(tag)) {
                DomainInvitesEmailExistingUsersType fieldValue = null;
                fieldValue = DomainInvitesEmailExistingUsersType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.domainInvitesEmailExistingUsers(fieldValue);
            }
            else if ("domain_invites_request_to_join_team".equals(tag)) {
                DomainInvitesRequestToJoinTeamType fieldValue = null;
                fieldValue = DomainInvitesRequestToJoinTeamType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.domainInvitesRequestToJoinTeam(fieldValue);
            }
            else if ("domain_invites_set_invite_new_user_pref_to_no".equals(tag)) {
                DomainInvitesSetInviteNewUserPrefToNoType fieldValue = null;
                fieldValue = DomainInvitesSetInviteNewUserPrefToNoType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.domainInvitesSetInviteNewUserPrefToNo(fieldValue);
            }
            else if ("domain_invites_set_invite_new_user_pref_to_yes".equals(tag)) {
                DomainInvitesSetInviteNewUserPrefToYesType fieldValue = null;
                fieldValue = DomainInvitesSetInviteNewUserPrefToYesType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.domainInvitesSetInviteNewUserPrefToYes(fieldValue);
            }
            else if ("domain_verification_add_domain_fail".equals(tag)) {
                DomainVerificationAddDomainFailType fieldValue = null;
                fieldValue = DomainVerificationAddDomainFailType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.domainVerificationAddDomainFail(fieldValue);
            }
            else if ("domain_verification_add_domain_success".equals(tag)) {
                DomainVerificationAddDomainSuccessType fieldValue = null;
                fieldValue = DomainVerificationAddDomainSuccessType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.domainVerificationAddDomainSuccess(fieldValue);
            }
            else if ("domain_verification_remove_domain".equals(tag)) {
                DomainVerificationRemoveDomainType fieldValue = null;
                fieldValue = DomainVerificationRemoveDomainType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.domainVerificationRemoveDomain(fieldValue);
            }
            else if ("enabled_domain_invites".equals(tag)) {
                EnabledDomainInvitesType fieldValue = null;
                fieldValue = EnabledDomainInvitesType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.enabledDomainInvites(fieldValue);
            }
            else if ("apply_naming_convention".equals(tag)) {
                ApplyNamingConventionType fieldValue = null;
                fieldValue = ApplyNamingConventionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.applyNamingConvention(fieldValue);
            }
            else if ("create_folder".equals(tag)) {
                CreateFolderType fieldValue = null;
                fieldValue = CreateFolderType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.createFolder(fieldValue);
            }
            else if ("file_add".equals(tag)) {
                FileAddType fieldValue = null;
                fieldValue = FileAddType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileAdd(fieldValue);
            }
            else if ("file_copy".equals(tag)) {
                FileCopyType fieldValue = null;
                fieldValue = FileCopyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileCopy(fieldValue);
            }
            else if ("file_delete".equals(tag)) {
                FileDeleteType fieldValue = null;
                fieldValue = FileDeleteType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileDelete(fieldValue);
            }
            else if ("file_download".equals(tag)) {
                FileDownloadType fieldValue = null;
                fieldValue = FileDownloadType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileDownload(fieldValue);
            }
            else if ("file_edit".equals(tag)) {
                FileEditType fieldValue = null;
                fieldValue = FileEditType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileEdit(fieldValue);
            }
            else if ("file_get_copy_reference".equals(tag)) {
                FileGetCopyReferenceType fieldValue = null;
                fieldValue = FileGetCopyReferenceType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileGetCopyReference(fieldValue);
            }
            else if ("file_locking_lock_status_changed".equals(tag)) {
                FileLockingLockStatusChangedType fieldValue = null;
                fieldValue = FileLockingLockStatusChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileLockingLockStatusChanged(fieldValue);
            }
            else if ("file_move".equals(tag)) {
                FileMoveType fieldValue = null;
                fieldValue = FileMoveType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileMove(fieldValue);
            }
            else if ("file_permanently_delete".equals(tag)) {
                FilePermanentlyDeleteType fieldValue = null;
                fieldValue = FilePermanentlyDeleteType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.filePermanentlyDelete(fieldValue);
            }
            else if ("file_preview".equals(tag)) {
                FilePreviewType fieldValue = null;
                fieldValue = FilePreviewType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.filePreview(fieldValue);
            }
            else if ("file_rename".equals(tag)) {
                FileRenameType fieldValue = null;
                fieldValue = FileRenameType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileRename(fieldValue);
            }
            else if ("file_restore".equals(tag)) {
                FileRestoreType fieldValue = null;
                fieldValue = FileRestoreType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileRestore(fieldValue);
            }
            else if ("file_revert".equals(tag)) {
                FileRevertType fieldValue = null;
                fieldValue = FileRevertType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileRevert(fieldValue);
            }
            else if ("file_rollback_changes".equals(tag)) {
                FileRollbackChangesType fieldValue = null;
                fieldValue = FileRollbackChangesType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileRollbackChanges(fieldValue);
            }
            else if ("file_save_copy_reference".equals(tag)) {
                FileSaveCopyReferenceType fieldValue = null;
                fieldValue = FileSaveCopyReferenceType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileSaveCopyReference(fieldValue);
            }
            else if ("folder_overview_description_changed".equals(tag)) {
                FolderOverviewDescriptionChangedType fieldValue = null;
                fieldValue = FolderOverviewDescriptionChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.folderOverviewDescriptionChanged(fieldValue);
            }
            else if ("folder_overview_item_pinned".equals(tag)) {
                FolderOverviewItemPinnedType fieldValue = null;
                fieldValue = FolderOverviewItemPinnedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.folderOverviewItemPinned(fieldValue);
            }
            else if ("folder_overview_item_unpinned".equals(tag)) {
                FolderOverviewItemUnpinnedType fieldValue = null;
                fieldValue = FolderOverviewItemUnpinnedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.folderOverviewItemUnpinned(fieldValue);
            }
            else if ("object_label_added".equals(tag)) {
                ObjectLabelAddedType fieldValue = null;
                fieldValue = ObjectLabelAddedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.objectLabelAdded(fieldValue);
            }
            else if ("object_label_removed".equals(tag)) {
                ObjectLabelRemovedType fieldValue = null;
                fieldValue = ObjectLabelRemovedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.objectLabelRemoved(fieldValue);
            }
            else if ("object_label_updated_value".equals(tag)) {
                ObjectLabelUpdatedValueType fieldValue = null;
                fieldValue = ObjectLabelUpdatedValueType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.objectLabelUpdatedValue(fieldValue);
            }
            else if ("organize_folder_with_tidy".equals(tag)) {
                OrganizeFolderWithTidyType fieldValue = null;
                fieldValue = OrganizeFolderWithTidyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.organizeFolderWithTidy(fieldValue);
            }
            else if ("rewind_folder".equals(tag)) {
                RewindFolderType fieldValue = null;
                fieldValue = RewindFolderType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.rewindFolder(fieldValue);
            }
            else if ("undo_naming_convention".equals(tag)) {
                UndoNamingConventionType fieldValue = null;
                fieldValue = UndoNamingConventionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.undoNamingConvention(fieldValue);
            }
            else if ("undo_organize_folder_with_tidy".equals(tag)) {
                UndoOrganizeFolderWithTidyType fieldValue = null;
                fieldValue = UndoOrganizeFolderWithTidyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.undoOrganizeFolderWithTidy(fieldValue);
            }
            else if ("user_tags_added".equals(tag)) {
                UserTagsAddedType fieldValue = null;
                fieldValue = UserTagsAddedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.userTagsAdded(fieldValue);
            }
            else if ("user_tags_removed".equals(tag)) {
                UserTagsRemovedType fieldValue = null;
                fieldValue = UserTagsRemovedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.userTagsRemoved(fieldValue);
            }
            else if ("email_ingest_receive_file".equals(tag)) {
                EmailIngestReceiveFileType fieldValue = null;
                fieldValue = EmailIngestReceiveFileType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.emailIngestReceiveFile(fieldValue);
            }
            else if ("file_request_change".equals(tag)) {
                FileRequestChangeType fieldValue = null;
                fieldValue = FileRequestChangeType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileRequestChange(fieldValue);
            }
            else if ("file_request_close".equals(tag)) {
                FileRequestCloseType fieldValue = null;
                fieldValue = FileRequestCloseType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileRequestClose(fieldValue);
            }
            else if ("file_request_create".equals(tag)) {
                FileRequestCreateType fieldValue = null;
                fieldValue = FileRequestCreateType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileRequestCreate(fieldValue);
            }
            else if ("file_request_delete".equals(tag)) {
                FileRequestDeleteType fieldValue = null;
                fieldValue = FileRequestDeleteType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileRequestDelete(fieldValue);
            }
            else if ("file_request_receive_file".equals(tag)) {
                FileRequestReceiveFileType fieldValue = null;
                fieldValue = FileRequestReceiveFileType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileRequestReceiveFile(fieldValue);
            }
            else if ("group_add_external_id".equals(tag)) {
                GroupAddExternalIdType fieldValue = null;
                fieldValue = GroupAddExternalIdType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.groupAddExternalId(fieldValue);
            }
            else if ("group_add_member".equals(tag)) {
                GroupAddMemberType fieldValue = null;
                fieldValue = GroupAddMemberType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.groupAddMember(fieldValue);
            }
            else if ("group_change_external_id".equals(tag)) {
                GroupChangeExternalIdType fieldValue = null;
                fieldValue = GroupChangeExternalIdType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.groupChangeExternalId(fieldValue);
            }
            else if ("group_change_management_type".equals(tag)) {
                GroupChangeManagementTypeType fieldValue = null;
                fieldValue = GroupChangeManagementTypeType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.groupChangeManagementType(fieldValue);
            }
            else if ("group_change_member_role".equals(tag)) {
                GroupChangeMemberRoleType fieldValue = null;
                fieldValue = GroupChangeMemberRoleType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.groupChangeMemberRole(fieldValue);
            }
            else if ("group_create".equals(tag)) {
                GroupCreateType fieldValue = null;
                fieldValue = GroupCreateType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.groupCreate(fieldValue);
            }
            else if ("group_delete".equals(tag)) {
                GroupDeleteType fieldValue = null;
                fieldValue = GroupDeleteType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.groupDelete(fieldValue);
            }
            else if ("group_description_updated".equals(tag)) {
                GroupDescriptionUpdatedType fieldValue = null;
                fieldValue = GroupDescriptionUpdatedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.groupDescriptionUpdated(fieldValue);
            }
            else if ("group_join_policy_updated".equals(tag)) {
                GroupJoinPolicyUpdatedType fieldValue = null;
                fieldValue = GroupJoinPolicyUpdatedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.groupJoinPolicyUpdated(fieldValue);
            }
            else if ("group_moved".equals(tag)) {
                GroupMovedType fieldValue = null;
                fieldValue = GroupMovedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.groupMoved(fieldValue);
            }
            else if ("group_remove_external_id".equals(tag)) {
                GroupRemoveExternalIdType fieldValue = null;
                fieldValue = GroupRemoveExternalIdType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.groupRemoveExternalId(fieldValue);
            }
            else if ("group_remove_member".equals(tag)) {
                GroupRemoveMemberType fieldValue = null;
                fieldValue = GroupRemoveMemberType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.groupRemoveMember(fieldValue);
            }
            else if ("group_rename".equals(tag)) {
                GroupRenameType fieldValue = null;
                fieldValue = GroupRenameType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.groupRename(fieldValue);
            }
            else if ("account_lock_or_unlocked".equals(tag)) {
                AccountLockOrUnlockedType fieldValue = null;
                fieldValue = AccountLockOrUnlockedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.accountLockOrUnlocked(fieldValue);
            }
            else if ("emm_error".equals(tag)) {
                EmmErrorType fieldValue = null;
                fieldValue = EmmErrorType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.emmError(fieldValue);
            }
            else if ("guest_admin_signed_in_via_trusted_teams".equals(tag)) {
                GuestAdminSignedInViaTrustedTeamsType fieldValue = null;
                fieldValue = GuestAdminSignedInViaTrustedTeamsType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.guestAdminSignedInViaTrustedTeams(fieldValue);
            }
            else if ("guest_admin_signed_out_via_trusted_teams".equals(tag)) {
                GuestAdminSignedOutViaTrustedTeamsType fieldValue = null;
                fieldValue = GuestAdminSignedOutViaTrustedTeamsType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.guestAdminSignedOutViaTrustedTeams(fieldValue);
            }
            else if ("login_fail".equals(tag)) {
                LoginFailType fieldValue = null;
                fieldValue = LoginFailType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.loginFail(fieldValue);
            }
            else if ("login_success".equals(tag)) {
                LoginSuccessType fieldValue = null;
                fieldValue = LoginSuccessType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.loginSuccess(fieldValue);
            }
            else if ("logout".equals(tag)) {
                LogoutType fieldValue = null;
                fieldValue = LogoutType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.logout(fieldValue);
            }
            else if ("reseller_support_session_end".equals(tag)) {
                ResellerSupportSessionEndType fieldValue = null;
                fieldValue = ResellerSupportSessionEndType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.resellerSupportSessionEnd(fieldValue);
            }
            else if ("reseller_support_session_start".equals(tag)) {
                ResellerSupportSessionStartType fieldValue = null;
                fieldValue = ResellerSupportSessionStartType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.resellerSupportSessionStart(fieldValue);
            }
            else if ("sign_in_as_session_end".equals(tag)) {
                SignInAsSessionEndType fieldValue = null;
                fieldValue = SignInAsSessionEndType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.signInAsSessionEnd(fieldValue);
            }
            else if ("sign_in_as_session_start".equals(tag)) {
                SignInAsSessionStartType fieldValue = null;
                fieldValue = SignInAsSessionStartType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.signInAsSessionStart(fieldValue);
            }
            else if ("sso_error".equals(tag)) {
                SsoErrorType fieldValue = null;
                fieldValue = SsoErrorType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.ssoError(fieldValue);
            }
            else if ("create_team_invite_link".equals(tag)) {
                CreateTeamInviteLinkType fieldValue = null;
                fieldValue = CreateTeamInviteLinkType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.createTeamInviteLink(fieldValue);
            }
            else if ("delete_team_invite_link".equals(tag)) {
                DeleteTeamInviteLinkType fieldValue = null;
                fieldValue = DeleteTeamInviteLinkType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.deleteTeamInviteLink(fieldValue);
            }
            else if ("member_add_external_id".equals(tag)) {
                MemberAddExternalIdType fieldValue = null;
                fieldValue = MemberAddExternalIdType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberAddExternalId(fieldValue);
            }
            else if ("member_add_name".equals(tag)) {
                MemberAddNameType fieldValue = null;
                fieldValue = MemberAddNameType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberAddName(fieldValue);
            }
            else if ("member_change_admin_role".equals(tag)) {
                MemberChangeAdminRoleType fieldValue = null;
                fieldValue = MemberChangeAdminRoleType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberChangeAdminRole(fieldValue);
            }
            else if ("member_change_email".equals(tag)) {
                MemberChangeEmailType fieldValue = null;
                fieldValue = MemberChangeEmailType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberChangeEmail(fieldValue);
            }
            else if ("member_change_external_id".equals(tag)) {
                MemberChangeExternalIdType fieldValue = null;
                fieldValue = MemberChangeExternalIdType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberChangeExternalId(fieldValue);
            }
            else if ("member_change_membership_type".equals(tag)) {
                MemberChangeMembershipTypeType fieldValue = null;
                fieldValue = MemberChangeMembershipTypeType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberChangeMembershipType(fieldValue);
            }
            else if ("member_change_name".equals(tag)) {
                MemberChangeNameType fieldValue = null;
                fieldValue = MemberChangeNameType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberChangeName(fieldValue);
            }
            else if ("member_change_reseller_role".equals(tag)) {
                MemberChangeResellerRoleType fieldValue = null;
                fieldValue = MemberChangeResellerRoleType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberChangeResellerRole(fieldValue);
            }
            else if ("member_change_status".equals(tag)) {
                MemberChangeStatusType fieldValue = null;
                fieldValue = MemberChangeStatusType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberChangeStatus(fieldValue);
            }
            else if ("member_delete_manual_contacts".equals(tag)) {
                MemberDeleteManualContactsType fieldValue = null;
                fieldValue = MemberDeleteManualContactsType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberDeleteManualContacts(fieldValue);
            }
            else if ("member_delete_profile_photo".equals(tag)) {
                MemberDeleteProfilePhotoType fieldValue = null;
                fieldValue = MemberDeleteProfilePhotoType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberDeleteProfilePhoto(fieldValue);
            }
            else if ("member_permanently_delete_account_contents".equals(tag)) {
                MemberPermanentlyDeleteAccountContentsType fieldValue = null;
                fieldValue = MemberPermanentlyDeleteAccountContentsType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberPermanentlyDeleteAccountContents(fieldValue);
            }
            else if ("member_remove_external_id".equals(tag)) {
                MemberRemoveExternalIdType fieldValue = null;
                fieldValue = MemberRemoveExternalIdType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberRemoveExternalId(fieldValue);
            }
            else if ("member_set_profile_photo".equals(tag)) {
                MemberSetProfilePhotoType fieldValue = null;
                fieldValue = MemberSetProfilePhotoType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberSetProfilePhoto(fieldValue);
            }
            else if ("member_space_limits_add_custom_quota".equals(tag)) {
                MemberSpaceLimitsAddCustomQuotaType fieldValue = null;
                fieldValue = MemberSpaceLimitsAddCustomQuotaType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberSpaceLimitsAddCustomQuota(fieldValue);
            }
            else if ("member_space_limits_change_custom_quota".equals(tag)) {
                MemberSpaceLimitsChangeCustomQuotaType fieldValue = null;
                fieldValue = MemberSpaceLimitsChangeCustomQuotaType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberSpaceLimitsChangeCustomQuota(fieldValue);
            }
            else if ("member_space_limits_change_status".equals(tag)) {
                MemberSpaceLimitsChangeStatusType fieldValue = null;
                fieldValue = MemberSpaceLimitsChangeStatusType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberSpaceLimitsChangeStatus(fieldValue);
            }
            else if ("member_space_limits_remove_custom_quota".equals(tag)) {
                MemberSpaceLimitsRemoveCustomQuotaType fieldValue = null;
                fieldValue = MemberSpaceLimitsRemoveCustomQuotaType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberSpaceLimitsRemoveCustomQuota(fieldValue);
            }
            else if ("member_suggest".equals(tag)) {
                MemberSuggestType fieldValue = null;
                fieldValue = MemberSuggestType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberSuggest(fieldValue);
            }
            else if ("member_transfer_account_contents".equals(tag)) {
                MemberTransferAccountContentsType fieldValue = null;
                fieldValue = MemberTransferAccountContentsType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberTransferAccountContents(fieldValue);
            }
            else if ("pending_secondary_email_added".equals(tag)) {
                PendingSecondaryEmailAddedType fieldValue = null;
                fieldValue = PendingSecondaryEmailAddedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.pendingSecondaryEmailAdded(fieldValue);
            }
            else if ("secondary_email_deleted".equals(tag)) {
                SecondaryEmailDeletedType fieldValue = null;
                fieldValue = SecondaryEmailDeletedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.secondaryEmailDeleted(fieldValue);
            }
            else if ("secondary_email_verified".equals(tag)) {
                SecondaryEmailVerifiedType fieldValue = null;
                fieldValue = SecondaryEmailVerifiedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.secondaryEmailVerified(fieldValue);
            }
            else if ("secondary_mails_policy_changed".equals(tag)) {
                SecondaryMailsPolicyChangedType fieldValue = null;
                fieldValue = SecondaryMailsPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.secondaryMailsPolicyChanged(fieldValue);
            }
            else if ("binder_add_page".equals(tag)) {
                BinderAddPageType fieldValue = null;
                fieldValue = BinderAddPageType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.binderAddPage(fieldValue);
            }
            else if ("binder_add_section".equals(tag)) {
                BinderAddSectionType fieldValue = null;
                fieldValue = BinderAddSectionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.binderAddSection(fieldValue);
            }
            else if ("binder_remove_page".equals(tag)) {
                BinderRemovePageType fieldValue = null;
                fieldValue = BinderRemovePageType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.binderRemovePage(fieldValue);
            }
            else if ("binder_remove_section".equals(tag)) {
                BinderRemoveSectionType fieldValue = null;
                fieldValue = BinderRemoveSectionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.binderRemoveSection(fieldValue);
            }
            else if ("binder_rename_page".equals(tag)) {
                BinderRenamePageType fieldValue = null;
                fieldValue = BinderRenamePageType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.binderRenamePage(fieldValue);
            }
            else if ("binder_rename_section".equals(tag)) {
                BinderRenameSectionType fieldValue = null;
                fieldValue = BinderRenameSectionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.binderRenameSection(fieldValue);
            }
            else if ("binder_reorder_page".equals(tag)) {
                BinderReorderPageType fieldValue = null;
                fieldValue = BinderReorderPageType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.binderReorderPage(fieldValue);
            }
            else if ("binder_reorder_section".equals(tag)) {
                BinderReorderSectionType fieldValue = null;
                fieldValue = BinderReorderSectionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.binderReorderSection(fieldValue);
            }
            else if ("paper_content_add_member".equals(tag)) {
                PaperContentAddMemberType fieldValue = null;
                fieldValue = PaperContentAddMemberType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperContentAddMember(fieldValue);
            }
            else if ("paper_content_add_to_folder".equals(tag)) {
                PaperContentAddToFolderType fieldValue = null;
                fieldValue = PaperContentAddToFolderType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperContentAddToFolder(fieldValue);
            }
            else if ("paper_content_archive".equals(tag)) {
                PaperContentArchiveType fieldValue = null;
                fieldValue = PaperContentArchiveType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperContentArchive(fieldValue);
            }
            else if ("paper_content_create".equals(tag)) {
                PaperContentCreateType fieldValue = null;
                fieldValue = PaperContentCreateType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperContentCreate(fieldValue);
            }
            else if ("paper_content_permanently_delete".equals(tag)) {
                PaperContentPermanentlyDeleteType fieldValue = null;
                fieldValue = PaperContentPermanentlyDeleteType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperContentPermanentlyDelete(fieldValue);
            }
            else if ("paper_content_remove_from_folder".equals(tag)) {
                PaperContentRemoveFromFolderType fieldValue = null;
                fieldValue = PaperContentRemoveFromFolderType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperContentRemoveFromFolder(fieldValue);
            }
            else if ("paper_content_remove_member".equals(tag)) {
                PaperContentRemoveMemberType fieldValue = null;
                fieldValue = PaperContentRemoveMemberType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperContentRemoveMember(fieldValue);
            }
            else if ("paper_content_rename".equals(tag)) {
                PaperContentRenameType fieldValue = null;
                fieldValue = PaperContentRenameType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperContentRename(fieldValue);
            }
            else if ("paper_content_restore".equals(tag)) {
                PaperContentRestoreType fieldValue = null;
                fieldValue = PaperContentRestoreType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperContentRestore(fieldValue);
            }
            else if ("paper_doc_add_comment".equals(tag)) {
                PaperDocAddCommentType fieldValue = null;
                fieldValue = PaperDocAddCommentType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocAddComment(fieldValue);
            }
            else if ("paper_doc_change_member_role".equals(tag)) {
                PaperDocChangeMemberRoleType fieldValue = null;
                fieldValue = PaperDocChangeMemberRoleType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocChangeMemberRole(fieldValue);
            }
            else if ("paper_doc_change_sharing_policy".equals(tag)) {
                PaperDocChangeSharingPolicyType fieldValue = null;
                fieldValue = PaperDocChangeSharingPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocChangeSharingPolicy(fieldValue);
            }
            else if ("paper_doc_change_subscription".equals(tag)) {
                PaperDocChangeSubscriptionType fieldValue = null;
                fieldValue = PaperDocChangeSubscriptionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocChangeSubscription(fieldValue);
            }
            else if ("paper_doc_deleted".equals(tag)) {
                PaperDocDeletedType fieldValue = null;
                fieldValue = PaperDocDeletedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocDeleted(fieldValue);
            }
            else if ("paper_doc_delete_comment".equals(tag)) {
                PaperDocDeleteCommentType fieldValue = null;
                fieldValue = PaperDocDeleteCommentType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocDeleteComment(fieldValue);
            }
            else if ("paper_doc_download".equals(tag)) {
                PaperDocDownloadType fieldValue = null;
                fieldValue = PaperDocDownloadType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocDownload(fieldValue);
            }
            else if ("paper_doc_edit".equals(tag)) {
                PaperDocEditType fieldValue = null;
                fieldValue = PaperDocEditType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocEdit(fieldValue);
            }
            else if ("paper_doc_edit_comment".equals(tag)) {
                PaperDocEditCommentType fieldValue = null;
                fieldValue = PaperDocEditCommentType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocEditComment(fieldValue);
            }
            else if ("paper_doc_followed".equals(tag)) {
                PaperDocFollowedType fieldValue = null;
                fieldValue = PaperDocFollowedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocFollowed(fieldValue);
            }
            else if ("paper_doc_mention".equals(tag)) {
                PaperDocMentionType fieldValue = null;
                fieldValue = PaperDocMentionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocMention(fieldValue);
            }
            else if ("paper_doc_ownership_changed".equals(tag)) {
                PaperDocOwnershipChangedType fieldValue = null;
                fieldValue = PaperDocOwnershipChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocOwnershipChanged(fieldValue);
            }
            else if ("paper_doc_request_access".equals(tag)) {
                PaperDocRequestAccessType fieldValue = null;
                fieldValue = PaperDocRequestAccessType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocRequestAccess(fieldValue);
            }
            else if ("paper_doc_resolve_comment".equals(tag)) {
                PaperDocResolveCommentType fieldValue = null;
                fieldValue = PaperDocResolveCommentType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocResolveComment(fieldValue);
            }
            else if ("paper_doc_revert".equals(tag)) {
                PaperDocRevertType fieldValue = null;
                fieldValue = PaperDocRevertType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocRevert(fieldValue);
            }
            else if ("paper_doc_slack_share".equals(tag)) {
                PaperDocSlackShareType fieldValue = null;
                fieldValue = PaperDocSlackShareType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocSlackShare(fieldValue);
            }
            else if ("paper_doc_team_invite".equals(tag)) {
                PaperDocTeamInviteType fieldValue = null;
                fieldValue = PaperDocTeamInviteType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocTeamInvite(fieldValue);
            }
            else if ("paper_doc_trashed".equals(tag)) {
                PaperDocTrashedType fieldValue = null;
                fieldValue = PaperDocTrashedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocTrashed(fieldValue);
            }
            else if ("paper_doc_unresolve_comment".equals(tag)) {
                PaperDocUnresolveCommentType fieldValue = null;
                fieldValue = PaperDocUnresolveCommentType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocUnresolveComment(fieldValue);
            }
            else if ("paper_doc_untrashed".equals(tag)) {
                PaperDocUntrashedType fieldValue = null;
                fieldValue = PaperDocUntrashedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocUntrashed(fieldValue);
            }
            else if ("paper_doc_view".equals(tag)) {
                PaperDocViewType fieldValue = null;
                fieldValue = PaperDocViewType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDocView(fieldValue);
            }
            else if ("paper_external_view_allow".equals(tag)) {
                PaperExternalViewAllowType fieldValue = null;
                fieldValue = PaperExternalViewAllowType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperExternalViewAllow(fieldValue);
            }
            else if ("paper_external_view_default_team".equals(tag)) {
                PaperExternalViewDefaultTeamType fieldValue = null;
                fieldValue = PaperExternalViewDefaultTeamType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperExternalViewDefaultTeam(fieldValue);
            }
            else if ("paper_external_view_forbid".equals(tag)) {
                PaperExternalViewForbidType fieldValue = null;
                fieldValue = PaperExternalViewForbidType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperExternalViewForbid(fieldValue);
            }
            else if ("paper_folder_change_subscription".equals(tag)) {
                PaperFolderChangeSubscriptionType fieldValue = null;
                fieldValue = PaperFolderChangeSubscriptionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperFolderChangeSubscription(fieldValue);
            }
            else if ("paper_folder_deleted".equals(tag)) {
                PaperFolderDeletedType fieldValue = null;
                fieldValue = PaperFolderDeletedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperFolderDeleted(fieldValue);
            }
            else if ("paper_folder_followed".equals(tag)) {
                PaperFolderFollowedType fieldValue = null;
                fieldValue = PaperFolderFollowedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperFolderFollowed(fieldValue);
            }
            else if ("paper_folder_team_invite".equals(tag)) {
                PaperFolderTeamInviteType fieldValue = null;
                fieldValue = PaperFolderTeamInviteType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperFolderTeamInvite(fieldValue);
            }
            else if ("paper_published_link_change_permission".equals(tag)) {
                PaperPublishedLinkChangePermissionType fieldValue = null;
                fieldValue = PaperPublishedLinkChangePermissionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperPublishedLinkChangePermission(fieldValue);
            }
            else if ("paper_published_link_create".equals(tag)) {
                PaperPublishedLinkCreateType fieldValue = null;
                fieldValue = PaperPublishedLinkCreateType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperPublishedLinkCreate(fieldValue);
            }
            else if ("paper_published_link_disabled".equals(tag)) {
                PaperPublishedLinkDisabledType fieldValue = null;
                fieldValue = PaperPublishedLinkDisabledType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperPublishedLinkDisabled(fieldValue);
            }
            else if ("paper_published_link_view".equals(tag)) {
                PaperPublishedLinkViewType fieldValue = null;
                fieldValue = PaperPublishedLinkViewType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperPublishedLinkView(fieldValue);
            }
            else if ("password_change".equals(tag)) {
                PasswordChangeType fieldValue = null;
                fieldValue = PasswordChangeType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.passwordChange(fieldValue);
            }
            else if ("password_reset".equals(tag)) {
                PasswordResetType fieldValue = null;
                fieldValue = PasswordResetType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.passwordReset(fieldValue);
            }
            else if ("password_reset_all".equals(tag)) {
                PasswordResetAllType fieldValue = null;
                fieldValue = PasswordResetAllType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.passwordResetAll(fieldValue);
            }
            else if ("classification_create_report".equals(tag)) {
                ClassificationCreateReportType fieldValue = null;
                fieldValue = ClassificationCreateReportType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.classificationCreateReport(fieldValue);
            }
            else if ("classification_create_report_fail".equals(tag)) {
                ClassificationCreateReportFailType fieldValue = null;
                fieldValue = ClassificationCreateReportFailType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.classificationCreateReportFail(fieldValue);
            }
            else if ("emm_create_exceptions_report".equals(tag)) {
                EmmCreateExceptionsReportType fieldValue = null;
                fieldValue = EmmCreateExceptionsReportType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.emmCreateExceptionsReport(fieldValue);
            }
            else if ("emm_create_usage_report".equals(tag)) {
                EmmCreateUsageReportType fieldValue = null;
                fieldValue = EmmCreateUsageReportType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.emmCreateUsageReport(fieldValue);
            }
            else if ("export_members_report".equals(tag)) {
                ExportMembersReportType fieldValue = null;
                fieldValue = ExportMembersReportType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.exportMembersReport(fieldValue);
            }
            else if ("export_members_report_fail".equals(tag)) {
                ExportMembersReportFailType fieldValue = null;
                fieldValue = ExportMembersReportFailType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.exportMembersReportFail(fieldValue);
            }
            else if ("external_sharing_create_report".equals(tag)) {
                ExternalSharingCreateReportType fieldValue = null;
                fieldValue = ExternalSharingCreateReportType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.externalSharingCreateReport(fieldValue);
            }
            else if ("external_sharing_report_failed".equals(tag)) {
                ExternalSharingReportFailedType fieldValue = null;
                fieldValue = ExternalSharingReportFailedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.externalSharingReportFailed(fieldValue);
            }
            else if ("no_expiration_link_gen_create_report".equals(tag)) {
                NoExpirationLinkGenCreateReportType fieldValue = null;
                fieldValue = NoExpirationLinkGenCreateReportType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.noExpirationLinkGenCreateReport(fieldValue);
            }
            else if ("no_expiration_link_gen_report_failed".equals(tag)) {
                NoExpirationLinkGenReportFailedType fieldValue = null;
                fieldValue = NoExpirationLinkGenReportFailedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.noExpirationLinkGenReportFailed(fieldValue);
            }
            else if ("no_password_link_gen_create_report".equals(tag)) {
                NoPasswordLinkGenCreateReportType fieldValue = null;
                fieldValue = NoPasswordLinkGenCreateReportType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.noPasswordLinkGenCreateReport(fieldValue);
            }
            else if ("no_password_link_gen_report_failed".equals(tag)) {
                NoPasswordLinkGenReportFailedType fieldValue = null;
                fieldValue = NoPasswordLinkGenReportFailedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.noPasswordLinkGenReportFailed(fieldValue);
            }
            else if ("no_password_link_view_create_report".equals(tag)) {
                NoPasswordLinkViewCreateReportType fieldValue = null;
                fieldValue = NoPasswordLinkViewCreateReportType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.noPasswordLinkViewCreateReport(fieldValue);
            }
            else if ("no_password_link_view_report_failed".equals(tag)) {
                NoPasswordLinkViewReportFailedType fieldValue = null;
                fieldValue = NoPasswordLinkViewReportFailedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.noPasswordLinkViewReportFailed(fieldValue);
            }
            else if ("outdated_link_view_create_report".equals(tag)) {
                OutdatedLinkViewCreateReportType fieldValue = null;
                fieldValue = OutdatedLinkViewCreateReportType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.outdatedLinkViewCreateReport(fieldValue);
            }
            else if ("outdated_link_view_report_failed".equals(tag)) {
                OutdatedLinkViewReportFailedType fieldValue = null;
                fieldValue = OutdatedLinkViewReportFailedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.outdatedLinkViewReportFailed(fieldValue);
            }
            else if ("paper_admin_export_start".equals(tag)) {
                PaperAdminExportStartType fieldValue = null;
                fieldValue = PaperAdminExportStartType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperAdminExportStart(fieldValue);
            }
            else if ("smart_sync_create_admin_privilege_report".equals(tag)) {
                SmartSyncCreateAdminPrivilegeReportType fieldValue = null;
                fieldValue = SmartSyncCreateAdminPrivilegeReportType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.smartSyncCreateAdminPrivilegeReport(fieldValue);
            }
            else if ("team_activity_create_report".equals(tag)) {
                TeamActivityCreateReportType fieldValue = null;
                fieldValue = TeamActivityCreateReportType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamActivityCreateReport(fieldValue);
            }
            else if ("team_activity_create_report_fail".equals(tag)) {
                TeamActivityCreateReportFailType fieldValue = null;
                fieldValue = TeamActivityCreateReportFailType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamActivityCreateReportFail(fieldValue);
            }
            else if ("collection_share".equals(tag)) {
                CollectionShareType fieldValue = null;
                fieldValue = CollectionShareType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.collectionShare(fieldValue);
            }
            else if ("file_transfers_file_add".equals(tag)) {
                FileTransfersFileAddType fieldValue = null;
                fieldValue = FileTransfersFileAddType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileTransfersFileAdd(fieldValue);
            }
            else if ("file_transfers_transfer_delete".equals(tag)) {
                FileTransfersTransferDeleteType fieldValue = null;
                fieldValue = FileTransfersTransferDeleteType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileTransfersTransferDelete(fieldValue);
            }
            else if ("file_transfers_transfer_download".equals(tag)) {
                FileTransfersTransferDownloadType fieldValue = null;
                fieldValue = FileTransfersTransferDownloadType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileTransfersTransferDownload(fieldValue);
            }
            else if ("file_transfers_transfer_send".equals(tag)) {
                FileTransfersTransferSendType fieldValue = null;
                fieldValue = FileTransfersTransferSendType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileTransfersTransferSend(fieldValue);
            }
            else if ("file_transfers_transfer_view".equals(tag)) {
                FileTransfersTransferViewType fieldValue = null;
                fieldValue = FileTransfersTransferViewType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileTransfersTransferView(fieldValue);
            }
            else if ("note_acl_invite_only".equals(tag)) {
                NoteAclInviteOnlyType fieldValue = null;
                fieldValue = NoteAclInviteOnlyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.noteAclInviteOnly(fieldValue);
            }
            else if ("note_acl_link".equals(tag)) {
                NoteAclLinkType fieldValue = null;
                fieldValue = NoteAclLinkType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.noteAclLink(fieldValue);
            }
            else if ("note_acl_team_link".equals(tag)) {
                NoteAclTeamLinkType fieldValue = null;
                fieldValue = NoteAclTeamLinkType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.noteAclTeamLink(fieldValue);
            }
            else if ("note_shared".equals(tag)) {
                NoteSharedType fieldValue = null;
                fieldValue = NoteSharedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.noteShared(fieldValue);
            }
            else if ("note_share_receive".equals(tag)) {
                NoteShareReceiveType fieldValue = null;
                fieldValue = NoteShareReceiveType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.noteShareReceive(fieldValue);
            }
            else if ("open_note_shared".equals(tag)) {
                OpenNoteSharedType fieldValue = null;
                fieldValue = OpenNoteSharedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.openNoteShared(fieldValue);
            }
            else if ("sf_add_group".equals(tag)) {
                SfAddGroupType fieldValue = null;
                fieldValue = SfAddGroupType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sfAddGroup(fieldValue);
            }
            else if ("sf_allow_non_members_to_view_shared_links".equals(tag)) {
                SfAllowNonMembersToViewSharedLinksType fieldValue = null;
                fieldValue = SfAllowNonMembersToViewSharedLinksType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sfAllowNonMembersToViewSharedLinks(fieldValue);
            }
            else if ("sf_external_invite_warn".equals(tag)) {
                SfExternalInviteWarnType fieldValue = null;
                fieldValue = SfExternalInviteWarnType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sfExternalInviteWarn(fieldValue);
            }
            else if ("sf_fb_invite".equals(tag)) {
                SfFbInviteType fieldValue = null;
                fieldValue = SfFbInviteType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sfFbInvite(fieldValue);
            }
            else if ("sf_fb_invite_change_role".equals(tag)) {
                SfFbInviteChangeRoleType fieldValue = null;
                fieldValue = SfFbInviteChangeRoleType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sfFbInviteChangeRole(fieldValue);
            }
            else if ("sf_fb_uninvite".equals(tag)) {
                SfFbUninviteType fieldValue = null;
                fieldValue = SfFbUninviteType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sfFbUninvite(fieldValue);
            }
            else if ("sf_invite_group".equals(tag)) {
                SfInviteGroupType fieldValue = null;
                fieldValue = SfInviteGroupType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sfInviteGroup(fieldValue);
            }
            else if ("sf_team_grant_access".equals(tag)) {
                SfTeamGrantAccessType fieldValue = null;
                fieldValue = SfTeamGrantAccessType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sfTeamGrantAccess(fieldValue);
            }
            else if ("sf_team_invite".equals(tag)) {
                SfTeamInviteType fieldValue = null;
                fieldValue = SfTeamInviteType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sfTeamInvite(fieldValue);
            }
            else if ("sf_team_invite_change_role".equals(tag)) {
                SfTeamInviteChangeRoleType fieldValue = null;
                fieldValue = SfTeamInviteChangeRoleType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sfTeamInviteChangeRole(fieldValue);
            }
            else if ("sf_team_join".equals(tag)) {
                SfTeamJoinType fieldValue = null;
                fieldValue = SfTeamJoinType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sfTeamJoin(fieldValue);
            }
            else if ("sf_team_join_from_oob_link".equals(tag)) {
                SfTeamJoinFromOobLinkType fieldValue = null;
                fieldValue = SfTeamJoinFromOobLinkType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sfTeamJoinFromOobLink(fieldValue);
            }
            else if ("sf_team_uninvite".equals(tag)) {
                SfTeamUninviteType fieldValue = null;
                fieldValue = SfTeamUninviteType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sfTeamUninvite(fieldValue);
            }
            else if ("shared_content_add_invitees".equals(tag)) {
                SharedContentAddInviteesType fieldValue = null;
                fieldValue = SharedContentAddInviteesType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentAddInvitees(fieldValue);
            }
            else if ("shared_content_add_link_expiry".equals(tag)) {
                SharedContentAddLinkExpiryType fieldValue = null;
                fieldValue = SharedContentAddLinkExpiryType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentAddLinkExpiry(fieldValue);
            }
            else if ("shared_content_add_link_password".equals(tag)) {
                SharedContentAddLinkPasswordType fieldValue = null;
                fieldValue = SharedContentAddLinkPasswordType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentAddLinkPassword(fieldValue);
            }
            else if ("shared_content_add_member".equals(tag)) {
                SharedContentAddMemberType fieldValue = null;
                fieldValue = SharedContentAddMemberType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentAddMember(fieldValue);
            }
            else if ("shared_content_change_downloads_policy".equals(tag)) {
                SharedContentChangeDownloadsPolicyType fieldValue = null;
                fieldValue = SharedContentChangeDownloadsPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentChangeDownloadsPolicy(fieldValue);
            }
            else if ("shared_content_change_invitee_role".equals(tag)) {
                SharedContentChangeInviteeRoleType fieldValue = null;
                fieldValue = SharedContentChangeInviteeRoleType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentChangeInviteeRole(fieldValue);
            }
            else if ("shared_content_change_link_audience".equals(tag)) {
                SharedContentChangeLinkAudienceType fieldValue = null;
                fieldValue = SharedContentChangeLinkAudienceType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentChangeLinkAudience(fieldValue);
            }
            else if ("shared_content_change_link_expiry".equals(tag)) {
                SharedContentChangeLinkExpiryType fieldValue = null;
                fieldValue = SharedContentChangeLinkExpiryType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentChangeLinkExpiry(fieldValue);
            }
            else if ("shared_content_change_link_password".equals(tag)) {
                SharedContentChangeLinkPasswordType fieldValue = null;
                fieldValue = SharedContentChangeLinkPasswordType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentChangeLinkPassword(fieldValue);
            }
            else if ("shared_content_change_member_role".equals(tag)) {
                SharedContentChangeMemberRoleType fieldValue = null;
                fieldValue = SharedContentChangeMemberRoleType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentChangeMemberRole(fieldValue);
            }
            else if ("shared_content_change_viewer_info_policy".equals(tag)) {
                SharedContentChangeViewerInfoPolicyType fieldValue = null;
                fieldValue = SharedContentChangeViewerInfoPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentChangeViewerInfoPolicy(fieldValue);
            }
            else if ("shared_content_claim_invitation".equals(tag)) {
                SharedContentClaimInvitationType fieldValue = null;
                fieldValue = SharedContentClaimInvitationType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentClaimInvitation(fieldValue);
            }
            else if ("shared_content_copy".equals(tag)) {
                SharedContentCopyType fieldValue = null;
                fieldValue = SharedContentCopyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentCopy(fieldValue);
            }
            else if ("shared_content_download".equals(tag)) {
                SharedContentDownloadType fieldValue = null;
                fieldValue = SharedContentDownloadType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentDownload(fieldValue);
            }
            else if ("shared_content_relinquish_membership".equals(tag)) {
                SharedContentRelinquishMembershipType fieldValue = null;
                fieldValue = SharedContentRelinquishMembershipType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentRelinquishMembership(fieldValue);
            }
            else if ("shared_content_remove_invitees".equals(tag)) {
                SharedContentRemoveInviteesType fieldValue = null;
                fieldValue = SharedContentRemoveInviteesType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentRemoveInvitees(fieldValue);
            }
            else if ("shared_content_remove_link_expiry".equals(tag)) {
                SharedContentRemoveLinkExpiryType fieldValue = null;
                fieldValue = SharedContentRemoveLinkExpiryType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentRemoveLinkExpiry(fieldValue);
            }
            else if ("shared_content_remove_link_password".equals(tag)) {
                SharedContentRemoveLinkPasswordType fieldValue = null;
                fieldValue = SharedContentRemoveLinkPasswordType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentRemoveLinkPassword(fieldValue);
            }
            else if ("shared_content_remove_member".equals(tag)) {
                SharedContentRemoveMemberType fieldValue = null;
                fieldValue = SharedContentRemoveMemberType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentRemoveMember(fieldValue);
            }
            else if ("shared_content_request_access".equals(tag)) {
                SharedContentRequestAccessType fieldValue = null;
                fieldValue = SharedContentRequestAccessType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentRequestAccess(fieldValue);
            }
            else if ("shared_content_restore_invitees".equals(tag)) {
                SharedContentRestoreInviteesType fieldValue = null;
                fieldValue = SharedContentRestoreInviteesType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentRestoreInvitees(fieldValue);
            }
            else if ("shared_content_restore_member".equals(tag)) {
                SharedContentRestoreMemberType fieldValue = null;
                fieldValue = SharedContentRestoreMemberType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentRestoreMember(fieldValue);
            }
            else if ("shared_content_unshare".equals(tag)) {
                SharedContentUnshareType fieldValue = null;
                fieldValue = SharedContentUnshareType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentUnshare(fieldValue);
            }
            else if ("shared_content_view".equals(tag)) {
                SharedContentViewType fieldValue = null;
                fieldValue = SharedContentViewType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedContentView(fieldValue);
            }
            else if ("shared_folder_change_link_policy".equals(tag)) {
                SharedFolderChangeLinkPolicyType fieldValue = null;
                fieldValue = SharedFolderChangeLinkPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedFolderChangeLinkPolicy(fieldValue);
            }
            else if ("shared_folder_change_members_inheritance_policy".equals(tag)) {
                SharedFolderChangeMembersInheritancePolicyType fieldValue = null;
                fieldValue = SharedFolderChangeMembersInheritancePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedFolderChangeMembersInheritancePolicy(fieldValue);
            }
            else if ("shared_folder_change_members_management_policy".equals(tag)) {
                SharedFolderChangeMembersManagementPolicyType fieldValue = null;
                fieldValue = SharedFolderChangeMembersManagementPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedFolderChangeMembersManagementPolicy(fieldValue);
            }
            else if ("shared_folder_change_members_policy".equals(tag)) {
                SharedFolderChangeMembersPolicyType fieldValue = null;
                fieldValue = SharedFolderChangeMembersPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedFolderChangeMembersPolicy(fieldValue);
            }
            else if ("shared_folder_create".equals(tag)) {
                SharedFolderCreateType fieldValue = null;
                fieldValue = SharedFolderCreateType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedFolderCreate(fieldValue);
            }
            else if ("shared_folder_decline_invitation".equals(tag)) {
                SharedFolderDeclineInvitationType fieldValue = null;
                fieldValue = SharedFolderDeclineInvitationType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedFolderDeclineInvitation(fieldValue);
            }
            else if ("shared_folder_mount".equals(tag)) {
                SharedFolderMountType fieldValue = null;
                fieldValue = SharedFolderMountType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedFolderMount(fieldValue);
            }
            else if ("shared_folder_nest".equals(tag)) {
                SharedFolderNestType fieldValue = null;
                fieldValue = SharedFolderNestType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedFolderNest(fieldValue);
            }
            else if ("shared_folder_transfer_ownership".equals(tag)) {
                SharedFolderTransferOwnershipType fieldValue = null;
                fieldValue = SharedFolderTransferOwnershipType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedFolderTransferOwnership(fieldValue);
            }
            else if ("shared_folder_unmount".equals(tag)) {
                SharedFolderUnmountType fieldValue = null;
                fieldValue = SharedFolderUnmountType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedFolderUnmount(fieldValue);
            }
            else if ("shared_link_add_expiry".equals(tag)) {
                SharedLinkAddExpiryType fieldValue = null;
                fieldValue = SharedLinkAddExpiryType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedLinkAddExpiry(fieldValue);
            }
            else if ("shared_link_change_expiry".equals(tag)) {
                SharedLinkChangeExpiryType fieldValue = null;
                fieldValue = SharedLinkChangeExpiryType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedLinkChangeExpiry(fieldValue);
            }
            else if ("shared_link_change_visibility".equals(tag)) {
                SharedLinkChangeVisibilityType fieldValue = null;
                fieldValue = SharedLinkChangeVisibilityType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedLinkChangeVisibility(fieldValue);
            }
            else if ("shared_link_copy".equals(tag)) {
                SharedLinkCopyType fieldValue = null;
                fieldValue = SharedLinkCopyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedLinkCopy(fieldValue);
            }
            else if ("shared_link_create".equals(tag)) {
                SharedLinkCreateType fieldValue = null;
                fieldValue = SharedLinkCreateType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedLinkCreate(fieldValue);
            }
            else if ("shared_link_disable".equals(tag)) {
                SharedLinkDisableType fieldValue = null;
                fieldValue = SharedLinkDisableType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedLinkDisable(fieldValue);
            }
            else if ("shared_link_download".equals(tag)) {
                SharedLinkDownloadType fieldValue = null;
                fieldValue = SharedLinkDownloadType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedLinkDownload(fieldValue);
            }
            else if ("shared_link_remove_expiry".equals(tag)) {
                SharedLinkRemoveExpiryType fieldValue = null;
                fieldValue = SharedLinkRemoveExpiryType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedLinkRemoveExpiry(fieldValue);
            }
            else if ("shared_link_settings_add_expiration".equals(tag)) {
                SharedLinkSettingsAddExpirationType fieldValue = null;
                fieldValue = SharedLinkSettingsAddExpirationType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedLinkSettingsAddExpiration(fieldValue);
            }
            else if ("shared_link_settings_add_password".equals(tag)) {
                SharedLinkSettingsAddPasswordType fieldValue = null;
                fieldValue = SharedLinkSettingsAddPasswordType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedLinkSettingsAddPassword(fieldValue);
            }
            else if ("shared_link_settings_allow_download_disabled".equals(tag)) {
                SharedLinkSettingsAllowDownloadDisabledType fieldValue = null;
                fieldValue = SharedLinkSettingsAllowDownloadDisabledType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedLinkSettingsAllowDownloadDisabled(fieldValue);
            }
            else if ("shared_link_settings_allow_download_enabled".equals(tag)) {
                SharedLinkSettingsAllowDownloadEnabledType fieldValue = null;
                fieldValue = SharedLinkSettingsAllowDownloadEnabledType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedLinkSettingsAllowDownloadEnabled(fieldValue);
            }
            else if ("shared_link_settings_change_audience".equals(tag)) {
                SharedLinkSettingsChangeAudienceType fieldValue = null;
                fieldValue = SharedLinkSettingsChangeAudienceType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedLinkSettingsChangeAudience(fieldValue);
            }
            else if ("shared_link_settings_change_expiration".equals(tag)) {
                SharedLinkSettingsChangeExpirationType fieldValue = null;
                fieldValue = SharedLinkSettingsChangeExpirationType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedLinkSettingsChangeExpiration(fieldValue);
            }
            else if ("shared_link_settings_change_password".equals(tag)) {
                SharedLinkSettingsChangePasswordType fieldValue = null;
                fieldValue = SharedLinkSettingsChangePasswordType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedLinkSettingsChangePassword(fieldValue);
            }
            else if ("shared_link_settings_remove_expiration".equals(tag)) {
                SharedLinkSettingsRemoveExpirationType fieldValue = null;
                fieldValue = SharedLinkSettingsRemoveExpirationType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedLinkSettingsRemoveExpiration(fieldValue);
            }
            else if ("shared_link_settings_remove_password".equals(tag)) {
                SharedLinkSettingsRemovePasswordType fieldValue = null;
                fieldValue = SharedLinkSettingsRemovePasswordType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedLinkSettingsRemovePassword(fieldValue);
            }
            else if ("shared_link_share".equals(tag)) {
                SharedLinkShareType fieldValue = null;
                fieldValue = SharedLinkShareType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedLinkShare(fieldValue);
            }
            else if ("shared_link_view".equals(tag)) {
                SharedLinkViewType fieldValue = null;
                fieldValue = SharedLinkViewType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedLinkView(fieldValue);
            }
            else if ("shared_note_opened".equals(tag)) {
                SharedNoteOpenedType fieldValue = null;
                fieldValue = SharedNoteOpenedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharedNoteOpened(fieldValue);
            }
            else if ("shmodel_disable_downloads".equals(tag)) {
                ShmodelDisableDownloadsType fieldValue = null;
                fieldValue = ShmodelDisableDownloadsType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.shmodelDisableDownloads(fieldValue);
            }
            else if ("shmodel_enable_downloads".equals(tag)) {
                ShmodelEnableDownloadsType fieldValue = null;
                fieldValue = ShmodelEnableDownloadsType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.shmodelEnableDownloads(fieldValue);
            }
            else if ("shmodel_group_share".equals(tag)) {
                ShmodelGroupShareType fieldValue = null;
                fieldValue = ShmodelGroupShareType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.shmodelGroupShare(fieldValue);
            }
            else if ("showcase_access_granted".equals(tag)) {
                ShowcaseAccessGrantedType fieldValue = null;
                fieldValue = ShowcaseAccessGrantedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseAccessGranted(fieldValue);
            }
            else if ("showcase_add_member".equals(tag)) {
                ShowcaseAddMemberType fieldValue = null;
                fieldValue = ShowcaseAddMemberType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseAddMember(fieldValue);
            }
            else if ("showcase_archived".equals(tag)) {
                ShowcaseArchivedType fieldValue = null;
                fieldValue = ShowcaseArchivedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseArchived(fieldValue);
            }
            else if ("showcase_created".equals(tag)) {
                ShowcaseCreatedType fieldValue = null;
                fieldValue = ShowcaseCreatedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseCreated(fieldValue);
            }
            else if ("showcase_delete_comment".equals(tag)) {
                ShowcaseDeleteCommentType fieldValue = null;
                fieldValue = ShowcaseDeleteCommentType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseDeleteComment(fieldValue);
            }
            else if ("showcase_edited".equals(tag)) {
                ShowcaseEditedType fieldValue = null;
                fieldValue = ShowcaseEditedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseEdited(fieldValue);
            }
            else if ("showcase_edit_comment".equals(tag)) {
                ShowcaseEditCommentType fieldValue = null;
                fieldValue = ShowcaseEditCommentType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseEditComment(fieldValue);
            }
            else if ("showcase_file_added".equals(tag)) {
                ShowcaseFileAddedType fieldValue = null;
                fieldValue = ShowcaseFileAddedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseFileAdded(fieldValue);
            }
            else if ("showcase_file_download".equals(tag)) {
                ShowcaseFileDownloadType fieldValue = null;
                fieldValue = ShowcaseFileDownloadType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseFileDownload(fieldValue);
            }
            else if ("showcase_file_removed".equals(tag)) {
                ShowcaseFileRemovedType fieldValue = null;
                fieldValue = ShowcaseFileRemovedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseFileRemoved(fieldValue);
            }
            else if ("showcase_file_view".equals(tag)) {
                ShowcaseFileViewType fieldValue = null;
                fieldValue = ShowcaseFileViewType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseFileView(fieldValue);
            }
            else if ("showcase_permanently_deleted".equals(tag)) {
                ShowcasePermanentlyDeletedType fieldValue = null;
                fieldValue = ShowcasePermanentlyDeletedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcasePermanentlyDeleted(fieldValue);
            }
            else if ("showcase_post_comment".equals(tag)) {
                ShowcasePostCommentType fieldValue = null;
                fieldValue = ShowcasePostCommentType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcasePostComment(fieldValue);
            }
            else if ("showcase_remove_member".equals(tag)) {
                ShowcaseRemoveMemberType fieldValue = null;
                fieldValue = ShowcaseRemoveMemberType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseRemoveMember(fieldValue);
            }
            else if ("showcase_renamed".equals(tag)) {
                ShowcaseRenamedType fieldValue = null;
                fieldValue = ShowcaseRenamedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseRenamed(fieldValue);
            }
            else if ("showcase_request_access".equals(tag)) {
                ShowcaseRequestAccessType fieldValue = null;
                fieldValue = ShowcaseRequestAccessType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseRequestAccess(fieldValue);
            }
            else if ("showcase_resolve_comment".equals(tag)) {
                ShowcaseResolveCommentType fieldValue = null;
                fieldValue = ShowcaseResolveCommentType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseResolveComment(fieldValue);
            }
            else if ("showcase_restored".equals(tag)) {
                ShowcaseRestoredType fieldValue = null;
                fieldValue = ShowcaseRestoredType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseRestored(fieldValue);
            }
            else if ("showcase_trashed".equals(tag)) {
                ShowcaseTrashedType fieldValue = null;
                fieldValue = ShowcaseTrashedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseTrashed(fieldValue);
            }
            else if ("showcase_trashed_deprecated".equals(tag)) {
                ShowcaseTrashedDeprecatedType fieldValue = null;
                fieldValue = ShowcaseTrashedDeprecatedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseTrashedDeprecated(fieldValue);
            }
            else if ("showcase_unresolve_comment".equals(tag)) {
                ShowcaseUnresolveCommentType fieldValue = null;
                fieldValue = ShowcaseUnresolveCommentType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseUnresolveComment(fieldValue);
            }
            else if ("showcase_untrashed".equals(tag)) {
                ShowcaseUntrashedType fieldValue = null;
                fieldValue = ShowcaseUntrashedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseUntrashed(fieldValue);
            }
            else if ("showcase_untrashed_deprecated".equals(tag)) {
                ShowcaseUntrashedDeprecatedType fieldValue = null;
                fieldValue = ShowcaseUntrashedDeprecatedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseUntrashedDeprecated(fieldValue);
            }
            else if ("showcase_view".equals(tag)) {
                ShowcaseViewType fieldValue = null;
                fieldValue = ShowcaseViewType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseView(fieldValue);
            }
            else if ("sso_add_cert".equals(tag)) {
                SsoAddCertType fieldValue = null;
                fieldValue = SsoAddCertType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.ssoAddCert(fieldValue);
            }
            else if ("sso_add_login_url".equals(tag)) {
                SsoAddLoginUrlType fieldValue = null;
                fieldValue = SsoAddLoginUrlType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.ssoAddLoginUrl(fieldValue);
            }
            else if ("sso_add_logout_url".equals(tag)) {
                SsoAddLogoutUrlType fieldValue = null;
                fieldValue = SsoAddLogoutUrlType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.ssoAddLogoutUrl(fieldValue);
            }
            else if ("sso_change_cert".equals(tag)) {
                SsoChangeCertType fieldValue = null;
                fieldValue = SsoChangeCertType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.ssoChangeCert(fieldValue);
            }
            else if ("sso_change_login_url".equals(tag)) {
                SsoChangeLoginUrlType fieldValue = null;
                fieldValue = SsoChangeLoginUrlType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.ssoChangeLoginUrl(fieldValue);
            }
            else if ("sso_change_logout_url".equals(tag)) {
                SsoChangeLogoutUrlType fieldValue = null;
                fieldValue = SsoChangeLogoutUrlType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.ssoChangeLogoutUrl(fieldValue);
            }
            else if ("sso_change_saml_identity_mode".equals(tag)) {
                SsoChangeSamlIdentityModeType fieldValue = null;
                fieldValue = SsoChangeSamlIdentityModeType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.ssoChangeSamlIdentityMode(fieldValue);
            }
            else if ("sso_remove_cert".equals(tag)) {
                SsoRemoveCertType fieldValue = null;
                fieldValue = SsoRemoveCertType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.ssoRemoveCert(fieldValue);
            }
            else if ("sso_remove_login_url".equals(tag)) {
                SsoRemoveLoginUrlType fieldValue = null;
                fieldValue = SsoRemoveLoginUrlType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.ssoRemoveLoginUrl(fieldValue);
            }
            else if ("sso_remove_logout_url".equals(tag)) {
                SsoRemoveLogoutUrlType fieldValue = null;
                fieldValue = SsoRemoveLogoutUrlType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.ssoRemoveLogoutUrl(fieldValue);
            }
            else if ("team_folder_change_status".equals(tag)) {
                TeamFolderChangeStatusType fieldValue = null;
                fieldValue = TeamFolderChangeStatusType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamFolderChangeStatus(fieldValue);
            }
            else if ("team_folder_create".equals(tag)) {
                TeamFolderCreateType fieldValue = null;
                fieldValue = TeamFolderCreateType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamFolderCreate(fieldValue);
            }
            else if ("team_folder_downgrade".equals(tag)) {
                TeamFolderDowngradeType fieldValue = null;
                fieldValue = TeamFolderDowngradeType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamFolderDowngrade(fieldValue);
            }
            else if ("team_folder_permanently_delete".equals(tag)) {
                TeamFolderPermanentlyDeleteType fieldValue = null;
                fieldValue = TeamFolderPermanentlyDeleteType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamFolderPermanentlyDelete(fieldValue);
            }
            else if ("team_folder_rename".equals(tag)) {
                TeamFolderRenameType fieldValue = null;
                fieldValue = TeamFolderRenameType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamFolderRename(fieldValue);
            }
            else if ("team_selective_sync_settings_changed".equals(tag)) {
                TeamSelectiveSyncSettingsChangedType fieldValue = null;
                fieldValue = TeamSelectiveSyncSettingsChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamSelectiveSyncSettingsChanged(fieldValue);
            }
            else if ("account_capture_change_policy".equals(tag)) {
                AccountCaptureChangePolicyType fieldValue = null;
                fieldValue = AccountCaptureChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.accountCaptureChangePolicy(fieldValue);
            }
            else if ("admin_email_reminders_changed".equals(tag)) {
                AdminEmailRemindersChangedType fieldValue = null;
                fieldValue = AdminEmailRemindersChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.adminEmailRemindersChanged(fieldValue);
            }
            else if ("allow_download_disabled".equals(tag)) {
                AllowDownloadDisabledType fieldValue = null;
                fieldValue = AllowDownloadDisabledType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.allowDownloadDisabled(fieldValue);
            }
            else if ("allow_download_enabled".equals(tag)) {
                AllowDownloadEnabledType fieldValue = null;
                fieldValue = AllowDownloadEnabledType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.allowDownloadEnabled(fieldValue);
            }
            else if ("app_permissions_changed".equals(tag)) {
                AppPermissionsChangedType fieldValue = null;
                fieldValue = AppPermissionsChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.appPermissionsChanged(fieldValue);
            }
            else if ("camera_uploads_policy_changed".equals(tag)) {
                CameraUploadsPolicyChangedType fieldValue = null;
                fieldValue = CameraUploadsPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.cameraUploadsPolicyChanged(fieldValue);
            }
            else if ("capture_transcript_policy_changed".equals(tag)) {
                CaptureTranscriptPolicyChangedType fieldValue = null;
                fieldValue = CaptureTranscriptPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.captureTranscriptPolicyChanged(fieldValue);
            }
            else if ("classification_change_policy".equals(tag)) {
                ClassificationChangePolicyType fieldValue = null;
                fieldValue = ClassificationChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.classificationChangePolicy(fieldValue);
            }
            else if ("computer_backup_policy_changed".equals(tag)) {
                ComputerBackupPolicyChangedType fieldValue = null;
                fieldValue = ComputerBackupPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.computerBackupPolicyChanged(fieldValue);
            }
            else if ("content_administration_policy_changed".equals(tag)) {
                ContentAdministrationPolicyChangedType fieldValue = null;
                fieldValue = ContentAdministrationPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.contentAdministrationPolicyChanged(fieldValue);
            }
            else if ("data_placement_restriction_change_policy".equals(tag)) {
                DataPlacementRestrictionChangePolicyType fieldValue = null;
                fieldValue = DataPlacementRestrictionChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.dataPlacementRestrictionChangePolicy(fieldValue);
            }
            else if ("data_placement_restriction_satisfy_policy".equals(tag)) {
                DataPlacementRestrictionSatisfyPolicyType fieldValue = null;
                fieldValue = DataPlacementRestrictionSatisfyPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.dataPlacementRestrictionSatisfyPolicy(fieldValue);
            }
            else if ("device_approvals_add_exception".equals(tag)) {
                DeviceApprovalsAddExceptionType fieldValue = null;
                fieldValue = DeviceApprovalsAddExceptionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.deviceApprovalsAddException(fieldValue);
            }
            else if ("device_approvals_change_desktop_policy".equals(tag)) {
                DeviceApprovalsChangeDesktopPolicyType fieldValue = null;
                fieldValue = DeviceApprovalsChangeDesktopPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.deviceApprovalsChangeDesktopPolicy(fieldValue);
            }
            else if ("device_approvals_change_mobile_policy".equals(tag)) {
                DeviceApprovalsChangeMobilePolicyType fieldValue = null;
                fieldValue = DeviceApprovalsChangeMobilePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.deviceApprovalsChangeMobilePolicy(fieldValue);
            }
            else if ("device_approvals_change_overage_action".equals(tag)) {
                DeviceApprovalsChangeOverageActionType fieldValue = null;
                fieldValue = DeviceApprovalsChangeOverageActionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.deviceApprovalsChangeOverageAction(fieldValue);
            }
            else if ("device_approvals_change_unlink_action".equals(tag)) {
                DeviceApprovalsChangeUnlinkActionType fieldValue = null;
                fieldValue = DeviceApprovalsChangeUnlinkActionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.deviceApprovalsChangeUnlinkAction(fieldValue);
            }
            else if ("device_approvals_remove_exception".equals(tag)) {
                DeviceApprovalsRemoveExceptionType fieldValue = null;
                fieldValue = DeviceApprovalsRemoveExceptionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.deviceApprovalsRemoveException(fieldValue);
            }
            else if ("directory_restrictions_add_members".equals(tag)) {
                DirectoryRestrictionsAddMembersType fieldValue = null;
                fieldValue = DirectoryRestrictionsAddMembersType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.directoryRestrictionsAddMembers(fieldValue);
            }
            else if ("directory_restrictions_remove_members".equals(tag)) {
                DirectoryRestrictionsRemoveMembersType fieldValue = null;
                fieldValue = DirectoryRestrictionsRemoveMembersType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.directoryRestrictionsRemoveMembers(fieldValue);
            }
            else if ("dropbox_passwords_policy_changed".equals(tag)) {
                DropboxPasswordsPolicyChangedType fieldValue = null;
                fieldValue = DropboxPasswordsPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.dropboxPasswordsPolicyChanged(fieldValue);
            }
            else if ("email_ingest_policy_changed".equals(tag)) {
                EmailIngestPolicyChangedType fieldValue = null;
                fieldValue = EmailIngestPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.emailIngestPolicyChanged(fieldValue);
            }
            else if ("emm_add_exception".equals(tag)) {
                EmmAddExceptionType fieldValue = null;
                fieldValue = EmmAddExceptionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.emmAddException(fieldValue);
            }
            else if ("emm_change_policy".equals(tag)) {
                EmmChangePolicyType fieldValue = null;
                fieldValue = EmmChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.emmChangePolicy(fieldValue);
            }
            else if ("emm_remove_exception".equals(tag)) {
                EmmRemoveExceptionType fieldValue = null;
                fieldValue = EmmRemoveExceptionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.emmRemoveException(fieldValue);
            }
            else if ("extended_version_history_change_policy".equals(tag)) {
                ExtendedVersionHistoryChangePolicyType fieldValue = null;
                fieldValue = ExtendedVersionHistoryChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.extendedVersionHistoryChangePolicy(fieldValue);
            }
            else if ("external_drive_backup_policy_changed".equals(tag)) {
                ExternalDriveBackupPolicyChangedType fieldValue = null;
                fieldValue = ExternalDriveBackupPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.externalDriveBackupPolicyChanged(fieldValue);
            }
            else if ("file_comments_change_policy".equals(tag)) {
                FileCommentsChangePolicyType fieldValue = null;
                fieldValue = FileCommentsChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileCommentsChangePolicy(fieldValue);
            }
            else if ("file_locking_policy_changed".equals(tag)) {
                FileLockingPolicyChangedType fieldValue = null;
                fieldValue = FileLockingPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileLockingPolicyChanged(fieldValue);
            }
            else if ("file_provider_migration_policy_changed".equals(tag)) {
                FileProviderMigrationPolicyChangedType fieldValue = null;
                fieldValue = FileProviderMigrationPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileProviderMigrationPolicyChanged(fieldValue);
            }
            else if ("file_requests_change_policy".equals(tag)) {
                FileRequestsChangePolicyType fieldValue = null;
                fieldValue = FileRequestsChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileRequestsChangePolicy(fieldValue);
            }
            else if ("file_requests_emails_enabled".equals(tag)) {
                FileRequestsEmailsEnabledType fieldValue = null;
                fieldValue = FileRequestsEmailsEnabledType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileRequestsEmailsEnabled(fieldValue);
            }
            else if ("file_requests_emails_restricted_to_team_only".equals(tag)) {
                FileRequestsEmailsRestrictedToTeamOnlyType fieldValue = null;
                fieldValue = FileRequestsEmailsRestrictedToTeamOnlyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileRequestsEmailsRestrictedToTeamOnly(fieldValue);
            }
            else if ("file_transfers_policy_changed".equals(tag)) {
                FileTransfersPolicyChangedType fieldValue = null;
                fieldValue = FileTransfersPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.fileTransfersPolicyChanged(fieldValue);
            }
            else if ("google_sso_change_policy".equals(tag)) {
                GoogleSsoChangePolicyType fieldValue = null;
                fieldValue = GoogleSsoChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.googleSsoChangePolicy(fieldValue);
            }
            else if ("group_user_management_change_policy".equals(tag)) {
                GroupUserManagementChangePolicyType fieldValue = null;
                fieldValue = GroupUserManagementChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.groupUserManagementChangePolicy(fieldValue);
            }
            else if ("integration_policy_changed".equals(tag)) {
                IntegrationPolicyChangedType fieldValue = null;
                fieldValue = IntegrationPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.integrationPolicyChanged(fieldValue);
            }
            else if ("invite_acceptance_email_policy_changed".equals(tag)) {
                InviteAcceptanceEmailPolicyChangedType fieldValue = null;
                fieldValue = InviteAcceptanceEmailPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.inviteAcceptanceEmailPolicyChanged(fieldValue);
            }
            else if ("member_requests_change_policy".equals(tag)) {
                MemberRequestsChangePolicyType fieldValue = null;
                fieldValue = MemberRequestsChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberRequestsChangePolicy(fieldValue);
            }
            else if ("member_send_invite_policy_changed".equals(tag)) {
                MemberSendInvitePolicyChangedType fieldValue = null;
                fieldValue = MemberSendInvitePolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberSendInvitePolicyChanged(fieldValue);
            }
            else if ("member_space_limits_add_exception".equals(tag)) {
                MemberSpaceLimitsAddExceptionType fieldValue = null;
                fieldValue = MemberSpaceLimitsAddExceptionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberSpaceLimitsAddException(fieldValue);
            }
            else if ("member_space_limits_change_caps_type_policy".equals(tag)) {
                MemberSpaceLimitsChangeCapsTypePolicyType fieldValue = null;
                fieldValue = MemberSpaceLimitsChangeCapsTypePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberSpaceLimitsChangeCapsTypePolicy(fieldValue);
            }
            else if ("member_space_limits_change_policy".equals(tag)) {
                MemberSpaceLimitsChangePolicyType fieldValue = null;
                fieldValue = MemberSpaceLimitsChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberSpaceLimitsChangePolicy(fieldValue);
            }
            else if ("member_space_limits_remove_exception".equals(tag)) {
                MemberSpaceLimitsRemoveExceptionType fieldValue = null;
                fieldValue = MemberSpaceLimitsRemoveExceptionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberSpaceLimitsRemoveException(fieldValue);
            }
            else if ("member_suggestions_change_policy".equals(tag)) {
                MemberSuggestionsChangePolicyType fieldValue = null;
                fieldValue = MemberSuggestionsChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.memberSuggestionsChangePolicy(fieldValue);
            }
            else if ("microsoft_office_addin_change_policy".equals(tag)) {
                MicrosoftOfficeAddinChangePolicyType fieldValue = null;
                fieldValue = MicrosoftOfficeAddinChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.microsoftOfficeAddinChangePolicy(fieldValue);
            }
            else if ("network_control_change_policy".equals(tag)) {
                NetworkControlChangePolicyType fieldValue = null;
                fieldValue = NetworkControlChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.networkControlChangePolicy(fieldValue);
            }
            else if ("paper_change_deployment_policy".equals(tag)) {
                PaperChangeDeploymentPolicyType fieldValue = null;
                fieldValue = PaperChangeDeploymentPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperChangeDeploymentPolicy(fieldValue);
            }
            else if ("paper_change_member_link_policy".equals(tag)) {
                PaperChangeMemberLinkPolicyType fieldValue = null;
                fieldValue = PaperChangeMemberLinkPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperChangeMemberLinkPolicy(fieldValue);
            }
            else if ("paper_change_member_policy".equals(tag)) {
                PaperChangeMemberPolicyType fieldValue = null;
                fieldValue = PaperChangeMemberPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperChangeMemberPolicy(fieldValue);
            }
            else if ("paper_change_policy".equals(tag)) {
                PaperChangePolicyType fieldValue = null;
                fieldValue = PaperChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperChangePolicy(fieldValue);
            }
            else if ("paper_default_folder_policy_changed".equals(tag)) {
                PaperDefaultFolderPolicyChangedType fieldValue = null;
                fieldValue = PaperDefaultFolderPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDefaultFolderPolicyChanged(fieldValue);
            }
            else if ("paper_desktop_policy_changed".equals(tag)) {
                PaperDesktopPolicyChangedType fieldValue = null;
                fieldValue = PaperDesktopPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperDesktopPolicyChanged(fieldValue);
            }
            else if ("paper_enabled_users_group_addition".equals(tag)) {
                PaperEnabledUsersGroupAdditionType fieldValue = null;
                fieldValue = PaperEnabledUsersGroupAdditionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperEnabledUsersGroupAddition(fieldValue);
            }
            else if ("paper_enabled_users_group_removal".equals(tag)) {
                PaperEnabledUsersGroupRemovalType fieldValue = null;
                fieldValue = PaperEnabledUsersGroupRemovalType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.paperEnabledUsersGroupRemoval(fieldValue);
            }
            else if ("password_strength_requirements_change_policy".equals(tag)) {
                PasswordStrengthRequirementsChangePolicyType fieldValue = null;
                fieldValue = PasswordStrengthRequirementsChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.passwordStrengthRequirementsChangePolicy(fieldValue);
            }
            else if ("permanent_delete_change_policy".equals(tag)) {
                PermanentDeleteChangePolicyType fieldValue = null;
                fieldValue = PermanentDeleteChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.permanentDeleteChangePolicy(fieldValue);
            }
            else if ("reseller_support_change_policy".equals(tag)) {
                ResellerSupportChangePolicyType fieldValue = null;
                fieldValue = ResellerSupportChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.resellerSupportChangePolicy(fieldValue);
            }
            else if ("rewind_policy_changed".equals(tag)) {
                RewindPolicyChangedType fieldValue = null;
                fieldValue = RewindPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.rewindPolicyChanged(fieldValue);
            }
            else if ("send_for_signature_policy_changed".equals(tag)) {
                SendForSignaturePolicyChangedType fieldValue = null;
                fieldValue = SendForSignaturePolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sendForSignaturePolicyChanged(fieldValue);
            }
            else if ("sharing_change_folder_join_policy".equals(tag)) {
                SharingChangeFolderJoinPolicyType fieldValue = null;
                fieldValue = SharingChangeFolderJoinPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharingChangeFolderJoinPolicy(fieldValue);
            }
            else if ("sharing_change_link_allow_change_expiration_policy".equals(tag)) {
                SharingChangeLinkAllowChangeExpirationPolicyType fieldValue = null;
                fieldValue = SharingChangeLinkAllowChangeExpirationPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharingChangeLinkAllowChangeExpirationPolicy(fieldValue);
            }
            else if ("sharing_change_link_default_expiration_policy".equals(tag)) {
                SharingChangeLinkDefaultExpirationPolicyType fieldValue = null;
                fieldValue = SharingChangeLinkDefaultExpirationPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharingChangeLinkDefaultExpirationPolicy(fieldValue);
            }
            else if ("sharing_change_link_enforce_password_policy".equals(tag)) {
                SharingChangeLinkEnforcePasswordPolicyType fieldValue = null;
                fieldValue = SharingChangeLinkEnforcePasswordPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharingChangeLinkEnforcePasswordPolicy(fieldValue);
            }
            else if ("sharing_change_link_policy".equals(tag)) {
                SharingChangeLinkPolicyType fieldValue = null;
                fieldValue = SharingChangeLinkPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharingChangeLinkPolicy(fieldValue);
            }
            else if ("sharing_change_member_policy".equals(tag)) {
                SharingChangeMemberPolicyType fieldValue = null;
                fieldValue = SharingChangeMemberPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.sharingChangeMemberPolicy(fieldValue);
            }
            else if ("showcase_change_download_policy".equals(tag)) {
                ShowcaseChangeDownloadPolicyType fieldValue = null;
                fieldValue = ShowcaseChangeDownloadPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseChangeDownloadPolicy(fieldValue);
            }
            else if ("showcase_change_enabled_policy".equals(tag)) {
                ShowcaseChangeEnabledPolicyType fieldValue = null;
                fieldValue = ShowcaseChangeEnabledPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseChangeEnabledPolicy(fieldValue);
            }
            else if ("showcase_change_external_sharing_policy".equals(tag)) {
                ShowcaseChangeExternalSharingPolicyType fieldValue = null;
                fieldValue = ShowcaseChangeExternalSharingPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.showcaseChangeExternalSharingPolicy(fieldValue);
            }
            else if ("smarter_smart_sync_policy_changed".equals(tag)) {
                SmarterSmartSyncPolicyChangedType fieldValue = null;
                fieldValue = SmarterSmartSyncPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.smarterSmartSyncPolicyChanged(fieldValue);
            }
            else if ("smart_sync_change_policy".equals(tag)) {
                SmartSyncChangePolicyType fieldValue = null;
                fieldValue = SmartSyncChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.smartSyncChangePolicy(fieldValue);
            }
            else if ("smart_sync_not_opt_out".equals(tag)) {
                SmartSyncNotOptOutType fieldValue = null;
                fieldValue = SmartSyncNotOptOutType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.smartSyncNotOptOut(fieldValue);
            }
            else if ("smart_sync_opt_out".equals(tag)) {
                SmartSyncOptOutType fieldValue = null;
                fieldValue = SmartSyncOptOutType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.smartSyncOptOut(fieldValue);
            }
            else if ("sso_change_policy".equals(tag)) {
                SsoChangePolicyType fieldValue = null;
                fieldValue = SsoChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.ssoChangePolicy(fieldValue);
            }
            else if ("team_branding_policy_changed".equals(tag)) {
                TeamBrandingPolicyChangedType fieldValue = null;
                fieldValue = TeamBrandingPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamBrandingPolicyChanged(fieldValue);
            }
            else if ("team_extensions_policy_changed".equals(tag)) {
                TeamExtensionsPolicyChangedType fieldValue = null;
                fieldValue = TeamExtensionsPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamExtensionsPolicyChanged(fieldValue);
            }
            else if ("team_selective_sync_policy_changed".equals(tag)) {
                TeamSelectiveSyncPolicyChangedType fieldValue = null;
                fieldValue = TeamSelectiveSyncPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamSelectiveSyncPolicyChanged(fieldValue);
            }
            else if ("team_sharing_whitelist_subjects_changed".equals(tag)) {
                TeamSharingWhitelistSubjectsChangedType fieldValue = null;
                fieldValue = TeamSharingWhitelistSubjectsChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamSharingWhitelistSubjectsChanged(fieldValue);
            }
            else if ("tfa_add_exception".equals(tag)) {
                TfaAddExceptionType fieldValue = null;
                fieldValue = TfaAddExceptionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.tfaAddException(fieldValue);
            }
            else if ("tfa_change_policy".equals(tag)) {
                TfaChangePolicyType fieldValue = null;
                fieldValue = TfaChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.tfaChangePolicy(fieldValue);
            }
            else if ("tfa_remove_exception".equals(tag)) {
                TfaRemoveExceptionType fieldValue = null;
                fieldValue = TfaRemoveExceptionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.tfaRemoveException(fieldValue);
            }
            else if ("two_account_change_policy".equals(tag)) {
                TwoAccountChangePolicyType fieldValue = null;
                fieldValue = TwoAccountChangePolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.twoAccountChangePolicy(fieldValue);
            }
            else if ("viewer_info_policy_changed".equals(tag)) {
                ViewerInfoPolicyChangedType fieldValue = null;
                fieldValue = ViewerInfoPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.viewerInfoPolicyChanged(fieldValue);
            }
            else if ("watermarking_policy_changed".equals(tag)) {
                WatermarkingPolicyChangedType fieldValue = null;
                fieldValue = WatermarkingPolicyChangedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.watermarkingPolicyChanged(fieldValue);
            }
            else if ("web_sessions_change_active_session_limit".equals(tag)) {
                WebSessionsChangeActiveSessionLimitType fieldValue = null;
                fieldValue = WebSessionsChangeActiveSessionLimitType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.webSessionsChangeActiveSessionLimit(fieldValue);
            }
            else if ("web_sessions_change_fixed_length_policy".equals(tag)) {
                WebSessionsChangeFixedLengthPolicyType fieldValue = null;
                fieldValue = WebSessionsChangeFixedLengthPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.webSessionsChangeFixedLengthPolicy(fieldValue);
            }
            else if ("web_sessions_change_idle_length_policy".equals(tag)) {
                WebSessionsChangeIdleLengthPolicyType fieldValue = null;
                fieldValue = WebSessionsChangeIdleLengthPolicyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.webSessionsChangeIdleLengthPolicy(fieldValue);
            }
            else if ("data_residency_migration_request_successful".equals(tag)) {
                DataResidencyMigrationRequestSuccessfulType fieldValue = null;
                fieldValue = DataResidencyMigrationRequestSuccessfulType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.dataResidencyMigrationRequestSuccessful(fieldValue);
            }
            else if ("data_residency_migration_request_unsuccessful".equals(tag)) {
                DataResidencyMigrationRequestUnsuccessfulType fieldValue = null;
                fieldValue = DataResidencyMigrationRequestUnsuccessfulType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.dataResidencyMigrationRequestUnsuccessful(fieldValue);
            }
            else if ("team_merge_from".equals(tag)) {
                TeamMergeFromType fieldValue = null;
                fieldValue = TeamMergeFromType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamMergeFrom(fieldValue);
            }
            else if ("team_merge_to".equals(tag)) {
                TeamMergeToType fieldValue = null;
                fieldValue = TeamMergeToType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamMergeTo(fieldValue);
            }
            else if ("team_profile_add_background".equals(tag)) {
                TeamProfileAddBackgroundType fieldValue = null;
                fieldValue = TeamProfileAddBackgroundType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamProfileAddBackground(fieldValue);
            }
            else if ("team_profile_add_logo".equals(tag)) {
                TeamProfileAddLogoType fieldValue = null;
                fieldValue = TeamProfileAddLogoType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamProfileAddLogo(fieldValue);
            }
            else if ("team_profile_change_background".equals(tag)) {
                TeamProfileChangeBackgroundType fieldValue = null;
                fieldValue = TeamProfileChangeBackgroundType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamProfileChangeBackground(fieldValue);
            }
            else if ("team_profile_change_default_language".equals(tag)) {
                TeamProfileChangeDefaultLanguageType fieldValue = null;
                fieldValue = TeamProfileChangeDefaultLanguageType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamProfileChangeDefaultLanguage(fieldValue);
            }
            else if ("team_profile_change_logo".equals(tag)) {
                TeamProfileChangeLogoType fieldValue = null;
                fieldValue = TeamProfileChangeLogoType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamProfileChangeLogo(fieldValue);
            }
            else if ("team_profile_change_name".equals(tag)) {
                TeamProfileChangeNameType fieldValue = null;
                fieldValue = TeamProfileChangeNameType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamProfileChangeName(fieldValue);
            }
            else if ("team_profile_remove_background".equals(tag)) {
                TeamProfileRemoveBackgroundType fieldValue = null;
                fieldValue = TeamProfileRemoveBackgroundType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamProfileRemoveBackground(fieldValue);
            }
            else if ("team_profile_remove_logo".equals(tag)) {
                TeamProfileRemoveLogoType fieldValue = null;
                fieldValue = TeamProfileRemoveLogoType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamProfileRemoveLogo(fieldValue);
            }
            else if ("tfa_add_backup_phone".equals(tag)) {
                TfaAddBackupPhoneType fieldValue = null;
                fieldValue = TfaAddBackupPhoneType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.tfaAddBackupPhone(fieldValue);
            }
            else if ("tfa_add_security_key".equals(tag)) {
                TfaAddSecurityKeyType fieldValue = null;
                fieldValue = TfaAddSecurityKeyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.tfaAddSecurityKey(fieldValue);
            }
            else if ("tfa_change_backup_phone".equals(tag)) {
                TfaChangeBackupPhoneType fieldValue = null;
                fieldValue = TfaChangeBackupPhoneType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.tfaChangeBackupPhone(fieldValue);
            }
            else if ("tfa_change_status".equals(tag)) {
                TfaChangeStatusType fieldValue = null;
                fieldValue = TfaChangeStatusType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.tfaChangeStatus(fieldValue);
            }
            else if ("tfa_remove_backup_phone".equals(tag)) {
                TfaRemoveBackupPhoneType fieldValue = null;
                fieldValue = TfaRemoveBackupPhoneType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.tfaRemoveBackupPhone(fieldValue);
            }
            else if ("tfa_remove_security_key".equals(tag)) {
                TfaRemoveSecurityKeyType fieldValue = null;
                fieldValue = TfaRemoveSecurityKeyType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.tfaRemoveSecurityKey(fieldValue);
            }
            else if ("tfa_reset".equals(tag)) {
                TfaResetType fieldValue = null;
                fieldValue = TfaResetType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.tfaReset(fieldValue);
            }
            else if ("changed_enterprise_admin_role".equals(tag)) {
                ChangedEnterpriseAdminRoleType fieldValue = null;
                fieldValue = ChangedEnterpriseAdminRoleType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.changedEnterpriseAdminRole(fieldValue);
            }
            else if ("changed_enterprise_connected_team_status".equals(tag)) {
                ChangedEnterpriseConnectedTeamStatusType fieldValue = null;
                fieldValue = ChangedEnterpriseConnectedTeamStatusType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.changedEnterpriseConnectedTeamStatus(fieldValue);
            }
            else if ("ended_enterprise_admin_session".equals(tag)) {
                EndedEnterpriseAdminSessionType fieldValue = null;
                fieldValue = EndedEnterpriseAdminSessionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.endedEnterpriseAdminSession(fieldValue);
            }
            else if ("ended_enterprise_admin_session_deprecated".equals(tag)) {
                EndedEnterpriseAdminSessionDeprecatedType fieldValue = null;
                fieldValue = EndedEnterpriseAdminSessionDeprecatedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.endedEnterpriseAdminSessionDeprecated(fieldValue);
            }
            else if ("enterprise_settings_locking".equals(tag)) {
                EnterpriseSettingsLockingType fieldValue = null;
                fieldValue = EnterpriseSettingsLockingType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.enterpriseSettingsLocking(fieldValue);
            }
            else if ("guest_admin_change_status".equals(tag)) {
                GuestAdminChangeStatusType fieldValue = null;
                fieldValue = GuestAdminChangeStatusType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.guestAdminChangeStatus(fieldValue);
            }
            else if ("started_enterprise_admin_session".equals(tag)) {
                StartedEnterpriseAdminSessionType fieldValue = null;
                fieldValue = StartedEnterpriseAdminSessionType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.startedEnterpriseAdminSession(fieldValue);
            }
            else if ("team_merge_request_accepted".equals(tag)) {
                TeamMergeRequestAcceptedType fieldValue = null;
                fieldValue = TeamMergeRequestAcceptedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamMergeRequestAccepted(fieldValue);
            }
            else if ("team_merge_request_accepted_shown_to_primary_team".equals(tag)) {
                TeamMergeRequestAcceptedShownToPrimaryTeamType fieldValue = null;
                fieldValue = TeamMergeRequestAcceptedShownToPrimaryTeamType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamMergeRequestAcceptedShownToPrimaryTeam(fieldValue);
            }
            else if ("team_merge_request_accepted_shown_to_secondary_team".equals(tag)) {
                TeamMergeRequestAcceptedShownToSecondaryTeamType fieldValue = null;
                fieldValue = TeamMergeRequestAcceptedShownToSecondaryTeamType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamMergeRequestAcceptedShownToSecondaryTeam(fieldValue);
            }
            else if ("team_merge_request_auto_canceled".equals(tag)) {
                TeamMergeRequestAutoCanceledType fieldValue = null;
                fieldValue = TeamMergeRequestAutoCanceledType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamMergeRequestAutoCanceled(fieldValue);
            }
            else if ("team_merge_request_canceled".equals(tag)) {
                TeamMergeRequestCanceledType fieldValue = null;
                fieldValue = TeamMergeRequestCanceledType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamMergeRequestCanceled(fieldValue);
            }
            else if ("team_merge_request_canceled_shown_to_primary_team".equals(tag)) {
                TeamMergeRequestCanceledShownToPrimaryTeamType fieldValue = null;
                fieldValue = TeamMergeRequestCanceledShownToPrimaryTeamType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamMergeRequestCanceledShownToPrimaryTeam(fieldValue);
            }
            else if ("team_merge_request_canceled_shown_to_secondary_team".equals(tag)) {
                TeamMergeRequestCanceledShownToSecondaryTeamType fieldValue = null;
                fieldValue = TeamMergeRequestCanceledShownToSecondaryTeamType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamMergeRequestCanceledShownToSecondaryTeam(fieldValue);
            }
            else if ("team_merge_request_expired".equals(tag)) {
                TeamMergeRequestExpiredType fieldValue = null;
                fieldValue = TeamMergeRequestExpiredType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamMergeRequestExpired(fieldValue);
            }
            else if ("team_merge_request_expired_shown_to_primary_team".equals(tag)) {
                TeamMergeRequestExpiredShownToPrimaryTeamType fieldValue = null;
                fieldValue = TeamMergeRequestExpiredShownToPrimaryTeamType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamMergeRequestExpiredShownToPrimaryTeam(fieldValue);
            }
            else if ("team_merge_request_expired_shown_to_secondary_team".equals(tag)) {
                TeamMergeRequestExpiredShownToSecondaryTeamType fieldValue = null;
                fieldValue = TeamMergeRequestExpiredShownToSecondaryTeamType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamMergeRequestExpiredShownToSecondaryTeam(fieldValue);
            }
            else if ("team_merge_request_rejected_shown_to_primary_team".equals(tag)) {
                TeamMergeRequestRejectedShownToPrimaryTeamType fieldValue = null;
                fieldValue = TeamMergeRequestRejectedShownToPrimaryTeamType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamMergeRequestRejectedShownToPrimaryTeam(fieldValue);
            }
            else if ("team_merge_request_rejected_shown_to_secondary_team".equals(tag)) {
                TeamMergeRequestRejectedShownToSecondaryTeamType fieldValue = null;
                fieldValue = TeamMergeRequestRejectedShownToSecondaryTeamType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamMergeRequestRejectedShownToSecondaryTeam(fieldValue);
            }
            else if ("team_merge_request_reminder".equals(tag)) {
                TeamMergeRequestReminderType fieldValue = null;
                fieldValue = TeamMergeRequestReminderType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamMergeRequestReminder(fieldValue);
            }
            else if ("team_merge_request_reminder_shown_to_primary_team".equals(tag)) {
                TeamMergeRequestReminderShownToPrimaryTeamType fieldValue = null;
                fieldValue = TeamMergeRequestReminderShownToPrimaryTeamType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamMergeRequestReminderShownToPrimaryTeam(fieldValue);
            }
            else if ("team_merge_request_reminder_shown_to_secondary_team".equals(tag)) {
                TeamMergeRequestReminderShownToSecondaryTeamType fieldValue = null;
                fieldValue = TeamMergeRequestReminderShownToSecondaryTeamType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamMergeRequestReminderShownToSecondaryTeam(fieldValue);
            }
            else if ("team_merge_request_revoked".equals(tag)) {
                TeamMergeRequestRevokedType fieldValue = null;
                fieldValue = TeamMergeRequestRevokedType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamMergeRequestRevoked(fieldValue);
            }
            else if ("team_merge_request_sent_shown_to_primary_team".equals(tag)) {
                TeamMergeRequestSentShownToPrimaryTeamType fieldValue = null;
                fieldValue = TeamMergeRequestSentShownToPrimaryTeamType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamMergeRequestSentShownToPrimaryTeam(fieldValue);
            }
            else if ("team_merge_request_sent_shown_to_secondary_team".equals(tag)) {
                TeamMergeRequestSentShownToSecondaryTeamType fieldValue = null;
                fieldValue = TeamMergeRequestSentShownToSecondaryTeamType.Serializer.INSTANCE.deserialize(p, true);
                value = EventType.teamMergeRequestSentShownToSecondaryTeam(fieldValue);
            }
            else {
                value = EventType.OTHER;
            }
            if (!collapsed) {
                skipFields(p);
                expectEndObject(p);
            }
            return value;
        }
    }
}
