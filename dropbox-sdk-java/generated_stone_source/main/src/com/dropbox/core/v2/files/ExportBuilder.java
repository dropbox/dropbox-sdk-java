/* DO NOT EDIT */
/* This file was generated by Stone */

package com.dropbox.core.v2.files;

import com.dropbox.core.DbxDownloader;
import com.dropbox.core.DbxException;
import com.dropbox.core.v2.DbxDownloadStyleBuilder;

/**
 * The request builder returned by {@link DbxUserFilesRequests#exportBuilder}.
 *
 * <p> Use this class to set optional request parameters and complete the
 * request. </p>
 */
public class ExportBuilder extends DbxDownloadStyleBuilder<ExportResult> {
    private final DbxUserFilesRequests _client;
    private final String path;
    private String exportFormat;

    /**
     * Creates a new instance of this builder.
     *
     * @param path  The path of the file to be exported. Must match pattern
     *     "{@code (/(.|[\\r\\n])*|id:.*)|(rev:[0-9a-f]{9,})|(ns:[0-9]+(/.*)?)}"
     *     and not be {@code null}.
     * @param _client  Dropbox namespace-specific client used to issue files
     *     requests.
     *
     * @return instsance of this builder
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    ExportBuilder(DbxUserFilesRequests _client, String path) {
        if (_client == null) {
            throw new NullPointerException("_client");
        }
        this._client = _client;
        this.path = path;
        this.exportFormat = null;
    }

    /**
     * Set value for optional field.
     *
     * @param exportFormat  The file format to which the file should be
     *     exported. This must be one of the formats listed in the file's
     *     export_options returned by {@link
     *     DbxUserFilesRequests#getMetadata(String)}. If none is specified, the
     *     default format (specified in export_as in file metadata) will be
     *     used.
     *
     * @return this builder
     */
    public ExportBuilder withExportFormat(String exportFormat) {
        this.exportFormat = exportFormat;
        return this;
    }

    @Override
    public DbxDownloader<ExportResult> start() throws ExportErrorException, DbxException {
        ExportArg arg_ = new ExportArg(path, exportFormat);
        return _client.export(arg_, getHeaders());
    }
}
