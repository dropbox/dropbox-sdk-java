/* DO NOT EDIT */
/* This file was generated by Stone */

package com.dropbox.core.v2.team;

import com.dropbox.core.DbxException;
import com.dropbox.core.v2.teamcommon.GroupManagementType;

/**
 * The request builder returned by {@link
 * DbxTeamTeamRequests#groupsCreateBuilder}.
 *
 * <p> Use this class to set optional request parameters and complete the
 * request. </p>
 */
public class GroupsCreateBuilder {
    private final DbxTeamTeamRequests _client;
    private final GroupCreateArg.Builder _builder;

    /**
     * Creates a new instance of this builder.
     *
     * @param _client  Dropbox namespace-specific client used to issue team
     *     requests.
     * @param _builder  Request argument builder.
     *
     * @return instsance of this builder
     */
    GroupsCreateBuilder(DbxTeamTeamRequests _client, GroupCreateArg.Builder _builder) {
        if (_client == null) {
            throw new NullPointerException("_client");
        }
        this._client = _client;
        if (_builder == null) {
            throw new NullPointerException("_builder");
        }
        this._builder = _builder;
    }

    /**
     * Set value for optional field.
     *
     * <p> If left unset or set to {@code null}, defaults to {@code false}. </p>
     *
     * @param addCreatorAsOwner  Automatically add the creator of the group.
     *     Defaults to {@code false} when set to {@code null}.
     *
     * @return this builder
     */
    public GroupsCreateBuilder withAddCreatorAsOwner(Boolean addCreatorAsOwner) {
        this._builder.withAddCreatorAsOwner(addCreatorAsOwner);
        return this;
    }

    /**
     * Set value for optional field.
     *
     * @param groupExternalId  The creator of a team can associate an arbitrary
     *     external ID to the group.
     *
     * @return this builder
     */
    public GroupsCreateBuilder withGroupExternalId(String groupExternalId) {
        this._builder.withGroupExternalId(groupExternalId);
        return this;
    }

    /**
     * Set value for optional field.
     *
     * @param groupManagementType  Whether the team can be managed by selected
     *     users, or only by team admins.
     *
     * @return this builder
     */
    public GroupsCreateBuilder withGroupManagementType(GroupManagementType groupManagementType) {
        this._builder.withGroupManagementType(groupManagementType);
        return this;
    }

    /**
     * Issues the request.
     */
    public GroupFullInfo start() throws GroupCreateErrorException, DbxException {
        GroupCreateArg arg_ = this._builder.build();
        return _client.groupsCreate(arg_);
    }
}
