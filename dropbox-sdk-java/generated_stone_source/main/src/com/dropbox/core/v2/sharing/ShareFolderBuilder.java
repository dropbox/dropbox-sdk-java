/* DO NOT EDIT */
/* This file was generated by Stone */

package com.dropbox.core.v2.sharing;

import com.dropbox.core.DbxException;

import java.util.List;

/**
 * The request builder returned by {@link
 * DbxUserSharingRequests#shareFolderBuilder}.
 *
 * <p> Use this class to set optional request parameters and complete the
 * request. </p>
 */
public class ShareFolderBuilder {
    private final DbxUserSharingRequests _client;
    private final ShareFolderArg.Builder _builder;

    /**
     * Creates a new instance of this builder.
     *
     * @param _client  Dropbox namespace-specific client used to issue sharing
     *     requests.
     * @param _builder  Request argument builder.
     *
     * @return instsance of this builder
     */
    ShareFolderBuilder(DbxUserSharingRequests _client, ShareFolderArg.Builder _builder) {
        if (_client == null) {
            throw new NullPointerException("_client");
        }
        this._client = _client;
        if (_builder == null) {
            throw new NullPointerException("_builder");
        }
        this._builder = _builder;
    }

    /**
     * Set value for optional field.
     *
     * @param aclUpdatePolicy  Who can add and remove members of this shared
     *     folder.
     *
     * @return this builder
     */
    public ShareFolderBuilder withAclUpdatePolicy(AclUpdatePolicy aclUpdatePolicy) {
        this._builder.withAclUpdatePolicy(aclUpdatePolicy);
        return this;
    }

    /**
     * Set value for optional field.
     *
     * <p> If left unset or set to {@code null}, defaults to {@code false}. </p>
     *
     * @param forceAsync  Whether to force the share to happen asynchronously.
     *     Defaults to {@code false} when set to {@code null}.
     *
     * @return this builder
     */
    public ShareFolderBuilder withForceAsync(Boolean forceAsync) {
        this._builder.withForceAsync(forceAsync);
        return this;
    }

    /**
     * Set value for optional field.
     *
     * @param memberPolicy  Who can be a member of this shared folder. Only
     *     applicable if the current user is on a team.
     *
     * @return this builder
     */
    public ShareFolderBuilder withMemberPolicy(MemberPolicy memberPolicy) {
        this._builder.withMemberPolicy(memberPolicy);
        return this;
    }

    /**
     * Set value for optional field.
     *
     * @param sharedLinkPolicy  The policy to apply to shared links created for
     *     content inside this shared folder.  The current user must be on a
     *     team to set this policy to {@link SharedLinkPolicy#MEMBERS}.
     *
     * @return this builder
     */
    public ShareFolderBuilder withSharedLinkPolicy(SharedLinkPolicy sharedLinkPolicy) {
        this._builder.withSharedLinkPolicy(sharedLinkPolicy);
        return this;
    }

    /**
     * Set value for optional field.
     *
     * @param viewerInfoPolicy  Who can enable/disable viewer info for this
     *     shared folder.
     *
     * @return this builder
     */
    public ShareFolderBuilder withViewerInfoPolicy(ViewerInfoPolicy viewerInfoPolicy) {
        this._builder.withViewerInfoPolicy(viewerInfoPolicy);
        return this;
    }

    /**
     * Set value for optional field.
     *
     * <p> If left unset or set to {@code null}, defaults to {@code
     * AccessInheritance.INHERIT}. </p>
     *
     * @param accessInheritance  The access inheritance settings for the folder.
     *     Must not be {@code null}. Defaults to {@code
     *     AccessInheritance.INHERIT} when set to {@code null}.
     *
     * @return this builder
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    public ShareFolderBuilder withAccessInheritance(AccessInheritance accessInheritance) {
        this._builder.withAccessInheritance(accessInheritance);
        return this;
    }

    /**
     * Set value for optional field.
     *
     * @param actions  A list of `FolderAction`s corresponding to
     *     `FolderPermission`s that should appear in the  response's {@link
     *     SharedFolderMetadata#getPermissions} field describing the actions the
     *     authenticated user can perform on the folder. Must not contain a
     *     {@code null} item.
     *
     * @return this builder
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    public ShareFolderBuilder withActions(List<FolderAction> actions) {
        this._builder.withActions(actions);
        return this;
    }

    /**
     * Set value for optional field.
     *
     * @param linkSettings  Settings on the link for this folder.
     *
     * @return this builder
     */
    public ShareFolderBuilder withLinkSettings(LinkSettings linkSettings) {
        this._builder.withLinkSettings(linkSettings);
        return this;
    }

    /**
     * Issues the request.
     */
    public ShareFolderLaunch start() throws ShareFolderErrorException, DbxException {
        ShareFolderArg arg_ = this._builder.build();
        return _client.shareFolder(arg_);
    }
}
