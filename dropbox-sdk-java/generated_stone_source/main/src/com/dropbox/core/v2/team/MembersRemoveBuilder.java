/* DO NOT EDIT */
/* This file was generated by Stone */

package com.dropbox.core.v2.team;

import com.dropbox.core.DbxException;
import com.dropbox.core.v2.async.LaunchEmptyResult;

/**
 * The request builder returned by {@link
 * DbxTeamTeamRequests#membersRemoveBuilder}.
 *
 * <p> Use this class to set optional request parameters and complete the
 * request. </p>
 */
public class MembersRemoveBuilder {
    private final DbxTeamTeamRequests _client;
    private final MembersRemoveArg.Builder _builder;

    /**
     * Creates a new instance of this builder.
     *
     * @param _client  Dropbox namespace-specific client used to issue team
     *     requests.
     * @param _builder  Request argument builder.
     *
     * @return instsance of this builder
     */
    MembersRemoveBuilder(DbxTeamTeamRequests _client, MembersRemoveArg.Builder _builder) {
        if (_client == null) {
            throw new NullPointerException("_client");
        }
        this._client = _client;
        if (_builder == null) {
            throw new NullPointerException("_builder");
        }
        this._builder = _builder;
    }

    /**
     * Set value for optional field.
     *
     * <p> If left unset or set to {@code null}, defaults to {@code true}. </p>
     *
     * @param wipeData  If provided, controls if the user's data will be deleted
     *     on their linked devices. Defaults to {@code true} when set to {@code
     *     null}.
     *
     * @return this builder
     */
    public MembersRemoveBuilder withWipeData(Boolean wipeData) {
        this._builder.withWipeData(wipeData);
        return this;
    }

    /**
     * Set value for optional field.
     *
     * @param transferDestId  If provided, files from the deleted member account
     *     will be transferred to this user.
     *
     * @return this builder
     */
    public MembersRemoveBuilder withTransferDestId(UserSelectorArg transferDestId) {
        this._builder.withTransferDestId(transferDestId);
        return this;
    }

    /**
     * Set value for optional field.
     *
     * @param transferAdminId  If provided, errors during the transfer process
     *     will be sent via email to this user. If the transfer_dest_id argument
     *     was provided, then this argument must be provided as well.
     *
     * @return this builder
     */
    public MembersRemoveBuilder withTransferAdminId(UserSelectorArg transferAdminId) {
        this._builder.withTransferAdminId(transferAdminId);
        return this;
    }

    /**
     * Set value for optional field.
     *
     * <p> If left unset or set to {@code null}, defaults to {@code false}. </p>
     *
     * @param keepAccount  Downgrade the member to a Basic account. The user
     *     will retain the email address associated with their Dropbox  account
     *     and data in their account that is not restricted to team members. In
     *     order to keep the account the argument the {@code wipeData} argument
     *     to {@link
     *     DbxTeamTeamRequests#membersSuspend(UserSelectorArg,boolean)} should
     *     be set to {@code false}. Defaults to {@code false} when set to {@code
     *     null}.
     *
     * @return this builder
     */
    public MembersRemoveBuilder withKeepAccount(Boolean keepAccount) {
        this._builder.withKeepAccount(keepAccount);
        return this;
    }

    /**
     * Set value for optional field.
     *
     * <p> If left unset or set to {@code null}, defaults to {@code false}. </p>
     *
     * @param retainTeamShares  If provided, allows removed users to keep access
     *     to Dropbox folders (not Dropbox Paper folders) already explicitly
     *     shared with them (not via a group) when they are downgraded to a
     *     Basic account. Users will not retain access to folders that do not
     *     allow external sharing. In order to keep the sharing relationships,
     *     the arguments the {@code wipeData} argument to {@link
     *     DbxTeamTeamRequests#membersSuspend(UserSelectorArg,boolean)} should
     *     be set to {@code false} and {@link MembersRemoveArg#getKeepAccount}
     *     should be set to {@code true}. Defaults to {@code false} when set to
     *     {@code null}.
     *
     * @return this builder
     */
    public MembersRemoveBuilder withRetainTeamShares(Boolean retainTeamShares) {
        this._builder.withRetainTeamShares(retainTeamShares);
        return this;
    }

    /**
     * Issues the request.
     */
    public LaunchEmptyResult start() throws MembersRemoveErrorException, DbxException {
        MembersRemoveArg arg_ = this._builder.build();
        return _client.membersRemove(arg_);
    }
}
