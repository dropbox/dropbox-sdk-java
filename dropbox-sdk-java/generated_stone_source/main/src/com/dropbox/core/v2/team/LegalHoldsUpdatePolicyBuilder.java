/* DO NOT EDIT */
/* This file was generated by Stone */

package com.dropbox.core.v2.team;

import com.dropbox.core.DbxException;

import java.util.List;

/**
 * The request builder returned by {@link
 * DbxTeamTeamRequests#legalHoldsUpdatePolicyBuilder}.
 *
 * <p> Use this class to set optional request parameters and complete the
 * request. </p>
 */
public class LegalHoldsUpdatePolicyBuilder {
    private final DbxTeamTeamRequests _client;
    private final LegalHoldsPolicyUpdateArg.Builder _builder;

    /**
     * Creates a new instance of this builder.
     *
     * @param _client  Dropbox namespace-specific client used to issue team
     *     requests.
     * @param _builder  Request argument builder.
     *
     * @return instsance of this builder
     */
    LegalHoldsUpdatePolicyBuilder(DbxTeamTeamRequests _client, LegalHoldsPolicyUpdateArg.Builder _builder) {
        if (_client == null) {
            throw new NullPointerException("_client");
        }
        this._client = _client;
        if (_builder == null) {
            throw new NullPointerException("_builder");
        }
        this._builder = _builder;
    }

    /**
     * Set value for optional field.
     *
     * @param name  Policy new name. Must have length of at most 140.
     *
     * @return this builder
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    public LegalHoldsUpdatePolicyBuilder withName(String name) {
        this._builder.withName(name);
        return this;
    }

    /**
     * Set value for optional field.
     *
     * @param description  Policy new description. Must have length of at most
     *     501.
     *
     * @return this builder
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    public LegalHoldsUpdatePolicyBuilder withDescription(String description) {
        this._builder.withDescription(description);
        return this;
    }

    /**
     * Set value for optional field.
     *
     * @param members  List of team member IDs to apply the policy on. Must not
     *     contain a {@code null} item.
     *
     * @return this builder
     *
     * @throws IllegalArgumentException  If any argument does not meet its
     *     preconditions.
     */
    public LegalHoldsUpdatePolicyBuilder withMembers(List<String> members) {
        this._builder.withMembers(members);
        return this;
    }

    /**
     * Issues the request.
     */
    public LegalHoldPolicy start() throws LegalHoldsPolicyUpdateErrorException, DbxException {
        LegalHoldsPolicyUpdateArg arg_ = this._builder.build();
        return _client.legalHoldsUpdatePolicy(arg_);
    }
}
