namespace cloud_docs
    "Endpoints and datatypes for Cloud Docs."

import files

union CloudDocsAccessError
    invalid_doc_id
        "The Cloud Doc ID is invalid."
    not_found
        "A Cloud Doc could not be found for the given ID."
    permission_denied
        "Permission denied for the Cloud Doc with the given ID."

# -- update_content -------------------------------------------------------------


union ContentPurpose
    search
    preview

struct Content
    purpose      ContentPurpose
    content_key  String
        "The key returned from an upload_additional_content response."

struct UpdateContentArg
    file_id              files.FileId
    actor_tokens         List(String)
        "A list of auth_tokens, one for each editor who made changes to the document since the last call to update_content."
    additional_contents  List(Content)?
        "Currently, this will always be empty until we implement upload_additional_content."

    example default
        file_id = "id:pXGlEfaZvvAAAAAAAAAAGw"
        actor_tokens = ["AAAJagNapzVCQzKrX-LTY7DjVc1itPHiCI6COvcE3BpyN7-sTY1gxcjXY2nST3dONovrmYDdKxVe_TSMA0p8DTYbk2kfkA_1hHIplGxc4glyJwh2nK5NcxxScT8AYLx2cgepxAX2PALm2hwDdcE9P060_iedPWIqqseyFjxo9bMmDWQZFSGAyTlBlvPudGprVhQ="]
        additional_contents = []

struct UpdateContentResult
    version  String
        "Version of the document stored in Dropbox."
    example default
        version = "1mPVXsONgX_d6QlFqs6gGz3MzGU="

union UpdateContentError extends CloudDocsAccessError
    upload_size_too_large
        "Upload payload exceeds maximum allowed size of 150MB."
    conflict
        "A lock on the document identified by path_or_id is held by another editor."
    unlocked
        "A lock is not held on the document identified by path_or_id. Acquire lock before uploading content for the document."

route update_content (UpdateContentArg, UpdateContentResult, UpdateContentError)
    "Update the contents of a Cloud Doc. This should be called for files with a max
    size of 150MB. This route requires Cloud Docs auth. Please make a request to cloud_docs/authorize and supply that token in the Authorization header."
    attrs
        auth = "user"
        host = "content"
        style = "upload"
        allow_app_folder_app = true
        is_preview = true
        is_cloud_doc_auth = true


# -- get_content ---------------------------------------------------------------------

struct GetContentArg
    file_id  files.FileId
    example default
        file_id = "id:pXGlEfaZvvAAAAAAAAAAGw"


route get_content(GetContentArg, Void, CloudDocsAccessError)
    "Fetch the binary content of the requested document. This route requires Cloud Docs auth. Please make a request to cloud_docs/authorize and supply that token in the Authorization header."
    attrs
        auth = "user"
        host = "content"
        style = "download"
        allow_app_folder_app = true
        is_preview = true
        is_cloud_doc_auth = true
